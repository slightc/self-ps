var UDOC = {};
UDOC.B = function () {
    var k = new Uint8Array(4)
        , S = k.buffer
        , U = new Int16Array(S)
        , I = new Uint16Array(S)
        , e = new Int32Array(S)
        , O = new Uint32Array(S)
        , r = new Float32Array(S);
    return {
        readShort: function (u, w) {
            k[0] = u[w];
            k[1] = u[w + 1];
            return U[0]
        },
        readUshort: function (u, w) {
            k[0] = u[w];
            k[1] = u[w + 1];
            return I[0]
        },
        readInt: function (u, w) {
            k[0] = u[w];
            k[1] = u[w + 1];
            k[2] = u[w + 2];
            k[3] = u[w + 3];
            return e[0]
        },
        readUint: function (u, w) {
            k[0] = u[w];
            k[1] = u[w + 1];
            k[2] = u[w + 2];
            k[3] = u[w + 3];
            return O[0]
        },
        readUintBE: function (u, w) {
            k[3] = u[w];
            k[2] = u[w + 1];
            k[1] = u[w + 2];
            k[0] = u[w + 3];
            return O[0]
        },
        readFloat: function (u, w) {
            k[0] = u[w];
            k[1] = u[w + 1];
            k[2] = u[w + 2];
            k[3] = u[w + 3];
            return r[0]
        },
        readASCII: function (u, w, f) {
            var K = "";
            for (var Z = 0; Z < f; Z++)
                K += String.fromCharCode(u[w + Z]);
            return K
        }
    }
}();
UDOC.G = {
    concat: function (k, S) {
        for (var U = 0; U < S.cmds.length; U++)
            k.cmds.push(S.cmds[U]);
        for (var U = 0; U < S.crds.length; U++)
            k.crds.push(S.crds[U])
    },
    getBB: function (k) {
        var S = 1e99
            , U = 1e99
            , I = -S
            , e = -U;
        for (var O = 0; O < k.length; O += 2) {
            var r = k[O]
                , u = k[O + 1];
            if (r < S)
                S = r;
            if (r > I)
                I = r;
            if (u < U)
                U = u;
            if (u > e)
                e = u
        }
        return [S, U, I, e]
    },
    rectToPath: function (k) {
        return {
            cmds: ["M", "L", "L", "L", "Z"],
            crds: [k[0], k[1], k[2], k[1], k[2], k[3], k[0], k[3]]
        }
    },
    insideBox: function (k, S) {
        return S[0] <= k[0] && S[1] <= k[1] && k[2] <= S[2] && k[3] <= S[3]
    },
    isBox: function (k, S) {
        var U = function (n, p) {
            for (var E = 0; E < 8; E += 2) {
                var h = !0;
                for (var l = 0; l < 8; l++)
                    if (Math.abs(p[l] - n[l + E & 7]) >= 2) {
                        h = !1;
                        break
                    }
                if (h)
                    return !0
            }
            return !1
        }
            , O = !1;
        if (k.cmds.length > 10)
            return !1;
        var I = k.cmds.join("")
            , e = k.crds;
        if (I == "MLLLZ" && e.length == 8 || (I == "MLLLLZ" || I == "MLLLL") && e.length == 10) {
            if (e.length == 10)
                e = e.slice(0, 8);
            if (S == null) {
                S = [e[0], e[1], e[0], e[1]];
                for (var r = 0; r < e.length; r += 2) {
                    var u = e[r]
                        , f = e[r + 1];
                    if (u < S[0])
                        S[0] = u;
                    if (f < S[1])
                        S[1] = f;
                    if (S[2] < u)
                        S[2] = u;
                    if (S[3] < f)
                        S[3] = f
                }
            }
            var K = S[0]
                , T = S[1]
                , Z = S[2]
                , v = S[3];
            if (!O)
                O = U(e, [K, T, Z, T, Z, v, K, v]);
            if (!O)
                O = U(e, [K, v, Z, v, Z, T, K, T])
        }
        return O
    },
    boxArea: function (k) {
        var S = k[2] - k[0]
            , U = k[3] - k[1];
        return S * U
    },
    newPath: function (k) {
        k.pth = {
            cmds: [],
            crds: []
        }
    },
    moveTo: function (k, S, U) {
        var I = UDOC.M.multPoint(k.ctm, [S, U])
            , e = k.pth
            , O = e.cmds.length;
        if (O != 0 && e.cmds[O - 1] == "M") {
            e.cmds.pop();
            e.crds.pop();
            e.crds.pop()
        }
        k.pth.cmds.push("M");
        k.pth.crds.push(I[0], I[1]);
        k.cpos = I
    },
    lineTo: function (k, S, U) {
        var I = UDOC.M.multPoint(k.ctm, [S, U]);
        if (k.cpos[0] == I[0] && k.cpos[1] == I[1])
            return;
        k.pth.cmds.push("L");
        k.pth.crds.push(I[0], I[1]);
        k.cpos = I
    },
    curveTo: function (k, S, U, I, e, O, r) {
        var u;
        if (k.pth.cmds.length == 0)
            UDOC.G.moveTo(k, 0, 0);
        u = UDOC.M.multPoint(k.ctm, [S, U]);
        S = u[0];
        U = u[1];
        u = UDOC.M.multPoint(k.ctm, [I, e]);
        I = u[0];
        e = u[1];
        u = UDOC.M.multPoint(k.ctm, [O, r]);
        O = u[0];
        r = u[1];
        k.cpos = u;
        k.pth.cmds.push("C");
        k.pth.crds.push(S, U, I, e, O, r)
    },
    quadCurveTo: function (k, S, U, I, e) {
        var O;
        if (k.pth.cmds.length == 0)
            UDOC.G.moveTo(k, 0, 0);
        O = UDOC.M.multPoint(k.ctm, [S, U]);
        S = O[0];
        U = O[1];
        O = UDOC.M.multPoint(k.ctm, [I, e]);
        I = O[0];
        e = O[1];
        k.cpos = O;
        k.pth.cmds.push("Q");
        k.pth.crds.push(S, U, I, e)
    },
    closePath: function (k) {
        k.pth.cmds.push("Z")
    },
    arc: function (k, S, U, I, e, O, r) {
        if (r)
            while (O > e)
                O -= 2 * Math.PI;
        else
            while (O < e)
                O += 2 * Math.PI;
        var u = (O - e) / 4
            , w = Math.cos(u / 2)
            , f = -Math.sin(u / 2)
            , K = (4 - w) / 3
            , T = f == 0 ? f : (1 - w) * (3 - w) / (3 * f)
            , Z = K
            , v = -T
            , n = w
            , N = -f
            , p = [w, f]
            , h = [K, T]
            , l = [Z, v]
            , _ = [n, N]
            , g = {
                cmds: [k.pth.cmds.length == 0 ? "M" : "L"],
                crds: [w, f]
            }
            , Q = [1, 0, 0, 1, 0, 0];
        for (var X = 0; X < 4; X++) {
            h = UDOC.M.multPoint(Q, h);
            l = UDOC.M.multPoint(Q, l);
            _ = UDOC.M.multPoint(Q, _);
            g.crds.push(h[0], h[1], l[0], l[1], _[0], _[1]);
            g.cmds.push("C");
            if (X == 0)
                UDOC.M.rotate(Q, -u)
        }
        var j = [I, 0, 0, I, S, U];
        UDOC.M.rotate(Q, -e + u / 2);
        UDOC.M.concat(Q, j);
        UDOC.M.multArray(Q, g.crds);
        UDOC.M.multArray(k.ctm, g.crds);
        UDOC.G.concat(k.pth, g);
        var U = g.crds.pop();
        S = g.crds.pop();
        k.cpos = [S, U]
    },
    drawRect: function (k, S, U, I, e) {
        UDOC.G.moveTo(k, S, U);
        UDOC.G.lineTo(k, S + I, U);
        UDOC.G.lineTo(k, S + I, U + e);
        UDOC.G.lineTo(k, S, U + e);
        UDOC.G.closePath(k)
    },
    toPoly: function (k) {
        if (k.cmds[0] != "M" || k.cmds[k.cmds.length - 1] != "Z")
            return null;
        for (var S = 1; S < k.cmds.length - 1; S++)
            if (k.cmds[S] != "L")
                return null;
        var U = []
            , I = k.crds.length;
        if (k.crds[0] == k.crds[I - 2] && k.crds[1] == k.crds[I - 1])
            I -= 2;
        for (var S = 0; S < I; S += 2)
            U.push([k.crds[S], k.crds[S + 1]]);
        if (UDOC.G.polyArea(k.crds) < 0)
            U.reverse();
        return U
    },
    fromPoly: function (k) {
        var S = {
            cmds: [],
            crds: []
        };
        for (var U = 0; U < k.length; U++) {
            S.crds.push(k[U][0], k[U][1]);
            S.cmds.push(U == 0 ? "M" : "L")
        }
        S.cmds.push("Z");
        return S
    },
    polyArea: function (k) {
        if (k.length < 6)
            return 0;
        var S = k.length - 2
            , U = (k[0] - k[S]) * (k[S + 1] + k[1]);
        for (var I = 0; I < S; I += 2)
            U += (k[I + 2] - k[I]) * (k[I + 1] + k[I + 3]);
        return -U * .5
    },
    polyClip: function (k, S) {
        var U, I, e, O, r = function (Z) {
            return (I[0] - U[0]) * (Z[1] - U[1]) > (I[1] - U[1]) * (Z[0] - U[0])
        }, u = function () {
            var Z = [U[0] - I[0], U[1] - I[1]]
                , v = [e[0] - O[0], e[1] - O[1]]
                , n = U[0] * I[1] - U[1] * I[0]
                , N = e[0] * O[1] - e[1] * O[0]
                , p = 1 / (Z[0] * v[1] - Z[1] * v[0]);
            return [(n * v[0] - N * Z[0]) * p, (n * v[1] - N * Z[1]) * p]
        }, w = k, f, K;
        U = S[S.length - 1];
        for (K in S) {
            var I = S[K]
                , T = w;
            w = [];
            e = T[T.length - 1];
            for (f in T) {
                var O = T[f];
                if (r(O)) {
                    if (!r(e)) {
                        w.push(u())
                    }
                    w.push(O)
                } else if (r(e)) {
                    w.push(u())
                }
                e = O
            }
            U = I
        }
        return w
    }
};
UDOC.M = {
    getScale: function (k) {
        return Math.sqrt(Math.abs(k[0] * k[3] - k[1] * k[2]))
    },
    translate: function (k, S, U) {
        UDOC.M.concat(k, [1, 0, 0, 1, S, U])
    },
    rotate: function (k, S) {
        UDOC.M.concat(k, [Math.cos(S), -Math.sin(S), Math.sin(S), Math.cos(S), 0, 0])
    },
    scale: function (k, S, U) {
        UDOC.M.concat(k, [S, 0, 0, U, 0, 0])
    },
    concat: function (k, S) {
        var U = k[0]
            , I = k[1]
            , e = k[2]
            , O = k[3]
            , r = k[4]
            , u = k[5];
        k[0] = U * S[0] + I * S[2];
        k[1] = U * S[1] + I * S[3];
        k[2] = e * S[0] + O * S[2];
        k[3] = e * S[1] + O * S[3];
        k[4] = r * S[0] + u * S[2] + S[4];
        k[5] = r * S[1] + u * S[3] + S[5]
    },
    invert: function (k) {
        var S = k[0]
            , U = k[1]
            , I = k[2]
            , e = k[3]
            , O = k[4]
            , r = k[5]
            , u = S * e - U * I;
        k[0] = e / u;
        k[1] = -U / u;
        k[2] = -I / u;
        k[3] = S / u;
        k[4] = (I * r - e * O) / u;
        k[5] = (U * O - S * r) / u
    },
    multPoint: function (k, S) {
        var U = S[0]
            , I = S[1];
        return [U * k[0] + I * k[2] + k[4], U * k[1] + I * k[3] + k[5]]
    },
    multArray: function (k, S) {
        for (var U = 0; U < S.length; U += 2) {
            var I = S[U]
                , e = S[U + 1];
            S[U] = I * k[0] + e * k[2] + k[4];
            S[U + 1] = I * k[1] + e * k[3] + k[5]
        }
    }
};
UDOC.C = {
    srgbGamma: function (k) {
        return k < .0031308 ? 12.92 * k : 1.055 * Math.pow(k, 1 / 2.4) - .055
    },
    cmykToRgb: function (k) {
        var S = k[0]
            , I = k[1]
            , e = k[2]
            , O = k[3]
            , r = 255 + S * (-4.387332384609988 * S + 54.48615194189176 * I + 18.82290502165302 * e + 212.25662451639585 * O + -285.2331026137004) + I * (1.7149763477362134 * I - 5.6096736904047315 * e + -17.873870861415444 * O - 5.497006427196366) + e * (-2.5217340131683033 * e - 21.248923337353073 * O + 17.5119270841813) + O * (-21.86122147463605 * O - 189.48180835922747)
            , u = 255 + S * (8.841041422036149 * S + 60.118027045597366 * I + 6.871425592049007 * e + 31.159100130055922 * O + -79.2970844816548) + I * (-15.310361306967817 * I + 17.575251261109482 * e + 131.35250912493976 * O - 190.9453302588951) + e * (4.444339102852739 * e + 9.8632861493405 * O - 24.86741582555878) + O * (-20.737325471181034 * O - 187.80453709719578)
            , w = 255 + S * (.8842522430003296 * S + 8.078677503112928 * I + 30.89978309703729 * e - .23883238689178934 * O + -14.183576799673286) + I * (10.49593273432072 * I + 63.02378494754052 * e + 50.606957656360734 * O - 112.23884253719248) + e * (.03296041114873217 * e + 115.60384449646641 * O + -193.58209356861505) + O * (-22.33816807309886 * O - 180.12613974708367);
        return [Math.max(0, Math.min(1, r / 255)), Math.max(0, Math.min(1, u / 255)), Math.max(0, Math.min(1, w / 255))]
    },
    labToRgb: function (k) {
        var S = 903.3
            , U = .008856
            , I = k[0]
            , O = k[1]
            , r = k[2]
            , u = (I + 16) / 116
            , w = u * u * u
            , f = u - r / 200
            , T = f * f * f
            , Z = O / 500 + u
            , v = Z * Z * Z
            , n = T > U ? T : (116 * f - 16) / S
            , N = w > U ? w : (116 * u - 16) / S
            , p = v > U ? v : (116 * Z - 16) / S
            , E = p * 96.72
            , h = N * 100
            , l = n * 81.427
            , _ = [E / 100, h / 100, l / 100]
            , g = [3.1338561, -1.6168667, -.4906146, -.9787684, 1.9161415, .033454, .0719453, -.2289914, 1.4052427]
            , Q = [g[0] * _[0] + g[1] * _[1] + g[2] * _[2], g[3] * _[0] + g[4] * _[1] + g[5] * _[2], g[6] * _[0] + g[7] * _[1] + g[8] * _[2]];
        for (var R = 0; R < 3; R++)
            Q[R] = Math.max(0, Math.min(1, UDOC.C.srgbGamma(Q[R])));
        return Q
    }
};
UDOC.getState = function (k) {
    return {
        font: UDOC.getFont(),
        dd: {
            flat: 1
        },
        ca: 1,
        colr: [0, 0, 0],
        space: "/DeviceGray",
        CA: 1,
        COLR: [0, 0, 0],
        sspace: "/DeviceGray",
        bmode: "/Normal",
        SA: !1,
        OPM: 0,
        AIS: !1,
        OP: !1,
        op: !1,
        SMask: "/None",
        lwidth: 1,
        lcap: 0,
        ljoin: 0,
        mlimit: 10,
        SM: .1,
        doff: 0,
        dash: [],
        ctm: [1, 0, 0, 1, 0, 0],
        cpos: [0, 0],
        pth: {
            cmds: [],
            crds: []
        },
        cpth: k ? UDOC.G.rectToPath(k) : null,
        cpstack: []
    }
}
    ;
UDOC.getFont = function () {
    return {
        Tc: 0,
        Tw: 0,
        Th: 100,
        Tl: 0,
        Tf: "Helvetica-Bold",
        Tfs: 1,
        Tmode: 0,
        Trise: 0,
        Tk: 0,
        Tal: 0,
        Tun: 0,
        Tm: [1, 0, 0, 1, 0, 0],
        Tlm: [1, 0, 0, 1, 0, 0],
        Trm: [1, 0, 0, 1, 0, 0]
    }
}
    ;
function FromPS() { }
FromPS.Parse = function (k, S) {
    k = new Uint8Array(k);
    var U = 0
        , O = null
        , r = null
        , p = !0;
    while (!(k[U] == 37 && k[U + 1] == 33))
        U++;
    var I = FromPS.B.readASCII(k, U, k.length - U)
        , e = I.split(/[\n\r]+/);
    for (var u = 0; u < e.length; u++) {
        var w = e[u].trim();
        if (w.charAt(0) == "%") {
            w = w.slice(1);
            while (w.charAt(0) == "%")
                w = w.slice(1);
            var f = w.split(":");
            if (f[0] == "BoundingBox") {
                O = f[1].trim().split(/[ ]+/).map(parseFloat)
            }
            if (w.indexOf("!PS-Adobe-3.0 EPSF-3.0") != -1)
                r = w;
            if (w.indexOf("!PS-Adobe-2.0 EPSF-1.2") != -1)
                r = w
        }
    }
    if (r == null || O == null)
        O = [0, 0, 595, 842];
    var K = []
        , T = FromPS._getDictStack([], {})
        , Z = [{
            typ: "file",
            val: {
                buff: k,
                off: U
            }
        }]
        , v = []
        , n = FromPS._getEnv(O)
        , N = Date.now();
    while (p)
        p = FromPS.step(K, T, Z, v, n, S);
    if (n.pgOpen)
        S.ShowPage();
    S.Done();
    console.log(Date.now() - N)
}
    ;
FromPS._getDictStack = function (k, S) {
    var U = "def undef known begin end currentfile currentdict currentpacking setpacking currentoverprint setoverprint currentglobal setglobal gcheck currentsystemparams setsystemparams currentuserparams setuserparams currentpagedevice setpagedevice currentflat currentlinewidth currentdash currentpoint currentscreen setscreen currenthalftone currentblackgeneration currentundercolorremoval currentcolortransfer internaldict dict string readstring readhexstring readline getinterval putinterval token array aload astore length maxlength matrix count mark counttomark cleartomark dictstack countdictstack makepattern makefont scalefont stringwidth setfont currentcolorspace setcolorspace setcolor _setHSB_ currentgray currentrgbcolor setlinewidth setstrokeadjust setflat setlinecap setlinejoin setmiterlimit setdash clip eoclip clippath pathbbox newpath stroke fill eofill shfill closepath flattenpath showpage print _drawRect_ moveto lineto curveto arc arcn show ashow xshow yshow xyshow widthshow awidthshow charpath cshow rmoveto rlineto rcurveto translate rotate scale concat concatmatrix invertmatrix currentmatrix defaultmatrix setmatrix limitcheck save restore clipsave cliprestore gsave grestore grestoreall usertime readtime flush flushfile readonly executeonly findresource resourcestatus defineresource undefineresource resourceforall image imagemask colorimage xcheck status cachestatus setcachelimit type if ifelse exec stopped stop dup exch copy roll index anchorsearch pop put get load where store repeat for forall pathforall loop exit bind cvi cvr cvs cvx cvn cvlit add sub mul div idiv bitshift mod exp atan neg abs floor ceiling round truncate sqrt ln sin cos srand rand == transform itransform dtransform idtransform eq ge gt le lt ne and or not filter begincmap endcmap begincodespacerange endcodespacerange beginbfrange endbfrange beginbfchar endbfchar".split(" ").concat(k)
        , I = "image colorimage repeat for forall loop".split(" ");
    for (var e = 0; e < I.length; e++)
        U.push(I[e] + "---");
    FromPS._myOps = FromPS.makeProcs({
        CIDSystemInfo: "/CIDSystemInfo",
        findfont: "/Font findresource",
        definefont: "/Font defineresource",
        undefinefont: "/Font undefineresource",
        selectfont: "exch findfont exch scalefont setfont",
        rectfill: "gsave newpath _drawRect_  fill   grestore",
        rectstroke: "gsave newpath _drawRect_  stroke grestore",
        rectclip: "newpath _drawRect_  clip newpath",
        setgray: "/DeviceGray setcolorspace setcolor",
        setrgbcolor: "/DeviceRGB  setcolorspace setcolor",
        sethsbcolor: "/DeviceRGB  setcolorspace _setHSB_",
        setcmykcolor: "/DeviceCMYK setcolorspace setcolor",
        setpattern: "/Pattern    setcolorspace setcolor"
    });
    for (var O in FromPS._myOps)
        U.push(O);
    var r = S
        , u = {}
        , f = {}
        , K = {}
        , T = {};
    u.systemdict = {
        typ: "dict",
        val: u
    };
    u.globaldict = {
        typ: "dict",
        val: f
    };
    u.userdict = {
        typ: "dict",
        val: K
    };
    u.statusdict = {
        typ: "dict",
        val: T
    };
    u.GlobalFontDirectory = u.SharedFontDirectory = {
        typ: "dict",
        val: {}
    };
    u.FontDirectory = {
        typ: "dict",
        val: {}
    };
    u.$error = {
        typ: "dict",
        val: {}
    };
    u.errordict = {
        typ: "dict",
        val: FromPS.makeProcs({
            handleerror: ""
        })
    };
    u.null = {
        typ: "null",
        val: null
    };
    u.true = {
        typ: "boolean",
        val: !0
    };
    u.false = {
        typ: "boolean",
        val: !1
    };
    u.product = {
        typ: "string",
        val: FromPS.makeStr("Photopea")
    };
    u.version = {
        typ: "string",
        val: [51]
    };
    u.languagelevel = {
        typ: "integer",
        val: 3
    };
    for (var e = 0; e < U.length; e++)
        u[U[e]] = {
            typ: "operator",
            val: U[e]
        };
    for (var Z in r)
        u[Z] = r[Z];
    return [u, f, K]
}
    ;
FromPS._getEnv = function (k) {
    var S = {
        bb: k,
        gst: UDOC.getState(k),
        packing: !1,
        overprint: !1,
        global: !1,
        systemparams: {
            MaxPatternCache: {
                type: "integer",
                val: 5e3
            }
        },
        userparams: {},
        pagedevice: {
            PageSize: {
                typ: "array",
                val: [{
                    typ: "real",
                    val: k[2]
                }, {
                    typ: "real",
                    val: k[3]
                }]
            }
        },
        cmnum: 0,
        fnt: null,
        res: {},
        pgOpen: !1,
        funs: FromPS.makeProcs({
            blackgeneration: "",
            undercolorremoval: "pop 0"
        })
    }, U;
    U = "Font CIDFont CMap FontSet Form Pattern ProcSet Halftone ColorRendering IdiomSet InkParams TrapParams OutputDevice ControlLanguage Localization PDL HWOptions".split(" ");
    for (var I = 0; I < U.length; I++)
        S.res[U[I]] = {
            typ: "dict",
            val: {},
            maxl: 1e3
        };
    U = ["Encoding", "ColorSpace"];
    for (var I = 0; I < U.length; I++)
        S.res[U[I]] = {
            typ: "array",
            val: []
        };
    S.res.Category = {
        typ: "dict",
        val: S.res
    };
    S.res.ColorSpace.val = [{
        typ: "array",
        val: [{
            typ: "name",
            val: "/DeviceRGB"
        }]
    }, {
        typ: "array",
        val: [{
            typ: "name",
            val: "/DeviceCMYK"
        }]
    }, {
        typ: "array",
        val: [{
            typ: "name",
            val: "/DeviceGray"
        }]
    }];
    for (var I = 0; I < U.length; I++)
        S.res[U[I]] = {
            typ: "dict",
            val: {},
            maxl: 1e3
        };
    return S
}
    ;
FromPS.makeProcs = function (k) {
    var S = {};
    for (var U in k) {
        var I = k[U].replace(/  +/g, " ").split(" ");
        S[U] = {
            typ: "procedure",
            val: []
        };
        for (var e = 0; e < I.length; e++)
            S[U].val.push({
                typ: "name",
                val: I[e]
            })
    }
    return S
}
    ;
FromPS.addProc = function (k, S) {
    if (k.val.length == 0)
        return;
    if (k.typ != "procedure") {
        console.log(k);
        throw k.typ
    }
    S.push({
        typ: "procedure",
        val: k.val,
        off: 0
    })
}
    ;
FromPS.stepC = 0;
FromPS._f32 = new Float32Array(1);
FromPS.step = function (k, S, U, I, e, O, r, u) {
    var w = Date.now()
        , f = FromPS._f32
        , K = FromPS.getToken
        , T = e.gst
        , Z = K(U, S)
        , N = !1;
    if (Z == null)
        return !1;
    if (u && Z.typ == "string" && FromPS.readStr(Z.val) == "def")
        Z = {
            typ: "operator",
            val: "def"
        };
    var v = Z.typ
        , n = Z.val;
    if (isNaN(T.cpos[0]))
        throw "e";
    if (N)
        console.log(Z, k.slice(0));
    if ("integer real dict boolean string array procedure null file".split(" ").indexOf(v) != -1) {
        k.push(Z);
        return !0
    }
    if (v != "name" && v != "operator")
        throw "e";
    if (n.charAt(0) == "/") {
        k.push(Z)
    } else if (n.startsWith("II*"))
        return !1;
    else if (n == "{") {
        var p = []
            , E = {
                typ: "procedure",
                val: []
            }
            , h = K(U, S);
        while (!0) {
            if (h.val == "{") {
                var l = {
                    typ: "procedure",
                    val: []
                };
                E.val.push(l);
                p.push(E);
                E = l
            } else if (h.val == "}") {
                if (p.length == 0)
                    break;
                E = p.pop()
            } else
                E.val.push(h);
            h = K(U, S)
        }
        k.push(E)
    } else if (n == "[" || n == "<<")
        k.push({
            typ: "mark"
        });
    else if (n == "]" || n == ">>") {
        var _ = [];
        while (k.length != 0) {
            var g = k.pop();
            if (g.typ == "mark")
                break;
            _.push(g)
        }
        _.reverse();
        if (n == "]")
            k.push({
                typ: "array",
                val: _
            });
        else {
            var Q = {};
            for (var R = 0; R < _.length; R += 2)
                Q[_[R].val.slice(1)] = _[R + 1];
            k.push({
                typ: "dict",
                val: Q,
                maxl: 1e3
            })
        }
    } else {
        var q = FromPS.getFromStacks(n, S);
        if (N)
            console.log("---", q);
        if (q == null) {
            if (u)
                return !1;
            else {
                console.log("unknown operator", n, k, S);
                throw "e"
            }
        } else if (q.typ == "procedure")
            FromPS.addProc(q, U);
        else if ("array string dict null integer real boolean state name file".split(" ").indexOf(q.typ) != -1)
            k.push(q);
        else if (q.typ == "operator") {
            var X = q.val
                , j = "known if ifelse currentpacking setpacking dict dup begin end put bind def undef where pop get exec ge stop stopped cvr string not and".split(" ");
            if (FromPS._myOps[X]) {
                FromPS.addProc(FromPS._myOps[X], U)
            } else if (X == "flattenpath" || X == "limitcheck") { } else if (X == "def") {
                var A = k.pop()
                    , bI = k.pop();
                if (bI == null && u)
                    return !1;
                bI = FromPS.getDKey(bI);
                S[S.length - 1][bI] = A
            } else if (X == "undef" || X == "known") {
                var L = FromPS.getDKey(k.pop())
                    , an = k.pop()
                    , d = an.val;
                if (X == "undef")
                    delete d[L];
                else
                    k.push({
                        typ: "boolean",
                        val: an.typ != "null" && d[L] != null
                    })
            } else if (X == "internaldict") {
                var b = k.pop().val;
                k.push({
                    typ: "dict",
                    val: {},
                    maxl: 1e3
                })
            } else if (X == "dict") {
                var b = k.pop().val;
                k.push({
                    typ: "dict",
                    val: {},
                    maxl: b
                })
            } else if (X == "string") {
                var b = k.pop().val;
                k.push({
                    typ: "string",
                    val: new Array(b)
                })
            } else if (X == "readstring" || X == "readhexstring") {
                var P = k.pop()
                    , b = P.val.length
                    , b3 = k.pop()
                    , $ = FromPS.GetFile(b3).val;
                if (X == "readstring") {
                    for (var R = 0; R < b; R++)
                        P.val[R] = $.buff[$.off + R];
                    $.off += b
                } else
                    FromPS.readHex($, b, P.val);
                k.push(P, {
                    typ: "boolean",
                    val: !0
                })
            } else if (X == "readline") {
                var P = k.pop()
                    , $ = FromPS.GetFile(k.pop()).val
                    , R = 0;
                if (FromPS.isEOL($.buff[$.off]))
                    $.off++;
                while (R < P.val.length) {
                    var bu = $.buff[$.off];
                    $.off++;
                    if (bu == null)
                        throw "e";
                    if (FromPS.isEOL(bu)) {
                        if ($.buff[$.off] == 10)
                            $.off++;
                        break
                    }
                    P.val[R] = bu;
                    R++
                }
                k.push({
                    typ: "string",
                    val: P.val.slice(0, R)
                });
                k.push({
                    typ: "boolean",
                    val: !0
                })
            } else if (X == "getinterval") {
                var ah = k.pop().val
                    , a3 = k.pop().val
                    , bW = k.pop()
                    , W = [];
                if (bW.typ == "string" || bW.typ == "array")
                    for (var R = 0; R < ah; R++)
                        W.push(bW.val[a3 + R]);
                else
                    throw "e";
                k.push({
                    typ: bW.typ,
                    val: W
                })
            } else if (X == "putinterval") {
                var bW = k.pop()
                    , a3 = k.pop().val
                    , a0 = k.pop();
                if (a3 + bW.val.length >= a0.val.length) { } else if (bW.typ == "string")
                    for (var R = 0; R < bW.val.length; R++)
                        a0.val[a3 + R] = bW.val[R];
                else
                    throw "e"
            } else if (X == "token") {
                var bW = k.pop();
                if (bW.typ != "string")
                    throw "e";
                var _ = [];
                for (var R = 0; R < bW.val.length; R++) {
                    var bz = bW.val[R];
                    if (bz == null)
                        break;
                    _.push(bz)
                }
                var bh = {
                    buff: new Uint8Array(_),
                    off: 0
                }
                    , Z = K([{
                        typ: "file",
                        val: bh
                    }], S)
                    , bK = [];
                for (var R = bh.off; R < _.length; R++)
                    bK.push(_[R]);
                k.push({
                    typ: "string",
                    val: bK
                }, Z, {
                    typ: "boolean",
                    val: !0
                })
            } else if (X == "array") {
                var b = k.pop().val;
                k.push({
                    typ: "array",
                    val: new Array(b)
                })
            } else if (X == "aload") {
                var g = k.pop()
                    , _ = g.val;
                for (var R = 0; R < _.length; R++)
                    k.push(_[R]);
                k.push(g)
            } else if (X == "astore") {
                var g = k.pop()
                    , _ = g.val;
                for (var R = 0; R < _.length; R++)
                    _[_.length - 1 - R] = k.pop();
                k.push(g)
            } else if (X == "length") {
                var g = k.pop()
                    , v = g.typ
                    , b = 0;
                if (v == "array")
                    b = g.val.length;
                else if (v == "procedure")
                    b = g.val.length;
                else if (v == "dict")
                    b = Object.keys(g.val).length;
                else if (v == "string")
                    b = g.val.length;
                else {
                    console.log(g);
                    throw "e"
                }
                k.push({
                    typ: "integer",
                    val: b
                })
            } else if (X == "maxlength") {
                var aq = k.pop();
                k.push({
                    typ: "integer",
                    val: aq.maxl
                })
            } else if (X == "matrix") {
                k.push({
                    typ: "array",
                    val: FromPS.makeArr([1, 0, 0, 1, 0, 0], "real")
                })
            } else if (X == "count") {
                k.push({
                    typ: "integer",
                    val: k.length
                })
            } else if (X == "mark") {
                k.push({
                    typ: "mark"
                })
            } else if (X == "counttomark" || X == "cleartomark") {
                var av = 0;
                while (av < k.length && k[k.length - 1 - av].typ != "mark")
                    av++;
                if (X == "cleartomark")
                    for (var R = 0; R < av + 1; R++)
                        k.pop();
                else
                    k.push({
                        typ: "integer",
                        val: av
                    })
            } else if (X == "dictstack") {
                var _ = k.pop();
                for (var R = 0; R < S.length; R++)
                    _.val[R] = {
                        typ: "dict",
                        val: S[R],
                        maxl: 1e3
                    };
                k.push(_)
            } else if (X == "countdictstack") {
                var cq = 0;
                for (var R = 0; R < k.length; R++)
                    if (k[R].typ == "dict")
                        cq++;
                k.push({
                    typ: "integer",
                    val: cq
                })
            } else if (X == "begin") {
                var g = k.pop()
                    , d = g.val;
                if (d == null || g.typ != "dict") {
                    console.log(g, S);
                    throw "e"
                }
                S.push(d)
            } else if (X == "end") {
                S.pop()
            } else if (X == "currentfile") {
                var aR;
                for (var R = U.length - 1; R >= 0; R--)
                    if (U[R].typ == "file") {
                        aR = U[R];
                        break
                    }
                k.push({
                    typ: "file",
                    val: aR.val
                })
            } else if (X == "currentdict") {
                var d = S[S.length - 1];
                k.push({
                    typ: "dict",
                    val: d,
                    maxl: 1e3
                })
            } else if ("currentpacking currentoverprint currentglobal currentsystemparams currentuserparams currentpagedevice".split(" ").indexOf(X) != -1) {
                var A = e[X.slice(7)];
                k.push({
                    typ: typeof A == "boolean" ? "boolean" : "dict",
                    val: A
                })
            } else if (X == "gcheck") {
                var F = k.pop();
                k.push({
                    typ: "boolean",
                    val: !1
                })
            } else if ("setpacking setoverprint setglobal setsystemparams setuserparams setpagedevice".split(" ").indexOf(X) != -1) {
                e[X.slice(3)] = k.pop().val
            } else if (X == "currentflat") {
                k.push({
                    typ: "real",
                    val: 1
                })
            } else if (X == "currentlinewidth") {
                k.push({
                    typ: "real",
                    val: T.lwidth
                })
            } else if (X == "currentdash") {
                k.push({
                    typ: "array",
                    val: FromPS.makeArr(T.dash, "integer")
                }, {
                    typ: "real",
                    val: T.doff
                })
            } else if (X == "currentpoint") {
                var az = T.ctm.slice(0);
                UDOC.M.invert(az);
                var b$ = UDOC.M.multPoint(az, T.cpos);
                k.push({
                    typ: "real",
                    val: b$[0]
                }, {
                    typ: "real",
                    val: b$[1]
                })
            } else if (X == "currentscreen") {
                k.push({
                    typ: "int",
                    val: 60
                }, {
                    typ: "real",
                    val: 0
                }, {
                    typ: "real",
                    val: 0
                })
            } else if (X == "setscreen") {
                k.pop();
                k.pop();
                k.pop()
            } else if (X == "currenthalftone") {
                k.push({
                    typ: "dict",
                    val: {},
                    maxl: 1e3
                })
            } else if (X == "currentblackgeneration" || X == "currentundercolorremoval") {
                k.push(e.funs[X.slice(7)])
            } else if (X == "currentcolortransfer") {
                for (var R = 0; R < 4; R++)
                    k.push(e.funs.blackgeneration)
            } else if (X == "findresource") {
                var aM = k.pop().val.slice(1), be = k.pop(), L = be.val.slice(1), aF;
                if (aM == "Font") {
                    e.res[aM].val[L] = {
                        typ: "dict",
                        val: {
                            FontType: {
                                typ: "integer",
                                val: 1
                            },
                            FontMatrix: {
                                typ: "array",
                                val: FromPS.makeArr([1, 0, 0, 1, 0, 0], "real")
                            },
                            FontName: be,
                            FID: {
                                typ: "fontID",
                                val: Math.floor(Math.random() * 16777215)
                            },
                            Encoding: {
                                typ: "array",
                                val: []
                            },
                            FontBBox: {
                                typ: "array",
                                val: FromPS.makeArr([0, 0, 1, 1], "real")
                            },
                            PaintType: {
                                typ: "integer",
                                val: 0
                            }
                        }
                    }
                }
                if (aM == "Category" && L == "Generic")
                    aF = {
                        typ: "dict",
                        val: {},
                        maxl: 1e3
                    };
                else if ((aM == "ProcSet" || aM == "Procset") && L == "CIDInit")
                    aF = {
                        typ: "dict",
                        val: {},
                        maxl: 1e3
                    };
                else
                    aF = e.res[aM].val[L];
                if (aF == null)
                    throw "e";
                k.push(aF)
            } else if (X == "resourcestatus") {
                var aM = k.pop().val.slice(1)
                    , L = k.pop().val.slice(1)
                    , aF = e.res[aM].val[L];
                if (aF) {
                    k.push({
                        typ: "integer",
                        val: 1
                    });
                    k.push({
                        typ: "integer",
                        val: Object.keys(aF.val).length
                    })
                }
                k.push({
                    typ: "boolean",
                    val: aF != null
                })
            } else if (X == "defineresource") {
                var aM = k.pop().val.slice(1)
                    , bc = k.pop()
                    , L = k.pop().val.slice(1);
                e.res[aM].val[L] = bc;
                k.push(bc)
            } else if (X == "undefineresource") {
                var aM = k.pop().val.slice(1)
                    , L = k.pop().val.slice(1);
                delete e.res[aM].val[L]
            } else if (X == "resourceforall") {
                var aM = k.pop().val.slice(1)
                    , aU = k.pop().val
                    , B = k.pop()
                    , bj = k.pop().val;
                if (bj.length != 1 || bj[0] != 42)
                    throw "e";
                var ac = e.res[aM].val;
                for (var L in ac) {
                    var P = aU.slice(0);
                    for (var R = 0; R < L.length; R++)
                        P[R] = L[R];
                    FromPS.addProc(B, U);
                    FromPS.addProc({
                        typ: "procedure",
                        val: [{
                            typ: "string",
                            val: P
                        }]
                    }, U)
                }
            } else if (X == "image" || X == "colorimage") {
                var bD, bb, b_, b0, bA = 1, bq = !1, aC = [], top = k.pop();
                k.push(top);
                if (X == "image" && top.typ == "dict") {
                    var bP = k.pop().val;
                    bD = bP.Width.val;
                    bb = bP.Height.val;
                    b_ = bP.BitsPerComponent.val;
                    b0 = FromPS.readArr(bP.ImageMatrix.val);
                    bA = bP.NComponents ? bP.NComponents.val : 1;
                    bq = bP.MultipleDataSources ? bP.MultipleDataSources.val : !1;
                    aC = bP.DataSource.val;
                    if (bP.DataSource.typ == "file")
                        aC = [bP.DataSource]
                } else {
                    if (X == "colorimage") {
                        bA = k.pop().val;
                        bq = k.pop().val
                    }
                    if (bq) {
                        aC[2] = k.pop();
                        aC[1] = k.pop();
                        aC[0] = k.pop()
                    } else
                        aC = [k.pop()];
                    var b0 = FromPS.readArr(k.pop().val)
                        , b_ = k.pop().val
                        , bb = k.pop().val
                        , bD = k.pop().val
                }
                if (bA != 1 && bA != 3 && bA != 4)
                    throw "unsupported number of channels " + bA;
                if (b_ != 8)
                    throw "unsupported bits per channel: " + b_;
                var bZ = new Uint8Array(bD * bb * 4);
                for (var R = 0; R < bZ.length; R++)
                    bZ[R] = 255;
                U.push({
                    typ: "name",
                    val: X + "---",
                    ctx: [bD, bb, b_, b0, bA, bq, bZ, 0, aC]
                });
                if (aC[0].typ == "procedure")
                    for (var R = 0; R < aC.length; R++)
                        FromPS.addProc(aC[R], U)
            } else if (X == "image---" || X == "colorimage---") {
                var bU = Z.ctx
                    , bD = bU[0]
                    , bb = bU[1]
                    , b_ = bU[2]
                    , b0 = bU[3]
                    , bA = bU[4]
                    , bq = bU[5]
                    , bZ = bU[6]
                    , ae = bU[7]
                    , aC = bU[8]
                    , aP = 0;
                if (bq) {
                    for (R = 0; R < bA; R++) {
                        var aK = aC[R];
                        if (aK.typ == "procedure")
                            aK = k.pop().val;
                        else
                            aK = aK.val;
                        aP = aK.length;
                        if (bA == 4)
                            for (var at = 0; at < aP; at++)
                                bZ[(ae + at) * 4 + 3 - R] = aK[at];
                        if (bA == 3)
                            for (var at = 0; at < aP; at++)
                                bZ[(ae + at) * 4 + 2 - R] = aK[at]
                    }
                } else {
                    var aK;
                    if (aC[0].typ == "file")
                        aK = FromPS.GetFile(aC[0]).val.buff;
                    else
                        aK = k.pop().val;
                    aP = Math.floor(aK.length / 3);
                    for (var at = 0; at < aP; at++) {
                        var cd = at * 3
                            , bF = (ae + at) * 4;
                        bZ[bF + 0] = aK[cd + 0];
                        bZ[bF + 1] = aK[cd + 1];
                        bZ[bF + 2] = aK[cd + 2]
                    }
                }
                ae += aP;
                FromPS.checkPageStarted(e, O);
                if (ae == bD * bb) {
                    var c3 = 1 / 255;
                    if (T.space == "/DeviceCMYK")
                        for (var R = 0; R < bZ.length; R += 4) {
                            var ab = [bZ[R] * c3, bZ[R + 1] * c3, bZ[R + 2] * c3, bZ[R + 3] * c3]
                                , aO = UDOC.C.cmykToRgb(ab);
                            bZ[R] = aO[0] * 255;
                            bZ[R + 1] = aO[1] * 255;
                            bZ[R + 2] = aO[2] * 255;
                            bZ[R + 3] = 255
                        }
                    var cv = T.ctm.slice()
                        , b9 = b0.slice(0);
                    UDOC.M.invert(b9);
                    var aA = [bD, 0, 0, -bb, 0, bb];
                    UDOC.M.concat(aA, b9);
                    UDOC.M.concat(T.ctm, aA);
                    O.PutImage(T, bZ, bD, bb);
                    T.ctm = cv
                } else {
                    bU[7] = ae;
                    U.push(Z);
                    if (aC[0].typ == "procedure")
                        for (var R = 0; R < aC.length; R++)
                            FromPS.addProc(aC[R], U)
                }
            } else if (X == "makepattern") {
                var C = k.pop().val
                    , aq = k.pop().val;
                k.push({
                    typ: "array",
                    val: [aq, JSON.parse(JSON.stringify(C))]
                })
            } else if (X == "makefont" || X == "scalefont") {
                var b2 = X == "makefont"
                    , bU = k.pop().val;
                if (b2)
                    bU = FromPS.readArr(bU);
                var ce = JSON.parse(JSON.stringify(k.pop()))
                    , bk = FromPS.readArr(ce.val.FontMatrix.val);
                if (b2)
                    UDOC.M.concat(bk, bU);
                else
                    UDOC.M.scale(bk, bU, bU);
                ce.val.FontMatrix.val = FromPS.makeArr(bk);
                k.push(ce)
            } else if (X == "stringwidth" || X == "charpath") {
                if (X == "charpath")
                    k.pop();
                var ct = k.pop().val
                    , P = FromPS.readStr(ct)
                    , ck = UDOC.M.getScale(T.font.Tm) / UDOC.M.getScale(T.ctm)
                    , a$ = .55 * ck * P.length;
                if (X == "stringwidth")
                    k.push({
                        typ: "real",
                        val: a$
                    }, {
                        typ: "real",
                        val: 0
                    });
                else
                    UDOC.G.drawRect(T, 0, 0, a$, ck)
            } else if (X == "setfont") {
                var ce = k.pop().val;
                T.font.Tf = ce.FontName.val.slice(1);
                T.font.Tm = FromPS.readArr(ce.FontMatrix.val)
            } else if (X == "setlinewidth")
                T.lwidth = k.pop().val;
            else if (X == "setstrokeadjust")
                T.SA = k.pop().val;
            else if (X == "setlinecap")
                T.lcap = k.pop().val;
            else if (X == "setlinejoin")
                T.ljoin = k.pop().val;
            else if (X == "setmiterlimit")
                T.mlimit = k.pop().val;
            else if (X == "setflat")
                T.dd.flat = k.pop();
            else if (X == "setdash") {
                T.doff = k.pop().val;
                T.dash = FromPS.readArr(k.pop().val)
            } else if (X == "show" || X == "ashow" || X == "xshow" || X == "yshow" || X == "xyshow" || X == "widthshow" || X == "awidthshow") {
                if (X == "xshow" || X == "xyshow" || X == "yshow")
                    k.pop();
                var ct = k.pop().val
                    , P = FromPS.readStr(ct);
                if (X == "awidthshow") {
                    k.pop();
                    k.pop();
                    k.pop();
                    k.pop()
                }
                if (X == "widthshow") {
                    k.pop();
                    k.pop();
                    k.pop()
                }
                if (X == "ashow") {
                    k.pop();
                    k.pop()
                }
                var bv = T.ctm;
                T.ctm = bv.slice(0);
                T.ctm[4] = T.cpos[0];
                T.ctm[5] = T.cpos[1];
                FromPS.checkPageStarted(e, O);
                O.PutText(T, P, P.length * .55);
                T.cpos[0] += P.length * UDOC.M.getScale(bv) * UDOC.M.getScale(T.font.Tm) * .55;
                T.ctm = bv
            } else if (X == "cshow") {
                k.pop();
                k.pop()
            } else if (X == "currentcolorspace") {
                k.push({
                    typ: "array",
                    val: [{
                        typ: "name",
                        val: T.space
                    }]
                })
            } else if (X == "setcolorspace") {
                var bH = k.pop();
                T.space = bH.val;
                if (bH.typ == "array")
                    T.space = bH.val[0].val;
                else if (bH.typ == "name")
                    T.space = bH.val;
                else {
                    console.log(bH);
                    throw "e"
                }
            } else if (X == "setcolor" || X == "_setHSB_") {
                var cl;
                if (T.space == "/Pattern") {
                    var ab = k.pop();
                    if (ab.typ != "array")
                        throw "e";
                    var b$ = ab.val
                        , C = FromPS.readArr(b$[1]);
                    UDOC.M.concat(C, T.ctm);
                    cl = FromPS.getPSShadingFill(b$[0].Shading, C)
                } else if (T.space == "/DeviceGray") {
                    var ay = FromPS.nrm(k.pop().val);
                    cl = [ay, ay, ay]
                } else if (X == "_setHSB_") {
                    var F = k.pop().val, cj = k.pop().val, bb = k.pop().val, bB, ay, cm, R, a4, b$, ai, bp;
                    R = Math.floor(bb * 6);
                    a4 = bb * 6 - R;
                    b$ = F * (1 - cj);
                    ai = F * (1 - a4 * cj);
                    bp = F * (1 - (1 - a4) * cj);
                    switch (R % 6) {
                        case 0:
                            bB = F,
                                ay = bp,
                                cm = b$;
                            break;
                        case 1:
                            bB = ai,
                                ay = F,
                                cm = b$;
                            break;
                        case 2:
                            bB = b$,
                                ay = F,
                                cm = bp;
                            break;
                        case 3:
                            bB = b$,
                                ay = ai,
                                cm = F;
                            break;
                        case 4:
                            bB = bp,
                                ay = b$,
                                cm = F;
                            break;
                        case 5:
                            bB = F,
                                ay = b$,
                                cm = ai;
                            break
                    }
                    cl = [FromPS.nrm(bB), FromPS.nrm(ay), FromPS.nrm(cm)]
                } else if (T.space == "/DeviceRGB") {
                    var cm = k.pop().val
                        , ay = k.pop().val
                        , bB = k.pop().val;
                    cl = [FromPS.nrm(bB), FromPS.nrm(ay), FromPS.nrm(cm)]
                } else if (T.space == "/DeviceCMYK") {
                    var b5 = k.pop().val
                        , cb = k.pop().val
                        , C = k.pop().val
                        , aG = k.pop().val;
                    cl = UDOC.C.cmykToRgb([aG, C, cb, b5])
                } else
                    throw T.space;
                if (cl)
                    T.colr = T.COLR = cl
            } else if (X == "currentrgbcolor") {
                for (var R = 0; R < 3; R++)
                    k.push({
                        typ: "real",
                        val: T.colr[R]
                    })
            } else if (X == "currentgray") {
                k.push({
                    typ: "real",
                    val: (T.colr[0] + T.colr[1] + T.colr[2]) / 3
                })
            } else if (X == "clip" || X == "eoclip") {
                var aV = UDOC.G.getBB(T.pth.crds)
                    , aL = UDOC.G.getBB(T.cpth.crds);
                if (UDOC.G.isBox(T.pth, aV) && UDOC.G.insideBox(aL, aV)) { } else if (UDOC.G.isBox(T.cpth, aL) && UDOC.G.insideBox(aV, aL)) {
                    T.cpth = JSON.parse(JSON.stringify(T.pth))
                } else {
                    var ci = UDOC.G.toPoly(T.pth)
                        , c4 = UDOC.G.toPoly(T.cpth);
                    if (ci && c4) {
                        var b$ = UDOC.G.polyClip(ci, c4);
                        if (b$.length != 0)
                            T.cpth = UDOC.G.fromPoly(b$);
                        else
                            console.log("strange intersection of polygons")
                    } else {
                        T.cpth = JSON.parse(JSON.stringify(T.pth))
                    }
                }
            } else if (X == "clippath") {
                T.pth = JSON.parse(JSON.stringify(T.cpth))
            } else if (X == "pathbbox") {
                var cp = T.pth.crds
                    , ba = UDOC.G.getBB(cp);
                cp = [ba[0], ba[1], ba[2], ba[1], ba[0], ba[3], ba[2], ba[3]];
                var az = T.ctm.slice(0);
                UDOC.M.invert(az);
                UDOC.M.multArray(az, cp);
                ba = UDOC.G.getBB(cp);
                f[0] = ba[0];
                ba[0] = f[0];
                f[0] = ba[1];
                ba[1] = f[0];
                f[0] = ba[2];
                ba[2] = f[0];
                f[0] = ba[3];
                ba[3] = f[0];
                ba = FromPS.makeArr(ba, "real");
                k.push(ba[0], ba[1], ba[2], ba[3])
            } else if (X == "newpath")
                UDOC.G.newPath(T);
            else if (X == "stroke") {
                FromPS.checkPageStarted(e, O);
                O.Stroke(T);
                UDOC.G.newPath(T)
            } else if (X == "shfill") {
                var c2 = T.colr
                    , bg = T.pth
                    , b$ = k.pop().val
                    , C = T.ctm.slice(0);
                T.colr = FromPS.getPSShadingFill({
                    typ: "dict",
                    val: b$,
                    maxl: 1e3
                }, C);
                FromPS.checkPageStarted(e, O);
                T.pth = T.cpth;
                T.cpth = UDOC.G.rectToPath(e.bb);
                O.Fill(T);
                T.colr = c2;
                T.pth = bg
            } else if (X == "fill" || X == "eofill") {
                FromPS.checkPageStarted(e, O);
                O.Fill(T, X == "eofill");
                UDOC.G.newPath(T)
            } else if (X == "showpage") {
                FromPS.checkPageStarted(e, O);
                O.ShowPage();
                var aN = T.font;
                T = e.gst = UDOC.getState(e.bb);
                T.font = aN;
                e.pgOpen = !1
            } else if (X == "print") {
                var ct = k.pop().val
                    , P = FromPS.readStr(ct);
                O.Print(P)
            } else if (X == "_drawRect_") {
                var bb = k.pop();
                if (bb.typ != "real" && bb.typ != "integer")
                    throw "e";
                bb = bb.val;
                var bD = k.pop().val
                    , cb = k.pop().val
                    , cg = k.pop().val;
                UDOC.G.drawRect(T, cg, cb, bD, bb)
            } else if (X == "closepath")
                UDOC.G.closePath(T);
            else if (X == "moveto" || X == "lineto") {
                var cb = k.pop().val
                    , cg = k.pop().val;
                if (X == "moveto")
                    UDOC.G.moveTo(T, cg, cb);
                else
                    UDOC.G.lineTo(T, cg, cb)
            } else if (X == "rmoveto" || X == "rlineto") {
                var cb = k.pop().val
                    , cg = k.pop().val
                    , az = T.ctm.slice(0);
                UDOC.M.invert(az);
                var b$ = UDOC.M.multPoint(az, T.cpos);
                cb += b$[1];
                cg += b$[0];
                if (X == "rmoveto")
                    UDOC.G.moveTo(T, cg, cb);
                else
                    UDOC.G.lineTo(T, cg, cb)
            } else if (X == "curveto") {
                var aE = k.pop().val
                    , bR = k.pop().val
                    , cw = k.pop().val
                    , bm = k.pop().val
                    , b1 = k.pop().val
                    , a2 = k.length == 0 ? 0 : k.pop().val;
                UDOC.G.curveTo(T, a2, b1, bm, cw, bR, aE)
            } else if (X == "arc" || X == "arcn") {
                var bs = k.pop().val
                    , c1 = k.pop().val
                    , bB = k.pop().val
                    , cb = k.pop().val
                    , cg = k.pop().val;
                UDOC.G.arc(T, cg, cb, bB, c1 * Math.PI / 180, bs * Math.PI / 180, X == "arcn")
            } else if (X == "concat") {
                var C = FromPS.readArr(k.pop().val);
                UDOC.M.concat(C, T.ctm);
                T.ctm = C
            } else if (["translate", "scale", "rotate"].indexOf(X) != -1) {
                var F = k.pop(), C, cg, cb;
                if (F.typ == "array") {
                    C = FromPS.readArr(F.val);
                    cb = k.pop().val
                } else {
                    C = [1, 0, 0, 1, 0, 0];
                    cb = F.val
                }
                if (X != "rotate")
                    cg = k.pop().val;
                if (X == "translate")
                    UDOC.M.translate(C, cg, cb);
                if (X == "scale")
                    UDOC.M.scale(C, cg, cb);
                if (X == "rotate")
                    UDOC.M.rotate(C, -cb * Math.PI / 180);
                if (F.typ == "array")
                    k.push({
                        typ: "array",
                        val: FromPS.makeArr(C, "real")
                    });
                else {
                    UDOC.M.concat(C, T.ctm);
                    T.ctm = C
                }
            } else if (X == "concatmatrix") {
                var al = FromPS.readArr
                    , bn = al(k.pop().val)
                    , ax = al(k.pop().val)
                    , af = al(k.pop().val)
                    , C = af.slice(0);
                UDOC.M.concat(C, ax);
                C = FromPS.makeArr(C, "real");
                k.push({
                    typ: "array",
                    val: C
                })
            } else if (X == "invertmatrix") {
                var al = FromPS.readArr
                    , ax = al(k.pop().val)
                    , af = al(k.pop().val)
                    , C = af.slice(0);
                UDOC.M.invert(C);
                C = FromPS.makeArr(C, "real");
                k.push({
                    typ: "array",
                    val: C
                })
            } else if (X == "currentmatrix" || X == "defaultmatrix") {
                var C = k.pop()
                    , cf = FromPS.makeArr(X == "currentmatrix" ? T.ctm : [1, 0, 0, 1, 0, 0], "real");
                for (var R = 0; R < 6; R++)
                    C.val[R] = cf[R];
                k.push(C)
            } else if (X == "setmatrix") {
                T.ctm = FromPS.readArr(k.pop().val)
            } else if (X == "cvi") {
                var g = k.pop()
                    , F = g.val
                    , W = 0;
                if (g.typ == "real")
                    W = Math.round(F);
                else if (g.typ == "integer")
                    W = F;
                else
                    throw "unknown type " + g.typ;
                k.push({
                    typ: "integer",
                    val: W
                })
            } else if (X == "cvr") {
                var g = k.pop()
                    , F = g.val
                    , W = 0;
                if (g.typ == "real")
                    W = F;
                else if (g.typ == "integer")
                    W = F;
                else if (g.typ == "string")
                    W = parseFloat(FromPS.readStr(F));
                else
                    throw "unknown type " + g.typ;
                k.push({
                    typ: "real",
                    val: W
                })
            } else if (X == "cvs") {
                var P = k.pop()
                    , y = k.pop()
                    , A = "";
                P.val = [];
                k.push(P);
                if (y.typ == "real" || y.typ == "integer") {
                    if (Math.abs(Math.round(y.val) - y.val) < 1e-6)
                        A = Math.round(y.val) + ".0";
                    else
                        A = (Math.round(y.val * 1e6) / 1e6).toString()
                } else if (y.typ == "name")
                    A = y.val;
                else
                    throw "unknown var type: " + y.typ;
                for (var R = 0; R < A.length; R++)
                    P.val[R] = A.charCodeAt(R)
            } else if (X == "cvx") {
                var g = k.pop(), cs;
                if (g.typ == "array")
                    cs = {
                        typ: "procedure",
                        val: g.val
                    };
                else if (g.typ == "name")
                    cs = {
                        typ: "name",
                        val: g.val.slice(1)
                    };
                else if (g.typ == "string") {
                    cs = {
                        typ: "file",
                        val: {
                            off: 0,
                            buff: new Uint8Array(g.val)
                        }
                    }
                } else {
                    console.log(g);
                    throw g.typ
                }
                k.push(cs)
            } else if (X == "cvlit") {
                var q = k.pop();
                if (q.typ == "procedure")
                    k.push({
                        typ: "array",
                        val: q.val
                    });
                else
                    k.push(q)
            } else if (X == "cvn") {
                k.push({
                    typ: "name",
                    val: FromPS.readStr(k.pop().val)
                })
            } else if ("add sub mul div idiv bitshift mod exp atan".split(" ").indexOf(X) != -1) {
                var aw = k.pop()
                    , m = k.pop()
                    , V = m.val
                    , G = aw.val
                    , W = 0
                    , bf = "";
                if (X == "add" || X == "sub" || X == "mul")
                    bf = m.typ == "real" || aw.typ == "real" ? "real" : "integer";
                else if (X == "div" || X == "atan" || X == "exp")
                    bf = "real";
                else if (X == "mod" || X == "idiv" || X == "bitshift")
                    bf = "integer";
                if (m.typ == "real") {
                    f[0] = V;
                    V = f[0]
                }
                if (aw.typ == "real") {
                    f[0] = G;
                    G = f[0]
                }
                if (X == "add")
                    W = V + G;
                if (X == "sub")
                    W = V - G;
                if (X == "mul")
                    W = V * G;
                if (X == "div")
                    W = V / G;
                if (X == "idiv")
                    W = ~~(V / G);
                if (X == "bitshift")
                    W = G > 0 ? V << G : V >>> -G;
                if (X == "mod")
                    W = V % G;
                if (X == "exp")
                    W = Math.pow(V, G);
                if (X == "atan")
                    W = Math.atan2(V, G) * 180 / Math.PI;
                if (bf == "real") {
                    f[0] = W;
                    W = f[0]
                }
                k.push({
                    typ: bf,
                    val: W
                })
            } else if ("neg abs floor ceiling round truncate sqrt ln sin cos".split(" ").indexOf(X) != -1) {
                var m = k.pop()
                    , V = m.val
                    , W = 0
                    , bf = "";
                if (X == "neg" || X == "abs" || X == "truncate" || X == "floor" || X == "ceiling" || X == "round")
                    bf = m.typ;
                else if (X == "sqrt" || X == "sin" || X == "cos" || X == "ln")
                    bf = "real";
                if (m.typ == "real") {
                    f[0] = V;
                    V = f[0]
                }
                if (X == "neg")
                    W = -V;
                if (X == "abs")
                    W = Math.abs(V);
                if (X == "floor")
                    W = Math.floor(V);
                if (X == "ceiling")
                    W = Math.ceil(V);
                if (X == "round")
                    W = Math.round(V);
                if (X == "truncate")
                    W = Math.trunc(V);
                if (X == "sqrt")
                    W = Math.sqrt(V);
                if (X == "ln")
                    W = Math.log(V);
                if (X == "sin")
                    W = Math.sin(V * Math.PI / 180);
                if (X == "cos")
                    W = Math.cos(V * Math.PI / 180);
                if (X == "ln" && V <= 0)
                    throw "e";
                if (bf == "real") {
                    f[0] = W;
                    W = f[0]
                }
                k.push({
                    typ: bf,
                    val: W
                })
            } else if ("eq ge gt le lt ne".split(" ").indexOf(X) != -1) {
                var aw = k.pop()
                    , m = k.pop()
                    , aJ = m.typ
                    , bG = aw.typ
                    , V = m.val
                    , G = aw.val
                    , W = !1;
                if (X == "eq" || X == "ne") {
                    var o = m.typ == aw.typ;
                    if (o && ["integer", "real", "name", "null", "dict"].indexOf(aJ) != -1)
                        W = V == G;
                    else if (aJ == "real" && bG == "integer" || bG == "real" && aJ == "integer")
                        W = V == G;
                    else if (!o && (m.typ == "null" || aw.typ == "null"))
                        W = !1;
                    else if (o && m.typ == "string") {
                        if (V.length != G.length)
                            W = !1;
                        else {
                            W = !0;
                            for (var R = 0; R < V.length; R++)
                                if (V[R] != G[R])
                                    W = !1
                        }
                    } else {
                        console.log(X, m, aw, m.val == aw.val);
                        throw "e"
                    }
                    if (X == "ne")
                        W = !W
                } else if (X == "ge")
                    W = V >= G;
                else if (X == "gt")
                    W = V > G;
                else if (X == "le")
                    W = V <= G;
                else if (X == "lt")
                    W = V < G;
                k.push({
                    typ: "boolean",
                    val: W
                })
            } else if (["and", "or"].indexOf(X) != -1) {
                var M = k.pop(), t = k.pop(), G = t.val, H = M.val, i = t.typ == "integer", W;
                if (X == "and")
                    W = i ? G & H : G && H;
                if (X == "or")
                    W = i ? G | H : G || H;
                k.push({
                    typ: i ? "integer" : "boolean",
                    val: W
                })
            } else if (X == "not") {
                var cm = k.pop()
                    , F = cm.val
                    , i = cm.typ == "integer"
                    , W = i ? ~F : !F;
                k.push({
                    typ: i ? "integer" : "boolean",
                    val: W
                })
            } else if (X == "if") {
                var B = k.pop()
                    , a = k.pop().val;
                if (a)
                    FromPS.addProc(B, U)
            } else if (X == "ifelse") {
                var z = k.pop()
                    , s = k.pop()
                    , a = k.pop().val;
                FromPS.addProc(a ? s : z, U)
            } else if (X == "exec" || X == "stopped") {
                var q = k.pop();
                if (X == "stopped")
                    FromPS.addProc({
                        typ: "procedure",
                        val: [{
                            typ: "boolean",
                            val: !1
                        }]
                    }, U);
                if (q.typ == "procedure")
                    FromPS.addProc(q, U);
                else if (q.typ == "name" || q.typ == "operator" || q.typ == "integer" || q.typ == "real" || q.typ == "array")
                    FromPS.addProc({
                        typ: "procedure",
                        val: [q]
                    }, U);
                else {
                    console.log(q);
                    throw "unknown executable type: " + q.typ
                }
            } else if (X == "stop") {
                var aD = U[U.length - 1];
                if (aD.typ == "procedure" && aD.off != 0)
                    U.pop()
            } else if (X == "dup") {
                var F = k.pop();
                k.push(F, F)
            } else if (X == "exch") {
                k.push(k.pop(), k.pop())
            } else if (X == "copy") {
                var cq = k.pop();
                if (cq.typ == "integer") {
                    var ca = [];
                    for (var R = 0; R < cq.val; R++)
                        ca[cq.val - 1 - R] = k.pop();
                    for (var R = 0; R < cq.val; R++)
                        k.push(ca[R]);
                    for (var R = 0; R < cq.val; R++)
                        k.push(ca[R])
                } else if (cq.typ == "array") {
                    var C = k.pop().val;
                    for (var R = 0; R < C.length; R++) {
                        cq.val[R] = C[R];
                        if (C[R].val == null) {
                            console.log(S);
                            throw "e"
                        }
                    }
                    k.push(cq)
                } else if (cq.typ == "dict") {
                    var C = k.pop().val;
                    for (var bC in C) {
                        cq.val[bC] = C[bC]
                    }
                    k.push(cq)
                } else
                    throw "e"
            } else if (X == "roll") {
                var at = k.pop().val
                    , cq = k.pop().val
                    , ca = [];
                for (var R = 0; R < cq; R++)
                    ca.push(k.pop());
                ca.reverse();
                at = (cq + at) % cq;
                for (var R = 0; R < at; R++)
                    ca.unshift(ca.pop());
                for (var R = 0; R < cq; R++)
                    k.push(ca[R])
            } else if (X == "index") {
                var cq = k.pop().val;
                k.push(k[k.length - 1 - cq])
            } else if (X == "anchorsearch") {
                var Y = k.pop()
                    , am = k.pop()
                    , cr = Y.val
                    , P = am.val
                    , bX = !0;
                if (cr.length <= P.length) {
                    for (var R = 0; R < cr.length; R++)
                        if (cr[R] != P[R])
                            bX = !1
                } else
                    bX = !1;
                if (bX)
                    k.push({
                        typ: "string",
                        val: P.slice(cr.length)
                    }, Y);
                else
                    k.push(am);
                k.push({
                    typ: "boolean",
                    val: bX
                })
            } else if (X == "transform" || X == "itransform" || X == "dtransform" || X == "idtransform") {
                var C = k.pop()
                    , cb = 0
                    , cg = 0;
                if (C.typ == "array") {
                    C = FromPS.readArr(C.val);
                    cb = k.pop().val
                } else {
                    cb = C.val;
                    C = T.ctm.slice(0)
                }
                if (X == "itransform" || X == "idtransform") {
                    UDOC.M.invert(C)
                }
                cg = k.pop().val;
                if (X.endsWith("dtransform")) {
                    C[4] = 0;
                    C[5] = 0
                }
                var bJ = UDOC.M.multPoint(C, [cg, cb]);
                k.push({
                    typ: "real",
                    val: bJ[0]
                }, {
                    typ: "real",
                    val: bJ[1]
                })
            } else if (X == "pop" || X == "srand" || X == "==") {
                k.pop()
            } else if (X == "rand") {
                k.push({
                    typ: "integer",
                    val: Math.floor(Math.random() * 2147483647)
                })
            } else if (X == "put") {
                var n = k.pop()
                    , g = k.pop()
                    , q = k.pop()
                    , bf = q.typ;
                if (bf == "array") {
                    if (g.typ != "integer")
                        throw "e";
                    q.val[g.val] = n
                } else if (bf == "dict") {
                    var bI = FromPS.getDKey(g);
                    q.val[bI] = n
                } else if (bf == "string")
                    q.val[g.val] = n.val;
                else
                    throw bf + " e"
            } else if (X == "get") {
                var g = k.pop()
                    , q = k.pop()
                    , bf = q.typ;
                if (bf == "string")
                    k.push({
                        typ: "integer",
                        val: q.val[g.val]
                    });
                else if (bf == "array") {
                    var A = q.val[g.val];
                    if (A == null)
                        throw "e";
                    k.push(A)
                } else if (bf == "dict") {
                    var b5 = FromPS.getDKey(g)
                        , F = q.val[b5];
                    if (F == null) {
                        throw "e"
                    } else
                        k.push(F)
                } else
                    throw "getting from unknown type " + q.typ
            } else if (X == "load") {
                var L = k.pop().val.slice(1)
                    , n = FromPS.getFromStacks(L, S);
                if (n == null) {
                    console.log(L, S);
                    throw "e"
                }
                k.push(n)
            } else if (X == "where") {
                var L = k.pop().val.slice(1)
                    , d = FromPS.where(L, S);
                if (d != null)
                    k.push({
                        typ: "dict",
                        val: d,
                        maxl: 1e3
                    });
                k.push({
                    typ: "boolean",
                    val: d != null
                })
            } else if (X == "store") {
                var n = k.pop()
                    , L = k.pop().val.slice(1)
                    , d = FromPS.where(L, S);
                if (d == null)
                    d = S[S.length - 1];
                d[L] = n
            } else if (X == "repeat") {
                var B = k.pop()
                    , bd = k.pop().val;
                U.push({
                    typ: "name",
                    val: X + "---",
                    ctx: {
                        proc: B,
                        cur: 0,
                        cnt: bd
                    }
                })
            } else if (X == "repeat---") {
                var c = Z.ctx;
                if (c.cur < c.cnt) {
                    U.push(Z);
                    FromPS.addProc(c.proc, U);
                    c.cur++
                }
            } else if (X == "for") {
                var B = k.pop()
                    , a9 = k.pop()
                    , b4 = k.pop()
                    , aW = k.pop();
                U.push({
                    typ: "name",
                    val: X + "---",
                    ctx: {
                        proc: B,
                        isInt: aW.typ == "integer" && b4.typ == "integer",
                        init: aW.val,
                        inc: b4.val,
                        limit: a9.val
                    }
                })
            } else if (X == "for---") {
                var c = Z.ctx;
                if (c.isInt) {
                    if (c.inc > 0 && c.init <= c.limit || c.inc < 0 && c.init >= c.limit) {
                        U.push(Z);
                        FromPS.addProc(c.proc, U);
                        k.push({
                            typ: "integer",
                            val: c.init
                        });
                        c.init += c.inc
                    }
                } else {
                    var x = new Float32Array(1);
                    x[0] = c.limit;
                    c.limit = x[0];
                    x[0] = c.inc;
                    c.inc = x[0];
                    x[0] = c.init;
                    if (c.inc > 0 && x[0] <= c.limit || c.inc < 0 && x[0] >= c.limit) {
                        U.push(Z);
                        FromPS.addProc(c.proc, U);
                        k.push({
                            typ: "real",
                            val: x[0]
                        });
                        x[0] += c.inc;
                        c.init = x[0]
                    }
                }
            } else if (X == "loop") {
                var B = k.pop();
                U.push({
                    typ: "name",
                    val: X + "---",
                    ctx: {
                        proc: B
                    }
                })
            } else if (X == "loop---") {
                var c = Z.ctx;
                U.push(Z);
                FromPS.addProc(c.proc, U)
            } else if (X == "pathforall") {
                var J = k.pop()
                    , c5 = k.pop()
                    , aB = k.pop()
                    , c7 = k.pop()
            } else if (X == "forall") {
                var B = k.pop()
                    , q = k.pop()
                    , c = [B, q, 0];
                U.push({
                    typ: "name",
                    val: X + "---",
                    ctx: c
                })
            } else if (X == "forall---") {
                var c = Z.ctx
                    , B = c[0]
                    , q = c[1]
                    , R = c[2];
                if (q.typ == "dict") {
                    var b7 = Object.keys(q.val);
                    if (R < b7.length) {
                        U.push(Z);
                        FromPS.addProc(B, U);
                        k.push({
                            typ: "name",
                            val: "/" + b7[R]
                        });
                        var A = q.val[b7[R]];
                        if (A == null)
                            throw "e";
                        k.push(A == null ? {
                            typ: "null",
                            val: null
                        } : A);
                        c[2]++
                    }
                } else if (q.typ == "procedure" || q.typ == "array") {
                    if (R < q.val.length) {
                        U.push(Z);
                        FromPS.addProc(B, U);
                        var bY = q.val[R];
                        k.push(bY == null ? {
                            typ: "null",
                            val: null
                        } : bY);
                        c[2]++
                    }
                } else {
                    console.log(B, q);
                    throw "forall: unknown type: " + q.typ
                }
            } else if (X == "exit") {
                var R = U.length - 1;
                while (R != 0 && (U[R].typ != "name" || !U[R].val.endsWith("---")))
                    R--;
                if (R != 0)
                    while (U.length > R)
                        U.pop()
            } else if (X == "bind") { } else if (X == "xcheck") {
                var q = k.pop()
                    , v = q.typ;
                k.push({
                    typ: "boolean",
                    val: v == "procedure"
                })
            } else if (X == "status") {
                var P = k.pop();
                k.push({
                    typ: "boolean",
                    val: !1
                })
            } else if (X == "cachestatus") {
                for (var R = 0; R < 7; R++)
                    k.push({
                        typ: "integer",
                        val: 5e3
                    })
            } else if (X == "setcachelimit") {
                k.pop()
            } else if (X == "type") {
                var g = k.pop()
                    , bl = {
                        name: "nametype",
                        dict: "dicttype",
                        boolean: "booleantype",
                        procedure: "operatortype",
                        string: "stringtype",
                        null: "nulltype",
                        integer: "integertype",
                        array: "arraytype",
                        operator: "operatortype",
                        real: "realtype"
                    };
                if (bl[g.typ] == null) {
                    console.log(g);
                    throw g.typ
                }
                k.push({
                    typ: "name",
                    val: "/" + bl[g.typ]
                })
            } else if (X == "save") {
                k.push({
                    typ: "state",
                    val: JSON.parse(JSON.stringify(T))
                })
            } else if (X == "restore") {
                T = e.gst = k.pop().val
            } else if (X == "clipsave") {
                T.cpstack.push(JSON.parse(JSON.stringify(T.cpth)))
            } else if (X == "cliprestore") {
                T.cpath = T.cpstack.pop()
            } else if (X == "gsave") {
                I.push(JSON.parse(JSON.stringify(T)))
            } else if (X == "grestore") {
                if (I.length != 0)
                    T = e.gst = I.pop();
                else
                    T = UDOC.getState()
            } else if (X == "grestoreall") {
                while (I.length != 0)
                    T = e.gst = I.pop()
            } else if (X == "usertime" || X == "realtime")
                k.push({
                    typ: "integer",
                    val: X == "usertime" ? Date.now() - w : Date.now()
                });
            else if (X == "flush" || X == "readonly" || X == "executeonly") { } else if (X == "flushfile") {
                FromPS.GetFile(k.pop())
            } else if (X == "filter") {
                var c0 = k.pop().val, a_;
                if (c0 == "/SubFileDecode") {
                    var P = k.pop();
                    if (P.typ != "string")
                        throw "e";
                    var ah = k.pop().val;
                    P = P.val;
                    a_ = [c0, P, ah]
                } else
                    a_ = [c0];
                var b8 = k.pop();
                k.push({
                    typ: "file",
                    val: {
                        buff: new Uint8Array,
                        off: 0
                    },
                    _flt: a_,
                    _src: b8
                })
            } else if (X == "begincmap" || X == "endcmap") { } else if (X == "begincodespacerange" || X == "beginbfrange" || X == "beginbfchar") {
                e.cmnum = k.pop().val
            } else if (X == "endcodespacerange" || X == "endbfrange" || X == "endbfchar") {
                var J = X == "endbfrange" ? 3 : 2
                    , a8 = X.slice(3)
                    , d = S[S.length - 1]
                    , b_ = 0;
                if (d[a8] == null)
                    d[a8] = [];
                for (var R = 0; R < e.cmnum; R++) {
                    var a6 = [];
                    for (var at = J - 1; at >= 0; at--) {
                        var ak = k.pop(), bV = ak.val, A;
                        if (ak.typ == "string") {
                            A = FromPS.strToInt(bV);
                            if (at == 0)
                                b_ = bV.length
                        } else {
                            A = [];
                            for (var b5 = 0; b5 < bV.length; b5++)
                                A.push(FromPS.strToInt(bV[b5].val))
                        }
                        a6[at] = A
                    }
                    d[a8] = d[a8].concat(a6)
                }
                if (X != "endcodespacerange")
                    d.bpc = b_
            } else if (r)
                r(X, k, S, U, I, e, O);
            else {
                console.log(n, X);
                console.log(S, k);
                throw "e"
            }
        } else
            throw q.typ
    }
    return !0
}
    ;
FromPS.strToInt = function (k) {
    var S = 0;
    for (var U = 0; U < k.length; U++)
        S = S << 8 | k[U];
    return S
}
    ;
FromPS.getDKey = function (k) {
    if (k.typ == "name")
        return k.val.slice(1);
    if (k.typ == "string")
        return FromPS.readStr(k.val);
    return k.val
}
    ;
FromPS.GetFile = function (k) {
    if (k._flt == null || k.val.off < k.val.buff.length)
        return k;
    FromPS.GetFile(k._src);
    var S = k._src.val, U = k._flt, I = U[0], e;
    if (I == "/ASCII85Decode")
        e = FromPS.F.ASCII85Decode(S);
    else if (I == "/RunLengthDecode")
        e = FromPS.F.RunLengthDecode(S);
    else if (I == "/FlateDecode")
        e = FromPS.F.FlateDecode(S);
    else if (I == "/LZWDecode")
        e = FromPS.F.LZWDecode(S);
    else if (I == "/SubFileDecode") {
        var r = U[1]
            , u = U[2]
            , w = S.off
            , f = 0;
        while (w < S.buff.length) {
            var K = 0;
            while (K < r.length && S.buff[w + K] == r[K])
                K++;
            if (K == r.length) {
                if (f == u)
                    break;
                f++
            }
            w++
        }
        e = S.buff.slice(S.off, w);
        S.off = w
    } else
        throw I;
    k.val = {
        buff: e,
        off: 0
    };
    return k
}
    ;
FromPS.checkPageStarted = function (k, S) {
    if (!k.pgOpen) {
        S.StartPage(k.bb[0], k.bb[1], k.bb[2], k.bb[3]);
        k.pgOpen = !0
    }
}
    ;
FromPS.getPSShadingFill = function (k, S) {
    function U(e) {
        var O, r = e.typ, u = e.val;
        if (r == "dict") {
            O = {};
            for (var w in u)
                O["/" + w] = U(u[w])
        } else if (r == "array") {
            O = [];
            for (var f = 0; f < u.length; f++)
                O.push(U(u[f]))
        } else if (r == "string") {
            O = "";
            for (var f = 0; f < u.length; f++)
                O += String.fromCharCode(u[f])
        } else if (["boolean", "integer", "real", "name"].indexOf(r) != -1)
            O = u;
        else if (r == "procedure") {
            var K = "";
            for (var f = 0; f < u.length; f++)
                K += u[f].val + " ";
            K = "{ " + K + "}";
            var T = new Uint8Array(K.length);
            for (var f = 0; f < K.length; f++)
                T[f] = K.charCodeAt(f);
            O = {
                "/FunctionType": 4,
                "/Domain": [0, 1],
                "/Range": [0, 1, 0, 1, 0, 1, 0, 1],
                "/Length": K.length,
                stream: T
            }
        } else {
            console.log(e);
            throw "e"
        }
        return O
    }
    var I = U(k);
    return FromPS.getShadingFill(I, S)
}
    ;
FromPS.F = {
    HexDecode: function (k) {
        var S = [];
        FromPS.readHex(k, 1e9, S);
        return new Uint8Array(S)
    },
    ASCII85Decode: function (k) {
        var S = [85 * 85 * 85 * 85, 85 * 85 * 85, 85 * 85, 85, 1]
            , U = []
            , I = 0
            , e = 0
            , O = k.off
            , r = k.buff
            , u = r.length;
        while (!0) {
            var f = r[O++];
            if (FromPS.isWhite(f)) { } else if (f == 126) {
                if (I != 0) {
                    if (I == 3) {
                        U.push(e >>> 24 & 255)
                    }
                    if (I == 4) {
                        U.push(e >>> 24 & 255);
                        U.push(e >>> 16 & 255)
                    }
                    var K = 5 - I << 3
                        , T = e >>> K & 255;
                    e = e & (1 << K) - 1;
                    if (e != 0)
                        T++;
                    U.push(T)
                }
                k.off = O + 1;
                return new Uint8Array(U)
            } else if (f == 122) {
                U.push(0);
                U.push(0);
                U.push(0);
                U.push(0)
            } else {
                e += (f - 33) * S[I];
                I++;
                if (I == 5) {
                    U.push(e >>> 24 & 255);
                    U.push(e >>> 16 & 255);
                    U.push(e >>> 8 & 255);
                    U.push(e >>> 0 & 255);
                    I = 0;
                    e = 0
                }
            }
        }
    },
    RunLengthDecode: function (k) {
        var S = []
            , U = k.off;
        while (!0) {
            if (U >= k.buff.length) {
                console.log(S);
                throw "e"
            }
            var I = k.buff[U];
            U++;
            if (I == 128) {
                k.off = U;
                return new Uint8Array(S)
            }
            if (I < 128) {
                for (var e = 0; e < I + 1; e++)
                    S.push(k.buff[U + e]);
                U += I + 1
            } else {
                for (var e = 0; e < 257 - I; e++)
                    S.push(k.buff[U]);
                U++
            }
        }
    },
    FlateDecode: function (k) {
        var S = k.buff
            , U = new Uint8Array(S.buffer, S.byteOffset + k.off + 2, S.length - 2)
            , I = pako.inflateRaw(U);
        return I
    },
    LZWDecode: function (k) {
        var S = new Uint8Array((k.buff.length - k.off) * 20)
            , U = UTIF.decode._decodeLZW(k.buff, k.off, S, 0);
        return S.slice(0, U)
    },
    _myLZW: function () {
        var k = {}
            , S = function (I, e, O, r, u) {
                for (var f = 0; f < u; f += 4) {
                    O[r + f] = I[e + f];
                    O[r + f + 1] = I[e + f + 1];
                    O[r + f + 2] = I[e + f + 2];
                    O[r + f + 3] = I[e + f + 3]
                }
            }
            , U = function (I, e, O, r) {
                if (!k.c) {
                    var u = new Uint32Array(65535)
                        , f = new Uint16Array(65535)
                        , K = new Uint8Array(2e6);
                    for (var T = 0; T < 256; T++) {
                        K[T << 2] = T;
                        u[T] = T << 2;
                        f[T] = 1
                    }
                    k.c = [u, f, K]
                }
                var Z = k.c[0]
                    , v = k.c[1]
                    , K = k.c[2]
                    , N = 258
                    , p = 258 << 2
                    , E = 9
                    , h = e << 3
                    , l = 256
                    , _ = 257
                    , g = 0
                    , Q = 0
                    , j = 0;
                while (!0) {
                    g = I[h >>> 3] << 16 | I[h + 8 >>> 3] << 8 | I[h + 16 >>> 3];
                    Q = g >> 24 - (h & 7) - E & (1 << E) - 1;
                    h += E;
                    if (Q == _)
                        break;
                    if (Q == l) {
                        E = 9;
                        N = 258;
                        p = 258 << 2;
                        g = I[h >>> 3] << 16 | I[h + 8 >>> 3] << 8 | I[h + 16 >>> 3];
                        Q = g >> 24 - (h & 7) - E & (1 << E) - 1;
                        h += E;
                        if (Q == _)
                            break;
                        O[r] = Q;
                        r++
                    } else if (Q < N) {
                        var L = Z[Q]
                            , an = v[Q];
                        S(K, L, O, r, an);
                        r += an;
                        if (j >= N) {
                            Z[N] = p;
                            K[Z[N]] = L[0];
                            v[N] = 1;
                            p = p + 1 + 3 & ~3;
                            N++
                        } else {
                            Z[N] = p;
                            var b = Z[j]
                                , P = v[j];
                            S(K, b, K, p, P);
                            K[p + P] = K[L];
                            P++;
                            v[N] = P;
                            N++;
                            p = p + P + 3 & ~3
                        }
                        if (N + 1 == 1 << E)
                            E++
                    } else {
                        if (j >= N) {
                            Z[N] = p;
                            v[N] = 0;
                            N++
                        } else {
                            Z[N] = p;
                            var b = Z[j]
                                , P = v[j];
                            S(K, b, K, p, P);
                            K[p + P] = K[p];
                            P++;
                            v[N] = P;
                            N++;
                            S(K, p, O, r, P);
                            r += P;
                            p = p + P + 3 & ~3
                        }
                        if (N + 1 == 1 << E)
                            E++
                    }
                    j = Q
                }
                return r
            };
        return U
    }()
};
FromPS.B = {
    readUshort: function (k, S) {
        return k[S] << 8 | k[S + 1]
    },
    readUint: function (k, S) {
        return k[S] * (256 * 256 * 256) + (k[S + 1] << 16 | k[S + 2] << 8 | k[S + 3])
    },
    readASCII: function (k, S, U) {
        var I = "";
        for (var e = 0; e < U; e++)
            I += String.fromCharCode(k[S + e]);
        return I
    }
};
FromPS.nrm = function (k) {
    return Math.max(0, Math.min(1, k))
}
    ;
FromPS.makeArr = function (k, S) {
    var U = [];
    for (var I = 0; I < k.length; I++)
        U.push({
            typ: S,
            val: k[I]
        });
    return U
}
    ;
FromPS.readArr = function (k) {
    var S = [];
    for (var U = 0; U < k.length; U++)
        S.push(k[U].val);
    return S
}
    ;
FromPS.makeStr = function (k) {
    var S = [];
    for (var U = 0; U < k.length; U++)
        S.push(k.charCodeAt(U));
    return S
}
    ;
FromPS.readStr = function (k) {
    var S = "";
    for (var U = 0; U < k.length; U++)
        S += String.fromCharCode(k[U]);
    return S
}
    ;
FromPS.getFromStacks = function (k, S) {
    var U = S.length - 1;
    while (U >= 0) {
        if (S[U][k] != null)
            return S[U][k];
        U--
    }
    return null
}
    ;
FromPS.where = function (k, S) {
    var U = S.length - 1;
    while (U >= 0) {
        if (S[U][k] != null)
            return S[U];
        U--
    }
    return null
}
    ;
FromPS.skipWhite = function (k) {
    var S = k.off
        , U = k.buff
        , I = FromPS.isWhite;
    while (I(U[S]) || U[S] == 37) {
        while (I(U[S]))
            S++;
        if (U[S] == 37) {
            while (S < U.length && !FromPS.isEOL(U[S]))
                S++;
            S++
        }
    }
    k.off = S
}
    ;
FromPS.getToken = function (k, S) {
    if (k.length == 0)
        return null;
    var U = k[k.length - 1];
    if (U.typ == "procedure") {
        var I = U.val[U.off];
        U.off++;
        if (U.off == U.val.length)
            k.pop();
        return I
    }
    if (U.typ == "name") {
        k.pop();
        return U
    }
    var e = FromPS.getFToken(U.val, S);
    while (e == null && k.length > 1) {
        k.pop();
        if (k.length != 0)
            e = FromPS.getFToken(k[k.length - 1].val, S)
    }
    return e
}
    ;
FromPS.getFToken = function (k, S) {
    FromPS.skipWhite(k);
    var U = FromPS.isWhite
        , I = FromPS.isSpecl
        , e = k.off
        , O = k.buff
        , r = null;
    if (e >= O.length)
        return null;
    var u = O[e]
        , f = String.fromCharCode(u);
    e++;
    if (f == "(") {
        var K = 0
            , T = e;
        while (!(O[T] == 41 && K == 0)) {
            if (O[T] == 40)
                K++;
            if (O[T] == 41)
                K--;
            if (O[T] == 92)
                T++;
            T++
        }
        var Z = [];
        for (var v = 0; v < T - e; v++)
            Z.push(O[e + v]);
        e = T + 1;
        Z = FromPS.getString(Z);
        r = {
            typ: "string",
            val: Z
        }
    } else if (f == "{" || f == "}" || f == "[" || f == "]") {
        r = {
            typ: "name",
            val: f
        }
    } else if (f == "<" && O[e] == 60 || f == ">" && O[e] == 62) {
        r = {
            typ: "name",
            val: f == "<" ? "<<" : ">>"
        };
        e++
    } else if (f == "<") {
        var Z;
        if (O[e] == "~".charCodeAt(0)) {
            k.off = e + 1;
            var n = FromPS.F.ASCII85Decode(k);
            Z = [];
            for (var v = 0; v < n.length; v++)
                Z.push(n[v]);
            e = k.off
        } else {
            var T = e;
            while (O[T] != 62)
                T++;
            var Z = [];
            FromPS.readHex({
                buff: O,
                off: e
            }, 1e9, Z);
            e = T + 1
        }
        r = {
            typ: "string",
            val: Z
        }
    } else {
        var T = e;
        while (T < O.length && !U(O[T]) && (!I(O[T]) || O[T] == 47 && O[T - 1] == 47 && T == e && S))
            T++;
        var N = FromPS.B.readASCII(O, e - 1, T - e + 1);
        e = T;
        var p = parseFloat(N);
        if (!1) { } else if (N == "true" || N == "false")
            r = {
                typ: "boolean",
                val: N == "true"
            };
        else if (!isNaN(p)) {
            var E = new Float32Array(1);
            E[0] = p;
            p = E[0];
            r = {
                typ: N.indexOf(".") == -1 ? "integer" : "real",
                val: p
            }
        } else {
            if (N.slice(0, 2) == "//" && S) {
                var h = N.slice(2)
                    , l = FromPS.getFromStacks(h, S);
                if (l != null)
                    r = l;
                else
                    r = {
                        typ: "name",
                        val: N
                    }
            } else
                r = {
                    typ: "name",
                    val: N
                }
        }
    }
    k.off = e;
    return r
}
    ;
FromPS.isSpecl = function (k) {
    return [40, 41, 60, 62, 91, 93, 123, 125, 37, 47].indexOf(k) != -1
}
    ;
FromPS.isWhite = function (k) {
    return k == 0 || k == 9 || k == 10 || k == 12 || k == 13 || k == 32
}
    ;
FromPS.isEOL = function (k) {
    return k == 10 || k == 13
}
    ;
FromPS.getString = function (k) {
    var S = []
        , U = "n,r,t,b,f,\\,(,), ,/".split(",")
        , I = ["\n", "\r", "\t", "\b", "\f", "\\", "(", ")", " ", "/"];
    for (var e = 0; e < k.length; e++) {
        var O = k[e]
            , r = String.fromCharCode(O);
        if (r == "\\") {
            var u = String.fromCharCode(k[e + 1]);
            e++;
            if (u == "\r" || u == "\n")
                continue;
            var f = U.indexOf(u);
            if (f != -1)
                S.push(I[f].charCodeAt(0));
            else {
                var K = u + String.fromCharCode(k[e + 1]) + String.fromCharCode(k[e + 2]);
                e += 2;
                S.push(parseInt(K, 8))
            }
        } else
            S.push(O)
    }
    return S
}
    ;
FromPS.makeString = function (k) {
    var S = "n r t b f \\ ( )".split(" ")
        , U = ["\n", "\r", "\t", "\b", "\f", "\\", "(", ")"]
        , I = [];
    for (var e = 0; e < k.length; e++) {
        var O = k[e]
            , r = U.indexOf(String.fromCharCode(O));
        if (r == -1)
            I.push(O);
        else
            I.push(92, S[r].charCodeAt(0))
    }
    return I
}
    ;
FromPS.readHex = function (k, S, U) {
    var I = 0
        , e = -1
        , O = k.off
        , r = k.buff.length;
    while (I != S && O < r) {
        var u = k.buff[O]
            , K = 0;
        O++;
        if (47 < u && u < 58)
            K = u - 48;
        else if (96 < u && u < 103)
            K = 10 + u - 97;
        else if (64 < u && u < 71)
            K = 10 + u - 65;
        else if (u == 62)
            break;
        else if (FromPS.isWhite(u))
            continue;
        else
            throw "e";
        if (e == -1)
            e = K;
        else {
            U[I] = e << 4 | K;
            e = -1;
            I++
        }
    }
    k.off = O
}
    ;
FromPS.getShadingFill = function (k, S) {
    var U = k["/ShadingType"], I = k["/ColorSpace"], e = k["/Extend"], O = k["/Coords"] ? k["/Coords"].slice(0) : null, r = "", w;
    if (e == null)
        e = [!1, !1];
    if (U == 2)
        r = "lin";
    else if (U == 3)
        r = "rad";
    else {
        console.log("Unknown shading type", U);
        return
    }
    var u = k["/Function"];
    if (u instanceof Array) {
        var f = u.length, K;
        for (var T = 0; T < f; T++) {
            var Z = FromPS.getGrad(u[T], "/DeviceGray");
            if (T == 0)
                K = Z;
            else {
                var n = K.length;
                for (var N = 0; N < n; N++)
                    K[N][1][T] = Z[N][1][0]
            }
        }
        if (I == "/DeviceCMYK")
            for (var T = 0; T < K.length; T++)
                K[T][1] = UDOC.C.cmykToRgb(K[T][1]);
        w = K
    } else
        w = FromPS.getGrad(u, I);
    if (r == "rad" && O[2] > O[5]) {
        O = O.slice(3).concat(O.slice(0, 3));
        e.reverse();
        w.reverse();
        for (var T = 0; T < w.length; T++)
            w[T][0] = 1 - w[T][0]
    }
    if (!e[0] && r != "rad") {
        var p = w[0];
        p[0] += .002;
        w.unshift([.001, p[1].slice(), 0])
    }
    if (!e[1]) {
        var p = w[w.length - 1];
        p[0] -= .002;
        w.push([0, 999, p[1].slice(), 0])
    }
    var E = {
        typ: r,
        mat: S,
        grad: w,
        crds: O
    };
    return E
}
    ;
FromPS.getGrad = function (k, S) {
    debugger
    var U = FromPS._normColor, I = k["/Functions"], e = k["/FunctionType"], O = k["/Bounds"], r = k["/Encode"], u;
    if (e == 0) {
        u = [];
        var w = Math.min(4, k["/Size"][0]);
        for (var f = 0; f <= w; f++)
            u.push([f / w, U(k, [f / w], S)])
    } else if (e == 2)
        u = [[0, U(k, [0], S)], [1, U(k, [1], S)]];
    else if (e == 3) {
        var K = 0;
        u = [];
        if (O.length == 0 || O[0] > 0)
            u.push([0, U(I[0], [r[0]], S)]);
        for (var f = 0; f < O.length; f++)
            u.push([O[f], U(I[f], [r[2 * f + 1]], S)]);
        if (O.length == 0 || O[O.length - 1] < 1)
            u.push([1, U(I[I.length - 1], [r[r.length - 1]], S)])
    } else if (e == 4) {
        u = [];
        for (var f = 0; f < 5; f++)
            u.push([f / 5, U(k, [f / 5], S)])
    }
    return u
}
    ;
FromPS._normColor = function (k, S, U) {
    var I = "/DeviceCMYK", e = "/DeviceRGB", O, r = FromPS.Func(k, S);
    if (U[3] && U[3]["/Length"]) {
        r = FromPS.Func(U[3], r);
        if (U[2] == I || r.length == 4)
            O = I;
        else if (U[2] == e)
            O = e;
        else if (U[2] && U[2][1] && U[2][1]["/Alternate"] && U[2][1]["/Alternate"][0] == "/Lab")
            O = "/Lab";
        else {
            console.log(r, U);
            throw "unknown color profile"
        }
    } else if (U[0] == "/ICCBased" && U[1]) {
        var u = U[1]["/N"];
        if (u == 4)
            O = I;
        else if (u == 3)
            O = e;
        else
            throw u
    } else if (U[0] == "/Separation") {
        r = FromPS._readSeparation(U, r[0]);
        O = e
    } else if (U.length == 1)
        O = U[0];
    else if (U[0] == "/Lab")
        O = "/Lab";
    else if (U[2] == I)
        O = I;
    else
        O = U;
    if (O == e)
        r = r;
    else if (O == I)
        r = UDOC.C.cmykToRgb(r);
    else if (O == "/DeviceGray")
        r = [r[0], r[0], r[0]];
    else if (O == "/Lab")
        r = UDOC.C.labToRgb(r);
    else
        throw "Unknown color space " + O;
    return r
}
    ;
FromPS._readSeparation = function (k, S) {
    var U = FromPS.Func(k[3], [S]), I;
    if (k && k[2] == "/DeviceCMYK")
        I = UDOC.C.cmykToRgb(U);
    else if (k && k[2] == "/DeviceGray")
        I = [U[0], U[0], U[0]];
    else if (k && k[2] && k[2][0] && k[2][0] == "/Lab")
        I = UDOC.C.labToRgb(U);
    else {
        I = U
    }
    return I
}
    ;
FromPS.Func = function (k, S) {
    var U = FromPS.intp
        , I = k["/Domain"]
        , e = k["/Range"]
        , r = k["/FunctionType"]
        , u = [];
    for (var w = 0; w < S.length; w++)
        S[w] = Math.max(I[2 * w], Math.min(I[2 * w + 1], S[w]));
    if (r == 0) {
        var f = k["/Encode"]
            , K = k["/Size"]
            , T = k["/Decode"]
            , Z = e.length / 2;
        if (f == null)
            f = [0, K[0] - 1];
        if (T == null)
            T = e;
        for (var w = 0; w < S.length; w++) {
            var n = U(S[w], I[2 * w], I[2 * w + 1], f[2 * w], f[2 * w + 1]);
            S[w] = Math.max(0, Math.min(K[w] - 1, n))
        }
        var N = k["/DataSource"];
        for (var p = 0; p < Z; p++) {
            var E = Math.round(S[0]), h;
            if (N)
                h = N.charCodeAt(Z * E + p);
            else
                h = FromPS.GS(k)[Z * E + p];
            h = U(h, 0, 255, T[2 * p], T[2 * p + 1]);
            u.push(h)
        }
    } else if (r == 2) {
        var l = k["/C0"]
            , _ = k["/C1"]
            , g = k["/N"]
            , E = S[0];
        for (var w = 0; w < l.length; w++)
            u[w] = l[w] + Math.pow(E, g) * (_[w] - l[w])
    } else if (r == 4) {
        var Q = FromPS._getEnv([0, 0, 0, 0])
            , A = !0;
        Q.pgOpen = !0;
        var q = []
            , X = []
            , N = FromPS._getDictStack([], {})
            , j = [];
        j.push({
            typ: "file",
            val: {
                buff: FromPS.GS(k),
                off: 0
            }
        });
        while (A)
            A = FromPS.step(X, N, j, q, Q, {}, FromPS.operator);
        var bI = X.pop();
        bI.off = 0;
        j.push(bI);
        for (var w = 0; w < S.length; w++)
            X.push({
                typ: "real",
                val: S[w]
            });
        A = !0;
        while (A)
            A = FromPS.step(X, N, j, q, Q, {}, FromPS.operator);
        for (var w = 0; w < X.length; w++)
            u.push(X[w].val)
    }
    if (e)
        for (var w = 0; w < u.length; w++)
            u[w] = Math.max(e[2 * w], Math.min(e[2 * w + 1], u[w]));
    return u
}
    ;
FromPS.intp = function (k, S, U, I, e) {
    return I + (k - S) * (e - I) / (U - S)
}
    ;
FromPS.GS = function (k) {
    if (k.stream == null) {
        var S = k.buff;
        delete k.buff;
        var U = k["/Filter"]
            , I = k["/DecodeParms"];
        if (U != null) {
            var e = typeof U == "string" ? [U] : U
                , O = !1;
            for (var r = 0; r < e.length; r++) {
                var u = e[r]
                    , f = {
                        buff: S,
                        off: 0
                    };
                if (u == "/FlateDecode") {
                    S = FromPS.F.FlateDecode(f)
                } else if (u == "/RunLengthDecode") {
                    S = FromPS.F.RunLengthDecode(f)
                } else if (u == "/LZWDecode") {
                    S = FromPS.F.LZWDecode(f)
                } else if (u == "/ASCIIHexDecode") {
                    S = FromPS.F.HexDecode(f)
                } else if (u == "/ASCII85Decode" || u == "/A85") {
                    S = FromPS.F.ASCII85Decode(f)
                } else if (u == "/DCTDecode" || u == "/CCITTFaxDecode" || u == "/JPXDecode" || u == "/JBIG2Decode") {
                    O = !0
                } else {
                    console.log(u, S);
                    throw "e"
                }
            }
            if (!O)
                delete k["/Filter"]
        }
        if (I != null) {
            if (I instanceof Array)
                I = I[0];
            if (I["/Predictor"] != null && I["/Predictor"] != 1) {
                var K = I["/Columns"]
                    , T = I["/Colors"] ? I["/Colors"] : 1
                    , Z = T * K
                    , v = S.length / (Z + 1);
                FromPS._filterZero(S, 0, K, v, T);
                S = S.slice(0, v * Z)
            }
        }
        k.stream = S
    }
    return k.stream
}
    ;
FromPS._filterZero = function (k, S, U, I, e) {
    var O = e * U
        , r = FromPS._paeth;
    for (var w = 0; w < I; w++) {
        var f = S + w * O
            , K = f + w + 1
            , T = k[K - 1];
        if (T == 0)
            for (var Z = 0; Z < O; Z++)
                k[f + Z] = k[K + Z];
        else if (T == 1) {
            for (var Z = 0; Z < e; Z++)
                k[f + Z] = k[K + Z];
            for (var Z = e; Z < O; Z++)
                k[f + Z] = k[K + Z] + k[f + Z - e] & 255
        } else if (w == 0) {
            for (var Z = 0; Z < e; Z++)
                k[f + Z] = k[K + Z];
            if (T == 2)
                for (var Z = e; Z < O; Z++)
                    k[f + Z] = k[K + Z] & 255;
            if (T == 3)
                for (var Z = e; Z < O; Z++)
                    k[f + Z] = k[K + Z] + (k[f + Z - e] >> 1) & 255;
            if (T == 4)
                for (var Z = e; Z < O; Z++)
                    k[f + Z] = k[K + Z] + r(k[f + Z - e], 0, 0) & 255
        } else {
            if (T == 2) {
                for (var Z = 0; Z < O; Z++)
                    k[f + Z] = k[K + Z] + k[f + Z - O] & 255
            }
            if (T == 3) {
                for (var Z = 0; Z < e; Z++)
                    k[f + Z] = k[K + Z] + (k[f + Z - O] >> 1) & 255;
                for (var Z = e; Z < O; Z++)
                    k[f + Z] = k[K + Z] + (k[f + Z - O] + k[f + Z - e] >> 1) & 255
            }
            if (T == 4) {
                for (var Z = 0; Z < e; Z++)
                    k[f + Z] = k[K + Z] + r(0, k[f + Z - O], 0) & 255;
                for (var Z = e; Z < O; Z++)
                    k[f + Z] = k[K + Z] + r(k[f + Z - e], k[f + Z - O], k[f + Z - e - O]) & 255
            }
        }
    }
    return k
}
    ;
FromPS._paeth = function (k, S, U) {
    var I = k + S - U
        , e = Math.abs(I - k)
        , O = Math.abs(I - S)
        , r = Math.abs(I - U);
    if (e <= O && e <= r)
        return k;
    else if (O <= r)
        return S;
    return U
}
    ;
function FromPDF() { }
FromPDF.indexOfXref = function (k) {
    var S = k.length - 3;
    while (FromPS.B.readASCII(k, S, 3) != "%%E")
        S--;
    while (k[S - 1] == 37)
        S--;
    var U = S;
    S--;
    while (FromPS.isEOL(k[S]))
        S--;
    while (!FromPS.isEOL(k[S]))
        S--;
    var I = parseInt(FromPS.B.readASCII(k, S + 1, U - S - 1));
    if (isNaN(I))
        throw "no xref";
    return I
}
    ;
FromPDF.Parse = function (k, S) {
    k = new Uint8Array(k);
    var U = 0;
    while (k[U] == 32)
        U++;
    if (U != 0)
        k = new Uint8Array(k.buffer, k.byteOffset + U, k.length - U);
    var I = FromPDF.indexOfXref(k)
        , e = []
        , O = FromPDF.readXrefTrail(k, I, e)
        , r = -1;
    for (var u = 0; u < e.length; u++)
        if (e[u] == null)
            r = u;
    if (O == null || r != -1) {
        console.log("PDF is broken, trying to rebuild");
        while (e.length != 0)
            e.pop();
        O = FromPDF.brokenXrefTrail(k, e)
    }
    if (O["/Encrypt"]) {
        alert("Encrypted PDFs are not supported yet.");
        return
    }
    var f = {
        buff: k,
        off: 0
    }
        , K = O["/Root"];
    if (K.typ == "ref")
        O["/Root"] = FromPDF.getIndirect(K.ind, K.gen, f, e);
    var T = O["/Root"]["/Pages"];
    if (T.typ == "ref")
        O["/Root"]["/Pages"] = FromPDF.getIndirect(T.ind, T.gen, f, e);
    var Z = [O["/Root"]["/Pages"]];
    while (Z.length != 0) {
        var v = Z.pop();
        if (v["/Type"] == "/Pages") {
            var n = v["/Kids"];
            for (var u = 0; u < n.length; u++) {
                if (n[u].typ == "ref")
                    n[u] = FromPDF.getIndirect(n[u].ind, n[u].gen, f, e);
                FromPDF.solveIndirects(n[u], f, e);
                Z.push(n[u])
            }
        }
    }
    var N = Date.now();
    FromPDF.render(O["/Root"], S, O);
    S.Done()
}
    ;
FromPDF.solveIndirects = function (k, S, U) {
    if (typeof k == "object")
        for (var I in k)
            if (I.startsWith("/")) {
                if (k[I] && k[I].typ == "ref" && U[k[I].ind])
                    k[I] = FromPDF.getIndirect(k[I].ind, k[I].gen, S, U);
                FromPDF.solveIndirects(k[I], S, U)
            }
}
    ;
FromPDF.render = function (k, S, U) {
    var I = "CS cs SCN scn SC sc sh Do gs ID EI cm y v B B* BT ET Tj TJ Tf Tm Td T* Tc Tw Tz TL Tr Ts MP DP BMC BDC EMC BX EX ri".split(" ")
        , e = {
            J: "setlinecap",
            j: "setlinejoin",
            w: "setlinewidth",
            d: "setdash",
            M: "setmiterlimit",
            i: "setflat",
            q: "gsave",
            Q: "grestore",
            m: "moveto",
            l: "lineto",
            c: "curveto",
            h: "closepath",
            re: "_drawRect_",
            W: "clip",
            "W*": "eoclip",
            f: "fill",
            F: "fill",
            "f*": "eofill",
            S: "stroke",
            b: "h B",
            "b*": "h B*",
            n: "newpath",
            RG: "/DeviceRGB  CS SCN",
            rg: "/DeviceRGB  cs scn",
            G: "/DeviceGray CS SCN",
            g: "/DeviceGray cs scn",
            K: "/DeviceCMYK CS SCN",
            k: "/DeviceCMYK cs scn",
            TD: "dup neg TL Td",
            "\"": "exch Tc exch Tw '",
            "'": "T* Tj",
            s: "h S",
            BI: "/BI"
        }
        , r = 0;
    e = FromPS.makeProcs(e);
    var O = [k["/Pages"]];
    while (O.length != 0) {
        var u = O.pop();
        if (u["/Type"] == "/Pages") {
            var w = u["/Kids"];
            for (var f = w.length - 1; f >= 0; f--)
                O.push(w[f]);
            continue
        }
        var K = u["/MediaBox"];
        if (K == null)
            K = k["/Pages"]["/MediaBox"];
        r += (K[2] - K[0]) * (K[3] - K[1])
    }
    var O = [k["/Pages"]]
        , T = -1
        , Z = [-1e9, 1e9];
    while (O.length != 0) {
        var u = O.pop();
        if (u["/Type"] == "/Pages") {
            var w = u["/Kids"];
            for (var f = w.length - 1; f >= 0; f--)
                O.push(w[f]);
            continue
        }
        T++;
        if (T < Z[0])
            continue;
        if (u["/Resources"] == null)
            u["/Resources"] = k["/Pages"]["/Resources"];
        var v = u["/Contents"];
        if (v == null)
            continue;
        if (v.length == null)
            v = [v];
        var n = u["/Rotate"] != null && (u["/Rotate"] + 36e3) % 360 == 90
            , K = u["/MediaBox"];
        if (K == null)
            K = k["/Pages"]["/MediaBox"];
        if (n)
            K = [K[0], K[1], K[3], K[2]];
        var N = FromPS._getEnv(K);
        N.pgOpen = !0;
        var p = []
            , E = []
            , h = FromPS._getDictStack(I, e)
            , l = [];
        if (n) {
            UDOC.M.rotate(N.gst.ctm, Math.PI / 2);
            UDOC.M.translate(N.gst.ctm, 0, K[3])
        }
        S.StartPage(K[0], K[1], K[2], K[3], r);
        if (U["/Encrypt"]) {
            if (O.length == 0)
                alert("Encrypted PDF is not supported yet.")
        } else
            for (var _ = 0; _ < v.length; _++) {
                if (v[_].buff == null)
                    continue;
                var g = FromPS.GS(v[_])
                    , Q = g.length - 1
                    , R = !0;
                while (g[Q] == 0)
                    Q--;
                g = new Uint8Array(g.buffer, g.byteOffset, Q + 1);
                l.push({
                    typ: "file",
                    val: {
                        buff: g,
                        off: 0,
                        extra: u,
                        clgrp: !1
                    }
                });
                while (R) {
                    R = FromPS.step(E, h, l, p, N, S, FromPDF.operator)
                }
            }
        S.ShowPage();
        if (T >= Z[1])
            break
    }
}
    ;
FromPDF.addCmd = function (k, S, U) {
    var I = k.length
        , e = new Uint8Array(I);
    for (var O = 0; O < I; O++)
        e[O] = k.charCodeAt(O);
    S.push({
        typ: "file",
        val: {
            buff: e,
            off: 0,
            extra: U
        }
    })
}
    ;
FromPDF._pushForm = function (k, S, U, I) {
    var e = S["/Matrix"];
    if (I)
        FromPDF.addCmd("Q", k, S);
    if (e) {
        var O = e.slice(0);
        UDOC.M.invert(O);
        FromPDF.addCmd(O.join(" ") + " cm", k, S)
    }
    k.push({
        typ: "file",
        val: {
            buff: FromPS.GS(S),
            off: 0,
            extra: S,
            clgrp: U
        }
    });
    if (e)
        FromPDF.addCmd(e.join(" ") + " cm", k, S);
    if (I)
        FromPDF.addCmd("q", k, S)
}
    ;
FromPDF.operator = function (k, S, U, I, e, O, r) {
    debugger
    var u = O.gst
        , w = I.length - 1;
    while (I[w].typ != "file")
        w--;
    var f = I[w].val
        , K = f.extra["/Resources"];
    if (k == "Do") {
        var T = S.pop().val
            , Z = K["/XObject"][T]
            , v = Z["/Subtype"];
        if (v == "/Form") {
            var n = Z["/Group"]
                , N = !1;
            if (n != null) {
                N = !0
            }
            if (Z["/Resources"] == null)
                Z["/Resources"] = K;
            FromPDF._pushForm(I, Z, N)
        } else if (v == "/Image") {
            var p = Z["/Width"], E = Z["/Height"], h = Z["/ColorSpace"], l = Z["/SMask"], _ = FromPDF.getImage(Z), g = FromPDF.getJBIG2Glob(Z), R, q;
            if (l && l["/Width"]) {
                var X = l["/Width"]
                    , j = l["/Height"];
                if (X != p || j != E) {
                    var A = new Uint32Array(X * j)
                        , bI = new Uint32Array(_.buffer.slice(_.byteOffset, _.byteOffset + 4));
                    A.fill(bI[0]);
                    p = X;
                    E = j;
                    _ = new Uint8Array(A.buffer)
                }
                R = FromPDF.getImage(Z["/SMask"]);
                q = FromPDF.getJBIG2Glob(Z["/SMask"])
            }
            if (Z["/ImageMask"] == !0) {
                R = _;
                q = g;
                _ = new Uint8Array(p * E * 4);
                g = null;
                var L = u.colr[0] * 255
                    , an = u.colr[1] * 255
                    , d = u.colr[2] * 255;
                for (var b = 0; b < p * E * 4; b += 4) {
                    _[b] = L;
                    _[b + 1] = an;
                    _[b + 2] = d;
                    _[b + 3] = 255
                }
            }
            if (_ && _.byteOffset != 0)
                _ = _.slice(0);
            if (R && R.byteOffset != 0)
                R = R.slice(0);
            r.PutImage(u, _, p, E, R, g, q)
        } else
            console.log("Unknown XObject", v)
    } else if (k == "gs") {
        var P = S.pop().val
            , b3 = K["/ExtGState"][P];
        for (var $ in b3) {
            var bu = b3[$];
            if ($ == "/Type")
                continue;
            else if ($ == "/CA")
                u.CA = f.clgrp ? u.CA * bu : bu;
            else if ($ == "/ca")
                u.ca = f.clgrp ? u.ca * bu : bu;
            else if ($ == "/BM") {
                if (!f.clgrp || u.bmode == "/Normal")
                    u.bmode = bu
            } else if ($ == "/LC")
                u.lcap = bu;
            else if ($ == "/LJ")
                u.ljoin = bu;
            else if ($ == "/LW")
                u.lwidth = bu;
            else if ($ == "/ML")
                u.mlimit = bu;
            else if ($ == "/SA")
                u.SA = bu;
            else if ($ == "/OPM")
                u.OPM = bu;
            else if ($ == "/AIS")
                u.AIS = bu;
            else if ($ == "/OP")
                u.OP = bu;
            else if ($ == "/op")
                u.op = bu;
            else if ($ == "/SMask") {
                u.SMask = ""
            } else if ($ == "/SM")
                u.SM = bu;
            else if ($ == "/HT" || $ == "/TR") { } else
                console.log("Unknown gstate property: ", $, bu)
        }
    } else if (k == "ID") {
        var ah = {};
        while (!0) {
            var bu = S.pop().val;
            if (bu == "/BI")
                break;
            ah[S.pop().val] = bu
        }
        f.off++;
        var p = ah["/W"]
            , E = ah["/H"]
            , a3 = p * E
            , _ = new Uint8Array(a3 * 4)
            , h = ah["/CS"]
            , bW = ah["/BPC"]
            , W = f.off;
        while (!FromPS.isWhite(f.buff[W]) || f.buff[W + 1] != 69 || f.buff[W + 2] != 73)
            W++;
        var a0 = f.buff.slice(f.off, W);
        f.off += a0.length;
        if (ah["/F"] == "/Fl") {
            var bz = {
                buff: a0,
                "/Filter": "/FlateDecode"
            };
            if (ah["/DP"]) {
                var bh = bz["/DecodeParms"] = {}
                    , bK = ["Predictor", "Columns", "Colors"];
                for (var b = 0; b < 3; b++)
                    if (ah["/DP"][bK[b]])
                        bh["/" + bK[b]] = ah["/DP"][bK[b]].val
            }
            a0 = FromPS.GS(bz);
            delete ah["/F"];
            delete ah["/DP"]
        }
        if (h == "/G" && ah["/F"] == null) {
            FromPDF.plteImage(a0, 0, _, null, p, E, bW)
        } else if (h == "/RGB" && ah["/F"] == null && a0.length == p * E * 3) {
            for (var b = 0; b < a3; b++) {
                var aq = b * 3
                    , av = b * 4;
                _[av] = a0[aq];
                _[av + 1] = a0[aq + 1];
                _[av + 2] = a0[aq + 2];
                _[av + 3] = 255
            }
        } else if (h && h[0].typ != null) {
            FromPDF.plteImage(a0, 0, _, h[3].val, p, E, bW)
        } else
            _ = a0;
        r.PutImage(u, _, p, E)
    } else if (k == "n" || k == "BT" || k == "EI") { } else if (k == "ET") {
        u.font.Tm = [1, 0, 0, 1, 0, 0];
        u.font.Tlm = u.font.Tm.slice(0)
    } else if (k == "y" || k == "v") {
        var cq = u.ctm.slice(0);
        UDOC.M.invert(cq);
        var $ = UDOC.M.multPoint(cq, u.cpos)
            , aR = S.pop().val
            , F = S.pop().val
            , az = S.pop().val
            , b$ = S.pop().val;
        if (k == "y")
            UDOC.G.curveTo(u, b$, az, F, aR, F, aR);
        else
            UDOC.G.curveTo(u, $[0], $[1], b$, az, F, aR)
    } else if (k == "B" || k == "B*") {
        r.Fill(u, k == "B*");
        r.Stroke(u);
        UDOC.G.newPath(u)
    } else if (k == "cm" || k == "Tm") {
        var aM = [];
        for (var b = 0; b < 6; b++)
            aM.push(S.pop().val);
        aM.reverse();
        if (k == "cm") {
            UDOC.M.concat(aM, u.ctm);
            u.ctm = aM
        } else {
            u.font.Tm = aM;
            u.font.Tlm = aM.slice(0)
        }
    } else if (k == "Td" || k == "T*") {
        var be = 0
            , aF = 0;
        if (k == "T*") {
            be = 0;
            aF = -u.font.Tl
        } else {
            aF = S.pop().val;
            be = S.pop().val
        }
        var bc = [1, 0, 0, 1, be, aF];
        UDOC.M.concat(bc, u.font.Tlm);
        u.font.Tm = bc;
        u.font.Tlm = bc.slice(0)
    } else if (k == "Tf") {
        var aU = S.pop().val
            , B = S.pop().val;
        u.font.Tf = B;
        u.font.Tfs = aU
    } else if (k == "Tj" || k == "TJ") {
        var bj = S.pop();
        if (bj.typ == "string")
            bj = [bj];
        else
            bj = bj.val;
        var ac = u.font.Tf
            , B = K["/Font"][ac];
        if (B == null)
            B = K["/Font"][ac.replace("_", "#5F")];
        var bD = u.font.Tfs / 1e3
            , bb = function (b9, C) {
                var b2 = [1, 0, 0, 1, C, 0];
                UDOC.M.concat(b2, b9.Tm);
                b9.Tm = b2
            };
        for (var b = 0; b < bj.length; b++) {
            if (bj[b].typ != "string") {
                if (b == 0)
                    bb(u.font, -bD * bj[b].val);
                continue
            }
            var b_ = FromPDF.getString(bj[b].val, B);
            if (bj[b + 1] && bj[b + 1].typ != "string") {
                var b0 = bj[b + 1].val;
                b_[1] += -b0;
                if (-900 < b0 && b0 < -100)
                    b_[0] += " "
            }
            u.font.Tf = b_[2];
            r.PutText(u, b_[0], b_[1] / 1e3);
            u.font.Tf = ac;
            bb(u.font, bD * b_[1])
        }
    } else if (k == "Tc")
        u.font.Tc = S.pop().val;
    else if (k == "Tw")
        u.font.Tw = S.pop().val;
    else if (k == "Tz")
        u.font.Th = S.pop().val;
    else if (k == "TL")
        u.font.Tl = S.pop().val;
    else if (k == "Tr")
        u.font.Tmode = S.pop().val;
    else if (k == "Ts")
        u.font.Trise = S.pop().val;
    else if (k == "CS" || k == "cs") {
        var h = S.pop().val;
        if (k == "CS")
            u.sspace = h;
        else
            u.space = h
    } else if (k == "SCN" || k == "scn" || k == "SC" || k == "sc") {
        var bA = k == "SCN" || k == "SC", bq = bA ? u.sspace : u.space, h, aC = null, bP = K ? K["/ColorSpace"] : null;
        if (bP != null && bP[bq] != null) {
            if (bP[bq][1] && bP[bq][1]["/Alternate"])
                h = bP[bq][1]["/Alternate"];
            else
                h = typeof bP[bq] == "string" ? bP[bq] : bP[bq][0]
        } else
            h = bq;
        if (h == "/DeviceN") {
            var bZ = bP[bq]
                , bU = bZ[1].length;
            for (var b = 0; b < bU; b++)
                S.pop();
            aC = [1, 0, 0]
        } else if (h == "/Lab" || h == "/DeviceRGB" || h == "/CalRGB" || h == "/ICCBased" && bP[bq][1]["/N"] == 3) {
            aC = [S.pop().val, S.pop().val, S.pop().val];
            aC.reverse()
        } else if (h == "/DeviceCMYK" || h == "/ICCBased" && bP[bq][1]["/N"] == 4) {
            var ae = [S.pop().val, S.pop().val, S.pop().val, S.pop().val];
            ae.reverse();
            aC = UDOC.C.cmykToRgb(ae)
        } else if (h == "/DeviceGray" || h == "/CalGray" || h == "/ICCBased" && bP[bq][1]["/N"] == 1) {
            var aP = FromPS.nrm(S.pop().val);
            aC = [aP, aP, aP]
        } else if (h == "/Separation") {
            aC = FromPS._readSeparation(bP[bq], S.pop().val)
        } else if (h == "/Indexed") {
            var aK = FromPDF.getPalette(bP[bq])
                , at = S.pop().val * 3;
            aC = [aK[at] / 255, aK[at + 1] / 255, aK[at + 2] / 255]
        } else if (h == "/Pattern") {
            var cd = K["/Pattern"][S.pop().val]
                , bF = cd["/PatternType"];
            if (bF == 1) {
                console.log("tile pattern");
                FromPDF._pushForm(I, cd, N, !0);
                return
            }
            var c3 = cd["/Matrix"];
            if (c3 == null)
                c3 = [1, 0, 0, 1, 0, 0];
            aC = FromPS.getShadingFill(cd["/Shading"], c3);
            if (aC == null)
                aC = [0, 0, 0]
        } else {
            console.log(bq, h, bP, K);
            throw "e"
        }
        if (bA)
            u.COLR = aC;
        else
            u.colr = aC
    } else if (k == "sh") {
        var ab = K["/Shading"][S.pop().val]
            , aO = u.colr
            , cv = u.pth;
        u.pth = u.cpth;
        u.cpth = UDOC.G.rectToPath(O.bb);
        u.colr = FromPS.getShadingFill(ab, u.ctm.slice(0));
        if (u.colr == null)
            u.colr = [0, 0, 0];
        r.Fill(u);
        u.colr = aO;
        u.pth = cv
    } else if (k == "MP" || k == "BMC" || k == "ri") {
        S.pop()
    } else if (k == "DP" || k == "BDC") {
        S.pop();
        S.pop()
    } else if (k == "EMC" || k == "BX" || k == "EX") { } else
        throw "Unknown operator",
        k
}
    ;
FromPDF.getJBIG2Glob = function (k) {
    var S = k;
    S = S["/DecodeParms"];
    if (S == null)
        return null;
    S = S["/JBIG2Globals"];
    if (S == null)
        return null;
    return FromPS.GS(S)
}
    ;
FromPDF.getImage = function (k) {
    var S = k["/Width"]
        , U = k["/Height"]
        , I = S * U
        , e = FromPS.GS(k)
        , O = k["/Filter"]
        , r = k["/ColorSpace"]
        , w = k["/BitsPerComponent"]
        , f = k["/Matte"]
        , K = k.image;
    if (K == null) {
        var T = k["/Mask"];
        if (r && r[0] == "/Indexed") {
            var Z = FromPDF.getPalette(r)
                , v = new Uint8Array(I * 4);
            FromPDF.plteImage(e, 0, v, Z, S, U, w, T);
            K = v
        } else if (O == null && r && r == "/DeviceGray") {
            var Z = [0, 0, 0, 255, 255, 255]
                , v = new Uint8Array(I * 4);
            if (k["/Decode"] && k["/Decode"][0] == 1) {
                Z.reverse()
            }
            if (k["/ImageMask"] == !0)
                Z.reverse();
            FromPDF.plteImage(e, 0, v, w == 1 ? Z : null, S, U, w, T);
            K = v
        } else if (O == null && r && (r == "/DeviceCMYK" || r[0] == "/ICCBased" && r[1] && r[1]["/N"] == 4)) {
            var v = new Uint8Array(I * 4)
                , n = [0, 0, 0, 0];
            for (var N = 0; N < I; N++) {
                var p = N * 4;
                n[0] = e[p] * (1 / 255);
                n[1] = e[p + 1] * (1 / 255);
                n[2] = e[p + 2] * (1 / 255);
                n[3] = e[p + 3] * (1 / 255);
                var E = UDOC.C.cmykToRgb(n);
                v[p] = ~~(E[0] * 255 + .5);
                v[p + 1] = ~~(E[1] * 255 + .5);
                v[p + 2] = ~~(E[2] * 255 + .5);
                v[p + 3] = 255
            }
            K = v
        } else if (S * U * 3 <= e.length) {
            var h = Math.round(255 / ((1 << w) - 1))
                , l = Math.ceil(S * 3 * w / 8)
                , v = new Uint8Array(I * 4);
            for (var _ = 0; _ < U; _++) {
                var g = l * _;
                for (var R = 0; R < S; R++) {
                    var p = (_ * S + R) * 4
                        , X = 3 * R;
                    v[p] = FromPDF.getBitNum(e, g, X, w);
                    v[p + 1] = FromPDF.getBitNum(e, g, X + 1, w);
                    v[p + 2] = FromPDF.getBitNum(e, g, X + 2, w);
                    v[p + 3] = 255
                }
            }
            K = v
        } else {
            K = e
        }
        if (f && f.join("") != "000") {
            var j = Math.round(f[0] * 255)
                , A = Math.round(f[1] * 255)
                , bI = Math.round(f[2] * 255);
            for (var N = 0; N < K.length; N += 4) {
                K[N] = Math.max(K[N], j);
                K[N + 1] = Math.max(K[N + 1], A);
                K[N + 2] = Math.max(K[N + 2], bI)
            }
        }
        k.image = K
    }
    return K
}
    ;
FromPDF.getPalette = function (k) {
    var S;
    if (k[3].length != null) {
        var U = k[3];
        S = new Uint8Array(256 * 3);
        for (var I = 0; I < U.length; I++)
            S[I] = U.charCodeAt(I)
    } else
        S = FromPS.GS(k[3]);
    if (k[1] == "/DeviceCMYK" || k[1] && k[1][1] && k[1][1]["/N"] == 4) {
        var e = S
            , S = new Uint8Array(256 * 3);
        for (var I = 0; I < 256; I++) {
            var O = I << 2
                , r = O - I
                , u = UDOC.C.cmykToRgb([e[O] / 255, e[O + 1] / 255, e[O + 2] / 255, e[O + 3] / 255]);
            S[r] = u[0] * 255;
            S[r + 1] = u[1] * 255;
            S[r + 2] = u[2] * 255
        }
    }
    return S
}
    ;
FromPDF.plteImage = function (k, S, U, I, e, O, r, w) {
    var f = Math.round(255 / ((1 << r) - 1))
        , K = Math.ceil(e * r / 8);
    for (var T = 0; T < O; T++) {
        var Z = S + K * T;
        for (var v = 0; v < e; v++) {
            var n = FromPDF.getBitNum(k, Z, v, r)
                , N = T * e + v << 2;
            if (I) {
                var p = n * 3;
                U[N] = I[p];
                U[N + 1] = I[p + 1];
                U[N + 2] = I[p + 2]
            } else {
                var E = n * f;
                U[N] = E;
                U[N + 1] = E;
                U[N + 2] = E
            }
            U[N + 3] = 255;
            if (w && w[0] <= n && n <= w[1])
                U[N + 3] = 0
        }
    }
}
    ;
FromPDF.getBitNum = function (k, S, U, I) {
    var e = 0;
    if (I == 8)
        e = k[S + U];
    else if (I == 4)
        e = k[S + (U >> 1)] >> (1 - (U & 1) << 2) & 15;
    else if (I == 2)
        e = k[S + (U >> 2)] >> (3 - (U & 3) << 1) & 3;
    else if (I == 1)
        e = k[S + (U >> 3)] >> (7 - (U & 7) << 0) & 1;
    return e
}
    ;
FromPDF.getString = function (k, S) {
    var U = S["/Subtype"], I = "", e = 0, O = null, r = S["/ToUnicode"], u = S["/Encoding"], w = S, an;
    if (r != null && typeof r != "object")
        r = null;
    if (U == "/Type0")
        w = S["/DescendantFonts"][0];
    if (r != null)
        I = FromPDF.toUnicode(k, r);
    else if (u == "/WinAnsiEncoding")
        I = FromPDF.encFromMap(k, FromPDF._win1252);
    else if (u == "/MacRomanEncoding")
        I = FromPDF.encFromMap(k, FromPDF._macRoman);
    else if (U == "/Type0") {
        var f = 0
            , K = w["/CIDSystemInfo"]["/Ordering"];
        if (K == "Identity")
            f = 0;
        else if (K == "Japan1")
            f = 31;
        else if (K == "GB1")
            f = 31;
        else if (K == "CNS1")
            f = 31;
        else if (K == "Korea1")
            f = 31;
        else {
            console.log("unknown ordering", K);
            f = 0
        }
        for (var T = 0; T < k.length; T += 2) {
            var v = k[T] << 8 | k[T + 1];
            I += String.fromCharCode(v + f)
        }
    } else if (u != null && u["/Type"] == "/Encoding") {
        var n = u["/Differences"]
            , N = u["/BaseEncoding"]
            , p = null
            , I = "";
        if (N == "/WinAnsiEncoding")
            p = FromPDF._win1252;
        if (N == "/MacRomanEncoding")
            p = FromPDF._macRoman;
        for (var E = 0; E < k.length; E++) {
            var l = k[E]
                , _ = -5
                , g = !1;
            if (n)
                for (var T = 0; T < n.length; T++) {
                    if (typeof n[T] == "string") {
                        if (l == _) {
                            I += FromPDF.fromCName(n[T].slice(1));
                            g = !0;
                            break
                        }
                        _++
                    } else
                        _ = n[T]
                }
            if (!g && p != null) {
                var Q = p.indexOf(l);
                if (Q != -1)
                    l = String.fromCharCode(p[Q + 1]);
                I += String.fromCharCode(l)
            } else if (!g)
                I += String.fromCharCode(l)
        }
    } else {
        I = FromPS.readStr(k)
    }
    if (U == "/Type0") {
        var R = w["/W"];
        if (R && R.length == 0)
            R = null;
        if (R == null) {
            e = I.length * 1e3 * .4;
            console.log("approximating word widths")
        } else
            for (var E = 0; E < k.length; E += 2) {
                var q = k[E] << 8 | k[E + 1]
                    , X = !1;
                for (var T = 0; T < R.length; T += 2) {
                    var j = R[T]
                        , A = R[T + 1];
                    if (A.length) {
                        if (0 <= q - j && q - j < A.length) {
                            e += A[q - j];
                            X = !0
                        }
                    } else {
                        if (j <= q && q <= A) {
                            e += R[T + 2];
                            X = !0
                        }
                        T++
                    }
                }
                if (!X)
                    e += R[1][0]
            }
    } else if (U == "/Type1" || U == "/Type3" || U == "/TrueType") {
        var bI = S["/FirstChar"]
            , R = S["/Widths"];
        if (R)
            for (var E = 0; E < k.length; E++)
                e += R[k[E] - bI];
        else {
            e = I.length * 1e3 * .4;
            console.log("approximating word width")
        }
    } else
        throw "unknown font type";
    var L = w["/FontDescriptor"]
        , d = ["", "2", "3"];
    for (var E = 0; E < 3; E++)
        if (L && L["/FontFile" + d[E]])
            an = "/FontFile" + d[E];
    if (L) {
        if (L.psName)
            O = L.psName;
        else if (an) {
            var b = FromPS.GS(L[an]);
            if (an != null && b && FromPS.B.readUint(b, 0) == 65536)
                O = L.psName = FromPDF._psName(b)
        }
    }
    if (O == null && S["/BaseFont"])
        O = S["/BaseFont"].slice(1);
    if (O == null || O == "")
        O = "DejaVuSans";
    return [I, e, O]
}
    ;
FromPDF._psName = function (k) {
    var S = FromPS.B.readUshort
        , U = S(k, 4)
        , I = 0;
    for (var e = 0; e < U; e++) {
        var O = FromPS.B.readASCII(k, 12 + e * 16, 4)
            , r = FromPS.B.readUint(k, 12 + e * 16 + 8);
        if (O == "name") {
            I = r;
            break
        }
    }
    if (I == 0)
        return null;
    var u = S(k, I + 2)
        , f = I + 6
        , K = I + 6;
    for (var e = 0; e < u; e++) {
        var T = S(k, K), Z = S(k, K + 2), v = S(k, K + 4), n = S(k, K + 6), N = S(k, K + 8), p = S(k, K + 10), E;
        K += 12;
        var l = f + u * 12 + p;
        if (Z == 1 || Z == 10 || Z == 3 || T == 3 && Z == 0) {
            E = "";
            for (var _ = 1; _ < N; _ += 2)
                E += String.fromCharCode(k[l + _])
        } else if (Z == 0 || Z == 2)
            E = FromPS.B.readASCII(k, l, N);
        if (n == 6 && E != null && E.slice(0, 3) != "OTS")
            return E.replace(/\s/g, "")
    }
    return null
}
    ;
FromPDF.encFromMap = function (k, S) {
    var U = "";
    for (var I = 0; I < k.length; I++) {
        var e = k[I]
            , O = S.indexOf(e);
        if (O != -1)
            e = S[O + 1];
        U += String.fromCharCode(e)
    }
    return U
}
    ;
FromPDF._win1252 = [128, 8364, 130, 8218, 131, 402, 132, 8222, 133, 8230, 134, 8224, 135, 8225, 136, 710, 137, 8240, 138, 352, 139, 8249, 140, 338, 142, 381, 145, 8216, 146, 8217, 147, 8220, 148, 8221, 149, 8226, 150, 8211, 151, 8212, 152, 732, 153, 8482, 154, 353, 155, 8250, 156, 339, 158, 382, 159, 376];
FromPDF._macRoman = [128, 196, 129, 197, 130, 199, 131, 201, 132, 209, 133, 214, 134, 220, 135, 225, 136, 224, 137, 226, 138, 228, 139, 227, 140, 229, 141, 231, 142, 233, 143, 232, 144, 234, 145, 235, 146, 237, 147, 236, 148, 238, 149, 239, 150, 241, 151, 243, 152, 242, 153, 244, 154, 246, 155, 245, 156, 250, 157, 249, 158, 251, 159, 252, 160, 8224, 161, 176, 162, 162, 163, 163, 164, 167, 165, 8226, 166, 182, 167, 223, 168, 174, 169, 169, 170, 8482, 171, 180, 172, 168, 173, 9824, 174, 198, 175, 216, 176, 8734, 177, 177, 178, 8804, 179, 8805, 180, 165, 181, 181, 182, 8706, 183, 8721, 184, 8719, 185, 960, 186, 8747, 187, 170, 188, 186, 189, 937, 190, 230, 191, 248, 192, 191, 193, 161, 194, 172, 195, 8730, 196, 402, 197, 8776, 198, 8710, 199, 171, 200, 187, 201, 8230, 202, 160, 203, 192, 204, 195, 205, 213, 206, 338, 207, 339, 208, 8211, 209, 8212, 210, 8220, 211, 8221, 212, 8216, 213, 8217, 214, 247, 215, 9674, 216, 255, 217, 376, 218, 8260, 219, 8364, 220, 8249, 221, 8250, 222, 64257, 223, 64258, 224, 8225, 225, 183, 226, 8218, 227, 8222, 228, 8240, 229, 194, 230, 202, 231, 193, 232, 203, 233, 200, 234, 205, 235, 206, 236, 207, 237, 204, 238, 211, 239, 212, 240, 63743, 241, 210, 242, 218, 243, 219, 244, 217, 245, 305, 246, 710, 247, 732, 248, 175, 249, 728, 250, 729, 251, 730, 252, 184, 253, 733, 254, 731, 255, 711];
FromPDF.fromCName = function (k) {
    if (k == "f_f_i")
        return "ffi";
    if (k.length == 1)
        return k;
    if (k.slice(0, 3) == "uni")
        return String.fromCharCode(parseInt(k.slice(3), 16));
    var S = {
        space: 32,
        exclam: 33,
        quotedbl: 34,
        numbersign: 35,
        dollar: 36,
        percent: 37,
        ampersand: 38,
        quotesingle: 39,
        parenleft: 40,
        parenright: 41,
        asterisk: 42,
        plus: 43,
        comma: 44,
        hyphen: 45,
        period: 46,
        slash: 47,
        zero: 48,
        one: 49,
        two: 50,
        three: 51,
        four: 52,
        five: 53,
        six: 54,
        seven: 55,
        eight: 56,
        nine: 57,
        colon: 58,
        semicolon: 59,
        less: 60,
        equal: 61,
        at: 64,
        bracketleft: 91,
        bracketright: 93,
        underscore: 95,
        braceleft: 123,
        braceright: 125,
        dieresis: 168,
        circlecopyrt: 169,
        degree: 176,
        plusminus: 177,
        Eacute: 201,
        Adieresis: 196,
        adieresis: 228,
        Udieresis: 220,
        germandbls: 223,
        udieresis: 252,
        Odieresis: 214,
        odieresis: 246,
        Cacute: 262,
        cacute: 263,
        Ccaron: 268,
        ccaron: 269,
        Dcroat: 272,
        dcroat: 273,
        Ecaron: 283,
        ecaron: 283,
        dotlessi: 305,
        Scaron: 352,
        scaron: 353,
        Tcaron: 356,
        tcaron: 357,
        Zcaron: 381,
        zcaron: 382,
        alpha: 945,
        phi: 966,
        endash: 8211,
        emdash: 8212,
        asteriskmath: 8727,
        quoteright: 8217,
        quotedblbase: 8222,
        ellipsis: 8230,
        quotedblleft: 8220,
        quotedblright: 8221,
        bullet: 8226,
        minus: 8706,
        fi: 64257,
        fl: 64258
    }
        , U = S[k];
    if (U == null) {
        if (k.charAt(0) != "g")
            console.log("unknown character " + k);
        return k
    }
    return String.fromCharCode(U)
}
    ;
FromPDF.toUnicode = function (k, S) {
    var U = S.cmap, I = "", e;
    if (U == null) {
        var O = {
            buff: FromPS.GS(S),
            off: 0
        }
            , r = []
            , u = FromPS._getDictStack({})
            , w = [{
                typ: "file",
                val: O
            }]
            , f = []
            , K = FromPS._getEnv([0, 0, 1, 1])
            , T = !0;
        K.pgOpen = !0;
        while (T)
            T = FromPS.step(r, u, w, f, K, null, FromPS.operator, !0);
        U = K.res.CMap.val;
        S.cmap = U
    }
    for (var Z in U) {
        U = U[Z].val;
        break
    }
    var v = U.bfrange
        , n = U.bfchar
        , p = U.bpc;
    for (var E = 0; E < k.length; E += p) {
        var l = k[E]
            , _ = !1;
        if (p == 2)
            l = l << 8 | k[E + 1];
        if (!_ && v)
            for (var g = 0; g < v.length; g += 3) {
                var Q = v[g]
                    , R = v[g + 1]
                    , q = v[g + 2];
                if (Q <= l && l <= R) {
                    if (Q == R && q == 0) { } else if (q.length == null)
                        l += q - Q;
                    else
                        l = q[l - Q];
                    _ = !0;
                    break
                }
            }
        if (!_ && n)
            for (var g = 0; g < n.length; g += 2)
                if (n[g] == l) {
                    l = n[g + 1];
                    _ = !0;
                    break
                }
        I += String.fromCharCode(l)
    }
    return I
}
    ;
FromPDF.brokenXrefTrail = function (k, S) {
    function U(v, n) {
        var N = n;
        while (48 <= v[n] && v[n] <= 57)
            n++;
        return FromPS.B.readASCII(v, N, n - N)
    }
    var I, e = k.length;
    for (var O = 0; O < e; O++) {
        if (FromPS.isEOL(k[O])) {
            var r = O;
            while (FromPS.isWhite(k[r]))
                r++;
            var u = U(k, r);
            if (u != "") {
                r += u.length;
                while (FromPS.isWhite(k[r]))
                    r++;
                var f = U(k, r);
                if (f != "") {
                    r += f.length;
                    while (FromPS.isWhite(k[r]))
                        r++;
                    if (FromPS.B.readASCII(k, r, 3) == "obj") {
                        var K = parseInt(u)
                            , T = parseInt(f);
                        S[K] = {
                            off: O + 1,
                            gen: T,
                            chr: "n"
                        };
                        O = r
                    }
                }
            } else if (k[r] == 116 && k[r + 1] == 114 && FromPS.B.readASCII(k, r, 7) == "trailer") {
                if (I == null)
                    I = FromPDF._readTrailer(k, r + 7, S)
            } else if (k[r] == 115 && k[r + 1] == 116 && FromPS.B.readASCII(k, r, 9) == "startxref") {
                r += 10;
                while (FromPS.isWhite(k[r]))
                    r++;
                var Z = parseInt(U(k, r));
                if (Z != 0 && I == null)
                    I = FromPDF.readXrefTrail(k, Z, S)
            }
        }
    }
    return I
}
    ;
FromPDF._readTrailer = function (k, S, U) {
    var I = {
        buff: k,
        off: S
    }
        , e = FromPDF.readObject(I, I, U);
    if (e["/Prev"])
        FromPDF.readXrefTrail(k, e["/Prev"], U);
    return e
}
    ;
FromPDF.readXrefTrail = function (k, S, U) {
    var I = FromPS.B.readASCII(k, S, 4);
    if (I == "xref") {
        var e = S + 4;
        if (k[e] == 13)
            e++;
        if (k[e] == 10)
            e++;
        while (!0) {
            if (FromPS.B.readASCII(k, e, 7) == "trailer") {
                e += 7;
                if (k[e] == 13)
                    e++;
                if (k[e] == 10)
                    e++;
                break
            }
            var O = e;
            while (!FromPS.isEOL(k[e]))
                e++;
            var r = FromPS.B.readASCII(k, O, e - O);
            r = r.split(" ");
            var u = parseInt(r[0])
                , w = parseInt(r[1]);
            if (k[e] == 13)
                e++;
            if (k[e] == 10)
                e++;
            for (var f = 0; f < w; f++) {
                var K = u + f;
                if (U[K] == null)
                    U[K] = {
                        off: parseInt(FromPS.B.readASCII(k, e, 10)),
                        gen: parseInt(FromPS.B.readASCII(k, e + 11, 5)),
                        chr: FromPS.B.readASCII(k, e + 17, 1),
                        val: null,
                        opn: !1
                    };
                if (k[e + 16] != 32)
                    return null;
                e += 20
            }
        }
        return FromPDF._readTrailer(k, e, U)
    } else {
        var e = S;
        while (!FromPS.isEOL(k[e]))
            e++;
        while (FromPS.isWhite(k[e]))
            e++;
        if (FromPS.B.readASCII(k, e, 2) == "<<") {
            var T = {
                buff: k,
                off: e
            }
                , Z = FromPDF.readObject(T, T, null)
                , n = 0
                , N = FromPS.GS(Z)
                , p = Z["/W"]
                , E = Z["/Index"]
                , h = []
                , f = 0;
            if (E) {
                for (f = 0; f < E.length; f += 2) {
                    for (var l = 0; l < E[f + 1]; l++)
                        h.push(E[f] + l)
                }
            }
            f = 0;
            while (n < N.length) {
                var _ = FromPDF.getInt(N, n, p[0])
                    , e = 0
                    , q = 0
                    , X = "n";
                n += p[0];
                var g = FromPDF.getInt(N, n, p[1]);
                n += p[1];
                var R = FromPDF.getInt(N, n, p[2]);
                n += p[2];
                if (_ == 0) {
                    e = g;
                    q = R;
                    X = "f"
                }
                if (_ == 1) {
                    e = g;
                    q = R;
                    X = "n"
                }
                if (_ == 2) {
                    e = g;
                    q = R;
                    X = "s"
                }
                U[E ? h[f] : f] = {
                    off: e,
                    gen: q,
                    chr: X,
                    val: null,
                    opn: !1
                };
                f++
            }
            if (Z["/Prev"])
                FromPDF.readXrefTrail(k, Z["/Prev"], U);
            if (Z["/Encrypt"])
                return Z;
            var j = {
                buff: k,
                off: 0
            }
                , A = ["/Root", "/Info"];
            for (f = 0; f < A.length; f++) {
                var bI = A[f]
                    , L = Z[bI];
                if (L && L.typ == "ref")
                    Z[bI] = FromPDF.getIndirect(L.ind, L.gen, j, U)
            }
            return Z
        } else
            return null
    }
}
    ;
FromPDF.getInt = function (k, U, I) {
    if (I == 0)
        return 0;
    if (I == 1)
        return k[U];
    if (I == 2)
        return k[U] << 8 | k[U + 1];
    if (I == 3)
        return k[U] << 16 | k[U + 1] << 8 | k[U + 2];
    if (I == 4)
        return k[U] << 24 | k[U + 1] << 16 | k[U + 2] << 8 | k[U + 3];
    while (I > 4) {
        I--;
        U++
    }
    return k[U] << 24 | k[U + 1] << 16 | k[U + 2] << 8 | k[U + 3]
}
    ;
FromPDF.getIndirect = function (k, S, U, I) {
    var e = I[k], u;
    if (e.chr == "f")
        return null;
    if (e.val != null)
        return e.val;
    if (e.opn)
        return {
            typ: "ref",
            ind: k,
            gen: S
        };
    e.opn = !0;
    var O = U.off;
    if (e.chr == "s") {
        var f = FromPDF.getIndirect(e.off, e.gen, U, I)
            , K = {
                buff: FromPS.GS(f),
                off: 0
            }
            , T = 0
            , Z = 0;
        while (T != k) {
            T = FromPS.getFToken(K).val;
            Z = FromPS.getFToken(K).val
        }
        K.off = Z + f["/First"];
        u = FromPDF.readObject(K, U, I)
    } else {
        U.off = e.off;
        var v = FromPS.getFToken(U);
        if (v.val != "<<") {
            var n = FromPS.getFToken(U)
                , N = FromPS.getFToken(U)
        } else
            U.off -= 2;
        u = FromPDF.readObject(U, U, I)
    }
    e.val = u;
    U.off = O;
    e.opn = !1;
    return u
}
    ;
FromPDF.readObject = function (k, S, U) {
    var I = FromPS.getFToken(k);
    if (I.typ == "integer") {
        var e = k.off
            , O = FromPS.getFToken(k);
        if (O && O.typ == "integer") {
            FromPS.skipWhite(k);
            if (k.buff[k.off] == 82) {
                k.off++;
                if (U && U[I.val])
                    return FromPDF.getIndirect(I.val, O.val, S, U);
                else
                    return {
                        typ: "ref",
                        ind: I.val,
                        gen: O.val
                    }
            }
        }
        k.off = e
    }
    if (I.val == "<<")
        return FromPDF.readDict(k, S, U);
    if (I.val == "[")
        return FromPDF.readArra(k, S, U);
    if (I.typ == "string") {
        var r = "";
        for (var u = 0; u < I.val.length; u++)
            r += String.fromCharCode(I.val[u]);
        return r
    }
    if (I.typ == "name" && I.val == ">>")
        throw "e";
    return I.val
}
    ;
FromPDF.readDict = function (k, S, U) {
    var I = {};
    while (!0) {
        var e = k.off
            , O = FromPS.getFToken(k);
        if (O.typ == "name" && O.val == ">>")
            break;
        k.off = e;
        var r = FromPDF.readObject(k, S, U)
            , u = FromPDF.readObject(k, S, U);
        I[r] = u
    }
    if (I["/Length"] != null && I["/CFM"] == null) {
        var w = I["/Length"];
        if (w.typ && w.typ == "ref")
            throw "e";
        var f = FromPS.getFToken(k);
        if (k.buff[k.off] == 32)
            k.off++;
        if (k.buff[k.off] == 13)
            k.off++;
        if (k.buff[k.off] == 10)
            k.off++;
        if (k.off + w > k.buff.length) {
            console.log("too big /Length of a stream", w, k.buff.length - k.off, k.off);
            w = k.buff.length - k.off
        }
        I.buff = new Uint8Array(k.buff.buffer, k.buff.byteOffset + k.off, w);
        k.off += w;
        FromPS.getFToken(k)
    }
    return I
}
    ;
FromPDF.readArra = function (k, S, U) {
    var I = [];
    while (!0) {
        var e = k.off
            , O = FromPS.getFToken(k);
        if (O.typ == "name" && O.val == "]")
            return I;
        k.off = e;
        var r = FromPDF.readObject(k, S, U);
        I.push(r)
    }
}
    ;
var FromWMF = function () {
    var k = 0
        , S = 53
        , U = 55
        , I = 258
        , e = 259
        , O = 260
        , r = 261
        , u = 262
        , w = 263
        , f = 264
        , K = 295
        , T = 313
        , Z = 322
        , v = 329
        , n = 513
        , N = 521
        , p = 529
        , E = 531
        , h = 532
        , l = 544
        , _ = 552
        , g = 561
        , Q = 564
        , R = 804
        , q = 805
        , X = 522
        , j = 523
        , A = 524
        , bI = 525
        , L = 526
        , an = 527
        , d = 1040
        , b = 1042
        , P = 1045
        , b3 = 1046
        , $ = 1048
        , bu = 1049
        , ah = 1065
        , a3 = 1078
        , bW = 1313
        , W = 1336
        , a0 = 1352
        , bz = 1051
        , bh = 1055
        , bK = 1564
        , aq = 1565
        , av = 30
        , cq = 2074
        , aR = 2851
        , F = 1574
        , az = 298
        , b$ = 299
        , aM = 300
        , be = 301
        , aF = 302
        , bc = 2071
        , aU = 2096
        , B = 2338
        , bj = 2610
        , ac = 3379
        , bD = 2368
        , bb = 2881
        , b_ = 3907
        , b0 = 496
        , bA = 247
        , bq = 505
        , aC = 762
        , bP = 763
        , bZ = 764
        , bU = 1791
        , ae = 1
        , aP = 2
        , aK = 3
        , at = 4
        , cd = 5
        , bF = 6
        , c3 = 7
        , ab = 8
        , aO = 9
        , cv = 10
        , b9 = 11
        , aA = 12
        , C = 13
        , b2 = 14
        , ce = 15
        , bk = 16
        , ct = 17
        , ck = 18
        , a$ = 19
        , bv = 20
        , bH = 21
        , cl = 22
        , ay = 23
        , cj = 24
        , bB = 25
        , cm = 26
        , a4 = 27
        , ai = 28
        , bp = 29
        , b5 = 30
        , cb = 31
        , aG = 32
        , aV = 33
        , aL = 34
        , ci = 35
        , c4 = 37
        , cp = 38
        , ba = 42
        , c2 = 256
        , bg = 258
        , aN = 512
        , cg = 513
        , aE = 514
        , bR = 2049
        , cw = 3073
        , bm = 4096
        , b1 = 4097
        , a2 = 4098
        , bs = 4110
        , c1 = 4111
        , al = 4112
        , bn = 4115
        , ax = 4116
        , af = 4117
        , cf = 4118
        , y = 4119
        , cs = 4120
        , aw = 4121
        , m = 4122
        , D = 4568
        , V = UDOC.B;
    function G(M, t) {
        M = new Uint8Array(M);
        var H = 0
            , i = {
                fill: !1,
                strk: !1,
                bb: [0, 0, 1, 1],
                lbb: [0, 0, 1, 1],
                scl: 1,
                fnt: {
                    nam: "Arial",
                    hgh: 25,
                    und: !1,
                    orn: 0,
                    chrst: 0
                },
                tclr: [0, 0, 0],
                talg: 0
            }
            , a = V.readShort
            , z = V.readUshort
            , s = V.readUint
            , aD = s(M, 0)
            , a9 = 0;
        if (aD == 2596720087) {
            H = 6;
            var ca = a(M, H + 8);
            i.scl = 120 / ca;
            for (var bC = 0; bC < 4; bC++) {
                i.bb[bC] = Math.round(a(M, H) * i.scl);
                H += 2
            }
            H += 2;
            H += 6
        }
        t.StartPage(i.bb[0], i.bb[1], i.bb[2], i.bb[3]);
        var Y = UDOC.getState(i.bb)
            , am = z(M, H);
        H += 2;
        var cr = z(M, H);
        H += 2;
        var aj = z(M, H);
        H += 2;
        var bX = s(M, H);
        H += 4;
        var bJ = z(M, H);
        H += 2;
        var bd = s(M, H);
        H += 4;
        var bJ = z(M, H);
        H += 2;
        var c = [];
        while (!0) {
            var b4 = s(M, H) << 1
                , c5 = null;
            H += 4;
            var aW = z(M, H);
            H += 2;
            var x = aW
                , J = H;
            if (!1) { } else if (x == k)
                break;
            else if (x == F) {
                var aB = z(M, H);
                J += 2;
                var c7 = aB;
                console.log(x, c7)
            } else if (x == e || x == u || x == I) { } else if (x == be) {
                var b7 = z(M, J);
                J += 2;
                var bY = c[b7];
                if (bY.t == "br") {
                    i.fill = bY.stl != 1;
                    if (bY.stl == 0) { } else if (bY.stl == 1) { } else
                        throw bY.stl + " e";
                    Y.colr = bY.clr
                } else if (bY.t == "pn") {
                    var bl = bY.stl & 7;
                    i.strk = bl != 5;
                    if (bl == 0 || bl == 6)
                        Y.lwidth = bY.px;
                    else if (bl == 5) { } else
                        throw bl + " e";
                    if ((bY.stl & 4096) != 0)
                        Y.ljoin = 2;
                    else if ((bY.stl & 8192) != 0)
                        Y.ljoin = 0;
                    else
                        Y.ljoin = 1;
                    Y.COLR = bY.clr
                } else if (bY.t == "fn") {
                    i.fnt = bY;
                    Y.font.Tf = bY.nam;
                    Y.font.Tfs = Math.abs(bY.hgh);
                    Y.font.Tun = bY.und
                } else
                    throw "e"
            } else if (x == b0) {
                var b7 = z(M, J);
                J += 2;
                c[b7] = null
            } else if (x == j || x == A) {
                var c0 = x == j ? 0 : 2;
                i.lbb[c0 + 1] = a(M, J);
                J += 2;
                i.lbb[c0] = a(M, J);
                J += 2;
                aJ(i, Y)
            } else if (x == bZ) {
                c5 = {
                    t: "br"
                };
                c5.stl = z(M, J);
                J += 2;
                c5.clr = [M[J] / 255, M[J + 1] / 255, M[J + 2] / 255];
                J += 4;
                c5.htc = z(M, J);
                J += 2
            } else if (x == aC) {
                c5 = {
                    t: "pn"
                };
                c5.stl = z(M, J);
                J += 2;
                c5.px = a(M, J);
                J += 2;
                c5.py = a(M, J);
                J += 2;
                c5.clr = [M[J] / 255, M[J + 1] / 255, M[J + 2] / 255];
                J += 4
            } else if (x == bP) {
                c5 = {
                    t: "fn",
                    nam: ""
                };
                c5.hgh = a(M, J);
                J += 2;
                J += 2 * 2;
                c5.orn = a(M, J) / 10;
                J += 2;
                var a_ = a(M, J);
                J += 2;
                c5.und = M[J + 1];
                J += 2;
                c5.stk = M[J];
                c5.chrst = M[H + 1];
                J += 2;
                J += 4;
                while (M[J] != 0) {
                    c5.nam += String.fromCharCode(M[J]);
                    J++
                }
                if (a_ > 500)
                    c5.nam += "-Bold"
            } else if (x == bA) {
                c5 = {
                    t: "pl"
                }
            } else if (x == N)
                i.tclr = [M[J] / 255, M[J + 1] / 255, M[J + 2] / 255];
            else if (x == aF)
                i.talg = z(M, J);
            else if (x == h) {
                UDOC.G.moveTo(Y, a(M, J + 2), a(M, J))
            } else if (x == E) {
                if (Y.pth.cmds.length == 0) {
                    var b8 = Y.ctm.slice(0);
                    UDOC.M.invert(b8);
                    var a8 = UDOC.M.multPoint(b8, Y.cpos);
                    UDOC.G.moveTo(Y, a8[0], a8[1])
                }
                UDOC.G.lineTo(Y, a(M, J + 2), a(M, J));
                var a6 = i.fill;
                i.fill = !1;
                bG(t, Y, i);
                i.fill = a6
            } else if (x == W) {
                var ak = z(M, J);
                J += 2;
                var bV = J;
                J += ak * 2;
                for (var bC = 0; bC < ak; bC++) {
                    var a1 = z(M, bV + bC * 2);
                    J = o(M, J, a1, Y, !0)
                }
                bG(t, Y, i)
            } else if (x == R || x == q) {
                var a1 = z(M, J);
                J += 2;
                J = o(M, J, a1, Y, x == R);
                var a6 = i.fill;
                i.fill = a6 && x == R;
                bG(t, Y, i);
                i.fill = a6
            } else if (x == bz || x == $) {
                var aS = a(M, J);
                J += 2;
                var ap = a(M, J);
                J += 2;
                var a7 = a(M, J);
                J += 2;
                var aY = a(M, J);
                J += 2;
                if (x == bz) {
                    UDOC.G.moveTo(Y, aY, a7);
                    UDOC.G.lineTo(Y, ap, a7);
                    UDOC.G.lineTo(Y, ap, aS);
                    UDOC.G.lineTo(Y, aY, aS)
                } else {
                    var cc = (aY + ap) / 2
                        , bM = (a7 + aS) / 2;
                    UDOC.G.arc(Y, cc, bM, (aS - a7) / 2, 0, 2 * Math.PI, !1)
                }
                UDOC.G.closePath(Y);
                var a6 = i.fill;
                i.fill = !0;
                bG(t, Y, i);
                i.fill = a6
            } else if (x == b_) {
                var bw = s(M, J);
                J += 4;
                var br = z(M, J);
                J += 2;
                var bx = a(M, J);
                J += 2;
                var bi = a(M, J);
                J += 2;
                var a5 = a(M, J);
                J += 2;
                var bQ = a(M, J);
                J += 2;
                var ar = a(M, J);
                J += 2;
                var ag = a(M, J);
                J += 2;
                var c6 = a(M, J);
                J += 2;
                var aT = a(M, J);
                J += 2;
                var aI = bf(M, J)
                    , c9 = Y.ctm.slice(0);
                Y.ctm = [1, 0, 0, 1, 0, 0];
                UDOC.M.scale(Y.ctm, ag, -ar);
                UDOC.M.translate(Y.ctm, aT, c6 + ar);
                UDOC.M.concat(Y.ctm, c9);
                t.PutImage(Y, aI, bi, bx);
                Y.ctm = c9
            } else if (x == bj) {
                var aa = a(M, J)
                    , aZ = "";
                J += 2;
                var aX = a(M, J);
                J += 2;
                Y.font.Tm = [1, 0, 0, -1, 0, 0];
                UDOC.M.rotate(Y.font.Tm, i.fnt.orn * Math.PI / 180);
                UDOC.M.translate(Y.font.Tm, aX, aa);
                var ao = i.talg;
                if ((ao & 6) == 6)
                    Y.font.Tal = 2;
                else if ((ao & 7) == 0)
                    Y.font.Tal = 0;
                else
                    throw ao + " e";
                if ((ao & 24) == 24) { } else if ((ao & 24) == 0)
                    UDOC.M.translate(Y.font.Tm, 0, Y.font.Tfs);
                else
                    throw "e";
                var bN = z(M, J);
                J += 2;
                var aQ = z(M, J);
                J += 2;
                if (aQ & 4)
                    J += 8;
                for (var bC = 0; bC < bN; bC++) {
                    var aH = M[J + bC];
                    if (aH > 127) {
                        bC++;
                        aH = aH << 8 | M[J + bC]
                    }
                    aZ += String.fromCharCode(aH)
                }
                var bo = Y.colr;
                Y.colr = i.tclr;
                t.PutText(Y, aZ, aZ.length * Y.font.Tfs * .5);
                Y.colr = bo
            } else {
                console.log(x, b4)
            }
            if (c5 != null) {
                var by = 0;
                while (c[by] != null)
                    by++;
                c[by] = c5
            }
            H += b4 - 6
        }
        t.ShowPage();
        t.Done()
    }
    function bf(M, t) {
        var H = V.readShort, i = V.readUshort, a = V.readUint, z = a(M, t), s, aD, ca;
        t += 4;
        if (z == 12)
            throw "e";
        else {
            s = a(M, t);
            t += 4;
            aD = a(M, t);
            t += 4;
            var bC = i(M, t);
            t += 2;
            if (bC != 1)
                throw "e";
            var Y = i(M, t);
            t += 2;
            if (Y != 1 && Y != 24 && Y != 32)
                throw Y + " e";
            var am = a(M, t);
            t += 4;
            if (am != 0)
                throw "e";
            var cr = a(M, t);
            t += 4;
            var aj = a(M, t);
            t += 4;
            var bX = a(M, t);
            t += 4;
            ca = a(M, t);
            t += 4;
            var bJ = a(M, t);
            t += 4
        }
        var bd = s * aD
            , c = new Uint8Array(bd * 4)
            , a9 = Math.floor((s * bC * Y + 31 & ~31) / 8);
        if (Y == 1)
            for (var b4 = 0; b4 < aD; b4++) {
                var aW = t + ca * 4 + (aD - 1 - b4) * a9;
                for (var x = 0; x < s; x++) {
                    var J = b4 * s + x << 2
                        , c5 = M[aW + (x >>> 3)] >>> 7 - (x & 7) & 1;
                    c[J] = M[t + c5 * 4 + 2];
                    c[J + 1] = M[t + c5 * 4 + 1];
                    c[J + 2] = M[t + c5 * 4 + 0];
                    c[J + 3] = 255
                }
            }
        if (Y == 24) {
            for (var b4 = 0; b4 < aD; b4++)
                for (var x = 0; x < s; x++) {
                    var J = b4 * s + x << 2
                        , aB = t + (aD - 1 - b4) * a9 + x * 3;
                    c[J] = M[aB + 2];
                    c[J + 1] = M[aB + 1];
                    c[J + 2] = M[aB + 0];
                    c[J + 3] = 255
                }
        }
        if (Y == 32) {
            for (var b4 = 0; b4 < aD; b4++)
                for (var x = 0; x < s; x++) {
                    var J = b4 * s + x << 2
                        , aB = t + (aD - 1 - b4) * a9 + x * 4;
                    c[J] = M[aB + 2];
                    c[J + 1] = M[aB + 1];
                    c[J + 2] = M[aB + 0];
                    c[J + 3] = M[aB + 3]
                }
        }
        return c
    }
    function aJ(M, t) {
        var H = [1, 0, 0, 1, 0, 0]
            , i = M.lbb
            , a = M.bb;
        UDOC.M.translate(H, -i[0], -i[1]);
        UDOC.M.scale(H, 1 / i[2], 1 / i[3]);
        UDOC.M.scale(H, a[2] - a[0], a[3] - a[1]);
        UDOC.M.translate(H, a[0], a[1]);
        t.ctm = H
    }
    function bG(M, t, H) {
        if (H.fill)
            M.Fill(t, !1);
        if (H.strk && t.lwidth != 0)
            M.Stroke(t, !1);
        UDOC.G.newPath(t)
    }
    function o(M, t, H, i, a) {
        var z = V.readShort;
        for (var s = 0; s < H; s++) {
            var aD = z(M, t);
            t += 2;
            var ca = z(M, t);
            t += 2;
            if (s == 0)
                UDOC.G.moveTo(i, aD, ca);
            else
                UDOC.G.lineTo(i, aD, ca)
        }
        if (a)
            UDOC.G.closePath(i);
        return t
    }
    return {
        Parse: G
    }
}()
    , FromEMF = function () {
        var k = 1
            , S = 2
            , U = 3
            , I = 4
            , e = 5
            , O = 6
            , r = 7
            , u = 8
            , w = 9
            , f = 10
            , K = 11
            , T = 12
            , Z = 13
            , v = 14
            , n = 15
            , N = 16
            , p = 17
            , E = 18
            , h = 19
            , l = 20
            , _ = 21
            , g = 22
            , Q = 23
            , R = 24
            , q = 25
            , X = 26
            , j = 27
            , A = 28
            , bI = 29
            , L = 30
            , an = 31
            , d = 32
            , b = 33
            , P = 34
            , b3 = 35
            , $ = 36
            , bu = 37
            , ah = 38
            , a3 = 39
            , bW = 40
            , W = 41
            , a0 = 42
            , bz = 43
            , bh = 44
            , bK = 45
            , aq = 46
            , av = 47
            , cq = 48
            , aR = 49
            , F = 50
            , az = 51
            , b$ = 52
            , aM = 53
            , be = 54
            , aF = 55
            , bc = 56
            , aU = 57
            , B = 58
            , bj = 59
            , ac = 60
            , bD = 61
            , bb = 62
            , b_ = 63
            , b0 = 64
            , bA = 65
            , bq = 66
            , aC = 67
            , bP = 68
            , bZ = 70
            , bU = 71
            , ae = 72
            , aP = 73
            , aK = 74
            , at = 75
            , cd = 76
            , bF = 77
            , c3 = 78
            , ab = 79
            , aO = 80
            , cv = 81
            , b9 = 82
            , aA = 83
            , C = 84
            , b2 = 85
            , ce = 86
            , bk = 87
            , ct = 88
            , ck = 89
            , a$ = 90
            , bv = 91
            , bH = 92
            , cl = 93
            , ay = 94
            , cj = 95
            , bB = 96
            , cm = 97
            , a4 = 98
            , ai = 99
            , bp = 100
            , b5 = 101
            , cb = 102
            , aG = 103
            , aV = 104
            , aL = 105
            , ci = 106
            , c4 = 108
            , cp = 109
            , ba = 110
            , c2 = 111
            , bg = 112
            , aN = 113
            , cg = 114
            , aE = 115
            , bR = 116
            , cw = 118
            , bm = 119
            , b1 = 120
            , a2 = 121
            , bs = 122
            , c1 = UDOC.B;
        function al(y, cs) {
            y = new Uint8Array(y);
            var aw = 0, m = {
                fill: !1,
                strk: !1,
                bb: [0, 0, 1, 1],
                wbb: [0, 0, 1, 1],
                fnt: {
                    nam: "Arial",
                    hgh: 25,
                    und: !1,
                    orn: 0
                },
                tclr: [0, 0, 0],
                talg: 0
            }, D, V = [], G = [], bf = c1.readShort, aJ = c1.readUshort, bG = c1.readInt, o = c1.readUint, M = c1.readFloat, t = 0;
            while (!0) {
                var H = o(y, aw)
                    , s = null
                    , aD = 0;
                aw += 4;
                var i = H
                    , a = o(y, aw);
                aw += 4;
                var z = aw;
                if (!1) { } else if (i == v) {
                    break
                } else if (i == k) {
                    m.bb = bn(y, z);
                    z += 16;
                    cs.StartPage(m.bb[0], m.bb[1], m.bb[2], m.bb[3]);
                    D = UDOC.getState(m.bb)
                } else if (i == b)
                    G.push(JSON.stringify(D), JSON.stringify(m));
                else if (i == P) {
                    var ca = bG(y, z);
                    z += 4;
                    while (ca < -1) {
                        G.pop();
                        G.pop();
                        ca++
                    }
                    m = JSON.parse(G.pop());
                    D = JSON.parse(G.pop())
                } else if (i == aC) {
                    D.cpth = JSON.parse(JSON.stringify(D.pth))
                } else if ([p, h, E, a4, l, at].indexOf(i) != -1) { } else if (i == B)
                    D.mlimit = o(y, z);
                else if (i == R)
                    m.tclr = [y[z] / 255, y[z + 1] / 255, y[z + 2] / 255];
                else if (i == g)
                    m.talg = o(y, z);
                else if (i == K || i == T) {
                    if (m.vbb == null)
                        m.vbb = [];
                    var bC = i == T ? 0 : 2;
                    m.vbb[bC] = bG(y, z);
                    z += 4;
                    m.vbb[bC + 1] = bG(y, z);
                    z += 4;
                    if (i == K)
                        ax(m, D)
                } else if (i == w || i == f) {
                    var bC = i == f ? 0 : 2;
                    m.wbb[bC] = bG(y, z);
                    z += 4;
                    m.wbb[bC + 1] = bG(y, z);
                    z += 4;
                    if (i == w)
                        ax(m, D)
                } else if (i == bZ) {
                    var Y = o(y, z);
                    z += 4
                } else if (i == bu) {
                    var am = o(y, z);
                    z += 4;
                    if (am == 2147483648) {
                        m.fill = !0;
                        D.colr = [1, 1, 1]
                    } else if (am == 2147483653) {
                        m.fill = !1
                    } else if (am == 2147483655) {
                        m.strk = !0;
                        m.lwidth = 1;
                        D.COLR = [0, 0, 0]
                    } else if (am == 2147483656) {
                        m.strk = !1
                    } else if (am == 2147483661) { } else if (am == 2147483662) { } else {
                        var cr = V[am];
                        if (cr.t == "b") {
                            m.fill = cr.stl != 1;
                            if (cr.stl == 0) { } else if (cr.stl == 1) { } else
                                throw cr.stl + " e";
                            D.colr = cr.clr
                        } else if (cr.t == "p") {
                            m.strk = cr.stl != 5;
                            D.lwidth = cr.wid;
                            D.COLR = cr.clr
                        } else if (cr.t == "f") {
                            m.fnt = cr;
                            D.font.Tf = cr.nam;
                            D.font.Tfs = Math.abs(cr.hgh);
                            D.font.Tun = cr.und
                        } else
                            throw "e"
                    }
                } else if (i == bW) {
                    var am = o(y, z);
                    z += 4;
                    if (V[am] != null)
                        V[am] = null;
                    else
                        throw "e"
                } else if (i == a3) {
                    aD = o(y, z);
                    z += 4;
                    s = {
                        t: "b"
                    };
                    s.stl = o(y, z);
                    z += 4;
                    s.clr = [y[z] / 255, y[z + 1] / 255, y[z + 2] / 255];
                    z += 4;
                    s.htc = o(y, z);
                    z += 4
                } else if (i == ah || i == cj) {
                    aD = o(y, z);
                    z += 4;
                    s = {
                        t: "p"
                    };
                    if (i == cj) {
                        z += 16;
                        s.stl = o(y, z);
                        z += 4;
                        s.wid = o(y, z);
                        z += 4;
                        z += 4
                    } else {
                        s.stl = o(y, z);
                        z += 4;
                        s.wid = o(y, z);
                        z += 4;
                        z += 4
                    }
                    s.clr = [y[z] / 255, y[z + 1] / 255, y[z + 2] / 255];
                    z += 4
                } else if (i == b9) {
                    aD = o(y, z);
                    z += 4;
                    s = {
                        t: "f",
                        nam: ""
                    };
                    s.hgh = bG(y, z);
                    z += 4;
                    z += 4 * 2;
                    s.orn = bG(y, z) / 10;
                    z += 4;
                    var aj = o(y, z);
                    z += 4;
                    s.und = y[z + 1];
                    s.stk = y[z + 2];
                    z += 4 * 2;
                    while (aJ(y, z) != 0) {
                        s.nam += String.fromCharCode(aJ(y, z));
                        z += 2
                    }
                    if (aj > 500)
                        s.nam += "-Bold"
                } else if (i == C) {
                    z += 16;
                    var bX = o(y, z)
                        , c7 = "";
                    z += 4;
                    var bJ = M(y, z);
                    z += 4;
                    var bd = M(y, z);
                    z += 4;
                    var c = bG(y, z);
                    z += 4;
                    var a9 = bG(y, z);
                    z += 4;
                    var b4 = D.ctm.slice(0);
                    if (bX == 1)
                        D.ctm = [1, 0, 0, 1, 0, 0];
                    D.font.Tm = [1, 0, 0, -1, 0, 0];
                    UDOC.M.rotate(D.font.Tm, m.fnt.orn * Math.PI / 180);
                    UDOC.M.translate(D.font.Tm, c, a9);
                    var aW = m.talg;
                    if ((aW & 6) == 6)
                        D.font.Tal = 2;
                    else if ((aW & 7) == 0)
                        D.font.Tal = 0;
                    else
                        throw aW + " e";
                    if ((aW & 24) == 24) { } else if ((aW & 24) == 0)
                        UDOC.M.translate(D.font.Tm, 0, D.font.Tfs);
                    else
                        console.log("unknown alignment", aW);
                    var x = o(y, z);
                    z += 4;
                    var J = o(y, z);
                    z += 4;
                    var c5 = o(y, z);
                    z += 4;
                    z += 16;
                    var aB = o(y, z);
                    z += 4;
                    J += aw - 8;
                    for (var b7 = 0; b7 < x; b7++) {
                        var bY = aJ(y, J + b7 * 2);
                        c7 += String.fromCharCode(bY)
                    }
                    var bl = D.colr;
                    D.colr = m.tclr;
                    cs.PutText(D, c7, c7.length * D.font.Tfs * .5);
                    D.colr = bl;
                    D.ctm = b4
                } else if (i == bj) {
                    UDOC.G.newPath(D)
                } else if (i == ac) { } else if (i == bD)
                    UDOC.G.closePath(D);
                else if (i == j) {
                    UDOC.G.moveTo(D, bG(y, z), bG(y, z + 4))
                } else if (i == be) {
                    if (D.pth.cmds.length == 0) {
                        var c0 = D.ctm.slice(0);
                        UDOC.M.invert(c0);
                        var a_ = UDOC.M.multPoint(c0, D.cpos);
                        UDOC.G.moveTo(D, a_[0], a_[1])
                    }
                    UDOC.G.lineTo(D, bG(y, z), bG(y, z + 4))
                } else if (i == U || i == ce || i == I || i == bk || i == O || i == ck) {
                    z += 16;
                    var b8 = i == U || i == ce
                        , a8 = i == O || i == ck
                        , a6 = o(y, z);
                    z += 4;
                    if (!a8)
                        UDOC.G.newPath(D);
                    z = cf(y, z, a6, D, i == ce || i == bk || i == ck ? 2 : 4, b8, a8);
                    if (!a8)
                        af(cs, D, m, b8)
                } else if (i == bv) {
                    z += 16;
                    var b8 = !0
                        , a8 = !1
                        , ak = o(y, z);
                    z += 4;
                    z += 4;
                    var bV = z;
                    z += ak * 4;
                    if (!a8)
                        UDOC.G.newPath(D);
                    for (var b7 = 0; b7 < ak; b7++) {
                        var a1 = aJ(y, bV + b7 * 4);
                        z = cf(y, z, a1, D, 2, b8, a8)
                    }
                    if (!a8)
                        af(cs, D, m, b8)
                } else if (i == S || i == b2 || i == e || i == ct) {
                    z += 16;
                    var aS = i == b2 || i == ct
                        , ap = aS ? bf : bG
                        , a7 = aS ? 2 : 4
                        , a6 = o(y, z);
                    z += 4;
                    if (!(i == e || i == ct)) {
                        UDOC.G.moveTo(D, ap(y, z), ap(y, z + a7));
                        z += 2 * a7;
                        a6--
                    }
                    while (a6 > 0) {
                        UDOC.G.curveTo(D, ap(y, z), ap(y, z + a7), ap(y, z + 2 * a7), ap(y, z + 3 * a7), ap(y, z + 4 * a7), ap(y, z + 5 * a7));
                        z += 6 * a7;
                        a6 -= 3
                    }
                } else if (i == bz || i == a0) {
                    UDOC.G.newPath(D);
                    var aY = bn(y, z);
                    if (i == bz) {
                        UDOC.G.drawRect(D, aY[0], aY[1], aY[2] - aY[0], aY[3] - aY[1])
                    } else {
                        var cc = (aY[0] + aY[2]) / 2
                            , bM = (aY[1] + aY[3]) / 2;
                        UDOC.G.arc(D, cc, bM, (aY[2] - aY[0]) / 2, 0, 2 * Math.PI, !1)
                    }
                    UDOC.G.closePath(D);
                    af(cs, D, m, !0)
                } else if (i == bb)
                    cs.Fill(D, !1);
                else if (i == b0)
                    cs.Stroke(D);
                else if (i == b_) {
                    cs.Fill(D, !1);
                    cs.Stroke(D)
                } else if (i == b3 || i == $) {
                    var bw = [];
                    for (var b7 = 0; b7 < 6; b7++)
                        bw.push(M(y, z + b7 * 4));
                    z += 24;
                    if (i == b3)
                        D.ctm = bw;
                    else {
                        var bX = o(y, z);
                        z += 4;
                        if (bX == 2) {
                            var br = D.ctm;
                            D.ctm = bw;
                            UDOC.M.concat(D.ctm, br)
                        } else if (bX == 4)
                            D.ctm = bw;
                        else
                            throw bX
                    }
                } else if (i == _) {
                    var bx = o(y, z);
                    z += 4
                } else if (i == cv) {
                    var aY = bn(y, z);
                    z += 16;
                    var bi = bG(y, z);
                    z += 4;
                    var a5 = bG(y, z);
                    z += 4;
                    var bQ = bG(y, z);
                    z += 4;
                    var ar = bG(y, z);
                    z += 4;
                    var ag = bG(y, z);
                    z += 4;
                    var c6 = bG(y, z);
                    z += 4;
                    var aT = o(y, z) + aw - 8;
                    z += 4;
                    var aI = o(y, z);
                    z += 4;
                    var c9 = o(y, z) + aw - 8;
                    z += 4;
                    var aa = o(y, z);
                    z += 4;
                    var aX = o(y, z);
                    z += 4;
                    if (aX != 0)
                        throw "e";
                    var ao = o(y, z);
                    z += 4;
                    var aQ = bG(y, z);
                    z += 4;
                    var aZ = bG(y, z);
                    z += 4;
                    var aH = o(y, aT);
                    aT += 4;
                    var bo = o(y, aT);
                    aT += 4;
                    var by = o(y, aT);
                    aT += 4;
                    if (bo != ag || by != c6)
                        throw "e";
                    var as = aJ(y, aT);
                    aT += 2;
                    var ad = aJ(y, aT);
                    aT += 2;
                    if (ad != 1 && ad != 4 && ad != 8 && ad != 24 && ad != 32)
                        throw ad + " e";
                    var b6 = o(y, aT);
                    aT += 4;
                    if (b6 != 0)
                        throw b6 + " e";
                    var bT = o(y, aT);
                    aT += 4;
                    var c8 = o(y, aT);
                    aT += 4;
                    var bE = o(y, aT);
                    aT += 4;
                    var bL = o(y, aT);
                    aT += 4;
                    var ch = o(y, aT);
                    aT += 4;
                    var cn = Math.floor((bo * as * ad + 31 & ~31) / 8)
                        , bt = new Uint8Array(bo * by * 4);
                    if (ad == 8) {
                        for (var bM = 0; bM < by; bM++)
                            for (var cc = 0; cc < bo; cc++) {
                                var bS = bM * bo + cc << 2
                                    , am = y[c9 + (by - 1 - bM) * cn + cc] << 2;
                                bt[bS] = y[aT + am + 2];
                                bt[bS + 1] = y[aT + am + 1];
                                bt[bS + 2] = y[aT + am + 0];
                                bt[bS + 3] = 255
                            }
                    } else if (ad == 24) {
                        for (var bM = 0; bM < by; bM++)
                            for (var cc = 0; cc < bo; cc++) {
                                var bS = bM * bo + cc << 2
                                    , bO = c9 + (by - 1 - bM) * cn + cc * 3;
                                bt[bS] = y[bO + 2];
                                bt[bS + 1] = y[bO + 1];
                                bt[bS + 2] = y[bO + 0];
                                bt[bS + 3] = 255
                            }
                    } else if (ad == 32) {
                        for (var bM = 0; bM < by; bM++)
                            for (var cc = 0; cc < bo; cc++) {
                                var bS = bM * bo + cc << 2
                                    , bO = c9 + (by - 1 - bM) * cn + cc * 4;
                                bt[bS] = y[bO + 2];
                                bt[bS + 1] = y[bO + 1];
                                bt[bS + 2] = y[bO + 0];
                                bt[bS + 3] = y[bO + 3]
                            }
                    } else
                        console.log("unsupported bit depth", ad, bo, by);
                    var au = D.ctm.slice(0);
                    D.ctm = [1, 0, 0, 1, 0, 0];
                    UDOC.M.scale(D.ctm, aQ, -aZ);
                    UDOC.M.translate(D.ctm, bi, a5 + aZ);
                    UDOC.M.concat(D.ctm, au);
                    cs.PutImage(D, bt, bo, by);
                    D.ctm = au
                } else {
                    console.log(i, a)
                }
                if (s != null)
                    V[aD] = s;
                aw += a - 8
            }
            cs.ShowPage();
            cs.Done()
        }
        function bn(y, cs) {
            var aw = [];
            for (var m = 0; m < 4; m++)
                aw[m] = c1.readInt(y, cs + m * 4);
            return aw
        }
        function ax(y, cs) {
            var aw = [1, 0, 0, 1, 0, 0]
                , m = y.wbb
                , D = y.bb
                , V = y.vbb && y.vbb.length == 4 ? y.vbb : y.bb;
            UDOC.M.translate(aw, -m[0], -m[1]);
            UDOC.M.scale(aw, 1 / m[2], 1 / m[3]);
            UDOC.M.scale(aw, V[2], V[3]);
            cs.ctm = aw
        }
        function af(y, cs, aw, m) {
            if (aw.fill && m)
                y.Fill(cs, !1);
            if (aw.strk && cs.lwidth != 0)
                y.Stroke(cs)
        }
        function cf(y, cs, aw, m, D, V, G) {
            var bf = D == 2 ? c1.readShort : c1.readInt;
            for (var aJ = 0; aJ < aw; aJ++) {
                var bG = bf(y, cs);
                cs += D;
                var o = bf(y, cs);
                cs += D;
                if (aJ == 0 && !G)
                    UDOC.G.moveTo(m, bG, o);
                else
                    UDOC.G.lineTo(m, bG, o)
            }
            if (V)
                UDOC.G.closePath(m);
            return cs
        }
        return {
            Parse: al
        }
    }()
    , FromDXF = function () {
        var k = function () {
            this.bb = [1e9, 1e9, -1e9, -1e9]
        };
        k.prototype = {
            StartPage: function () { },
            PutText: function () { },
            PutImage: function () { },
            Stroke: function (u) {
                this.checkPath(u.pth.crds)
            },
            Fill: function (u) {
                this.checkPath(u.pth.crds)
            },
            PutText: function (u, w, f, K) {
                var T = [0, 0, f * u.font.Tfs, 0, 0, -u.font.Tfs, 0, u.font.Tfs];
                if (K) {
                    T[2] = K[0];
                    T[5] = -K[1]
                }
                UDOC.M.multArray(u.ctm, T);
                UDOC.M.multArray(u.font.Tm, T);
                this.checkPath(T)
            },
            checkPath: function (u) {
                var w = this.bb;
                for (var f = 0; f < u.length; f += 2) {
                    var K = u[f]
                        , T = u[f + 1];
                    w[0] = Math.min(w[0], K);
                    w[1] = Math.min(w[1], T);
                    w[2] = Math.max(w[2], K);
                    w[3] = Math.max(w[3], T)
                }
            },
            ShowPage: function () { },
            Done: function () { }
        };
        function S(u, w) {
            u = new Uint8Array(u);
            var f = 0
                , K = new TextDecoder().decode(u)
                , T = K.split("\n")
                , N = 2e3
                , p = 100;
            for (var Z = 0; Z < T.length; Z++)
                T[Z] = T[Z].trim();
            while (T[T.length - 1] == "")
                T.pop();
            var v = new k;
            U(T, v);
            var n = v.bb
                , E = (N - p * 2) / (n[2] - n[0])
                , h = Math.round((n[3] - n[1]) * E + p * 2)
                , l = [0, 0, N, h]
                , _ = UDOC.getState(l);
            _.lwidth = 1 / E;
            _.ctm = [E, 0, 0, -E, p - n[0] * E, -p + n[1] * E + h];
            U(T, w, _, l)
        }
        function U(u, w, f, K) {
            if (f == null) {
                K = [0, 0, 1e3, 1e3];
                f = UDOC.getState(K)
            }
            w.StartPage(K[0], K[1], K[2], K[3]);
            var T = {
                tabs: {
                    LTYPE: {}
                },
                blocks: {}
            };
            e(u, w, f, T, 0, u.length);
            w.ShowPage();
            w.Done()
        }
        function I(u, w) {
            if (u.startsWith("%%u")) {
                u = u.slice(3);
                w.font.Tun = 1
            }
            u = u.split("\\P").join("\n");
            u = u.split("%%d").join("'");
            u = u.split("{").join("");
            u = u.split("}").join("");
            while (!0) {
                var f = u.indexOf("\\U+");
                if (f == -1)
                    break;
                u = u.slice(0, f) + String.fromCharCode(parseInt(u.slice(f + 3, f + 7), 16)) + u.slice(f + 7)
            }
            while (!0) {
                var f = u.indexOf("\\")
                    , K = u.indexOf(";");
                if (f == -1 || K == -1)
                    break;
                var T = u.slice(f + 1, K);
                if (T.startsWith("pi"))
                    T = " ".repeat(.5 * parseFloat(T.slice(2)));
                else
                    T = "";
                u = u.slice(0, f) + T + u.slice(K + 1)
            }
            return u
        }
        function e(u, w, f, K, T, Z, v) {
            var n, N, p;
            while (T < Z) {
                var E = parseInt(u[T++])
                    , h = u[T++]
                    , l = [10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 62, 70, 71, 72, 73, 74, 90, 370].indexOf(E) != -1
                    , _ = n == "LWPOLYLINE" && (E == 10 || E == 20 || E == 30) || n == "LTYPE" && E == 49 || n == "SPLINE" && (E == 10 || E == 20 || E == 30 || E == 40) || n == "OLE2FRAME" && E == 310;
                if (l)
                    h = parseFloat(h);
                if (E == 999) { } else if (h == "SECTION")
                    v = -1;
                else if (h == "ENDSEC") { } else if (v == -1)
                    v = h;
                else if (h == "EOF") { } else if (v == "HEADER") { } else if (v == "CLASSES") { } else if (v == "TABLES" || v == "BLOCKS") {
                    if (E == 0) {
                        n = h;
                        N = {};
                        continue
                    }
                    if (_) {
                        if (N[E] == null)
                            N[E] = [];
                        N[E].push(h)
                    } else {
                        N[E] = h
                    }
                    if (u[T] != "0")
                        continue;
                    if (n == "LTYPE") {
                        if (K.tabs[n][N[2]] != null)
                            throw "e";
                        K.tabs[n][N[2]] = N
                    } else if (n == "BLOCK") {
                        p = K.blocks[N[2]] = [T]
                    } else if (n == "ENDBLK") {
                        p[1] = T - 2;
                        p = null
                    }
                } else if (v == "ENTITIES") {
                    if (E == 0) {
                        n = h;
                        N = {}
                    } else {
                        if (_) {
                            if (N[E] == null)
                                N[E] = [];
                            N[E].push(h)
                        } else {
                            N[E] = h
                        }
                    }
                    if (u[T] != "0")
                        continue;
                    if (p == null) {
                        f.colr = [0, 0, 0];
                        f.ca = 1;
                        f.COLR = [0, 0, 0];
                        f.dash = [];
                        if (N[62] != null && N[62] != 256) {
                            var g = {
                                c0: [0, 0, 0],
                                c1: [1, 0, 0],
                                c2: [1, 1, 0],
                                c4: [0, 1, 1],
                                c5: [0, 0, 1],
                                c7: [0, 0, 0],
                                c8: [0, 0, 0],
                                c242: [.64, 0, .16],
                                c250: [0, 0, 0]
                            }["c" + N[62]];
                            if (g)
                                f.COLR = g;
                            else {
                                f.COLR = [0, 1, 0];
                                console.log(n + " " + N[62])
                            }
                        }
                        if (N[6] != null) {
                            var Q = K.tabs.LTYPE[N[6]];
                            if (Q[49] != null) {
                                var R = Q[49].slice(0);
                                for (var q = 0; q < R.length; q++)
                                    R[q] = Math.abs(R[q]) * (N[48] ? N[48] : 1);
                                f.dash = R
                            }
                        }
                        if (N[8] == "H")
                            f.dash = [.1, .02];
                        UDOC.G.newPath(f)
                    }
                    var X = -1 / 3.17;
                    if (n == "LINE") {
                        var j = (N[30] ? N[30] : 0) * X
                            , A = (N[31] ? N[31] : 0) * X;
                        UDOC.G.moveTo(f, N[10] + j, N[20] - j);
                        UDOC.G.lineTo(f, N[11] + A, N[21] - A);
                        w.Stroke(f, !1)
                    } else if (n == "POLYLINE") {
                        p = [N, []]
                    } else if (n == "VERTEX") {
                        p[1].push(N)
                    } else if (n == "SEQEND") {
                        if (p == null)
                            continue;
                        var bI = p[0]
                            , L = p[1]
                            , an = L.length
                            , d = bI[70] == 1 ? an + 1 : an;
                        UDOC.G.moveTo(f, L[0][10], L[0][20]);
                        for (var q = 1; q < d; q++) {
                            var b = L[q % an][10]
                                , P = L[q % an][20]
                                , b3 = L[q - 1][42];
                            if (b3 == null)
                                b3 = 0;
                            if (b3 == 0)
                                UDOC.G.lineTo(f, b, P);
                            else {
                                var $ = L[q - 1]
                                    , bu = $[10]
                                    , ah = $[20]
                                    , a3 = b - bu
                                    , W = P - ah
                                    , a0 = -b3 * Math.PI / 2
                                    , bz = .42
                                    , bh = Math.sin(a0)
                                    , bK = Math.cos(a0)
                                    , aq = bK * a3 - bh * W
                                    , av = bh * a3 + bK * W
                                    , cq = bK * a3 + bh * W
                                    , aR = -bh * a3 + bK * W;
                                UDOC.G.curveTo(f, bu + bz * aq, ah + bz * av, b - bz * cq, P - bz * aR, b, P)
                            }
                        }
                        w.Stroke(f, !1);
                        p = null
                    } else if (n == "OLE2FRAME") {
                        var F = 57
                            , az = 295
                            , b$ = N[310].join("")
                            , aM = az * F
                            , be = new Uint8Array(b$.length >>> 1);
                        for (var q = 0; q < be.length; q++)
                            be[q] = parseInt(b$.slice(q * 2, q * 2 + 2), 16);
                        var aF = new Float64Array(be.slice(2, 2 + 12 * 8).buffer)
                            , bc = new Uint8Array(aM * 4);
                        new Uint32Array(bc.buffer).fill(4281563135);
                        var aU = f.ctm
                            , B = [1, 0, 0, 1, 0, 0]
                            , bj = N[11] - N[10]
                            , ac = N[21] - N[20];
                        UDOC.M.scale(B, bj, ac);
                        UDOC.M.translate(B, N[10], N[20]);
                        UDOC.M.concat(B, f.ctm);
                        f.ctm = B;
                        w.PutImage(f, bc, az, F);
                        f.ctm = aU
                    } else if (n == "INSERT") {
                        var bD = K.blocks[N[2]]
                            , bb = f.ctm.slice(0)
                            , B = [1, 0, 0, 1, 0, 0];
                        if (N[50] != null)
                            UDOC.M.rotate(B, N[50] * Math.PI / 180);
                        if (N[41] != null)
                            UDOC.M.scale(B, N[41], N[42]);
                        UDOC.M.translate(B, N[10], N[20]);
                        UDOC.M.concat(B, f.ctm);
                        f.ctm = B;
                        e(u, w, f, K, bD[0], bD[1], v);
                        f.ctm = bb
                    } else if (n == "--VIEWPORT") {
                        console.log(N);
                        f.COLR = [1, 0, 0];
                        UDOC.G.moveTo(f, N[10], N[20]);
                        UDOC.G.lineTo(f, N[10] + 5, N[20] + 5);
                        w.Stroke(f, !1)
                    } else if (n == "--DIMENSION") {
                        var b_ = N[70] & 7;
                        if (b_ == 0) {
                            console.log(N);
                            f.COLR = [0, .3, .6];
                            var a3 = 0
                                , W = 0;
                            UDOC.G.moveTo(f, N[13] + a3, N[23] + W);
                            UDOC.G.lineTo(f, N[14] + a3, N[24] + W);
                            w.Stroke(f, !1)
                        }
                    } else if (n == "3DFACE" || n == "SOLID") {
                        var j = N[30] * X
                            , A = N[31] * X
                            , b0 = N[32] * X
                            , bA = N[33] * X;
                        UDOC.G.moveTo(f, N[10] + j, N[20] - j);
                        UDOC.G.lineTo(f, N[11] + A, N[21] - A);
                        UDOC.G.lineTo(f, N[12] + b0, N[22] - b0);
                        UDOC.G.lineTo(f, N[13] + bA, N[23] - bA);
                        UDOC.G.closePath(f);
                        if (n == "3DFACE") {
                            f.colr = [Math.random(), Math.random(), Math.random()];
                            f.ca = .5
                        }
                        w.Fill(f, !1)
                    } else if (n == "LWPOLYLINE") {
                        for (var q = 0; q < N[90]; q++) {
                            var bq = q == 0 ? UDOC.G.moveTo : UDOC.G.lineTo;
                            bq(f, N[10][q], N[20][q])
                        }
                        if (N[70] == 1)
                            UDOC.G.closePath(f);
                        w.Stroke(f, !1)
                    } else if (n == "CIRCLE") {
                        UDOC.G.arc(f, N[10], N[20], N[40], 0, Math.PI * 2);
                        w.Stroke(f, !1)
                    } else if (n == "ELLIPSE") {
                        var aC = f.ctm.slice(0)
                            , bP = N[10]
                            , bZ = N[20]
                            , a3 = N[11]
                            , W = N[21]
                            , bU = Math.sqrt(a3 * a3 + W * W)
                            , B = [1, 0, 0, 1, 0, 0];
                        UDOC.M.scale(B, 1, N[40]);
                        UDOC.M.rotate(B, -Math.atan2(W, a3));
                        UDOC.M.translate(B, bP, bZ);
                        UDOC.M.concat(B, f.ctm);
                        f.ctm = B;
                        UDOC.G.arc(f, 0, 0, bU, N[41], N[42]);
                        w.Stroke(f, !1);
                        f.ctm = aC
                    } else if (n == "ARC") {
                        UDOC.G.arc(f, N[10], N[20], N[40], N[50] * Math.PI / 180, N[51] * Math.PI / 180);
                        w.Stroke(f, !1)
                    } else if (n == "SPLINE") {
                        var ae = N[10]
                            , aP = N[20]
                            , aK = N[40].slice(0)
                            , at = ae.length - 1;
                        UDOC.G.moveTo(f, ae[0], aP[0]);
                        if (N[71] == 3 && N[73] == 4) {
                            UDOC.G.curveTo(f, ae[1], aP[1], ae[2], aP[2], ae[3], aP[3])
                        } else {
                            var cd = -1e6
                                , bF = 1e6;
                            for (var q = 0; q < aK.length; q++) {
                                var c3 = aK[q];
                                if (c3 < bF)
                                    bF = c3;
                                if (c3 > cd)
                                    cd = c3
                            }
                            for (var q = 0; q < aK.length; q++) {
                                aK[q] = (aK[q] - bF) / (cd - bF)
                            }
                            var an = ae.length * 10;
                            for (var ab = 1; ab < an; ab++) {
                                var aO = ab / an
                                    , cv = O(ae, aP, N[71], aK, aO);
                                UDOC.G.lineTo(f, cv[0], cv[1])
                            }
                            UDOC.G.lineTo(f, ae[ae.length - 1], aP[aP.length - 1])
                        }
                        if (N[70] & 1)
                            UDOC.G.closePath(f);
                        w.Stroke(f, !1)
                    } else if (n == "--ATTDEF" || n == "ATTRIB" || n == "TEXT" || n == "MTEXT") {
                        f.font.Tun = 0;
                        f.font.Tal = 0;
                        f.font.Tm = [1, 0, 0, 1, 0, 0];
                        if (N[50])
                            UDOC.M.rotate(f.font.Tm, -N[50] * Math.PI / 180);
                        UDOC.M.translate(f.font.Tm, N[10], N[20]);
                        f.font.Tfs = N[40];
                        var b$ = N[n == "ATTDEF" ? 3 : 1]
                            , aA = null;
                        b$ = I(b$, f);
                        var b9 = N[71] == null ? 0 : (N[71] - 1) % 3;
                        f.font.Tal = [0, 2, 1][b9];
                        if (n == "MTEXT" && N[41] != null && N[41] != 0) {
                            var C = b$.length * f.font.Tfs / N[41];
                            C = Math.max(C, b$.split("\n").length);
                            aA = [N[41], C * f.font.Tfs * 1.5];
                            if (b9 == 0) { } else if (b9 == 2) {
                                UDOC.M.translate(f.font.Tm, -N[41], 0)
                            } else if (b9 == 1) {
                                UDOC.M.translate(f.font.Tm, -N[41] / 2, 0)
                            } else
                                console.log("unknown align", N)
                        } else if (n == "MTEXT" && N[71] != null) {
                            if (N[71] <= 3)
                                UDOC.M.translate(f.font.Tm, 0, -f.font.Tfs * .8);
                            else if (N[71] <= 6)
                                UDOC.M.translate(f.font.Tm, 0, -f.font.Tfs * .4)
                        }
                        w.PutText(f, b$, b$.length * .5, aA)
                    } else
                        console.log("unknown command", n)
                } else if (v == "OBJECTS") { } else if (v == "ACDSDATA") { } else {
                    console.log(v, E, h);
                    throw v
                }
            }
        }
        function O(u, w, f, K, T) {
            var Z = 0
                , v = 0;
            for (var n = 0; n < u.length; n++) {
                var N = r(n, f, K, T);
                Z += u[n] * N;
                v += w[n] * N
            }
            return [Z, v]
        }
        function r(u, f, K, T) {
            var Z = new Float64Array(f + 1), v, n, p = K.Length - 1;
            if (u == 0 && T == K[0] || u == p - f - 1 && T == K[p])
                return 1;
            if (T < K[u] || T >= K[u + f + 1])
                return 0;
            for (var E = 0; E <= f; E++) {
                if (T >= K[u + E] && T < K[u + E + 1])
                    Z[E] = 1;
                else
                    Z[E] = 0
            }
            for (var h = 1; h <= f; h++) {
                if (Z[0] == 0)
                    v = 0;
                else
                    v = (T - K[u]) * Z[0] / (K[u + h] - K[u]);
                for (var E = 0; E < f - h + 1; E++) {
                    var l = K[u + E + 1]
                        , g = K[u + E + h + 1];
                    if (Z[E + 1] == 0) {
                        Z[E] = v;
                        v = 0
                    } else {
                        n = Z[E + 1] / (g - l);
                        Z[E] = v + (g - T) * n;
                        v = (T - l) * n
                    }
                }
            }
            return Z[0]
        }
        return {
            Parse: S
        }
    }()
    , ToPDF = function () {
        function k() {
            this._res = {
                "/Font": {},
                "/XObject": {},
                "/ExtGState": {},
                "/Pattern": {}
            };
            this._xr = [null, {
                "/Type": "/Catalog",
                "/Pages": {
                    typ: "ref",
                    ind: 2
                }
            }, {
                    "/Type": "/Pages",
                    "/Kids": [],
                    "/Count": 0
                }, this._res];
            this._bnds = [];
            this._cont = "";
            this._gst = S()
        }
        function S() {
            return {
                colr: "[0,0,0]",
                COLR: "[0,0,0]",
                lcap: "0",
                ljoin: "0",
                lwidth: "1",
                mlimit: "10",
                dash: "[]",
                doff: "0",
                bmode: "/Normal",
                CA: "1",
                ca: "1"
            }
        }
        k.prototype.StartPage = function (E, h, l, _) {
            this._bnds = [E, h, l, _]
        }
            ;
        k.prototype.Stroke = function (E) {
            if (E.CA == 0)
                return;
            this.setGState(E, !0);
            this._cont += " S\n"
        }
            ;
        k.prototype.Fill = function (E, h) {
            if (E.ca == 0)
                return;
            this.setGState(E, !0);
            this._cont += " f\n"
        }
            ;
        function U(E) {
            return "" + parseFloat(E.toFixed(2))
        }
        function I(E) {
            return "" + parseFloat(E.toFixed(3))
        }
        function e(E) {
            return Math.sqrt(Math.abs(E[0] * E[3] - E[1] * E[2]))
        }
        function O(E) {
            var h = E.map(U).join(" ");
            if (h == "1 0 0 1 0 0")
                return "";
            return h + " cm "
        }
        function r(E, h) {
            if (E.length != h.length)
                return !1;
            for (var l = 0; l < E.length; l++)
                if (E[l] != h[l])
                    return !1;
            return !0
        }
        function u(E) {
            var h = [[255, 216, 255], [0, 0, 0, 12, 106, 80, 32, 32], [0, 0, 0, 0, 48, 0, 1, 0]]
                , l = ["/DCTDecode", "/JPXDecode", "/JBIG2Decode"];
            for (var _ = 0; _ < h.length; _++) {
                var g = h[_]
                    , Q = !0;
                for (var R = 0; R < g.length; R++)
                    Q = Q && E[R] == g[R];
                if (Q)
                    return l[_]
            }
        }
        k.prototype.setGState = function (E, h) {
            var l = this._gst
                , _ = {};
            for (var g in E)
                _[g] = typeof E[g] == "string" ? E[g] : JSON.stringify(E[g]);
            var Q = e(E.ctm)
                , R = E.dash.slice(0);
            for (var q = 0; q < R.length; q++)
                R[q] = U(R[q] * Q);
            var X = this._cont;
            if (l.lcap != _.lcap)
                X += E.lcap + " J ";
            if (l.ljoin != _.ljoin)
                X += E.ljoin + " j ";
            if (l.lwidth != _.lwidth)
                X += U(E.lwidth * Q) + " w ";
            if (l.mlimit != _.mlimit)
                X += U(E.mlimit) + " M ";
            if (l.dash != _.dash || l.doff != _.doff)
                X += "[" + R.join(" ") + "] " + E.doff + " d ";
            if (l.COLR != _.COLR)
                X += E.COLR.map(I).join(" ") + " RG ";
            if (l.colr != _.colr) {
                if (E.colr.length != null)
                    X += E.colr.map(I).join(" ") + " rg \n";
                else {
                    var j = this._res["/Pattern"]
                        , A = E.colr
                        , bI = "/P" + (Z(j) + 1)
                        , L = {
                            "/ShadingType": A.typ == "lin" ? 2 : 3,
                            "/ColorSpace": "/DeviceRGB",
                            "/Extend": [!0, !0],
                            "/Function": f(A.grad),
                            "/Coords": A.crds
                        };
                    j[bI] = {
                        "/Type": "/Pattern",
                        "/PatternType": 2,
                        "/Matrix": A.mat,
                        "/Shading": L
                    };
                    X += "/Pattern cs " + bI + " scn "
                }
            }
            var an = this._res["/ExtGState"];
            if (l.bmode != _.bmode) {
                var d = _.bmode;
                if (an[d] == null)
                    an[d] = {
                        "/Type": "/ExtGState",
                        "/BM": E.bmode
                    };
                X += d + " gs "
            }
            if (l.CA != _.CA) {
                var d = "/Alpha" + Math.round(255 * _.CA);
                if (an[d] == null)
                    an[d] = {
                        "/Type": "/ExtGState",
                        "/CA": E.CA
                    };
                X += d + " gs "
            }
            if (l.ca != _.ca) {
                var d = "/alpha" + Math.round(255 * _.ca);
                if (an[d] == null)
                    an[d] = {
                        "/Type": "/ExtGState",
                        "/ca": E.ca
                    };
                X += d + " gs "
            }
            if (h)
                X += w(E.pth);
            this._cont = X;
            this._gst = _
        }
            ;
        function w(E) {
            var h = 0
                , l = ""
                , _ = U;
            for (var g = 0; g < E.cmds.length; g++) {
                var Q = E.cmds[g];
                if (Q == "M") {
                    for (var R = 0; R < 2; R++)
                        l += _(E.crds[h++]) + " ";
                    l += "m "
                } else if (Q == "L") {
                    for (var R = 0; R < 2; R++)
                        l += _(E.crds[h++]) + " ";
                    l += "l "
                } else if (Q == "C") {
                    for (var R = 0; R < 6; R++)
                        l += _(E.crds[h++]) + " ";
                    l += "c "
                } else if (Q == "Z") {
                    l += "h "
                } else
                    throw Q
            }
            return l
        }
        function f(E) {
            var h = []
                , l = []
                , _ = [0, 1]
                , g = K;
            if (E.length == 2)
                return g(E[0][1], E[1][1]);
            l.push(g(E[0][1], E[1][1]));
            for (var Q = 1; Q < E.length - 1; Q++) {
                h.push(E[Q][0]);
                l.push(g(E[Q][1], E[Q + 1][1]));
                _.push(0, 1)
            }
            return {
                "/FunctionType": 3,
                "/Encode": _,
                "/Domain": [0, 1],
                "/Bounds": h,
                "/Functions": l
            }
        }
        function K(E, h) {
            return {
                "/FunctionType": 2,
                "/C0": E,
                "/C1": h,
                "/Domain": [0, 1],
                "/N": 1
            }
        }
        k.prototype.PutText = function (E, h, l, _) {
            this.setGState(E, !1);
            var g = this.addFont(E.font.Tf, _);
            this._cont += "q ";
            this._cont += O(E.ctm);
            this._cont += O(E.font.Tm);
            this._cont += "BT  " + g + " " + U(E.font.Tfs) + " Tf  0 0 Td  (";
            var Q = [];
            if (_ == null) {
                var R = [128, 8364, 130, 8218, 131, 402, 132, 8222, 133, 8230, 134, 8224, 135, 8225, 136, 710, 137, 8240, 138, 352, 139, 8249, 140, 338, 142, 381, 145, 8216, 146, 8217, 147, 8220, 148, 8221, 149, 8226, 150, 8211, 151, 8212, 152, 732, 153, 8482, 154, 353, 155, 8250, 156, 339, 158, 382, 159, 376];
                for (var q = 0; q < h.length; q++) {
                    var X = h.charCodeAt(q);
                    if (X > 255) {
                        var j = R.indexOf(X);
                        Q.push(j == -1 ? 32 : R[j - 1])
                    } else
                        Q.push(X)
                }
            } else {
                for (var q = 0; q < h.length; q++) {
                    var X = h.charCodeAt(q);
                    Q.push(X & 255)
                }
            }
            Q = FromPS.makeString(Q);
            for (var q = 0; q < Q.length; q++)
                this._cont += String.fromCharCode(Q[q]);
            this._cont += ") Tj  ET ";
            this._cont += " Q\n"
        }
            ;
        k.prototype.PutImage = function (E, h, l, _, g) {
            if (h.length == l * _ * 4 && g == null) {
                var R = l * _
                    , q = new Uint8Array(R)
                    , X = 255;
                for (var j = 0; j < R; j++) {
                    q[j] = h[(j << 2) + 3];
                    X &= h[(j << 2) + 3]
                }
                if (X != 255)
                    g = q
            }
            var A = this.addImage(h, l, _, g);
            this.setGState(E, !1);
            this._cont += "q " + O(E.ctm);
            this._cont += A + " Do  Q\n"
        }
            ;
        k.prototype.ShowPage = function () {
            n(this._xr, this._cont, this._bnds);
            this._cont = "";
            this._gst = S()
        }
            ;
        k.prototype.Print = function (E) { }
            ;
        k.prototype.Done = function () {
            var E = this._res;
            for (var h in E)
                if (Object.keys(E[h]) == 0)
                    delete E[h];
            this.buffer = N(this._xr)
        }
            ;
        k.prototype.addImage = function (E, h, l, _) {
            var g;
            if (_) {
                var R = _;
                if (_.length == h * l * 4) {
                    R = new Uint8Array(h * l);
                    for (var q = 0; q < R.length; q++)
                        R[q] = _[(q << 2) + 1]
                }
                g = this.addImage(R, h, l, null)
            }
            var X = u(E)
                , j = E;
            if (E.length == h * l * 4) {
                j = new Uint8Array(h * l * 3);
                for (var q = 0; q < E.length; q += 4) {
                    var A = 3 * (q >> 2);
                    j[A] = E[q + 0];
                    j[A + 1] = E[q + 1];
                    j[A + 2] = E[q + 2]
                }
            }
            var bI = this._res["/XObject"];
            for (var L in bI) {
                var an = this._xr[bI[L].ind]
                    , d = an["/SMask"]
                    , b = d != null ? 1 : 0
                    , P = g != null ? 1 : 0;
                if (!r(an.stream, j) || b + P == 1)
                    continue;
                if (b + P == 2 && !r(this._xr[d.ind].stream, R))
                    continue;
                return L
            }
            var L = "/I" + (Z(bI) + 1);
            bI[L] = {
                typ: "ref",
                ind: this._xr.length
            };
            var b3 = {
                "/Type": "/XObject",
                "/Subtype": "/Image",
                "/BitsPerComponent": 8,
                "/ColorSpace": E.length == h * l || X == "/DCTDecode" && T(E) && T(E).comps == 1 ? "/DeviceGray" : "/DeviceRGB",
                "/Height": l,
                "/Width": h,
                stream: j
            };
            if (X != null)
                b3["/Filter"] = u(E);
            if (_) {
                b3["/SMask"] = {
                    typ: "ref",
                    ind: this._xr.length - 1
                }
            }
            this._xr.push(b3);
            return L
        }
            ;
        function T(E) {
            var h = 0;
            while (h < E.length) {
                while (E[h] == 255)
                    h++;
                var l = E[h];
                h++;
                if (l == 216)
                    continue;
                if (l == 217)
                    break;
                if (208 <= l && l <= 215)
                    continue;
                if (l == 1)
                    continue;
                var _ = (E[h] << 8 | E[h + 1]) - 2;
                h += 2;
                if (l == 192)
                    return {
                        bpp: E[h],
                        w: E[h + 1] << 8 | E[h + 2],
                        h: E[h + 3] << 8 | E[h + 4],
                        comps: E[h + 5]
                    };
                h += _
            }
        }
        function Z(E) {
            var h;
            for (var l in E)
                h = l;
            return h == null ? 0 : parseInt(h.slice(2))
        }
        function v(E) {
            var h = E.toLowerCase()
                , l = "Helvetica Helvetica-Bold Helvetica-Oblique Helvetica-BoldOblique Times-Roman Times-Bold Times-Italic Times-BoldItalic".split(" ")
                , _ = 0;
            if (h.indexOf("sans") != -1)
                _ = 0;
            else if (h.indexOf("serif") != -1)
                _ = 4;
            var g = h.indexOf("bold") != -1
                , Q = h.indexOf("italic") != -1 || h.indexOf("oblique") != -1 || h.endsWith("-it");
            if (g && Q)
                _ += 3;
            else if (Q)
                _ += 2;
            else if (g)
                _ += 1;
            return l[_]
        }
        k.prototype.addFont = function (E, h) {
            E = v(E);
            E = "/" + E;
            var l = this._res["/Font"];
            for (var _ in l)
                if (l[_]["/BaseFont"] == E)
                    return _;
            var _ = "/F" + (Z(l) + 1)
                , g = {
                    "/Type": "/Font",
                    "/Subtype": "/Type1",
                    "/BaseFont": E,
                    "/Encoding": "/WinAnsiEncoding"
                };
            if (h != null) {
                var Q = "/CIDInit /ProcSet findresource begin \t12 dict begin \tbegincmap \t/CIDSystemInfo \t<<  /Registry (Adobe) \t/Ordering (UCS) \t/Supplement 0 \t>> def \t/CMapName /Adobe-Identity-UCS def \t/CMapType 2 def \t1 begincodespacerange \t<0000> <FFFF> \tendcodespacerange \t1 beginbfchar \t<0001> <200B> \tendbfchar \tendcmap \tCMapName currentdict /CMap defineresource pop \tend \tend"
                    , R = new Uint8Array(Q.length);
                for (var q = 0; q < Q.length; q++)
                    R[q] = Q.charCodeAt(q);
                g["/Subtype"] = "/TrueType";
                delete g["/Encoding"];
                g["/FirstChar"] = 0;
                g["/Widths"] = [];
                for (var q = 0; q < 256; q++)
                    g["/Widths"].push(500);
                g["/LastChar"] = g["/Widths"].length - 1;
                g["/FontDescriptor"] = {
                    "/Ascent": 905,
                    "/CapHeight": 1010,
                    "/Descent": 211,
                    "/Flags": 4,
                    "/FontBBox": [-627, -376, 2e3, 1011],
                    "/FontName": E,
                    "/ItalicAngle": 0,
                    "/StemV": 80,
                    "/Type": "/FontDescriptor",
                    "/FontFile2": {
                        stream: new Uint8Array(h)
                    }
                }
            }
            l[_] = g;
            return _
        }
            ;
        function n(E, h, l) {
            var _ = E.length;
            E[2]["/Kids"].push({
                typ: "ref",
                ind: _
            });
            E[2]["/Count"]++;
            E.push({
                "/Type": "/Page",
                "/Parent": {
                    typ: "ref",
                    ind: 2
                },
                "/Resources": {
                    typ: "ref",
                    ind: 3
                },
                "/MediaBox": l,
                "/Contents": {
                    typ: "ref",
                    ind: _ + 1
                }
            });
            E.push({
                stream: h
            })
        }
        function N(E) {
            var h = {
                file: new p,
                off: 0
            }
                , l = k.write
                , _ = [];
            l(h, "%PDF-1.1\n");
            for (var g = 1; g < E.length; g++) {
                _.push(h.off);
                l(h, g + " 0 obj\n");
                k.writeDict(h, E[g], 0);
                l(h, "\nendobj\n")
            }
            var Q = h.off;
            l(h, "xref\n");
            l(h, "0 " + E.length + "\n");
            l(h, "0000000000 65535 f \n");
            for (var g = 0; g < _.length; g++) {
                var R = _[g] + "";
                while (R.length < 10)
                    R = "0" + R;
                l(h, R + " 00000 n \n")
            }
            l(h, "trailer\n");
            k.writeDict(h, {
                "/Root": {
                    typ: "ref",
                    ind: 1
                },
                "/Size": E.length
            }, 0);
            l(h, "\nstartxref\n" + Q + "\n%%EOF\n");
            return h.file.data.buffer.slice(0, h.off)
        }
        k.write = function (E, h) {
            E.file.req(E.off, h.length);
            for (var l = 0; l < h.length; l++)
                E.file.data[E.off + l] = h.charCodeAt(l);
            E.off += h.length
        }
            ;
        k._tab = "    ";
        k.spc = function (E) {
            var h = "";
            for (var l = 0; l < E; l++)
                h += k._tab;
            return h
        }
            ;
        k.writeValue = function (E, h, l) {
            var _ = k.write;
            if (!1) { } else if (typeof h == "string")
                _(E, h);
            else if (typeof h == "number")
                _(E, "" + h);
            else if (typeof h == "boolean")
                _(E, "" + h);
            else if (h.typ != null)
                _(E, h.ind + " 0 R");
            else if (h instanceof Array)
                k.writeArray(E, h, l + 1);
            else if (h instanceof Object)
                k.writeDict(E, h, l + 1);
            else {
                console.log(h);
                throw "e"
            }
        }
            ;
        k.writeDict = function (E, h, l) {
            var _ = k.write
                , g = k.spc
                , Q = h.stream;
            if (Q) {
                if (typeof Q == "string") {
                    var R = new Uint8Array(Q.length);
                    for (var q = 0; q < Q.length; q++)
                        R[q] = Q.charCodeAt(q);
                    Q = R
                }
                if (h["/Filter"] == null) {
                    h["/Filter"] = "/FlateDecode";
                    Q = pako.deflate(Q)
                }
            }
            _(E, "<<\n");
            for (var X in h) {
                if (X.charAt(0) != "/")
                    continue;
                _(E, g(l + 1) + X + " ");
                k.writeValue(E, h[X], l);
                _(E, "\n")
            }
            if (Q)
                _(E, g(l + 1) + "/Length " + Q.length + "\n");
            _(E, g(l) + ">>");
            if (Q) {
                _(E, g(l) + "\nstream\n");
                E.file.req(E.off, Q.length);
                for (var q = 0; q < Q.length; q++)
                    E.file.data[E.off + q] = Q[q];
                E.off += Q.length;
                _(E, g(l) + "\nendstream")
            }
        }
            ;
        k.writeArray = function (E, h, l) {
            var _ = k.write;
            _(E, "[ ");
            for (var g = 0; g < h.length; g++) {
                k.writeValue(E, h[g], l + 1);
                if (g != h.length - 1)
                    _(E, " ")
            }
            _(E, " ]")
        }
            ;
        var p = function () {
            this.size = 16;
            this.data = new Uint8Array(16)
        };
        p.prototype.req = function (E, h) {
            if (E + h <= this.size)
                return;
            var l = this.size;
            while (E + h > this.size)
                this.size *= 2;
            var _ = new Uint8Array(this.size);
            for (var g = 0; g < l; g++)
                _[g] = this.data[g];
            this.data = _
        }
            ;
        return k
    }();
function ToEMF() {
    this._file = {
        file: new ToEMF.MFile,
        off: 0
    };
    this._lstw = 0;
    this._curx = 0;
    this._curh = 0;
    this._recs = 0;
    this._lenp = 0;
    this._objs = {};
    this._tabl = 1;
    this._stkf = 0;
    this._tclr = 0;
    this._curt = {
        p: -1,
        b: -1,
        t: -1
    };
    this._inited = !1
}
ToEMF.prototype.StartPage = function (k, S, U, I) {
    this._check();
    var e = this._file
        , r = ToEMF.B.writeUint
        , u = ToEMF.B.writeInt;
    this._curh = Math.max(this._curh, I * 10);
    if (!this._inited) {
        this._inited = !0;
        this._addRec("HEADER", 88);
        ToEMF._writeHeadBox(e, [k, S, U, I]);
        e.off += 32;
        ToEMF.B.writeASCII(e.file, e.off, " EMF");
        e.off += 4;
        r(e.file, e.off, 65536);
        e.off += 4;
        this._lenp = e.off;
        e.off += 4 + 4 + 4;
        e.off += 4 + 4 + 4;
        u(e.file, e.off, 1440);
        e.off += 4;
        u(e.file, e.off, 900);
        e.off += 4;
        u(e.file, e.off, 508);
        e.off += 4;
        u(e.file, e.off, 318);
        e.off += 4;
        this._trsf([.1, 0, 0, .1, 0, 0]);
        this._addRec("SETBKMODE", 12);
        r(e.file, e.off, 1);
        e.off += 4;
        this._addRec("SETTEXTALIGN", 12);
        r(e.file, e.off, 24);
        e.off += 4
    } else {
        this._curx += this._lstw;
        ToEMF._writeHeadBox(e, [0, 0, this._curx + U, Math.round(this._curh / 10)])
    }
    this._lstw = U
}
    ;
ToEMF.prototype.Stroke = function (k) {
    this._draw(k, 1)
}
    ;
ToEMF.prototype.Fill = function (k, S) {
    this._draw(k, 2)
}
    ;
ToEMF.prototype.PutImage = function (k, S, U, I, e) {
    var O = S.length;
    if ((O & 3) != 0)
        O += 4 - (O & 3);
    var r = [1, 0, 0, -1, 0, 1];
    UDOC.M.concat(r, k.ctm);
    UDOC.M.scale(r, 10, 10);
    UDOC.M.scale(r, 1, -1);
    UDOC.M.translate(r, this._curx, this._curh);
    this._trsf(r);
    var w = this._file
        , f = ToEMF.B.writeUint
        , K = ToEMF.B.writeInt
        , T = ToEMF.B.writeUshort
        , v = 8 + 16 + 14 * 4;
    this._addRec("STRETCHDIBITS", v + 40 + O);
    w.off += 16;
    K(w.file, w.off, Math.round(0));
    w.off += 4;
    K(w.file, w.off, Math.round(0));
    w.off += 4;
    w.off += 8;
    K(w.file, w.off, U);
    w.off += 4;
    K(w.file, w.off, I);
    w.off += 4;
    f(w.file, w.off, v);
    w.off += 4;
    f(w.file, w.off, 40);
    w.off += 4;
    f(w.file, w.off, v + 40);
    w.off += 4;
    f(w.file, w.off, S.length);
    w.off += 4;
    w.off += 4;
    f(w.file, w.off, 13369376);
    w.off += 4;
    K(w.file, w.off, Math.round(1));
    w.off += 4;
    K(w.file, w.off, Math.round(1));
    w.off += 4;
    K(w.file, w.off, 40);
    w.off += 4;
    K(w.file, w.off, U);
    w.off += 4;
    K(w.file, w.off, I);
    w.off += 4;
    T(w.file, w.off, 1);
    w.off += 2;
    T(w.file, w.off, 32);
    w.off += 2;
    K(w.file, w.off, 0);
    w.off += 4;
    K(w.file, w.off, S.length);
    w.off += 4;
    K(w.file, w.off, 3800);
    w.off += 4;
    K(w.file, w.off, 3800);
    w.off += 4;
    w.off += 8;
    w.file.req(w.off, S.length);
    if (S.length == U * I * 4) {
        for (var n = 0; n < I; n++)
            for (var N = 0; N < U; N++) {
                var p = n * U + N << 2
                    , E = w.off + ((I - 1 - n) * U + N << 2);
                w.file.data[E] = S[p + 2];
                w.file.data[E + 1] = S[p + 1];
                w.file.data[E + 2] = S[p];
                w.file.data[E + 3] = S[p + 3]
            }
    } else
        for (var h = 0; h < S.length; h++)
            w.file.data[w.off + h] = S[h];
    w.off += O;
    UDOC.M.invert(r);
    this._trsf(r)
}
    ;
ToEMF.prototype.PutText = function (k, S, U) {
    var I = S.length, n;
    if ((I & 1) == 1)
        I++;
    this._check();
    var e = this._file
        , r = ToEMF.B.writeUint
        , u = ToEMF.B.writeInt
        , w = ToEMF.B.writeUshort
        , f = ToEMF.B.writeFloat
        , K = ToEMF._color(k.colr);
    if (K != this._tclr) {
        this._addRec("SETTEXTCOLOR", 12);
        r(e.file, e.off, K);
        e.off += 4;
        this._tclr = K
    }
    this._setTool("f", [k.font.Tf, Math.round(k.font.Tfs * 10)]);
    var T = 10 * (k.ctm[4] + this._curx)
        , Z = this._curh - 10 * k.ctm[5]
        , v = Math.abs(k.ctm[1]) > .05;
    if (v) {
        n = k.ctm.slice(0);
        n[1] *= -1;
        n[2] *= -1;
        n[4] = T;
        n[5] = Z;
        T = Z = 0;
        this._trsf(n)
    }
    var N = 8 + 16 + 12 + 4 * 6 + 16;
    this._addRec("EXTTEXTOUTW", N + I * 2);
    e.off += 16;
    r(e.file, e.off, 2);
    e.off += 4;
    f(e.file, e.off, 31.25);
    e.off += 4;
    f(e.file, e.off, 31.25);
    e.off += 4;
    u(e.file, e.off, Math.round(T));
    e.off += 4;
    u(e.file, e.off, Math.round(Z));
    e.off += 4;
    r(e.file, e.off, S.length);
    e.off += 4;
    r(e.file, e.off, N);
    e.off += 4;
    r(e.file, e.off, 0);
    e.off += 4;
    e.off += 16;
    r(e.file, e.off, 0);
    e.off += 4;
    for (var p = 0; p < S.length; p++)
        w(e.file, e.off + p * 2, S.charCodeAt(p));
    e.off += 2 * I;
    if (v) {
        UDOC.M.invert(n);
        this._trsf(n)
    }
}
    ;
ToEMF.prototype.ShowPage = function () {
    this._check()
}
    ;
ToEMF.prototype.Done = function () {
    this._check();
    var k = this._file
        , S = ToEMF.B.writeUint;
    this._addRec("EOF", 20);
    S(k.file, k.off, 0);
    k.off += 4;
    S(k.file, k.off, 16);
    k.off += 4;
    S(k.file, k.off, 20);
    k.off += 4;
    S(k.file, this._lenp, k.off);
    S(k.file, this._lenp + 4, this._recs);
    S(k.file, this._lenp + 8, this._tabl);
    this.buffer = k.file.data.buffer.slice(0, k.off)
}
    ;
ToEMF.prototype._check = function () {
    var k = this._file
        , S = this._stkf;
    if (S == 0)
        return;
    if (S == 1)
        this._addRec("STROKEPATH", 24);
    if (S == 2)
        this._addRec("FILLPATH", 24);
    if (S == 3)
        this._addRec("STROKEANDFILLPATH", 24);
    k.off += 16;
    this._stkf = 0
}
    ;
ToEMF.prototype._addRec = function (k, S) {
    var U = this._file
        , I = ToEMF.B.writeUint;
    this._recs++;
    I(U.file, U.off, ToEMF.C["EMR_" + k]);
    U.off += 4;
    I(U.file, U.off, S);
    U.off += 4
}
    ;
ToEMF.prototype._trsf = function (k) {
    var S = this._file
        , U = ToEMF.B.writeInt;
    this._addRec("MODIFYWORLDTRANSFORM", 36);
    for (var I = 0; I < k.length; I++) {
        ToEMF.B.writeFloat(S.file, S.off, k[I]);
        S.off += 4
    }
    U(S.file, S.off, 2);
    S.off += 4
}
    ;
ToEMF._writeHeadBox = function (k, S) {
    var U = k.off;
    k.off = 8;
    ToEMF._writeBox(k, S);
    var I = 1 / 72 * 25.4 * 100;
    ToEMF._writeBox(k, [0, 0, Math.round((S[2] - S[0]) * I), Math.round((S[3] - S[1]) * I)]);
    k.off = U
}
    ;
ToEMF._writeBox = function (k, S) {
    for (var U = 0; U < 4; U++) {
        ToEMF.B.writeInt(k.file, k.off, S[U]);
        k.off += 4
    }
}
    ;
ToEMF.prototype._draw = function (k, S) {
    var U = this._file
        , I = ToEMF.B.writeUint
        , e = ToEMF.B.writeInt
        , r = k.pth
        , u = JSON.stringify(r);
    if (this._cpth != u)
        this._check();
    if (S == 1)
        this._setTool("p", [k.COLR, k.lwidth, k.ljoin]);
    else
        this._setTool("b", [k.colr]);
    if (this._cpth == u) {
        this._stkf += S
    } else {
        var w = {
            M: ["MOVETOEX", 1],
            L: ["LINETO", 1],
            C: ["POLYBEZIERTO", 3],
            Z: ["CLOSEFIGURE", 0]
        }
            , f = 0
            , K = r.cmds.length;
        this._addRec("BEGINPATH", 8);
        for (var T = 0; T < K; T++) {
            var Z = r.cmds[T]
                , v = w[Z]
                , E = 1;
            if (v == null)
                throw Z + " e";
            var n = v[1] * 2
                , N = v[0]
                , p = 8 + 4 * n;
            while (!0) {
                if (T + E < K && r.cmds[T + E] == Z)
                    E++;
                else
                    break
            }
            var h = Z == "C" || Z == "L" && E > 1;
            if (h) {
                n *= E;
                if (Z == "L")
                    N = "POLYLINETO";
                p = 8 + 20 + 4 * n
            }
            this._addRec(N, p);
            if (h) {
                U.off += 16;
                I(U.file, U.off, E * v[1]);
                U.off += 4;
                T += E - 1
            }
            for (var l = 0; l < n; l += 2) {
                e(U.file, U.off, Math.round(10 * (r.crds[f] + this._curx)));
                U.off += 4;
                f++;
                e(U.file, U.off, Math.round(this._curh - 10 * r.crds[f]));
                U.off += 4;
                f++
            }
        }
        this._addRec("ENDPATH", 8);
        this._cpth = u;
        this._stkf = S
    }
}
    ;
ToEMF.prototype._setTool = function (k, S) {
    var U = this._file
        , I = ToEMF.B.writeUint
        , e = ToEMF.B.writeInt
        , r = k + JSON.stringify(S)
        , u = this._objs[r];
    if (u == null) {
        u = this._objs[r] = this._tabl;
        this._tabl++;
        if (k == "b")
            this._addRec("CREATEBRUSHINDIRECT", 24);
        if (k == "p")
            this._addRec("CREATEPEN", 28);
        if (k == "f")
            this._addRec("EXTCREATEFONTINDIRECTW", 104);
        I(U.file, U.off, u);
        U.off += 4;
        if (k == "b" || k == "p") {
            if (k == "p") {
                I(U.file, U.off, 0);
                U.off += 4;
                var w = Math.round(S[1] * 10);
                I(U.file, U.off, w);
                U.off += 4;
                I(U.file, U.off, w);
                U.off += 4
            } else {
                I(U.file, U.off, 0);
                U.off += 4
            }
            I(U.file, U.off, ToEMF._color(S[0]));
            U.off += 4;
            if (k == "b") {
                I(U.file, U.off, 0);
                U.off += 4
            }
        }
        if (k == "f") {
            var f = S[0]
                , K = f.toLowerCase().indexOf("bold") != -1;
            if (f.endsWith("-Bold"))
                f = f.slice(0, f.length - 5);
            e(U.file, U.off, -S[1]);
            U.off += 4;
            U.off += 12;
            I(U.file, U.off, K ? 700 : 400);
            U.off += 4;
            I(U.file, U.off, 0);
            U.off += 4;
            I(U.file, U.off, 262151);
            U.off += 4;
            for (var T = 0; T < f.length; T++)
                ToEMF.B.writeUshort(U.file, U.off + T * 2, f.charCodeAt(T));
            U.off += 64
        }
    }
    if (this._curt[k] != u) {
        this._addRec("SELECTOBJECT", 12);
        I(U.file, U.off, u);
        U.off += 4;
        this._curt[k] = u
    }
}
    ;
ToEMF._color = function (k) {
    var S = Math.round(k[0] * 255)
        , U = Math.round(k[1] * 255)
        , I = Math.round(k[2] * 255);
    return I << 16 | U << 8 | S << 0
}
    ;
ToEMF.B = function () {
    var k = new Uint8Array(4)
        , S = k.buffer
        , U = new Int16Array(S)
        , I = new Uint16Array(S)
        , e = new Int32Array(S)
        , O = new Uint32Array(S)
        , r = new Float32Array(S);
    return {
        writeShort: function (u, w, f) {
            U[0] = f;
            u.req(w, 2);
            var K = u.data;
            K[w] = k[0];
            K[w + 1] = k[1]
        },
        writeUshort: function (u, w, f) {
            I[0] = f;
            u.req(w, 2);
            var K = u.data;
            K[w] = k[0];
            K[w + 1] = k[1]
        },
        writeInt: function (u, w, f) {
            e[0] = f;
            u.req(w, 4);
            var K = u.data;
            K[w] = k[0];
            K[w + 1] = k[1];
            K[w + 2] = k[2];
            K[w + 3] = k[3]
        },
        writeUint: function (u, w, f) {
            O[0] = f;
            u.req(w, 4);
            var K = u.data;
            K[w] = k[0];
            K[w + 1] = k[1];
            K[w + 2] = k[2];
            K[w + 3] = k[3]
        },
        writeFloat: function (u, w, f) {
            r[0] = f;
            u.req(w, 4);
            var K = u.data;
            K[w] = k[0];
            K[w + 1] = k[1];
            K[w + 2] = k[2];
            K[w + 3] = k[3]
        },
        writeASCII: function (u, w, f) {
            u.req(w, f.length);
            for (var K = 0; K < f.length; K++)
                u.data[w + K] = f.charCodeAt(K)
        }
    }
}();
ToEMF.MFile = function () {
    this.size = 16;
    this.data = new Uint8Array(16)
}
    ;
ToEMF.MFile.prototype.req = function (k, S) {
    if (k + S <= this.size)
        return;
    var U = this.size;
    while (k + S > this.size)
        this.size *= 2;
    var I = new Uint8Array(this.size);
    for (var e = 0; e < U; e++)
        I[e] = this.data[e];
    this.data = I
}
    ;
ToEMF.C = {
    EMR_HEADER: 1,
    EMR_POLYBEZIER: 2,
    EMR_POLYGON: 3,
    EMR_POLYLINE: 4,
    EMR_POLYBEZIERTO: 5,
    EMR_POLYLINETO: 6,
    EMR_POLYPOLYLINE: 7,
    EMR_POLYPOLYGON: 8,
    EMR_SETWINDOWEXTEX: 9,
    EMR_SETWINDOWORGEX: 10,
    EMR_SETVIEWPORTEXTEX: 11,
    EMR_SETVIEWPORTORGEX: 12,
    EMR_SETBRUSHORGEX: 13,
    EMR_EOF: 14,
    EMR_SETPIXELV: 15,
    EMR_SETMAPPERFLAGS: 16,
    EMR_SETMAPMODE: 17,
    EMR_SETBKMODE: 18,
    EMR_SETPOLYFILLMODE: 19,
    EMR_SETROP2: 20,
    EMR_SETSTRETCHBLTMODE: 21,
    EMR_SETTEXTALIGN: 22,
    EMR_SETCOLORADJUSTMENT: 23,
    EMR_SETTEXTCOLOR: 24,
    EMR_SETBKCOLOR: 25,
    EMR_OFFSETCLIPRGN: 26,
    EMR_MOVETOEX: 27,
    EMR_SETMETARGN: 28,
    EMR_EXCLUDECLIPRECT: 29,
    EMR_INTERSECTCLIPRECT: 30,
    EMR_SCALEVIEWPORTEXTEX: 31,
    EMR_SCALEWINDOWEXTEX: 32,
    EMR_SAVEDC: 33,
    EMR_RESTOREDC: 34,
    EMR_SETWORLDTRANSFORM: 35,
    EMR_MODIFYWORLDTRANSFORM: 36,
    EMR_SELECTOBJECT: 37,
    EMR_CREATEPEN: 38,
    EMR_CREATEBRUSHINDIRECT: 39,
    EMR_DELETEOBJECT: 40,
    EMR_ANGLEARC: 41,
    EMR_ELLIPSE: 42,
    EMR_RECTANGLE: 43,
    EMR_ROUNDRECT: 44,
    EMR_ARC: 45,
    EMR_CHORD: 46,
    EMR_PIE: 47,
    EMR_SELECTPALETTE: 48,
    EMR_CREATEPALETTE: 49,
    EMR_SETPALETTEENTRIES: 50,
    EMR_RESIZEPALETTE: 51,
    EMR_REALIZEPALETTE: 52,
    EMR_EXTFLOODFILL: 53,
    EMR_LINETO: 54,
    EMR_ARCTO: 55,
    EMR_POLYDRAW: 56,
    EMR_SETARCDIRECTION: 57,
    EMR_SETMITERLIMIT: 58,
    EMR_BEGINPATH: 59,
    EMR_ENDPATH: 60,
    EMR_CLOSEFIGURE: 61,
    EMR_FILLPATH: 62,
    EMR_STROKEANDFILLPATH: 63,
    EMR_STROKEPATH: 64,
    EMR_FLATTENPATH: 65,
    EMR_WIDENPATH: 66,
    EMR_SELECTCLIPPATH: 67,
    EMR_ABORTPATH: 68,
    EMR_COMMENT: 70,
    EMR_FILLRGN: 71,
    EMR_FRAMERGN: 72,
    EMR_INVERTRGN: 73,
    EMR_PAINTRGN: 74,
    EMR_EXTSELECTCLIPRGN: 75,
    EMR_BITBLT: 76,
    EMR_STRETCHBLT: 77,
    EMR_MASKBLT: 78,
    EMR_PLGBLT: 79,
    EMR_SETDIBITSTODEVICE: 80,
    EMR_STRETCHDIBITS: 81,
    EMR_EXTCREATEFONTINDIRECTW: 82,
    EMR_EXTTEXTOUTA: 83,
    EMR_EXTTEXTOUTW: 84,
    EMR_POLYBEZIER16: 85,
    EMR_POLYGON16: 86,
    EMR_POLYLINE16: 87,
    EMR_POLYBEZIERTO16: 88,
    EMR_POLYLINETO16: 89,
    EMR_POLYPOLYLINE16: 90,
    EMR_POLYPOLYGON16: 91,
    EMR_POLYDRAW16: 92,
    EMR_CREATEMONOBRUSH: 93,
    EMR_CREATEDIBPATTERNBRUSHPT: 94,
    EMR_EXTCREATEPEN: 95,
    EMR_POLYTEXTOUTA: 96,
    EMR_POLYTEXTOUTW: 97,
    EMR_SETICMMODE: 98,
    EMR_CREATECOLORSPACE: 99,
    EMR_SETCOLORSPACE: 100,
    EMR_DELETECOLORSPACE: 101,
    EMR_GLSRECORD: 102,
    EMR_GLSBOUNDEDRECORD: 103,
    EMR_PIXELFORMAT: 104,
    EMR_DRAWESCAPE: 105,
    EMR_EXTESCAPE: 106,
    EMR_SMALLTEXTOUT: 108,
    EMR_FORCEUFIMAPPING: 109,
    EMR_NAMEDESCAPE: 110,
    EMR_COLORCORRECTPALETTE: 111,
    EMR_SETICMPROFILEA: 112,
    EMR_SETICMPROFILEW: 113,
    EMR_ALPHABLEND: 114,
    EMR_SETLAYOUT: 115,
    EMR_TRANSPARENTBLT: 116,
    EMR_GRADIENTFILL: 118,
    EMR_SETLINKEDUFIS: 119,
    EMR_SETTEXTJUSTIFICATION: 120,
    EMR_COLORMATCHTOTARGETW: 121,
    EMR_CREATECOLORSPACEW: 122
};
ToEMF.K = [];
(function () {
    var k, S, U;
    k = ToEMF.C;
    S = ToEMF.K;
    U = 4;
    for (var I in k)
        S[k[I]] = I.slice(U)
}());
var ToDXF = function () {
    var k;
    function S() {
        this.buffer = null
    }
    S.prototype.StartPage = function () {
        if (k == null)
            k = [0, "SECTION", 2, "ENTITIES"]
    }
        ;
    S.prototype.ShowPage = function () { }
        ;
    S.prototype.Done = function () {
        k.push(0, "ENDSEC", 0, "EOF", "");
        var U = k.join("\n")
            , I = new Uint8Array(U.length);
        this.buffer = I.buffer;
        for (var e = 0; e < U.length; e++)
            I[e] = U.charCodeAt(e);
        k = null
    }
        ;
    S.prototype.PutImage = function () { }
        ;
    S.prototype.PutText = function (U, I, e) {
        while (I.endsWith("\n"))
            I = I.slice(0, I.length - 1);
        k.push(0, "MTEXT");
        k.push(40, U.font.Tfs);
        k.push(10, U.ctm[4], 20, U.ctm[5]);
        k.push(1, I)
    }
        ;
    S.prototype.Fill = function () { }
        ;
    S.prototype.Stroke = function (U) {
        var I = U.pth.cmds
            , e = U.pth.crds
            , O = 0
            , r = 0
            , u = 0
            , w = 0
            , f = 0;
        for (var K = 0; K < I.length; K++) {
            var T = I[K];
            if (T == "M") {
                u = e[f++];
                w = e[f++];
                O = u;
                r = w
            } else if (T == "L" || T == "Z") {
                if (T == "Z" && u == O && w == r)
                    continue;
                k.push(0, "LINE", 10, u, 20, w);
                if (T == "L") {
                    u = e[f++];
                    w = e[f++]
                } else {
                    u = O;
                    w = r
                }
                k.push(11, u, 21, w)
            } else if (T == "C") {
                k.push(0, "SPLINE");
                k.push(210, 0, 220, 0, 230, 0);
                k.push(70, 8, 71, 3, 72, 8, 73, 4, 74, 0, 42, 0, 43, 0);
                for (var Z = 0; Z < 8; Z++)
                    k.push(40, Z < 4 ? 0 : 1);
                k.push(10, u, 20, w);
                for (var Z = 0; Z < 3; Z++) {
                    u = e[f++];
                    w = e[f++];
                    k.push(10, u, 20, w)
                }
            }
        }
    }
        ;
    return S
}()
/* pako 1.0.5 nodeca/pako */
!function (t) {
    if ("object" == typeof exports && "undefined" != typeof module)
        module.exports = t();
    else if ("function" == typeof define && define.amd)
        define([], t);
    else {
        var e;
        e = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this,
            e.pako = t()
    }
}(function () {
    return function t(e, a, i) {
        function n(s, o) {
            if (!a[s]) {
                if (!e[s]) {
                    var l = "function" == typeof require && require;
                    if (!o && l)
                        return l(s, !0);
                    if (r)
                        return r(s, !0);
                    var h = new Error("Cannot find module '" + s + "'");
                    throw h.code = "MODULE_NOT_FOUND",
                    h
                }
                var d = a[s] = {
                    exports: {}
                };
                e[s][0].call(d.exports, function (t) {
                    var a = e[s][1][t];
                    return n(a ? a : t)
                }, d, d.exports, t, e, a, i)
            }
            return a[s].exports
        }
        for (var r = "function" == typeof require && require, s = 0; s < i.length; s++)
            n(i[s]);
        return n
    }({
        1: [function (t, e, a) {
            "use strict";
            function i(t) {
                if (!(this instanceof i))
                    return new i(t);
                this.options = l.assign({
                    level: w,
                    method: v,
                    chunkSize: 16384,
                    windowBits: 15,
                    memLevel: 8,
                    strategy: p,
                    to: ""
                }, t || {});
                var e = this.options;
                e.raw && e.windowBits > 0 ? e.windowBits = -e.windowBits : e.gzip && e.windowBits > 0 && e.windowBits < 16 && (e.windowBits += 16),
                    this.err = 0,
                    this.msg = "",
                    this.ended = !1,
                    this.chunks = [],
                    this.strm = new f,
                    this.strm.avail_out = 0;
                var a = o.deflateInit2(this.strm, e.level, e.method, e.windowBits, e.memLevel, e.strategy);
                if (a !== b)
                    throw new Error(d[a]);
                if (e.header && o.deflateSetHeader(this.strm, e.header),
                    e.dictionary) {
                    var n;
                    if (n = "string" == typeof e.dictionary ? h.string2buf(e.dictionary) : "[object ArrayBuffer]" === _.call(e.dictionary) ? new Uint8Array(e.dictionary) : e.dictionary,
                        a = o.deflateSetDictionary(this.strm, n),
                        a !== b)
                        throw new Error(d[a]);
                    this._dict_set = !0
                }
            }
            function n(t, e) {
                var a = new i(e);
                if (a.push(t, !0),
                    a.err)
                    throw a.msg || d[a.err];
                return a.result
            }
            function r(t, e) {
                return e = e || {},
                    e.raw = !0,
                    n(t, e)
            }
            function s(t, e) {
                return e = e || {},
                    e.gzip = !0,
                    n(t, e)
            }
            var o = t("./zlib/deflate")
                , l = t("./utils/common")
                , h = t("./utils/strings")
                , d = t("./zlib/messages")
                , f = t("./zlib/zstream")
                , _ = Object.prototype.toString
                , u = 0
                , c = 4
                , b = 0
                , g = 1
                , m = 2
                , w = -1
                , p = 0
                , v = 8;
            i.prototype.push = function (t, e) {
                var a, i, n = this.strm, r = this.options.chunkSize;
                if (this.ended)
                    return !1;
                i = e === ~~e ? e : e === !0 ? c : u,
                    "string" == typeof t ? n.input = h.string2buf(t) : "[object ArrayBuffer]" === _.call(t) ? n.input = new Uint8Array(t) : n.input = t,
                    n.next_in = 0,
                    n.avail_in = n.input.length;
                do {
                    if (0 === n.avail_out && (n.output = new l.Buf8(r),
                        n.next_out = 0,
                        n.avail_out = r),
                        a = o.deflate(n, i),
                        a !== g && a !== b)
                        return this.onEnd(a),
                            this.ended = !0,
                            !1;
                    0 !== n.avail_out && (0 !== n.avail_in || i !== c && i !== m) || ("string" === this.options.to ? this.onData(h.buf2binstring(l.shrinkBuf(n.output, n.next_out))) : this.onData(l.shrinkBuf(n.output, n.next_out)))
                } while ((n.avail_in > 0 || 0 === n.avail_out) && a !== g); return i === c ? (a = o.deflateEnd(this.strm),
                    this.onEnd(a),
                    this.ended = !0,
                    a === b) : i !== m || (this.onEnd(b),
                        n.avail_out = 0,
                        !0)
            }
                ,
                i.prototype.onData = function (t) {
                    this.chunks.push(t)
                }
                ,
                i.prototype.onEnd = function (t) {
                    t === b && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = l.flattenChunks(this.chunks)),
                        this.chunks = [],
                        this.err = t,
                        this.msg = this.strm.msg
                }
                ,
                a.Deflate = i,
                a.deflate = n,
                a.deflateRaw = r,
                a.gzip = s
        }
            , {
            "./utils/common": 3,
            "./utils/strings": 4,
            "./zlib/deflate": 8,
            "./zlib/messages": 13,
            "./zlib/zstream": 15
        }],
        2: [function (t, e, a) {
            "use strict";
            function i(t) {
                if (!(this instanceof i))
                    return new i(t);
                this.options = o.assign({
                    chunkSize: 16384,
                    windowBits: 0,
                    to: ""
                }, t || {});
                var e = this.options;
                e.raw && e.windowBits >= 0 && e.windowBits < 16 && (e.windowBits = -e.windowBits,
                    0 === e.windowBits && (e.windowBits = -15)),
                    !(e.windowBits >= 0 && e.windowBits < 16) || t && t.windowBits || (e.windowBits += 32),
                    e.windowBits > 15 && e.windowBits < 48 && 0 === (15 & e.windowBits) && (e.windowBits |= 15),
                    this.err = 0,
                    this.msg = "",
                    this.ended = !1,
                    this.chunks = [],
                    this.strm = new f,
                    this.strm.avail_out = 0;
                var a = s.inflateInit2(this.strm, e.windowBits);
                if (a !== h.Z_OK)
                    throw new Error(d[a]);
                this.header = new _,
                    s.inflateGetHeader(this.strm, this.header)
            }
            function n(t, e) {
                var a = new i(e);
                if (a.push(t, !0),
                    a.err)
                    throw a.msg || d[a.err];
                return a.result
            }
            function r(t, e) {
                return e = e || {},
                    e.raw = !0,
                    n(t, e)
            }
            var s = t("./zlib/inflate")
                , o = t("./utils/common")
                , l = t("./utils/strings")
                , h = t("./zlib/constants")
                , d = t("./zlib/messages")
                , f = t("./zlib/zstream")
                , _ = t("./zlib/gzheader")
                , u = Object.prototype.toString;
            i.prototype.push = function (t, e) {
                var a, i, n, r, d, f, _ = this.strm, c = this.options.chunkSize, b = this.options.dictionary, g = !1;
                if (this.ended)
                    return !1;
                i = e === ~~e ? e : e === !0 ? h.Z_FINISH : h.Z_NO_FLUSH,
                    "string" == typeof t ? _.input = l.binstring2buf(t) : "[object ArrayBuffer]" === u.call(t) ? _.input = new Uint8Array(t) : _.input = t,
                    _.next_in = 0,
                    _.avail_in = _.input.length;
                do {
                    if (0 === _.avail_out && (_.output = new o.Buf8(c),
                        _.next_out = 0,
                        _.avail_out = c),
                        a = s.inflate(_, h.Z_NO_FLUSH),
                        a === h.Z_NEED_DICT && b && (f = "string" == typeof b ? l.string2buf(b) : "[object ArrayBuffer]" === u.call(b) ? new Uint8Array(b) : b,
                            a = s.inflateSetDictionary(this.strm, f)),
                        a === h.Z_BUF_ERROR && g === !0 && (a = h.Z_OK,
                            g = !1),
                        a !== h.Z_STREAM_END && a !== h.Z_OK)
                        return this.onEnd(a),
                            this.ended = !0,
                            !1;
                    _.next_out && (0 !== _.avail_out && a !== h.Z_STREAM_END && (0 !== _.avail_in || i !== h.Z_FINISH && i !== h.Z_SYNC_FLUSH) || ("string" === this.options.to ? (n = l.utf8border(_.output, _.next_out),
                        r = _.next_out - n,
                        d = l.buf2string(_.output, n),
                        _.next_out = r,
                        _.avail_out = c - r,
                        r && o.arraySet(_.output, _.output, n, r, 0),
                        this.onData(d)) : this.onData(o.shrinkBuf(_.output, _.next_out)))),
                        0 === _.avail_in && 0 === _.avail_out && (g = !0)
                } while ((_.avail_in > 0 || 0 === _.avail_out) && a !== h.Z_STREAM_END); return a === h.Z_STREAM_END && (i = h.Z_FINISH),
                    i === h.Z_FINISH ? (a = s.inflateEnd(this.strm),
                        this.onEnd(a),
                        this.ended = !0,
                        a === h.Z_OK) : i !== h.Z_SYNC_FLUSH || (this.onEnd(h.Z_OK),
                            _.avail_out = 0,
                            !0)
            }
                ,
                i.prototype.onData = function (t) {
                    this.chunks.push(t)
                }
                ,
                i.prototype.onEnd = function (t) {
                    t === h.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)),
                        this.chunks = [],
                        this.err = t,
                        this.msg = this.strm.msg
                }
                ,
                a.Inflate = i,
                a.inflate = n,
                a.inflateRaw = r,
                a.ungzip = n
        }
            , {
            "./utils/common": 3,
            "./utils/strings": 4,
            "./zlib/constants": 6,
            "./zlib/gzheader": 9,
            "./zlib/inflate": 11,
            "./zlib/messages": 13,
            "./zlib/zstream": 15
        }],
        3: [function (t, e, a) {
            "use strict";
            var i = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
            a.assign = function (t) {
                for (var e = Array.prototype.slice.call(arguments, 1); e.length;) {
                    var a = e.shift();
                    if (a) {
                        if ("object" != typeof a)
                            throw new TypeError(a + "must be non-object");
                        for (var i in a)
                            a.hasOwnProperty(i) && (t[i] = a[i])
                    }
                }
                return t
            }
                ,
                a.shrinkBuf = function (t, e) {
                    return t.length === e ? t : t.subarray ? t.subarray(0, e) : (t.length = e,
                        t)
                }
                ;
            var n = {
                arraySet: function (t, e, a, i, n) {
                    if (e.subarray && t.subarray)
                        return void t.set(e.subarray(a, a + i), n);
                    for (var r = 0; r < i; r++)
                        t[n + r] = e[a + r]
                },
                flattenChunks: function (t) {
                    var e, a, i, n, r, s;
                    for (i = 0,
                        e = 0,
                        a = t.length; e < a; e++)
                        i += t[e].length;
                    for (s = new Uint8Array(i),
                        n = 0,
                        e = 0,
                        a = t.length; e < a; e++)
                        r = t[e],
                            s.set(r, n),
                            n += r.length;
                    return s
                }
            }
                , r = {
                    arraySet: function (t, e, a, i, n) {
                        for (var r = 0; r < i; r++)
                            t[n + r] = e[a + r]
                    },
                    flattenChunks: function (t) {
                        return [].concat.apply([], t)
                    }
                };
            a.setTyped = function (t) {
                t ? (a.Buf8 = Uint8Array,
                    a.Buf16 = Uint16Array,
                    a.Buf32 = Int32Array,
                    a.assign(a, n)) : (a.Buf8 = Array,
                        a.Buf16 = Array,
                        a.Buf32 = Array,
                        a.assign(a, r))
            }
                ,
                a.setTyped(i)
        }
            , {}],
        4: [function (t, e, a) {
            "use strict";
            function i(t, e) {
                if (e < 65537 && (t.subarray && s || !t.subarray && r))
                    return String.fromCharCode.apply(null, n.shrinkBuf(t, e));
                for (var a = "", i = 0; i < e; i++)
                    a += String.fromCharCode(t[i]);
                return a
            }
            var n = t("./common")
                , r = !0
                , s = !0;
            try {
                String.fromCharCode.apply(null, [0])
            } catch (t) {
                r = !1
            }
            try {
                String.fromCharCode.apply(null, new Uint8Array(1))
            } catch (t) {
                s = !1
            }
            for (var o = new n.Buf8(256), l = 0; l < 256; l++)
                o[l] = l >= 252 ? 6 : l >= 248 ? 5 : l >= 240 ? 4 : l >= 224 ? 3 : l >= 192 ? 2 : 1;
            o[254] = o[254] = 1,
                a.string2buf = function (t) {
                    var e, a, i, r, s, o = t.length, l = 0;
                    for (r = 0; r < o; r++)
                        a = t.charCodeAt(r),
                            55296 === (64512 & a) && r + 1 < o && (i = t.charCodeAt(r + 1),
                                56320 === (64512 & i) && (a = 65536 + (a - 55296 << 10) + (i - 56320),
                                    r++)),
                            l += a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4;
                    for (e = new n.Buf8(l),
                        s = 0,
                        r = 0; s < l; r++)
                        a = t.charCodeAt(r),
                            55296 === (64512 & a) && r + 1 < o && (i = t.charCodeAt(r + 1),
                                56320 === (64512 & i) && (a = 65536 + (a - 55296 << 10) + (i - 56320),
                                    r++)),
                            a < 128 ? e[s++] = a : a < 2048 ? (e[s++] = 192 | a >>> 6,
                                e[s++] = 128 | 63 & a) : a < 65536 ? (e[s++] = 224 | a >>> 12,
                                    e[s++] = 128 | a >>> 6 & 63,
                                    e[s++] = 128 | 63 & a) : (e[s++] = 240 | a >>> 18,
                                        e[s++] = 128 | a >>> 12 & 63,
                                        e[s++] = 128 | a >>> 6 & 63,
                                        e[s++] = 128 | 63 & a);
                    return e
                }
                ,
                a.buf2binstring = function (t) {
                    return i(t, t.length)
                }
                ,
                a.binstring2buf = function (t) {
                    for (var e = new n.Buf8(t.length), a = 0, i = e.length; a < i; a++)
                        e[a] = t.charCodeAt(a);
                    return e
                }
                ,
                a.buf2string = function (t, e) {
                    var a, n, r, s, l = e || t.length, h = new Array(2 * l);
                    for (n = 0,
                        a = 0; a < l;)
                        if (r = t[a++],
                            r < 128)
                            h[n++] = r;
                        else if (s = o[r],
                            s > 4)
                            h[n++] = 65533,
                                a += s - 1;
                        else {
                            for (r &= 2 === s ? 31 : 3 === s ? 15 : 7; s > 1 && a < l;)
                                r = r << 6 | 63 & t[a++],
                                    s--;
                            s > 1 ? h[n++] = 65533 : r < 65536 ? h[n++] = r : (r -= 65536,
                                h[n++] = 55296 | r >> 10 & 1023,
                                h[n++] = 56320 | 1023 & r)
                        }
                    return i(h, n)
                }
                ,
                a.utf8border = function (t, e) {
                    var a;
                    for (e = e || t.length,
                        e > t.length && (e = t.length),
                        a = e - 1; a >= 0 && 128 === (192 & t[a]);)
                        a--;
                    return a < 0 ? e : 0 === a ? e : a + o[t[a]] > e ? a : e
                }
        }
            , {
            "./common": 3
        }],
        5: [function (t, e, a) {
            "use strict";
            function i(t, e, a, i) {
                for (var n = 65535 & t | 0, r = t >>> 16 & 65535 | 0, s = 0; 0 !== a;) {
                    s = a > 2e3 ? 2e3 : a,
                        a -= s;
                    do
                        n = n + e[i++] | 0,
                            r = r + n | 0;
                    while (--s); n %= 65521,
                        r %= 65521
                }
                return n | r << 16 | 0
            }
            e.exports = i
        }
            , {}],
        6: [function (t, e, a) {
            "use strict";
            e.exports = {
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                Z_BUF_ERROR: -5,
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,
                Z_BINARY: 0,
                Z_TEXT: 1,
                Z_UNKNOWN: 2,
                Z_DEFLATED: 8
            }
        }
            , {}],
        7: [function (t, e, a) {
            "use strict";
            function i() {
                for (var t, e = [], a = 0; a < 256; a++) {
                    t = a;
                    for (var i = 0; i < 8; i++)
                        t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1;
                    e[a] = t
                }
                return e
            }
            function n(t, e, a, i) {
                var n = r
                    , s = i + a;
                t ^= -1;
                for (var o = i; o < s; o++)
                    t = t >>> 8 ^ n[255 & (t ^ e[o])];
                return t ^ -1
            }
            var r = i();
            e.exports = n
        }
            , {}],
        8: [function (t, e, a) {
            "use strict";
            function i(t, e) {
                return t.msg = D[e],
                    e
            }
            function n(t) {
                return (t << 1) - (t > 4 ? 9 : 0)
            }
            function r(t) {
                for (var e = t.length; --e >= 0;)
                    t[e] = 0
            }
            function s(t) {
                var e = t.state
                    , a = e.pending;
                a > t.avail_out && (a = t.avail_out),
                    0 !== a && (R.arraySet(t.output, e.pending_buf, e.pending_out, a, t.next_out),
                        t.next_out += a,
                        e.pending_out += a,
                        t.total_out += a,
                        t.avail_out -= a,
                        e.pending -= a,
                        0 === e.pending && (e.pending_out = 0))
            }
            function o(t, e) {
                C._tr_flush_block(t, t.block_start >= 0 ? t.block_start : -1, t.strstart - t.block_start, e),
                    t.block_start = t.strstart,
                    s(t.strm)
            }
            function l(t, e) {
                t.pending_buf[t.pending++] = e
            }
            function h(t, e) {
                t.pending_buf[t.pending++] = e >>> 8 & 255,
                    t.pending_buf[t.pending++] = 255 & e
            }
            function d(t, e, a, i) {
                var n = t.avail_in;
                return n > i && (n = i),
                    0 === n ? 0 : (t.avail_in -= n,
                        R.arraySet(e, t.input, t.next_in, n, a),
                        1 === t.state.wrap ? t.adler = N(t.adler, e, n, a) : 2 === t.state.wrap && (t.adler = O(t.adler, e, n, a)),
                        t.next_in += n,
                        t.total_in += n,
                        n)
            }
            function f(t, e) {
                var a, i, n = t.max_chain_length, r = t.strstart, s = t.prev_length, o = t.nice_match, l = t.strstart > t.w_size - ft ? t.strstart - (t.w_size - ft) : 0, h = t.window, d = t.w_mask, f = t.prev, _ = t.strstart + dt, u = h[r + s - 1], c = h[r + s];
                t.prev_length >= t.good_match && (n >>= 2),
                    o > t.lookahead && (o = t.lookahead);
                do
                    if (a = e,
                        h[a + s] === c && h[a + s - 1] === u && h[a] === h[r] && h[++a] === h[r + 1]) {
                        r += 2,
                            a++;
                        do
                            ;
                        while (h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && h[++r] === h[++a] && r < _); if (i = dt - (_ - r),
                            r = _ - dt,
                            i > s) {
                            if (t.match_start = e,
                                s = i,
                                i >= o)
                                break;
                            u = h[r + s - 1],
                                c = h[r + s]
                        }
                    }
                while ((e = f[e & d]) > l && 0 !== --n); return s <= t.lookahead ? s : t.lookahead
            }
            function _(t) {
                var e, a, i, n, r, s = t.w_size;
                do {
                    if (n = t.window_size - t.lookahead - t.strstart,
                        t.strstart >= s + (s - ft)) {
                        R.arraySet(t.window, t.window, s, s, 0),
                            t.match_start -= s,
                            t.strstart -= s,
                            t.block_start -= s,
                            a = t.hash_size,
                            e = a;
                        do
                            i = t.head[--e],
                                t.head[e] = i >= s ? i - s : 0;
                        while (--a); a = s,
                            e = a;
                        do
                            i = t.prev[--e],
                                t.prev[e] = i >= s ? i - s : 0;
                        while (--a); n += s
                    }
                    if (0 === t.strm.avail_in)
                        break;
                    if (a = d(t.strm, t.window, t.strstart + t.lookahead, n),
                        t.lookahead += a,
                        t.lookahead + t.insert >= ht)
                        for (r = t.strstart - t.insert,
                            t.ins_h = t.window[r],
                            t.ins_h = (t.ins_h << t.hash_shift ^ t.window[r + 1]) & t.hash_mask; t.insert && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[r + ht - 1]) & t.hash_mask,
                                t.prev[r & t.w_mask] = t.head[t.ins_h],
                                t.head[t.ins_h] = r,
                                r++,
                                t.insert--,
                                !(t.lookahead + t.insert < ht));)
                            ;
                } while (t.lookahead < ft && 0 !== t.strm.avail_in)
            }
            function u(t, e) {
                var a = 65535;
                for (a > t.pending_buf_size - 5 && (a = t.pending_buf_size - 5); ;) {
                    if (t.lookahead <= 1) {
                        if (_(t),
                            0 === t.lookahead && e === I)
                            return vt;
                        if (0 === t.lookahead)
                            break
                    }
                    t.strstart += t.lookahead,
                        t.lookahead = 0;
                    var i = t.block_start + a;
                    if ((0 === t.strstart || t.strstart >= i) && (t.lookahead = t.strstart - i,
                        t.strstart = i,
                        o(t, !1),
                        0 === t.strm.avail_out))
                        return vt;
                    if (t.strstart - t.block_start >= t.w_size - ft && (o(t, !1),
                        0 === t.strm.avail_out))
                        return vt
                }
                return t.insert = 0,
                    e === F ? (o(t, !0),
                        0 === t.strm.avail_out ? yt : xt) : t.strstart > t.block_start && (o(t, !1),
                            0 === t.strm.avail_out) ? vt : vt
            }
            function c(t, e) {
                for (var a, i; ;) {
                    if (t.lookahead < ft) {
                        if (_(t),
                            t.lookahead < ft && e === I)
                            return vt;
                        if (0 === t.lookahead)
                            break
                    }
                    if (a = 0,
                        t.lookahead >= ht && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + ht - 1]) & t.hash_mask,
                            a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h],
                            t.head[t.ins_h] = t.strstart),
                        0 !== a && t.strstart - a <= t.w_size - ft && (t.match_length = f(t, a)),
                        t.match_length >= ht)
                        if (i = C._tr_tally(t, t.strstart - t.match_start, t.match_length - ht),
                            t.lookahead -= t.match_length,
                            t.match_length <= t.max_lazy_match && t.lookahead >= ht) {
                            t.match_length--;
                            do
                                t.strstart++,
                                    t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + ht - 1]) & t.hash_mask,
                                    a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h],
                                    t.head[t.ins_h] = t.strstart;
                            while (0 !== --t.match_length); t.strstart++
                        } else
                            t.strstart += t.match_length,
                                t.match_length = 0,
                                t.ins_h = t.window[t.strstart],
                                t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + 1]) & t.hash_mask;
                    else
                        i = C._tr_tally(t, 0, t.window[t.strstart]),
                            t.lookahead--,
                            t.strstart++;
                    if (i && (o(t, !1),
                        0 === t.strm.avail_out))
                        return vt
                }
                return t.insert = t.strstart < ht - 1 ? t.strstart : ht - 1,
                    e === F ? (o(t, !0),
                        0 === t.strm.avail_out ? yt : xt) : t.last_lit && (o(t, !1),
                            0 === t.strm.avail_out) ? vt : kt
            }
            function b(t, e) {
                for (var a, i, n; ;) {
                    if (t.lookahead < ft) {
                        if (_(t),
                            t.lookahead < ft && e === I)
                            return vt;
                        if (0 === t.lookahead)
                            break
                    }
                    if (a = 0,
                        t.lookahead >= ht && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + ht - 1]) & t.hash_mask,
                            a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h],
                            t.head[t.ins_h] = t.strstart),
                        t.prev_length = t.match_length,
                        t.prev_match = t.match_start,
                        t.match_length = ht - 1,
                        0 !== a && t.prev_length < t.max_lazy_match && t.strstart - a <= t.w_size - ft && (t.match_length = f(t, a),
                            t.match_length <= 5 && (t.strategy === q || t.match_length === ht && t.strstart - t.match_start > 4096) && (t.match_length = ht - 1)),
                        t.prev_length >= ht && t.match_length <= t.prev_length) {
                        n = t.strstart + t.lookahead - ht,
                            i = C._tr_tally(t, t.strstart - 1 - t.prev_match, t.prev_length - ht),
                            t.lookahead -= t.prev_length - 1,
                            t.prev_length -= 2;
                        do
                            ++t.strstart <= n && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + ht - 1]) & t.hash_mask,
                                a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h],
                                t.head[t.ins_h] = t.strstart);
                        while (0 !== --t.prev_length); if (t.match_available = 0,
                            t.match_length = ht - 1,
                            t.strstart++,
                            i && (o(t, !1),
                                0 === t.strm.avail_out))
                            return vt
                    } else if (t.match_available) {
                        if (i = C._tr_tally(t, 0, t.window[t.strstart - 1]),
                            i && o(t, !1),
                            t.strstart++,
                            t.lookahead--,
                            0 === t.strm.avail_out)
                            return vt
                    } else
                        t.match_available = 1,
                            t.strstart++,
                            t.lookahead--
                }
                return t.match_available && (i = C._tr_tally(t, 0, t.window[t.strstart - 1]),
                    t.match_available = 0),
                    t.insert = t.strstart < ht - 1 ? t.strstart : ht - 1,
                    e === F ? (o(t, !0),
                        0 === t.strm.avail_out ? yt : xt) : t.last_lit && (o(t, !1),
                            0 === t.strm.avail_out) ? vt : kt
            }
            function g(t, e) {
                for (var a, i, n, r, s = t.window; ;) {
                    if (t.lookahead <= dt) {
                        if (_(t),
                            t.lookahead <= dt && e === I)
                            return vt;
                        if (0 === t.lookahead)
                            break
                    }
                    if (t.match_length = 0,
                        t.lookahead >= ht && t.strstart > 0 && (n = t.strstart - 1,
                            i = s[n],
                            i === s[++n] && i === s[++n] && i === s[++n])) {
                        r = t.strstart + dt;
                        do
                            ;
                        while (i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && n < r); t.match_length = dt - (r - n),
                            t.match_length > t.lookahead && (t.match_length = t.lookahead)
                    }
                    if (t.match_length >= ht ? (a = C._tr_tally(t, 1, t.match_length - ht),
                        t.lookahead -= t.match_length,
                        t.strstart += t.match_length,
                        t.match_length = 0) : (a = C._tr_tally(t, 0, t.window[t.strstart]),
                            t.lookahead--,
                            t.strstart++),
                        a && (o(t, !1),
                            0 === t.strm.avail_out))
                        return vt
                }
                return t.insert = 0,
                    e === F ? (o(t, !0),
                        0 === t.strm.avail_out ? yt : xt) : t.last_lit && (o(t, !1),
                            0 === t.strm.avail_out) ? vt : kt
            }
            function m(t, e) {
                for (var a; ;) {
                    if (0 === t.lookahead && (_(t),
                        0 === t.lookahead)) {
                        if (e === I)
                            return vt;
                        break
                    }
                    if (t.match_length = 0,
                        a = C._tr_tally(t, 0, t.window[t.strstart]),
                        t.lookahead--,
                        t.strstart++,
                        a && (o(t, !1),
                            0 === t.strm.avail_out))
                        return vt
                }
                return t.insert = 0,
                    e === F ? (o(t, !0),
                        0 === t.strm.avail_out ? yt : xt) : t.last_lit && (o(t, !1),
                            0 === t.strm.avail_out) ? vt : kt
            }
            function w(t, e, a, i, n) {
                this.good_length = t,
                    this.max_lazy = e,
                    this.nice_length = a,
                    this.max_chain = i,
                    this.func = n
            }
            function p(t) {
                t.window_size = 2 * t.w_size,
                    r(t.head),
                    t.max_lazy_match = Z[t.level].max_lazy,
                    t.good_match = Z[t.level].good_length,
                    t.nice_match = Z[t.level].nice_length,
                    t.max_chain_length = Z[t.level].max_chain,
                    t.strstart = 0,
                    t.block_start = 0,
                    t.lookahead = 0,
                    t.insert = 0,
                    t.match_length = t.prev_length = ht - 1,
                    t.match_available = 0,
                    t.ins_h = 0
            }
            function v() {
                this.strm = null,
                    this.status = 0,
                    this.pending_buf = null,
                    this.pending_buf_size = 0,
                    this.pending_out = 0,
                    this.pending = 0,
                    this.wrap = 0,
                    this.gzhead = null,
                    this.gzindex = 0,
                    this.method = V,
                    this.last_flush = -1,
                    this.w_size = 0,
                    this.w_bits = 0,
                    this.w_mask = 0,
                    this.window = null,
                    this.window_size = 0,
                    this.prev = null,
                    this.head = null,
                    this.ins_h = 0,
                    this.hash_size = 0,
                    this.hash_bits = 0,
                    this.hash_mask = 0,
                    this.hash_shift = 0,
                    this.block_start = 0,
                    this.match_length = 0,
                    this.prev_match = 0,
                    this.match_available = 0,
                    this.strstart = 0,
                    this.match_start = 0,
                    this.lookahead = 0,
                    this.prev_length = 0,
                    this.max_chain_length = 0,
                    this.max_lazy_match = 0,
                    this.level = 0,
                    this.strategy = 0,
                    this.good_match = 0,
                    this.nice_match = 0,
                    this.dyn_ltree = new R.Buf16(2 * ot),
                    this.dyn_dtree = new R.Buf16(2 * (2 * rt + 1)),
                    this.bl_tree = new R.Buf16(2 * (2 * st + 1)),
                    r(this.dyn_ltree),
                    r(this.dyn_dtree),
                    r(this.bl_tree),
                    this.l_desc = null,
                    this.d_desc = null,
                    this.bl_desc = null,
                    this.bl_count = new R.Buf16(lt + 1),
                    this.heap = new R.Buf16(2 * nt + 1),
                    r(this.heap),
                    this.heap_len = 0,
                    this.heap_max = 0,
                    this.depth = new R.Buf16(2 * nt + 1),
                    r(this.depth),
                    this.l_buf = 0,
                    this.lit_bufsize = 0,
                    this.last_lit = 0,
                    this.d_buf = 0,
                    this.opt_len = 0,
                    this.static_len = 0,
                    this.matches = 0,
                    this.insert = 0,
                    this.bi_buf = 0,
                    this.bi_valid = 0
            }
            function k(t) {
                var e;
                return t && t.state ? (t.total_in = t.total_out = 0,
                    t.data_type = Q,
                    e = t.state,
                    e.pending = 0,
                    e.pending_out = 0,
                    e.wrap < 0 && (e.wrap = -e.wrap),
                    e.status = e.wrap ? ut : wt,
                    t.adler = 2 === e.wrap ? 0 : 1,
                    e.last_flush = I,
                    C._tr_init(e),
                    H) : i(t, K)
            }
            function y(t) {
                var e = k(t);
                return e === H && p(t.state),
                    e
            }
            function x(t, e) {
                return t && t.state ? 2 !== t.state.wrap ? K : (t.state.gzhead = e,
                    H) : K
            }
            function z(t, e, a, n, r, s) {
                if (!t)
                    return K;
                var o = 1;
                if (e === Y && (e = 6),
                    n < 0 ? (o = 0,
                        n = -n) : n > 15 && (o = 2,
                            n -= 16),
                    r < 1 || r > $ || a !== V || n < 8 || n > 15 || e < 0 || e > 9 || s < 0 || s > W)
                    return i(t, K);
                8 === n && (n = 9);
                var l = new v;
                return t.state = l,
                    l.strm = t,
                    l.wrap = o,
                    l.gzhead = null,
                    l.w_bits = n,
                    l.w_size = 1 << l.w_bits,
                    l.w_mask = l.w_size - 1,
                    l.hash_bits = r + 7,
                    l.hash_size = 1 << l.hash_bits,
                    l.hash_mask = l.hash_size - 1,
                    l.hash_shift = ~~((l.hash_bits + ht - 1) / ht),
                    l.window = new R.Buf8(2 * l.w_size),
                    l.head = new R.Buf16(l.hash_size),
                    l.prev = new R.Buf16(l.w_size),
                    l.lit_bufsize = 1 << r + 6,
                    l.pending_buf_size = 4 * l.lit_bufsize,
                    l.pending_buf = new R.Buf8(l.pending_buf_size),
                    l.d_buf = 1 * l.lit_bufsize,
                    l.l_buf = 3 * l.lit_bufsize,
                    l.level = e,
                    l.strategy = s,
                    l.method = a,
                    y(t)
            }
            function B(t, e) {
                return z(t, e, V, tt, et, J)
            }
            function S(t, e) {
                var a, o, d, f;
                if (!t || !t.state || e > L || e < 0)
                    return t ? i(t, K) : K;
                if (o = t.state,
                    !t.output || !t.input && 0 !== t.avail_in || o.status === pt && e !== F)
                    return i(t, 0 === t.avail_out ? P : K);
                if (o.strm = t,
                    a = o.last_flush,
                    o.last_flush = e,
                    o.status === ut)
                    if (2 === o.wrap)
                        t.adler = 0,
                            l(o, 31),
                            l(o, 139),
                            l(o, 8),
                            o.gzhead ? (l(o, (o.gzhead.text ? 1 : 0) + (o.gzhead.hcrc ? 2 : 0) + (o.gzhead.extra ? 4 : 0) + (o.gzhead.name ? 8 : 0) + (o.gzhead.comment ? 16 : 0)),
                                l(o, 255 & o.gzhead.time),
                                l(o, o.gzhead.time >> 8 & 255),
                                l(o, o.gzhead.time >> 16 & 255),
                                l(o, o.gzhead.time >> 24 & 255),
                                l(o, 9 === o.level ? 2 : o.strategy >= G || o.level < 2 ? 4 : 0),
                                l(o, 255 & o.gzhead.os),
                                o.gzhead.extra && o.gzhead.extra.length && (l(o, 255 & o.gzhead.extra.length),
                                    l(o, o.gzhead.extra.length >> 8 & 255)),
                                o.gzhead.hcrc && (t.adler = O(t.adler, o.pending_buf, o.pending, 0)),
                                o.gzindex = 0,
                                o.status = ct) : (l(o, 0),
                                    l(o, 0),
                                    l(o, 0),
                                    l(o, 0),
                                    l(o, 0),
                                    l(o, 9 === o.level ? 2 : o.strategy >= G || o.level < 2 ? 4 : 0),
                                    l(o, zt),
                                    o.status = wt);
                    else {
                        var _ = V + (o.w_bits - 8 << 4) << 8
                            , u = -1;
                        u = o.strategy >= G || o.level < 2 ? 0 : o.level < 6 ? 1 : 6 === o.level ? 2 : 3,
                            _ |= u << 6,
                            0 !== o.strstart && (_ |= _t),
                            _ += 31 - _ % 31,
                            o.status = wt,
                            h(o, _),
                            0 !== o.strstart && (h(o, t.adler >>> 16),
                                h(o, 65535 & t.adler)),
                            t.adler = 1
                    }
                if (o.status === ct)
                    if (o.gzhead.extra) {
                        for (d = o.pending; o.gzindex < (65535 & o.gzhead.extra.length) && (o.pending !== o.pending_buf_size || (o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                            s(t),
                            d = o.pending,
                            o.pending !== o.pending_buf_size));)
                            l(o, 255 & o.gzhead.extra[o.gzindex]),
                                o.gzindex++;
                        o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                            o.gzindex === o.gzhead.extra.length && (o.gzindex = 0,
                                o.status = bt)
                    } else
                        o.status = bt;
                if (o.status === bt)
                    if (o.gzhead.name) {
                        d = o.pending;
                        do {
                            if (o.pending === o.pending_buf_size && (o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                                s(t),
                                d = o.pending,
                                o.pending === o.pending_buf_size)) {
                                f = 1;
                                break
                            }
                            f = o.gzindex < o.gzhead.name.length ? 255 & o.gzhead.name.charCodeAt(o.gzindex++) : 0,
                                l(o, f)
                        } while (0 !== f); o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                            0 === f && (o.gzindex = 0,
                                o.status = gt)
                    } else
                        o.status = gt;
                if (o.status === gt)
                    if (o.gzhead.comment) {
                        d = o.pending;
                        do {
                            if (o.pending === o.pending_buf_size && (o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                                s(t),
                                d = o.pending,
                                o.pending === o.pending_buf_size)) {
                                f = 1;
                                break
                            }
                            f = o.gzindex < o.gzhead.comment.length ? 255 & o.gzhead.comment.charCodeAt(o.gzindex++) : 0,
                                l(o, f)
                        } while (0 !== f); o.gzhead.hcrc && o.pending > d && (t.adler = O(t.adler, o.pending_buf, o.pending - d, d)),
                            0 === f && (o.status = mt)
                    } else
                        o.status = mt;
                if (o.status === mt && (o.gzhead.hcrc ? (o.pending + 2 > o.pending_buf_size && s(t),
                    o.pending + 2 <= o.pending_buf_size && (l(o, 255 & t.adler),
                        l(o, t.adler >> 8 & 255),
                        t.adler = 0,
                        o.status = wt)) : o.status = wt),
                    0 !== o.pending) {
                    if (s(t),
                        0 === t.avail_out)
                        return o.last_flush = -1,
                            H
                } else if (0 === t.avail_in && n(e) <= n(a) && e !== F)
                    return i(t, P);
                if (o.status === pt && 0 !== t.avail_in)
                    return i(t, P);
                if (0 !== t.avail_in || 0 !== o.lookahead || e !== I && o.status !== pt) {
                    var c = o.strategy === G ? m(o, e) : o.strategy === X ? g(o, e) : Z[o.level].func(o, e);
                    if (c !== yt && c !== xt || (o.status = pt),
                        c === vt || c === yt)
                        return 0 === t.avail_out && (o.last_flush = -1),
                            H;
                    if (c === kt && (e === U ? C._tr_align(o) : e !== L && (C._tr_stored_block(o, 0, 0, !1),
                        e === T && (r(o.head),
                            0 === o.lookahead && (o.strstart = 0,
                                o.block_start = 0,
                                o.insert = 0))),
                        s(t),
                        0 === t.avail_out))
                        return o.last_flush = -1,
                            H
                }
                return e !== F ? H : o.wrap <= 0 ? j : (2 === o.wrap ? (l(o, 255 & t.adler),
                    l(o, t.adler >> 8 & 255),
                    l(o, t.adler >> 16 & 255),
                    l(o, t.adler >> 24 & 255),
                    l(o, 255 & t.total_in),
                    l(o, t.total_in >> 8 & 255),
                    l(o, t.total_in >> 16 & 255),
                    l(o, t.total_in >> 24 & 255)) : (h(o, t.adler >>> 16),
                        h(o, 65535 & t.adler)),
                    s(t),
                    o.wrap > 0 && (o.wrap = -o.wrap),
                    0 !== o.pending ? H : j)
            }
            function E(t) {
                var e;
                return t && t.state ? (e = t.state.status,
                    e !== ut && e !== ct && e !== bt && e !== gt && e !== mt && e !== wt && e !== pt ? i(t, K) : (t.state = null,
                        e === wt ? i(t, M) : H)) : K
            }
            function A(t, e) {
                var a, i, n, s, o, l, h, d, f = e.length;
                if (!t || !t.state)
                    return K;
                if (a = t.state,
                    s = a.wrap,
                    2 === s || 1 === s && a.status !== ut || a.lookahead)
                    return K;
                for (1 === s && (t.adler = N(t.adler, e, f, 0)),
                    a.wrap = 0,
                    f >= a.w_size && (0 === s && (r(a.head),
                        a.strstart = 0,
                        a.block_start = 0,
                        a.insert = 0),
                        d = new R.Buf8(a.w_size),
                        R.arraySet(d, e, f - a.w_size, a.w_size, 0),
                        e = d,
                        f = a.w_size),
                    o = t.avail_in,
                    l = t.next_in,
                    h = t.input,
                    t.avail_in = f,
                    t.next_in = 0,
                    t.input = e,
                    _(a); a.lookahead >= ht;) {
                    i = a.strstart,
                        n = a.lookahead - (ht - 1);
                    do
                        a.ins_h = (a.ins_h << a.hash_shift ^ a.window[i + ht - 1]) & a.hash_mask,
                            a.prev[i & a.w_mask] = a.head[a.ins_h],
                            a.head[a.ins_h] = i,
                            i++;
                    while (--n); a.strstart = i,
                        a.lookahead = ht - 1,
                        _(a)
                }
                return a.strstart += a.lookahead,
                    a.block_start = a.strstart,
                    a.insert = a.lookahead,
                    a.lookahead = 0,
                    a.match_length = a.prev_length = ht - 1,
                    a.match_available = 0,
                    t.next_in = l,
                    t.input = h,
                    t.avail_in = o,
                    a.wrap = s,
                    H
            }
            var Z, R = t("../utils/common"), C = t("./trees"), N = t("./adler32"), O = t("./crc32"), D = t("./messages"), I = 0, U = 1, T = 3, F = 4, L = 5, H = 0, j = 1, K = -2, M = -3, P = -5, Y = -1, q = 1, G = 2, X = 3, W = 4, J = 0, Q = 2, V = 8, $ = 9, tt = 15, et = 8, at = 29, it = 256, nt = it + 1 + at, rt = 30, st = 19, ot = 2 * nt + 1, lt = 15, ht = 3, dt = 258, ft = dt + ht + 1, _t = 32, ut = 42, ct = 69, bt = 73, gt = 91, mt = 103, wt = 113, pt = 666, vt = 1, kt = 2, yt = 3, xt = 4, zt = 3;
            Z = [new w(0, 0, 0, 0, u), new w(4, 4, 8, 4, c), new w(4, 5, 16, 8, c), new w(4, 6, 32, 32, c), new w(4, 4, 16, 16, b), new w(8, 16, 32, 32, b), new w(8, 16, 128, 128, b), new w(8, 32, 128, 256, b), new w(32, 128, 258, 1024, b), new w(32, 258, 258, 4096, b)],
                a.deflateInit = B,
                a.deflateInit2 = z,
                a.deflateReset = y,
                a.deflateResetKeep = k,
                a.deflateSetHeader = x,
                a.deflate = S,
                a.deflateEnd = E,
                a.deflateSetDictionary = A,
                a.deflateInfo = "pako deflate (from Nodeca project)"
        }
            , {
            "../utils/common": 3,
            "./adler32": 5,
            "./crc32": 7,
            "./messages": 13,
            "./trees": 14
        }],
        9: [function (t, e, a) {
            "use strict";
            function i() {
                this.text = 0,
                    this.time = 0,
                    this.xflags = 0,
                    this.os = 0,
                    this.extra = null,
                    this.extra_len = 0,
                    this.name = "",
                    this.comment = "",
                    this.hcrc = 0,
                    this.done = !1
            }
            e.exports = i
        }
            , {}],
        10: [function (t, e, a) {
            "use strict";
            var i = 30
                , n = 12;
            e.exports = function (t, e) {
                var a, r, s, o, l, h, d, f, _, u, c, b, g, m, w, p, v, k, y, x, z, B, S, E, A;
                a = t.state,
                    r = t.next_in,
                    E = t.input,
                    s = r + (t.avail_in - 5),
                    o = t.next_out,
                    A = t.output,
                    l = o - (e - t.avail_out),
                    h = o + (t.avail_out - 257),
                    d = a.dmax,
                    f = a.wsize,
                    _ = a.whave,
                    u = a.wnext,
                    c = a.window,
                    b = a.hold,
                    g = a.bits,
                    m = a.lencode,
                    w = a.distcode,
                    p = (1 << a.lenbits) - 1,
                    v = (1 << a.distbits) - 1;
                t: do {
                    g < 15 && (b += E[r++] << g,
                        g += 8,
                        b += E[r++] << g,
                        g += 8),
                        k = m[b & p];
                    e: for (; ;) {
                        if (y = k >>> 24,
                            b >>>= y,
                            g -= y,
                            y = k >>> 16 & 255,
                            0 === y)
                            A[o++] = 65535 & k;
                        else {
                            if (!(16 & y)) {
                                if (0 === (64 & y)) {
                                    k = m[(65535 & k) + (b & (1 << y) - 1)];
                                    continue e
                                }
                                if (32 & y) {
                                    a.mode = n;
                                    break t
                                }
                                t.msg = "invalid literal/length code",
                                    a.mode = i;
                                break t
                            }
                            x = 65535 & k,
                                y &= 15,
                                y && (g < y && (b += E[r++] << g,
                                    g += 8),
                                    x += b & (1 << y) - 1,
                                    b >>>= y,
                                    g -= y),
                                g < 15 && (b += E[r++] << g,
                                    g += 8,
                                    b += E[r++] << g,
                                    g += 8),
                                k = w[b & v];
                            a: for (; ;) {
                                if (y = k >>> 24,
                                    b >>>= y,
                                    g -= y,
                                    y = k >>> 16 & 255,
                                    !(16 & y)) {
                                    if (0 === (64 & y)) {
                                        k = w[(65535 & k) + (b & (1 << y) - 1)];
                                        continue a
                                    }
                                    t.msg = "invalid distance code",
                                        a.mode = i;
                                    break t
                                }
                                if (z = 65535 & k,
                                    y &= 15,
                                    g < y && (b += E[r++] << g,
                                        g += 8,
                                        g < y && (b += E[r++] << g,
                                            g += 8)),
                                    z += b & (1 << y) - 1,
                                    z > d) {
                                    t.msg = "invalid distance too far back",
                                        a.mode = i;
                                    break t
                                }
                                if (b >>>= y,
                                    g -= y,
                                    y = o - l,
                                    z > y) {
                                    if (y = z - y,
                                        y > _ && a.sane) {
                                        t.msg = "invalid distance too far back",
                                            a.mode = i;
                                        break t
                                    }
                                    if (B = 0,
                                        S = c,
                                        0 === u) {
                                        if (B += f - y,
                                            y < x) {
                                            x -= y;
                                            do
                                                A[o++] = c[B++];
                                            while (--y); B = o - z,
                                                S = A
                                        }
                                    } else if (u < y) {
                                        if (B += f + u - y,
                                            y -= u,
                                            y < x) {
                                            x -= y;
                                            do
                                                A[o++] = c[B++];
                                            while (--y); if (B = 0,
                                                u < x) {
                                                y = u,
                                                    x -= y;
                                                do
                                                    A[o++] = c[B++];
                                                while (--y); B = o - z,
                                                    S = A
                                            }
                                        }
                                    } else if (B += u - y,
                                        y < x) {
                                        x -= y;
                                        do
                                            A[o++] = c[B++];
                                        while (--y); B = o - z,
                                            S = A
                                    }
                                    for (; x > 2;)
                                        A[o++] = S[B++],
                                            A[o++] = S[B++],
                                            A[o++] = S[B++],
                                            x -= 3;
                                    x && (A[o++] = S[B++],
                                        x > 1 && (A[o++] = S[B++]))
                                } else {
                                    B = o - z;
                                    do
                                        A[o++] = A[B++],
                                            A[o++] = A[B++],
                                            A[o++] = A[B++],
                                            x -= 3;
                                    while (x > 2); x && (A[o++] = A[B++],
                                        x > 1 && (A[o++] = A[B++]))
                                }
                                break
                            }
                        }
                        break
                    }
                } while (r < s && o < h); x = g >> 3,
                    r -= x,
                    g -= x << 3,
                    b &= (1 << g) - 1,
                    t.next_in = r,
                    t.next_out = o,
                    t.avail_in = r < s ? 5 + (s - r) : 5 - (r - s),
                    t.avail_out = o < h ? 257 + (h - o) : 257 - (o - h),
                    a.hold = b,
                    a.bits = g
            }
        }
            , {}],
        11: [function (t, e, a) {
            "use strict";
            function i(t) {
                return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((65280 & t) << 8) + ((255 & t) << 24)
            }
            function n() {
                this.mode = 0,
                    this.last = !1,
                    this.wrap = 0,
                    this.havedict = !1,
                    this.flags = 0,
                    this.dmax = 0,
                    this.check = 0,
                    this.total = 0,
                    this.head = null,
                    this.wbits = 0,
                    this.wsize = 0,
                    this.whave = 0,
                    this.wnext = 0,
                    this.window = null,
                    this.hold = 0,
                    this.bits = 0,
                    this.length = 0,
                    this.offset = 0,
                    this.extra = 0,
                    this.lencode = null,
                    this.distcode = null,
                    this.lenbits = 0,
                    this.distbits = 0,
                    this.ncode = 0,
                    this.nlen = 0,
                    this.ndist = 0,
                    this.have = 0,
                    this.next = null,
                    this.lens = new w.Buf16(320),
                    this.work = new w.Buf16(288),
                    this.lendyn = null,
                    this.distdyn = null,
                    this.sane = 0,
                    this.back = 0,
                    this.was = 0
            }
            function r(t) {
                var e;
                return t && t.state ? (e = t.state,
                    t.total_in = t.total_out = e.total = 0,
                    t.msg = "",
                    e.wrap && (t.adler = 1 & e.wrap),
                    e.mode = T,
                    e.last = 0,
                    e.havedict = 0,
                    e.dmax = 32768,
                    e.head = null,
                    e.hold = 0,
                    e.bits = 0,
                    e.lencode = e.lendyn = new w.Buf32(bt),
                    e.distcode = e.distdyn = new w.Buf32(gt),
                    e.sane = 1,
                    e.back = -1,
                    Z) : N
            }
            function s(t) {
                var e;
                return t && t.state ? (e = t.state,
                    e.wsize = 0,
                    e.whave = 0,
                    e.wnext = 0,
                    r(t)) : N
            }
            function o(t, e) {
                var a, i;
                return t && t.state ? (i = t.state,
                    e < 0 ? (a = 0,
                        e = -e) : (a = (e >> 4) + 1,
                            e < 48 && (e &= 15)),
                    e && (e < 8 || e > 15) ? N : (null !== i.window && i.wbits !== e && (i.window = null),
                        i.wrap = a,
                        i.wbits = e,
                        s(t))) : N
            }
            function l(t, e) {
                var a, i;
                return t ? (i = new n,
                    t.state = i,
                    i.window = null,
                    a = o(t, e),
                    a !== Z && (t.state = null),
                    a) : N
            }
            function h(t) {
                return l(t, wt)
            }
            function d(t) {
                if (pt) {
                    var e;
                    for (g = new w.Buf32(512),
                        m = new w.Buf32(32),
                        e = 0; e < 144;)
                        t.lens[e++] = 8;
                    for (; e < 256;)
                        t.lens[e++] = 9;
                    for (; e < 280;)
                        t.lens[e++] = 7;
                    for (; e < 288;)
                        t.lens[e++] = 8;
                    for (y(z, t.lens, 0, 288, g, 0, t.work, {
                        bits: 9
                    }),
                        e = 0; e < 32;)
                        t.lens[e++] = 5;
                    y(B, t.lens, 0, 32, m, 0, t.work, {
                        bits: 5
                    }),
                        pt = !1
                }
                t.lencode = g,
                    t.lenbits = 9,
                    t.distcode = m,
                    t.distbits = 5
            }
            function f(t, e, a, i) {
                var n, r = t.state;
                return null === r.window && (r.wsize = 1 << r.wbits,
                    r.wnext = 0,
                    r.whave = 0,
                    r.window = new w.Buf8(r.wsize)),
                    i >= r.wsize ? (w.arraySet(r.window, e, a - r.wsize, r.wsize, 0),
                        r.wnext = 0,
                        r.whave = r.wsize) : (n = r.wsize - r.wnext,
                            n > i && (n = i),
                            w.arraySet(r.window, e, a - i, n, r.wnext),
                            i -= n,
                            i ? (w.arraySet(r.window, e, a - i, i, 0),
                                r.wnext = i,
                                r.whave = r.wsize) : (r.wnext += n,
                                    r.wnext === r.wsize && (r.wnext = 0),
                                    r.whave < r.wsize && (r.whave += n))),
                    0
            }
            function _(t, e) {
                var a, n, r, s, o, l, h, _, u, c, b, g, m, bt, gt, mt, wt, pt, vt, kt, yt, xt, zt, Bt, St = 0, Et = new w.Buf8(4), At = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                if (!t || !t.state || !t.output || !t.input && 0 !== t.avail_in)
                    return N;
                a = t.state,
                    a.mode === X && (a.mode = W),
                    o = t.next_out,
                    r = t.output,
                    h = t.avail_out,
                    s = t.next_in,
                    n = t.input,
                    l = t.avail_in,
                    _ = a.hold,
                    u = a.bits,
                    c = l,
                    b = h,
                    xt = Z;
                t: for (; ;)
                    switch (a.mode) {
                        case T:
                            if (0 === a.wrap) {
                                a.mode = W;
                                break
                            }
                            for (; u < 16;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if (2 & a.wrap && 35615 === _) {
                                a.check = 0,
                                    Et[0] = 255 & _,
                                    Et[1] = _ >>> 8 & 255,
                                    a.check = v(a.check, Et, 2, 0),
                                    _ = 0,
                                    u = 0,
                                    a.mode = F;
                                break
                            }
                            if (a.flags = 0,
                                a.head && (a.head.done = !1),
                                !(1 & a.wrap) || (((255 & _) << 8) + (_ >> 8)) % 31) {
                                t.msg = "incorrect header check",
                                    a.mode = _t;
                                break
                            }
                            if ((15 & _) !== U) {
                                t.msg = "unknown compression method",
                                    a.mode = _t;
                                break
                            }
                            if (_ >>>= 4,
                                u -= 4,
                                yt = (15 & _) + 8,
                                0 === a.wbits)
                                a.wbits = yt;
                            else if (yt > a.wbits) {
                                t.msg = "invalid window size",
                                    a.mode = _t;
                                break
                            }
                            a.dmax = 1 << yt,
                                t.adler = a.check = 1,
                                a.mode = 512 & _ ? q : X,
                                _ = 0,
                                u = 0;
                            break;
                        case F:
                            for (; u < 16;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if (a.flags = _,
                                (255 & a.flags) !== U) {
                                t.msg = "unknown compression method",
                                    a.mode = _t;
                                break
                            }
                            if (57344 & a.flags) {
                                t.msg = "unknown header flags set",
                                    a.mode = _t;
                                break
                            }
                            a.head && (a.head.text = _ >> 8 & 1),
                                512 & a.flags && (Et[0] = 255 & _,
                                    Et[1] = _ >>> 8 & 255,
                                    a.check = v(a.check, Et, 2, 0)),
                                _ = 0,
                                u = 0,
                                a.mode = L;
                        case L:
                            for (; u < 32;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            a.head && (a.head.time = _),
                                512 & a.flags && (Et[0] = 255 & _,
                                    Et[1] = _ >>> 8 & 255,
                                    Et[2] = _ >>> 16 & 255,
                                    Et[3] = _ >>> 24 & 255,
                                    a.check = v(a.check, Et, 4, 0)),
                                _ = 0,
                                u = 0,
                                a.mode = H;
                        case H:
                            for (; u < 16;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            a.head && (a.head.xflags = 255 & _,
                                a.head.os = _ >> 8),
                                512 & a.flags && (Et[0] = 255 & _,
                                    Et[1] = _ >>> 8 & 255,
                                    a.check = v(a.check, Et, 2, 0)),
                                _ = 0,
                                u = 0,
                                a.mode = j;
                        case j:
                            if (1024 & a.flags) {
                                for (; u < 16;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                a.length = _,
                                    a.head && (a.head.extra_len = _),
                                    512 & a.flags && (Et[0] = 255 & _,
                                        Et[1] = _ >>> 8 & 255,
                                        a.check = v(a.check, Et, 2, 0)),
                                    _ = 0,
                                    u = 0
                            } else
                                a.head && (a.head.extra = null);
                            a.mode = K;
                        case K:
                            if (1024 & a.flags && (g = a.length,
                                g > l && (g = l),
                                g && (a.head && (yt = a.head.extra_len - a.length,
                                    a.head.extra || (a.head.extra = new Array(a.head.extra_len)),
                                    w.arraySet(a.head.extra, n, s, g, yt)),
                                    512 & a.flags && (a.check = v(a.check, n, g, s)),
                                    l -= g,
                                    s += g,
                                    a.length -= g),
                                a.length))
                                break t;
                            a.length = 0,
                                a.mode = M;
                        case M:
                            if (2048 & a.flags) {
                                if (0 === l)
                                    break t;
                                g = 0;
                                do
                                    yt = n[s + g++],
                                        a.head && yt && a.length < 65536 && (a.head.name += String.fromCharCode(yt));
                                while (yt && g < l); if (512 & a.flags && (a.check = v(a.check, n, g, s)),
                                    l -= g,
                                    s += g,
                                    yt)
                                    break t
                            } else
                                a.head && (a.head.name = null);
                            a.length = 0,
                                a.mode = P;
                        case P:
                            if (4096 & a.flags) {
                                if (0 === l)
                                    break t;
                                g = 0;
                                do
                                    yt = n[s + g++],
                                        a.head && yt && a.length < 65536 && (a.head.comment += String.fromCharCode(yt));
                                while (yt && g < l); if (512 & a.flags && (a.check = v(a.check, n, g, s)),
                                    l -= g,
                                    s += g,
                                    yt)
                                    break t
                            } else
                                a.head && (a.head.comment = null);
                            a.mode = Y;
                        case Y:
                            if (512 & a.flags) {
                                for (; u < 16;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                if (_ !== (65535 & a.check)) {
                                    t.msg = "header crc mismatch",
                                        a.mode = _t;
                                    break
                                }
                                _ = 0,
                                    u = 0
                            }
                            a.head && (a.head.hcrc = a.flags >> 9 & 1,
                                a.head.done = !0),
                                t.adler = a.check = 0,
                                a.mode = X;
                            break;
                        case q:
                            for (; u < 32;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            t.adler = a.check = i(_),
                                _ = 0,
                                u = 0,
                                a.mode = G;
                        case G:
                            if (0 === a.havedict)
                                return t.next_out = o,
                                    t.avail_out = h,
                                    t.next_in = s,
                                    t.avail_in = l,
                                    a.hold = _,
                                    a.bits = u,
                                    C;
                            t.adler = a.check = 1,
                                a.mode = X;
                        case X:
                            if (e === E || e === A)
                                break t;
                        case W:
                            if (a.last) {
                                _ >>>= 7 & u,
                                    u -= 7 & u,
                                    a.mode = ht;
                                break
                            }
                            for (; u < 3;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            switch (a.last = 1 & _,
                            _ >>>= 1,
                            u -= 1,
                            3 & _) {
                                case 0:
                                    a.mode = J;
                                    break;
                                case 1:
                                    if (d(a),
                                        a.mode = at,
                                        e === A) {
                                        _ >>>= 2,
                                            u -= 2;
                                        break t
                                    }
                                    break;
                                case 2:
                                    a.mode = $;
                                    break;
                                case 3:
                                    t.msg = "invalid block type",
                                        a.mode = _t
                            }
                            _ >>>= 2,
                                u -= 2;
                            break;
                        case J:
                            for (_ >>>= 7 & u,
                                u -= 7 & u; u < 32;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if ((65535 & _) !== (_ >>> 16 ^ 65535)) {
                                t.msg = "invalid stored block lengths",
                                    a.mode = _t;
                                break
                            }
                            if (a.length = 65535 & _,
                                _ = 0,
                                u = 0,
                                a.mode = Q,
                                e === A)
                                break t;
                        case Q:
                            a.mode = V;
                        case V:
                            if (g = a.length) {
                                if (g > l && (g = l),
                                    g > h && (g = h),
                                    0 === g)
                                    break t;
                                w.arraySet(r, n, s, g, o),
                                    l -= g,
                                    s += g,
                                    h -= g,
                                    o += g,
                                    a.length -= g;
                                break
                            }
                            a.mode = X;
                            break;
                        case $:
                            for (; u < 14;) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if (a.nlen = (31 & _) + 257,
                                _ >>>= 5,
                                u -= 5,
                                a.ndist = (31 & _) + 1,
                                _ >>>= 5,
                                u -= 5,
                                a.ncode = (15 & _) + 4,
                                _ >>>= 4,
                                u -= 4,
                                a.nlen > 286 || a.ndist > 30) {
                                t.msg = "too many length or distance symbols",
                                    a.mode = _t;
                                break
                            }
                            a.have = 0,
                                a.mode = tt;
                        case tt:
                            for (; a.have < a.ncode;) {
                                for (; u < 3;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                a.lens[At[a.have++]] = 7 & _,
                                    _ >>>= 3,
                                    u -= 3
                            }
                            for (; a.have < 19;)
                                a.lens[At[a.have++]] = 0;
                            if (a.lencode = a.lendyn,
                                a.lenbits = 7,
                                zt = {
                                    bits: a.lenbits
                                },
                                xt = y(x, a.lens, 0, 19, a.lencode, 0, a.work, zt),
                                a.lenbits = zt.bits,
                                xt) {
                                t.msg = "invalid code lengths set",
                                    a.mode = _t;
                                break
                            }
                            a.have = 0,
                                a.mode = et;
                        case et:
                            for (; a.have < a.nlen + a.ndist;) {
                                for (; St = a.lencode[_ & (1 << a.lenbits) - 1],
                                    gt = St >>> 24,
                                    mt = St >>> 16 & 255,
                                    wt = 65535 & St,
                                    !(gt <= u);) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                if (wt < 16)
                                    _ >>>= gt,
                                        u -= gt,
                                        a.lens[a.have++] = wt;
                                else {
                                    if (16 === wt) {
                                        for (Bt = gt + 2; u < Bt;) {
                                            if (0 === l)
                                                break t;
                                            l--,
                                                _ += n[s++] << u,
                                                u += 8
                                        }
                                        if (_ >>>= gt,
                                            u -= gt,
                                            0 === a.have) {
                                            t.msg = "invalid bit length repeat",
                                                a.mode = _t;
                                            break
                                        }
                                        yt = a.lens[a.have - 1],
                                            g = 3 + (3 & _),
                                            _ >>>= 2,
                                            u -= 2
                                    } else if (17 === wt) {
                                        for (Bt = gt + 3; u < Bt;) {
                                            if (0 === l)
                                                break t;
                                            l--,
                                                _ += n[s++] << u,
                                                u += 8
                                        }
                                        _ >>>= gt,
                                            u -= gt,
                                            yt = 0,
                                            g = 3 + (7 & _),
                                            _ >>>= 3,
                                            u -= 3
                                    } else {
                                        for (Bt = gt + 7; u < Bt;) {
                                            if (0 === l)
                                                break t;
                                            l--,
                                                _ += n[s++] << u,
                                                u += 8
                                        }
                                        _ >>>= gt,
                                            u -= gt,
                                            yt = 0,
                                            g = 11 + (127 & _),
                                            _ >>>= 7,
                                            u -= 7
                                    }
                                    if (a.have + g > a.nlen + a.ndist) {
                                        t.msg = "invalid bit length repeat",
                                            a.mode = _t;
                                        break
                                    }
                                    for (; g--;)
                                        a.lens[a.have++] = yt
                                }
                            }
                            if (a.mode === _t)
                                break;
                            if (0 === a.lens[256]) {
                                t.msg = "invalid code -- missing end-of-block",
                                    a.mode = _t;
                                break
                            }
                            if (a.lenbits = 9,
                                zt = {
                                    bits: a.lenbits
                                },
                                xt = y(z, a.lens, 0, a.nlen, a.lencode, 0, a.work, zt),
                                a.lenbits = zt.bits,
                                xt) {
                                t.msg = "invalid literal/lengths set",
                                    a.mode = _t;
                                break
                            }
                            if (a.distbits = 6,
                                a.distcode = a.distdyn,
                                zt = {
                                    bits: a.distbits
                                },
                                xt = y(B, a.lens, a.nlen, a.ndist, a.distcode, 0, a.work, zt),
                                a.distbits = zt.bits,
                                xt) {
                                t.msg = "invalid distances set",
                                    a.mode = _t;
                                break
                            }
                            if (a.mode = at,
                                e === A)
                                break t;
                        case at:
                            a.mode = it;
                        case it:
                            if (l >= 6 && h >= 258) {
                                t.next_out = o,
                                    t.avail_out = h,
                                    t.next_in = s,
                                    t.avail_in = l,
                                    a.hold = _,
                                    a.bits = u,
                                    k(t, b),
                                    o = t.next_out,
                                    r = t.output,
                                    h = t.avail_out,
                                    s = t.next_in,
                                    n = t.input,
                                    l = t.avail_in,
                                    _ = a.hold,
                                    u = a.bits,
                                    a.mode === X && (a.back = -1);
                                break
                            }
                            for (a.back = 0; St = a.lencode[_ & (1 << a.lenbits) - 1],
                                gt = St >>> 24,
                                mt = St >>> 16 & 255,
                                wt = 65535 & St,
                                !(gt <= u);) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if (mt && 0 === (240 & mt)) {
                                for (pt = gt,
                                    vt = mt,
                                    kt = wt; St = a.lencode[kt + ((_ & (1 << pt + vt) - 1) >> pt)],
                                    gt = St >>> 24,
                                    mt = St >>> 16 & 255,
                                    wt = 65535 & St,
                                    !(pt + gt <= u);) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                _ >>>= pt,
                                    u -= pt,
                                    a.back += pt
                            }
                            if (_ >>>= gt,
                                u -= gt,
                                a.back += gt,
                                a.length = wt,
                                0 === mt) {
                                a.mode = lt;
                                break
                            }
                            if (32 & mt) {
                                a.back = -1,
                                    a.mode = X;
                                break
                            }
                            if (64 & mt) {
                                t.msg = "invalid literal/length code",
                                    a.mode = _t;
                                break
                            }
                            a.extra = 15 & mt,
                                a.mode = nt;
                        case nt:
                            if (a.extra) {
                                for (Bt = a.extra; u < Bt;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                a.length += _ & (1 << a.extra) - 1,
                                    _ >>>= a.extra,
                                    u -= a.extra,
                                    a.back += a.extra
                            }
                            a.was = a.length,
                                a.mode = rt;
                        case rt:
                            for (; St = a.distcode[_ & (1 << a.distbits) - 1],
                                gt = St >>> 24,
                                mt = St >>> 16 & 255,
                                wt = 65535 & St,
                                !(gt <= u);) {
                                if (0 === l)
                                    break t;
                                l--,
                                    _ += n[s++] << u,
                                    u += 8
                            }
                            if (0 === (240 & mt)) {
                                for (pt = gt,
                                    vt = mt,
                                    kt = wt; St = a.distcode[kt + ((_ & (1 << pt + vt) - 1) >> pt)],
                                    gt = St >>> 24,
                                    mt = St >>> 16 & 255,
                                    wt = 65535 & St,
                                    !(pt + gt <= u);) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                _ >>>= pt,
                                    u -= pt,
                                    a.back += pt
                            }
                            if (_ >>>= gt,
                                u -= gt,
                                a.back += gt,
                                64 & mt) {
                                t.msg = "invalid distance code",
                                    a.mode = _t;
                                break
                            }
                            a.offset = wt,
                                a.extra = 15 & mt,
                                a.mode = st;
                        case st:
                            if (a.extra) {
                                for (Bt = a.extra; u < Bt;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                a.offset += _ & (1 << a.extra) - 1,
                                    _ >>>= a.extra,
                                    u -= a.extra,
                                    a.back += a.extra
                            }
                            if (a.offset > a.dmax) {
                                t.msg = "invalid distance too far back",
                                    a.mode = _t;
                                break
                            }
                            a.mode = ot;
                        case ot:
                            if (0 === h)
                                break t;
                            if (g = b - h,
                                a.offset > g) {
                                if (g = a.offset - g,
                                    g > a.whave && a.sane) {
                                    t.msg = "invalid distance too far back",
                                        a.mode = _t;
                                    break
                                }
                                g > a.wnext ? (g -= a.wnext,
                                    m = a.wsize - g) : m = a.wnext - g,
                                    g > a.length && (g = a.length),
                                    bt = a.window
                            } else
                                bt = r,
                                    m = o - a.offset,
                                    g = a.length;
                            g > h && (g = h),
                                h -= g,
                                a.length -= g;
                            do
                                r[o++] = bt[m++];
                            while (--g); 0 === a.length && (a.mode = it);
                            break;
                        case lt:
                            if (0 === h)
                                break t;
                            r[o++] = a.length,
                                h--,
                                a.mode = it;
                            break;
                        case ht:
                            if (a.wrap) {
                                for (; u < 32;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ |= n[s++] << u,
                                        u += 8
                                }
                                if (b -= h,
                                    t.total_out += b,
                                    a.total += b,
                                    b && (t.adler = a.check = a.flags ? v(a.check, r, b, o - b) : p(a.check, r, b, o - b)),
                                    b = h,
                                    (a.flags ? _ : i(_)) !== a.check) {
                                    t.msg = "incorrect data check",
                                        a.mode = _t;
                                    break
                                }
                                _ = 0,
                                    u = 0
                            }
                            a.mode = dt;
                        case dt:
                            if (a.wrap && a.flags) {
                                for (; u < 32;) {
                                    if (0 === l)
                                        break t;
                                    l--,
                                        _ += n[s++] << u,
                                        u += 8
                                }
                                if (_ !== (4294967295 & a.total)) {
                                    t.msg = "incorrect length check",
                                        a.mode = _t;
                                    break
                                }
                                _ = 0,
                                    u = 0
                            }
                            a.mode = ft;
                        case ft:
                            xt = R;
                            break t;
                        case _t:
                            xt = O;
                            break t;
                        case ut:
                            return D;
                        case ct:
                        default:
                            return N
                    }
                return t.next_out = o,
                    t.avail_out = h,
                    t.next_in = s,
                    t.avail_in = l,
                    a.hold = _,
                    a.bits = u,
                    (a.wsize || b !== t.avail_out && a.mode < _t && (a.mode < ht || e !== S)) && f(t, t.output, t.next_out, b - t.avail_out) ? (a.mode = ut,
                        D) : (c -= t.avail_in,
                            b -= t.avail_out,
                            t.total_in += c,
                            t.total_out += b,
                            a.total += b,
                            a.wrap && b && (t.adler = a.check = a.flags ? v(a.check, r, b, t.next_out - b) : p(a.check, r, b, t.next_out - b)),
                            t.data_type = a.bits + (a.last ? 64 : 0) + (a.mode === X ? 128 : 0) + (a.mode === at || a.mode === Q ? 256 : 0),
                            (0 === c && 0 === b || e === S) && xt === Z && (xt = I),
                            xt)
            }
            function u(t) {
                if (!t || !t.state)
                    return N;
                var e = t.state;
                return e.window && (e.window = null),
                    t.state = null,
                    Z
            }
            function c(t, e) {
                var a;
                return t && t.state ? (a = t.state,
                    0 === (2 & a.wrap) ? N : (a.head = e,
                        e.done = !1,
                        Z)) : N
            }
            function b(t, e) {
                var a, i, n, r = e.length;
                return t && t.state ? (a = t.state,
                    0 !== a.wrap && a.mode !== G ? N : a.mode === G && (i = 1,
                        i = p(i, e, r, 0),
                        i !== a.check) ? O : (n = f(t, e, r, r)) ? (a.mode = ut,
                            D) : (a.havedict = 1,
                                Z)) : N
            }
            var g, m, w = t("../utils/common"), p = t("./adler32"), v = t("./crc32"), k = t("./inffast"), y = t("./inftrees"), x = 0, z = 1, B = 2, S = 4, E = 5, A = 6, Z = 0, R = 1, C = 2, N = -2, O = -3, D = -4, I = -5, U = 8, T = 1, F = 2, L = 3, H = 4, j = 5, K = 6, M = 7, P = 8, Y = 9, q = 10, G = 11, X = 12, W = 13, J = 14, Q = 15, V = 16, $ = 17, tt = 18, et = 19, at = 20, it = 21, nt = 22, rt = 23, st = 24, ot = 25, lt = 26, ht = 27, dt = 28, ft = 29, _t = 30, ut = 31, ct = 32, bt = 852, gt = 592, mt = 15, wt = mt, pt = !0;
            a.inflateReset = s,
                a.inflateReset2 = o,
                a.inflateResetKeep = r,
                a.inflateInit = h,
                a.inflateInit2 = l,
                a.inflate = _,
                a.inflateEnd = u,
                a.inflateGetHeader = c,
                a.inflateSetDictionary = b,
                a.inflateInfo = "pako inflate (from Nodeca project)"
        }
            , {
            "../utils/common": 3,
            "./adler32": 5,
            "./crc32": 7,
            "./inffast": 10,
            "./inftrees": 12
        }],
        12: [function (t, e, a) {
            "use strict";
            var i = t("../utils/common")
                , n = 15
                , r = 852
                , s = 592
                , o = 0
                , l = 1
                , h = 2
                , d = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]
                , f = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]
                , _ = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]
                , u = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
            e.exports = function (t, e, a, c, b, g, m, w) {
                var p, v, k, y, x, z, B, S, E, A = w.bits, Z = 0, R = 0, C = 0, N = 0, O = 0, D = 0, I = 0, U = 0, T = 0, F = 0, L = null, H = 0, j = new i.Buf16(n + 1), K = new i.Buf16(n + 1), M = null, P = 0;
                for (Z = 0; Z <= n; Z++)
                    j[Z] = 0;
                for (R = 0; R < c; R++)
                    j[e[a + R]]++;
                for (O = A,
                    N = n; N >= 1 && 0 === j[N]; N--)
                    ;
                if (O > N && (O = N),
                    0 === N)
                    return b[g++] = 20971520,
                        b[g++] = 20971520,
                        w.bits = 1,
                        0;
                for (C = 1; C < N && 0 === j[C]; C++)
                    ;
                for (O < C && (O = C),
                    U = 1,
                    Z = 1; Z <= n; Z++)
                    if (U <<= 1,
                        U -= j[Z],
                        U < 0)
                        return -1;
                if (U > 0 && (t === o || 1 !== N))
                    return -1;
                for (K[1] = 0,
                    Z = 1; Z < n; Z++)
                    K[Z + 1] = K[Z] + j[Z];
                for (R = 0; R < c; R++)
                    0 !== e[a + R] && (m[K[e[a + R]]++] = R);
                if (t === o ? (L = M = m,
                    z = 19) : t === l ? (L = d,
                        H -= 257,
                        M = f,
                        P -= 257,
                        z = 256) : (L = _,
                            M = u,
                            z = -1),
                    F = 0,
                    R = 0,
                    Z = C,
                    x = g,
                    D = O,
                    I = 0,
                    k = -1,
                    T = 1 << O,
                    y = T - 1,
                    t === l && T > r || t === h && T > s)
                    return 1;
                for (; ;) {
                    B = Z - I,
                        m[R] < z ? (S = 0,
                            E = m[R]) : m[R] > z ? (S = M[P + m[R]],
                                E = L[H + m[R]]) : (S = 96,
                                    E = 0),
                        p = 1 << Z - I,
                        v = 1 << D,
                        C = v;
                    do
                        v -= p,
                            b[x + (F >> I) + v] = B << 24 | S << 16 | E | 0;
                    while (0 !== v); for (p = 1 << Z - 1; F & p;)
                        p >>= 1;
                    if (0 !== p ? (F &= p - 1,
                        F += p) : F = 0,
                        R++,
                        0 === --j[Z]) {
                        if (Z === N)
                            break;
                        Z = e[a + m[R]]
                    }
                    if (Z > O && (F & y) !== k) {
                        for (0 === I && (I = O),
                            x += C,
                            D = Z - I,
                            U = 1 << D; D + I < N && (U -= j[D + I],
                                !(U <= 0));)
                            D++,
                                U <<= 1;
                        if (T += 1 << D,
                            t === l && T > r || t === h && T > s)
                            return 1;
                        k = F & y,
                            b[k] = O << 24 | D << 16 | x - g | 0
                    }
                }
                return 0 !== F && (b[x + F] = Z - I << 24 | 64 << 16 | 0),
                    w.bits = O,
                    0
            }
        }
            , {
            "../utils/common": 3
        }],
        13: [function (t, e, a) {
            "use strict";
            e.exports = {
                2: "need dictionary",
                1: "stream end",
                0: "",
                "-1": "file error",
                "-2": "stream error",
                "-3": "data error",
                "-4": "insufficient memory",
                "-5": "buffer error",
                "-6": "incompatible version"
            }
        }
            , {}],
        14: [function (t, e, a) {
            "use strict";
            function i(t) {
                for (var e = t.length; --e >= 0;)
                    t[e] = 0
            }
            function n(t, e, a, i, n) {
                this.static_tree = t,
                    this.extra_bits = e,
                    this.extra_base = a,
                    this.elems = i,
                    this.max_length = n,
                    this.has_stree = t && t.length
            }
            function r(t, e) {
                this.dyn_tree = t,
                    this.max_code = 0,
                    this.stat_desc = e
            }
            function s(t) {
                return t < 256 ? lt[t] : lt[256 + (t >>> 7)]
            }
            function o(t, e) {
                t.pending_buf[t.pending++] = 255 & e,
                    t.pending_buf[t.pending++] = e >>> 8 & 255
            }
            function l(t, e, a) {
                t.bi_valid > W - a ? (t.bi_buf |= e << t.bi_valid & 65535,
                    o(t, t.bi_buf),
                    t.bi_buf = e >> W - t.bi_valid,
                    t.bi_valid += a - W) : (t.bi_buf |= e << t.bi_valid & 65535,
                        t.bi_valid += a)
            }
            function h(t, e, a) {
                l(t, a[2 * e], a[2 * e + 1])
            }
            function d(t, e) {
                var a = 0;
                do
                    a |= 1 & t,
                        t >>>= 1,
                        a <<= 1;
                while (--e > 0); return a >>> 1
            }
            function f(t) {
                16 === t.bi_valid ? (o(t, t.bi_buf),
                    t.bi_buf = 0,
                    t.bi_valid = 0) : t.bi_valid >= 8 && (t.pending_buf[t.pending++] = 255 & t.bi_buf,
                        t.bi_buf >>= 8,
                        t.bi_valid -= 8)
            }
            function _(t, e) {
                var a, i, n, r, s, o, l = e.dyn_tree, h = e.max_code, d = e.stat_desc.static_tree, f = e.stat_desc.has_stree, _ = e.stat_desc.extra_bits, u = e.stat_desc.extra_base, c = e.stat_desc.max_length, b = 0;
                for (r = 0; r <= X; r++)
                    t.bl_count[r] = 0;
                for (l[2 * t.heap[t.heap_max] + 1] = 0,
                    a = t.heap_max + 1; a < G; a++)
                    i = t.heap[a],
                        r = l[2 * l[2 * i + 1] + 1] + 1,
                        r > c && (r = c,
                            b++),
                        l[2 * i + 1] = r,
                        i > h || (t.bl_count[r]++,
                            s = 0,
                            i >= u && (s = _[i - u]),
                            o = l[2 * i],
                            t.opt_len += o * (r + s),
                            f && (t.static_len += o * (d[2 * i + 1] + s)));
                if (0 !== b) {
                    do {
                        for (r = c - 1; 0 === t.bl_count[r];)
                            r--;
                        t.bl_count[r]--,
                            t.bl_count[r + 1] += 2,
                            t.bl_count[c]--,
                            b -= 2
                    } while (b > 0); for (r = c; 0 !== r; r--)
                        for (i = t.bl_count[r]; 0 !== i;)
                            n = t.heap[--a],
                                n > h || (l[2 * n + 1] !== r && (t.opt_len += (r - l[2 * n + 1]) * l[2 * n],
                                    l[2 * n + 1] = r),
                                    i--)
                }
            }
            function u(t, e, a) {
                var i, n, r = new Array(X + 1), s = 0;
                for (i = 1; i <= X; i++)
                    r[i] = s = s + a[i - 1] << 1;
                for (n = 0; n <= e; n++) {
                    var o = t[2 * n + 1];
                    0 !== o && (t[2 * n] = d(r[o]++, o))
                }
            }
            function c() {
                var t, e, a, i, r, s = new Array(X + 1);
                for (a = 0,
                    i = 0; i < K - 1; i++)
                    for (dt[i] = a,
                        t = 0; t < 1 << et[i]; t++)
                        ht[a++] = i;
                for (ht[a - 1] = i,
                    r = 0,
                    i = 0; i < 16; i++)
                    for (ft[i] = r,
                        t = 0; t < 1 << at[i]; t++)
                        lt[r++] = i;
                for (r >>= 7; i < Y; i++)
                    for (ft[i] = r << 7,
                        t = 0; t < 1 << at[i] - 7; t++)
                        lt[256 + r++] = i;
                for (e = 0; e <= X; e++)
                    s[e] = 0;
                for (t = 0; t <= 143;)
                    st[2 * t + 1] = 8,
                        t++,
                        s[8]++;
                for (; t <= 255;)
                    st[2 * t + 1] = 9,
                        t++,
                        s[9]++;
                for (; t <= 279;)
                    st[2 * t + 1] = 7,
                        t++,
                        s[7]++;
                for (; t <= 287;)
                    st[2 * t + 1] = 8,
                        t++,
                        s[8]++;
                for (u(st, P + 1, s),
                    t = 0; t < Y; t++)
                    ot[2 * t + 1] = 5,
                        ot[2 * t] = d(t, 5);
                _t = new n(st, et, M + 1, P, X),
                    ut = new n(ot, at, 0, Y, X),
                    ct = new n(new Array(0), it, 0, q, J)
            }
            function b(t) {
                var e;
                for (e = 0; e < P; e++)
                    t.dyn_ltree[2 * e] = 0;
                for (e = 0; e < Y; e++)
                    t.dyn_dtree[2 * e] = 0;
                for (e = 0; e < q; e++)
                    t.bl_tree[2 * e] = 0;
                t.dyn_ltree[2 * Q] = 1,
                    t.opt_len = t.static_len = 0,
                    t.last_lit = t.matches = 0
            }
            function g(t) {
                t.bi_valid > 8 ? o(t, t.bi_buf) : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf),
                    t.bi_buf = 0,
                    t.bi_valid = 0
            }
            function m(t, e, a, i) {
                g(t),
                    i && (o(t, a),
                        o(t, ~a)),
                    N.arraySet(t.pending_buf, t.window, e, a, t.pending),
                    t.pending += a
            }
            function w(t, e, a, i) {
                var n = 2 * e
                    , r = 2 * a;
                return t[n] < t[r] || t[n] === t[r] && i[e] <= i[a]
            }
            function p(t, e, a) {
                for (var i = t.heap[a], n = a << 1; n <= t.heap_len && (n < t.heap_len && w(e, t.heap[n + 1], t.heap[n], t.depth) && n++,
                    !w(e, i, t.heap[n], t.depth));)
                    t.heap[a] = t.heap[n],
                        a = n,
                        n <<= 1;
                t.heap[a] = i
            }
            function v(t, e, a) {
                var i, n, r, o, d = 0;
                if (0 !== t.last_lit)
                    do
                        i = t.pending_buf[t.d_buf + 2 * d] << 8 | t.pending_buf[t.d_buf + 2 * d + 1],
                            n = t.pending_buf[t.l_buf + d],
                            d++,
                            0 === i ? h(t, n, e) : (r = ht[n],
                                h(t, r + M + 1, e),
                                o = et[r],
                                0 !== o && (n -= dt[r],
                                    l(t, n, o)),
                                i--,
                                r = s(i),
                                h(t, r, a),
                                o = at[r],
                                0 !== o && (i -= ft[r],
                                    l(t, i, o)));
                    while (d < t.last_lit); h(t, Q, e)
            }
            function k(t, e) {
                var a, i, n, r = e.dyn_tree, s = e.stat_desc.static_tree, o = e.stat_desc.has_stree, l = e.stat_desc.elems, h = -1;
                for (t.heap_len = 0,
                    t.heap_max = G,
                    a = 0; a < l; a++)
                    0 !== r[2 * a] ? (t.heap[++t.heap_len] = h = a,
                        t.depth[a] = 0) : r[2 * a + 1] = 0;
                for (; t.heap_len < 2;)
                    n = t.heap[++t.heap_len] = h < 2 ? ++h : 0,
                        r[2 * n] = 1,
                        t.depth[n] = 0,
                        t.opt_len--,
                        o && (t.static_len -= s[2 * n + 1]);
                for (e.max_code = h,
                    a = t.heap_len >> 1; a >= 1; a--)
                    p(t, r, a);
                n = l;
                do
                    a = t.heap[1],
                        t.heap[1] = t.heap[t.heap_len--],
                        p(t, r, 1),
                        i = t.heap[1],
                        t.heap[--t.heap_max] = a,
                        t.heap[--t.heap_max] = i,
                        r[2 * n] = r[2 * a] + r[2 * i],
                        t.depth[n] = (t.depth[a] >= t.depth[i] ? t.depth[a] : t.depth[i]) + 1,
                        r[2 * a + 1] = r[2 * i + 1] = n,
                        t.heap[1] = n++,
                        p(t, r, 1);
                while (t.heap_len >= 2); t.heap[--t.heap_max] = t.heap[1],
                    _(t, e),
                    u(r, h, t.bl_count)
            }
            function y(t, e, a) {
                var i, n, r = -1, s = e[1], o = 0, l = 7, h = 4;
                for (0 === s && (l = 138,
                    h = 3),
                    e[2 * (a + 1) + 1] = 65535,
                    i = 0; i <= a; i++)
                    n = s,
                        s = e[2 * (i + 1) + 1],
                        ++o < l && n === s || (o < h ? t.bl_tree[2 * n] += o : 0 !== n ? (n !== r && t.bl_tree[2 * n]++,
                            t.bl_tree[2 * V]++) : o <= 10 ? t.bl_tree[2 * $]++ : t.bl_tree[2 * tt]++,
                            o = 0,
                            r = n,
                            0 === s ? (l = 138,
                                h = 3) : n === s ? (l = 6,
                                    h = 3) : (l = 7,
                                        h = 4))
            }
            function x(t, e, a) {
                var i, n, r = -1, s = e[1], o = 0, d = 7, f = 4;
                for (0 === s && (d = 138,
                    f = 3),
                    i = 0; i <= a; i++)
                    if (n = s,
                        s = e[2 * (i + 1) + 1],
                        !(++o < d && n === s)) {
                        if (o < f) {
                            do
                                h(t, n, t.bl_tree);
                            while (0 !== --o)
                        } else
                            0 !== n ? (n !== r && (h(t, n, t.bl_tree),
                                o--),
                                h(t, V, t.bl_tree),
                                l(t, o - 3, 2)) : o <= 10 ? (h(t, $, t.bl_tree),
                                    l(t, o - 3, 3)) : (h(t, tt, t.bl_tree),
                                        l(t, o - 11, 7));
                        o = 0,
                            r = n,
                            0 === s ? (d = 138,
                                f = 3) : n === s ? (d = 6,
                                    f = 3) : (d = 7,
                                        f = 4)
                    }
            }
            function z(t) {
                var e;
                for (y(t, t.dyn_ltree, t.l_desc.max_code),
                    y(t, t.dyn_dtree, t.d_desc.max_code),
                    k(t, t.bl_desc),
                    e = q - 1; e >= 3 && 0 === t.bl_tree[2 * nt[e] + 1]; e--)
                    ;
                return t.opt_len += 3 * (e + 1) + 5 + 5 + 4,
                    e
            }
            function B(t, e, a, i) {
                var n;
                for (l(t, e - 257, 5),
                    l(t, a - 1, 5),
                    l(t, i - 4, 4),
                    n = 0; n < i; n++)
                    l(t, t.bl_tree[2 * nt[n] + 1], 3);
                x(t, t.dyn_ltree, e - 1),
                    x(t, t.dyn_dtree, a - 1)
            }
            function S(t) {
                var e, a = 4093624447;
                for (e = 0; e <= 31; e++,
                    a >>>= 1)
                    if (1 & a && 0 !== t.dyn_ltree[2 * e])
                        return D;
                if (0 !== t.dyn_ltree[18] || 0 !== t.dyn_ltree[20] || 0 !== t.dyn_ltree[26])
                    return I;
                for (e = 32; e < M; e++)
                    if (0 !== t.dyn_ltree[2 * e])
                        return I;
                return D
            }
            function E(t) {
                bt || (c(),
                    bt = !0),
                    t.l_desc = new r(t.dyn_ltree, _t),
                    t.d_desc = new r(t.dyn_dtree, ut),
                    t.bl_desc = new r(t.bl_tree, ct),
                    t.bi_buf = 0,
                    t.bi_valid = 0,
                    b(t)
            }
            function A(t, e, a, i) {
                l(t, (T << 1) + (i ? 1 : 0), 3),
                    m(t, e, a, !0)
            }
            function Z(t) {
                l(t, F << 1, 3),
                    h(t, Q, st),
                    f(t)
            }
            function R(t, e, a, i) {
                var n, r, s = 0;
                t.level > 0 ? (t.strm.data_type === U && (t.strm.data_type = S(t)),
                    k(t, t.l_desc),
                    k(t, t.d_desc),
                    s = z(t),
                    n = t.opt_len + 3 + 7 >>> 3,
                    r = t.static_len + 3 + 7 >>> 3,
                    r <= n && (n = r)) : n = r = a + 5,
                    a + 4 <= n && e !== -1 ? A(t, e, a, i) : t.strategy === O || r === n ? (l(t, (F << 1) + (i ? 1 : 0), 3),
                        v(t, st, ot)) : (l(t, (L << 1) + (i ? 1 : 0), 3),
                            B(t, t.l_desc.max_code + 1, t.d_desc.max_code + 1, s + 1),
                            v(t, t.dyn_ltree, t.dyn_dtree)),
                    b(t),
                    i && g(t)
            }
            function C(t, e, a) {
                return t.pending_buf[t.d_buf + 2 * t.last_lit] = e >>> 8 & 255,
                    t.pending_buf[t.d_buf + 2 * t.last_lit + 1] = 255 & e,
                    t.pending_buf[t.l_buf + t.last_lit] = 255 & a,
                    t.last_lit++,
                    0 === e ? t.dyn_ltree[2 * a]++ : (t.matches++,
                        e--,
                        t.dyn_ltree[2 * (ht[a] + M + 1)]++,
                        t.dyn_dtree[2 * s(e)]++),
                    t.last_lit === t.lit_bufsize - 1
            }
            var N = t("../utils/common")
                , O = 4
                , D = 0
                , I = 1
                , U = 2
                , T = 0
                , F = 1
                , L = 2
                , H = 3
                , j = 258
                , K = 29
                , M = 256
                , P = M + 1 + K
                , Y = 30
                , q = 19
                , G = 2 * P + 1
                , X = 15
                , W = 16
                , J = 7
                , Q = 256
                , V = 16
                , $ = 17
                , tt = 18
                , et = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
                , at = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
                , it = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
                , nt = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
                , rt = 512
                , st = new Array(2 * (P + 2));
            i(st);
            var ot = new Array(2 * Y);
            i(ot);
            var lt = new Array(rt);
            i(lt);
            var ht = new Array(j - H + 1);
            i(ht);
            var dt = new Array(K);
            i(dt);
            var ft = new Array(Y);
            i(ft);
            var _t, ut, ct, bt = !1;
            a._tr_init = E,
                a._tr_stored_block = A,
                a._tr_flush_block = R,
                a._tr_tally = C,
                a._tr_align = Z
        }
            , {
            "../utils/common": 3
        }],
        15: [function (t, e, a) {
            "use strict";
            function i() {
                this.input = null,
                    this.next_in = 0,
                    this.avail_in = 0,
                    this.total_in = 0,
                    this.output = null,
                    this.next_out = 0,
                    this.avail_out = 0,
                    this.total_out = 0,
                    this.msg = "",
                    this.state = null,
                    this.data_type = 2,
                    this.adler = 0
            }
            e.exports = i
        }
            , {}],
        "/": [function (t, e, a) {
            "use strict";
            var i = t("./lib/utils/common").assign
                , n = t("./lib/deflate")
                , r = t("./lib/inflate")
                , s = t("./lib/zlib/constants")
                , o = {};
            i(o, n, r, s),
                e.exports = o
        }
            , {
            "./lib/deflate": 1,
            "./lib/inflate": 2,
            "./lib/utils/common": 3,
            "./lib/zlib/constants": 6
        }]
    }, {}, [])("/")
});
/**
 * @license
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var PDFJS;

(function (PDFJS) {
    "use strict";

    var JpegError = (function JpegErrorClosure() {
        function JpegError(msg) {
            this.message = 'JPEG error: ' + msg;
        }

        JpegError.prototype = new Error();
        JpegError.prototype.name = 'JpegError';
        JpegError.constructor = JpegError;

        return JpegError;
    }
    )();

    var JpegImage = (function JpegImageClosure() {
        // prettier-ignore
        var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);

        var dctCos1 = 4017;
        // cos(pi/16)
        var dctSin1 = 799;
        // sin(pi/16)
        var dctCos3 = 3406;
        // cos(3*pi/16)
        var dctSin3 = 2276;
        // sin(3*pi/16)
        var dctCos6 = 1567;
        // cos(6*pi/16)
        var dctSin6 = 3784;
        // sin(6*pi/16)
        var dctSqrt2 = 5793;
        // sqrt(2)
        var dctSqrt1d2 = 2896;
        // sqrt(2) / 2

        // eslint-disable-next-line no-shadow
        function JpegImage({ decodeTransform = null, colorTransform = -1 } = {}) {
            this._decodeTransform = decodeTransform;
            this._colorTransform = colorTransform;
        }

        function buildHuffmanTable(codeLengths, values) {
            var k = 0, code = [], i, j, length = 16;
            while (length > 0 && !codeLengths[length - 1]) {
                length--;
            }
            code.push({
                children: [],
                index: 0
            });
            var p = code[0], q;
            for (i = 0; i < length; i++) {
                for (j = 0; j < codeLengths[i]; j++) {
                    p = code.pop();
                    p.children[p.index] = values[k];
                    while (p.index > 0) {
                        p = code.pop();
                    }
                    p.index++;
                    code.push(p);
                    while (code.length <= i) {
                        code.push((q = {
                            children: [],
                            index: 0
                        }));
                        p.children[p.index] = q.children;
                        p = q;
                    }
                    k++;
                }
                if (i + 1 < length) {
                    // p here points to last code
                    code.push((q = {
                        children: [],
                        index: 0
                    }));
                    p.children[p.index] = q.children;
                    p = q;
                }
            }
            return code[0].children;
        }

        function getBlockBufferOffset(component, row, col) {
            return 64 * ((component.blocksPerLine + 1) * row + col);
        }

        function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {
            var mcusPerLine = frame.mcusPerLine;
            var progressive = frame.progressive;

            const startOffset = offset;
            let bitsData = 0
                , bitsCount = 0;

            function readBit() {
                if (bitsCount > 0) {
                    bitsCount--;
                    return (bitsData >> bitsCount) & 1;
                }
                bitsData = data[offset++];
                if (bitsData === 0xff) {
                    var nextByte = data[offset++];
                    if (nextByte) {
                        if (nextByte === /* DNL = */
                            0xdc && parseDNLMarker) {
                            offset += 2;
                            // Skip marker length.

                            const scanLines = readUint16(data, offset);
                            offset += 2;
                            if (scanLines > 0 && scanLines !== frame.scanLines) {
                                throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", scanLines);
                            }
                        } else if (nextByte === /* EOI = */
                            0xd9) {
                            if (parseDNLMarker) {
                                // NOTE: only 8-bit JPEG images are supported in this decoder.
                                const maybeScanLines = blockRow * 8;
                                // Heuristic to attempt to handle corrupt JPEG images with too
                                // large `scanLines` parameter, by falling back to the currently
                                // parsed number of scanLines when it's at least one order of
                                // magnitude smaller than expected (fixes issue10880.pdf).
                                if (maybeScanLines > 0 && maybeScanLines < frame.scanLines / 10) {
                                    throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, " + "possibly caused by incorrect `scanLines` parameter", maybeScanLines);
                                }
                            }
                            throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data");
                        }
                        throw new JpegError(`unexpected marker ${((bitsData << 8) | nextByte).toString(16)}`);
                    }
                    // unstuff 0
                }
                bitsCount = 7;
                return bitsData >>> 7;
            }

            function decodeHuffman(tree) {
                var node = tree;
                while (true) {
                    node = node[readBit()];
                    switch (typeof node) {
                        case "number":
                            return node;
                        case "object":
                            continue;
                    }
                    throw new JpegError("invalid huffman sequence");
                }
            }

            function receive(length) {
                var n = 0;
                while (length > 0) {
                    n = (n << 1) | readBit();
                    length--;
                }
                return n;
            }

            function receiveAndExtend(length) {
                if (length === 1) {
                    return readBit() === 1 ? 1 : -1;
                }
                var n = receive(length);
                if (n >= 1 << (length - 1)) {
                    return n;
                }
                return n + (-1 << length) + 1;
            }

            function decodeBaseline(component, blockOffset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : receiveAndExtend(t);
                component.blockData[blockOffset] = component.pred += diff;
                var k = 1;
                while (k < 64) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15
                        , r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[blockOffset + z] = receiveAndExtend(s);
                    k++;
                }
            }

            function decodeDCFirst(component, blockOffset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
                component.blockData[blockOffset] = component.pred += diff;
            }

            function decodeDCSuccessive(component, blockOffset) {
                component.blockData[blockOffset] |= readBit() << successive;
            }

            var eobrun = 0;
            function decodeACFirst(component, blockOffset) {
                if (eobrun > 0) {
                    eobrun--;
                    return;
                }
                var k = spectralStart
                    , e = spectralEnd;
                while (k <= e) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15
                        , r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            eobrun = receive(r) + (1 << r) - 1;
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);
                    k++;
                }
            }

            var successiveACState = 0, successiveACNextValue;
            function decodeACSuccessive(component, blockOffset) {
                var k = spectralStart;
                var e = spectralEnd;
                var r = 0;
                var s;
                var rs;
                while (k <= e) {
                    const offsetZ = blockOffset + dctZigZag[k];
                    const sign = component.blockData[offsetZ] < 0 ? -1 : 1;
                    switch (successiveACState) {
                        case 0:
                            // initial state
                            rs = decodeHuffman(component.huffmanTableAC);
                            s = rs & 15;
                            r = rs >> 4;
                            if (s === 0) {
                                if (r < 15) {
                                    eobrun = receive(r) + (1 << r);
                                    successiveACState = 4;
                                } else {
                                    r = 16;
                                    successiveACState = 1;
                                }
                            } else {
                                if (s !== 1) {
                                    throw new JpegError("invalid ACn encoding");
                                }
                                successiveACNextValue = receiveAndExtend(s);
                                successiveACState = r ? 2 : 3;
                            }
                            continue;
                        case 1:
                        // skipping r zero items
                        case 2:
                            if (component.blockData[offsetZ]) {
                                component.blockData[offsetZ] += sign * (readBit() << successive);
                            } else {
                                r--;
                                if (r === 0) {
                                    successiveACState = successiveACState === 2 ? 3 : 0;
                                }
                            }
                            break;
                        case 3:
                            // set value for a zero item
                            if (component.blockData[offsetZ]) {
                                component.blockData[offsetZ] += sign * (readBit() << successive);
                            } else {
                                component.blockData[offsetZ] = successiveACNextValue << successive;
                                successiveACState = 0;
                            }
                            break;
                        case 4:
                            // eob
                            if (component.blockData[offsetZ]) {
                                component.blockData[offsetZ] += sign * (readBit() << successive);
                            }
                            break;
                    }
                    k++;
                }
                if (successiveACState === 4) {
                    eobrun--;
                    if (eobrun === 0) {
                        successiveACState = 0;
                    }
                }
            }

            let blockRow = 0;
            function decodeMcu(component, decode, mcu, row, col) {
                var mcuRow = (mcu / mcusPerLine) | 0;
                var mcuCol = mcu % mcusPerLine;
                blockRow = mcuRow * component.v + row;
                var blockCol = mcuCol * component.h + col;
                const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, blockOffset);
            }

            function decodeBlock(component, decode, mcu) {
                blockRow = (mcu / component.blocksPerLine) | 0;
                var blockCol = mcu % component.blocksPerLine;
                const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, blockOffset);
            }

            var componentsLength = components.length;
            var component, i, j, k, n;
            var decodeFn;
            if (progressive) {
                if (spectralStart === 0) {
                    decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
                } else {
                    decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
                }
            } else {
                decodeFn = decodeBaseline;
            }

            var mcu = 0, fileMarker;
            var mcuExpected;
            if (componentsLength === 1) {
                mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
            } else {
                mcuExpected = mcusPerLine * frame.mcusPerColumn;
            }

            var h, v;
            while (mcu <= mcuExpected) {
                // reset interval stuff
                var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;

                // The `mcuToRead === 0` case should only occur when all of the expected
                // MCU data has been already parsed, i.e. when `mcu === mcuExpected`, but
                // some corrupt JPEG images contain more data than intended and we thus
                // want to skip over any extra RSTx markers below (fixes issue11794.pdf).
                if (mcuToRead > 0) {
                    for (i = 0; i < componentsLength; i++) {
                        components[i].pred = 0;
                    }
                    eobrun = 0;

                    if (componentsLength === 1) {
                        component = components[0];
                        for (n = 0; n < mcuToRead; n++) {
                            decodeBlock(component, decodeFn, mcu);
                            mcu++;
                        }
                    } else {
                        for (n = 0; n < mcuToRead; n++) {
                            for (i = 0; i < componentsLength; i++) {
                                component = components[i];
                                h = component.h;
                                v = component.v;
                                for (j = 0; j < v; j++) {
                                    for (k = 0; k < h; k++) {
                                        decodeMcu(component, decodeFn, mcu, j, k);
                                    }
                                }
                            }
                            mcu++;
                        }
                    }
                }

                // find marker
                bitsCount = 0;
                fileMarker = findNextFileMarker(data, offset);
                if (!fileMarker) {
                    break;
                    // Reached the end of the image data without finding any marker.
                }
                if (fileMarker.invalid) {
                    // Some bad images seem to pad Scan blocks with e.g. zero bytes, skip
                    // past those to attempt to find a valid marker (fixes issue4090.pdf).
                    const partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";
                    warn(`decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`);
                    offset = fileMarker.offset;
                }
                if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {
                    // RSTx
                    offset += 2;
                } else {
                    break;
                }
            }

            return offset - startOffset;
        }

        // A port of poppler's IDCT method which in turn is taken from:
        //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
        //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',
        //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
        //   988-991.
        function quantizeAndInverse(component, blockBufferOffset, p) {
            var qt = component.quantizationTable
                , blockData = component.blockData;
            var v0, v1, v2, v3, v4, v5, v6, v7;
            var p0, p1, p2, p3, p4, p5, p6, p7;
            var t;

            if (!qt) {
                throw new JpegError("missing required Quantization Table.");
            }

            // inverse DCT on rows
            for (var row = 0; row < 64; row += 8) {
                // gather block data
                p0 = blockData[blockBufferOffset + row];
                p1 = blockData[blockBufferOffset + row + 1];
                p2 = blockData[blockBufferOffset + row + 2];
                p3 = blockData[blockBufferOffset + row + 3];
                p4 = blockData[blockBufferOffset + row + 4];
                p5 = blockData[blockBufferOffset + row + 5];
                p6 = blockData[blockBufferOffset + row + 6];
                p7 = blockData[blockBufferOffset + row + 7];

                // dequant p0
                p0 *= qt[row];

                // check for all-zero AC coefficients
                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = (dctSqrt2 * p0 + 512) >> 10;
                    p[row] = t;
                    p[row + 1] = t;
                    p[row + 2] = t;
                    p[row + 3] = t;
                    p[row + 4] = t;
                    p[row + 5] = t;
                    p[row + 6] = t;
                    p[row + 7] = t;
                    continue;
                }
                // dequant p1 ... p7
                p1 *= qt[row + 1];
                p2 *= qt[row + 2];
                p3 *= qt[row + 3];
                p4 *= qt[row + 4];
                p5 *= qt[row + 5];
                p6 *= qt[row + 6];
                p7 *= qt[row + 7];

                // stage 4
                v0 = (dctSqrt2 * p0 + 128) >> 8;
                v1 = (dctSqrt2 * p4 + 128) >> 8;
                v2 = p2;
                v3 = p6;
                v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;
                v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;
                v5 = p3 << 4;
                v6 = p5 << 4;

                // stage 3
                v0 = (v0 + v1 + 1) >> 1;
                v1 = v0 - v1;
                t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
                v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
                v3 = t;
                v4 = (v4 + v6 + 1) >> 1;
                v6 = v4 - v6;
                v7 = (v7 + v5 + 1) >> 1;
                v5 = v7 - v5;

                // stage 2
                v0 = (v0 + v3 + 1) >> 1;
                v3 = v0 - v3;
                v1 = (v1 + v2 + 1) >> 1;
                v2 = v1 - v2;
                t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
                v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
                v7 = t;
                t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
                v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
                v6 = t;

                // stage 1
                p[row] = v0 + v7;
                p[row + 7] = v0 - v7;
                p[row + 1] = v1 + v6;
                p[row + 6] = v1 - v6;
                p[row + 2] = v2 + v5;
                p[row + 5] = v2 - v5;
                p[row + 3] = v3 + v4;
                p[row + 4] = v3 - v4;
            }

            // inverse DCT on columns
            for (var col = 0; col < 8; ++col) {
                p0 = p[col];
                p1 = p[col + 8];
                p2 = p[col + 16];
                p3 = p[col + 24];
                p4 = p[col + 32];
                p5 = p[col + 40];
                p6 = p[col + 48];
                p7 = p[col + 56];

                // check for all-zero AC coefficients
                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
                    t = (dctSqrt2 * p0 + 8192) >> 14;
                    // Convert to 8-bit.
                    if (t < -2040) {
                        t = 0;
                    } else if (t >= 2024) {
                        t = 255;
                    } else {
                        t = (t + 2056) >> 4;
                    }
                    blockData[blockBufferOffset + col] = t;
                    blockData[blockBufferOffset + col + 8] = t;
                    blockData[blockBufferOffset + col + 16] = t;
                    blockData[blockBufferOffset + col + 24] = t;
                    blockData[blockBufferOffset + col + 32] = t;
                    blockData[blockBufferOffset + col + 40] = t;
                    blockData[blockBufferOffset + col + 48] = t;
                    blockData[blockBufferOffset + col + 56] = t;
                    continue;
                }

                // stage 4
                v0 = (dctSqrt2 * p0 + 2048) >> 12;
                v1 = (dctSqrt2 * p4 + 2048) >> 12;
                v2 = p2;
                v3 = p6;
                v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;
                v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;
                v5 = p3;
                v6 = p5;

                // stage 3
                // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when
                // converting to UInt8 range later.
                v0 = ((v0 + v1 + 1) >> 1) + 4112;
                v1 = v0 - v1;
                t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
                v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
                v3 = t;
                v4 = (v4 + v6 + 1) >> 1;
                v6 = v4 - v6;
                v7 = (v7 + v5 + 1) >> 1;
                v5 = v7 - v5;

                // stage 2
                v0 = (v0 + v3 + 1) >> 1;
                v3 = v0 - v3;
                v1 = (v1 + v2 + 1) >> 1;
                v2 = v1 - v2;
                t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
                v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
                v7 = t;
                t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
                v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
                v6 = t;

                // stage 1
                p0 = v0 + v7;
                p7 = v0 - v7;
                p1 = v1 + v6;
                p6 = v1 - v6;
                p2 = v2 + v5;
                p5 = v2 - v5;
                p3 = v3 + v4;
                p4 = v3 - v4;

                // Convert to 8-bit integers.
                if (p0 < 16) {
                    p0 = 0;
                } else if (p0 >= 4080) {
                    p0 = 255;
                } else {
                    p0 >>= 4;
                }
                if (p1 < 16) {
                    p1 = 0;
                } else if (p1 >= 4080) {
                    p1 = 255;
                } else {
                    p1 >>= 4;
                }
                if (p2 < 16) {
                    p2 = 0;
                } else if (p2 >= 4080) {
                    p2 = 255;
                } else {
                    p2 >>= 4;
                }
                if (p3 < 16) {
                    p3 = 0;
                } else if (p3 >= 4080) {
                    p3 = 255;
                } else {
                    p3 >>= 4;
                }
                if (p4 < 16) {
                    p4 = 0;
                } else if (p4 >= 4080) {
                    p4 = 255;
                } else {
                    p4 >>= 4;
                }
                if (p5 < 16) {
                    p5 = 0;
                } else if (p5 >= 4080) {
                    p5 = 255;
                } else {
                    p5 >>= 4;
                }
                if (p6 < 16) {
                    p6 = 0;
                } else if (p6 >= 4080) {
                    p6 = 255;
                } else {
                    p6 >>= 4;
                }
                if (p7 < 16) {
                    p7 = 0;
                } else if (p7 >= 4080) {
                    p7 = 255;
                } else {
                    p7 >>= 4;
                }

                // store block data
                blockData[blockBufferOffset + col] = p0;
                blockData[blockBufferOffset + col + 8] = p1;
                blockData[blockBufferOffset + col + 16] = p2;
                blockData[blockBufferOffset + col + 24] = p3;
                blockData[blockBufferOffset + col + 32] = p4;
                blockData[blockBufferOffset + col + 40] = p5;
                blockData[blockBufferOffset + col + 48] = p6;
                blockData[blockBufferOffset + col + 56] = p7;
            }
        }

        function buildComponentData(frame, component) {
            var blocksPerLine = component.blocksPerLine;
            var blocksPerColumn = component.blocksPerColumn;
            var computationBuffer = new Int16Array(64);

            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                    var offset = getBlockBufferOffset(component, blockRow, blockCol);
                    quantizeAndInverse(component, offset, computationBuffer);
                }
            }
            return component.blockData;
        }

        function findNextFileMarker(data, currentPos, startPos = currentPos) {
            const maxPos = data.length - 1;
            var newPos = startPos < currentPos ? startPos : currentPos;

            if (currentPos >= maxPos) {
                return null;
                // Don't attempt to read non-existent data and just return.
            }
            var currentMarker = readUint16(data, currentPos);
            if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {
                return {
                    invalid: null,
                    marker: currentMarker,
                    offset: currentPos,
                };
            }
            var newMarker = readUint16(data, newPos);
            while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {
                if (++newPos >= maxPos) {
                    return null;
                    // Don't attempt to read non-existent data and just return.
                }
                newMarker = readUint16(data, newPos);
            }
            return {
                invalid: currentMarker.toString(16),
                marker: newMarker,
                offset: newPos,
            };
        }

        JpegImage.prototype = {
            parse(data, { dnlScanLines = null } = {}) {
                function readDataBlock() {
                    const length = readUint16(data, offset);
                    offset += 2;
                    let endOffset = offset + length - 2;

                    var fileMarker = findNextFileMarker(data, endOffset, offset);
                    if (fileMarker && fileMarker.invalid) {
                        warn("readDataBlock - incorrect length, current marker is: " + fileMarker.invalid);
                        endOffset = fileMarker.offset;
                    }

                    var array = data.subarray(offset, endOffset);
                    offset += array.length;
                    return array;
                }

                function prepareComponents(frame) {
                    var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
                    var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
                    for (var i = 0; i < frame.components.length; i++) {
                        component = frame.components[i];
                        var blocksPerLine = Math.ceil((Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH);
                        var blocksPerColumn = Math.ceil((Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV);
                        var blocksPerLineForMcu = mcusPerLine * component.h;
                        var blocksPerColumnForMcu = mcusPerColumn * component.v;

                        var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                        component.blockData = new Int16Array(blocksBufferSize);
                        component.blocksPerLine = blocksPerLine;
                        component.blocksPerColumn = blocksPerColumn;
                    }
                    frame.mcusPerLine = mcusPerLine;
                    frame.mcusPerColumn = mcusPerColumn;
                }

                var offset = 0;
                var jfif = null;
                var adobe = null;
                var frame, resetInterval;
                let numSOSMarkers = 0;
                var quantizationTables = [];
                var huffmanTablesAC = []
                    , huffmanTablesDC = [];

                let fileMarker = readUint16(data, offset);
                offset += 2;
                if (fileMarker !== /* SOI (Start of Image) = */
                    0xffd8) {
                    throw new JpegError("SOI not found");
                }
                fileMarker = readUint16(data, offset);
                offset += 2;

                markerLoop: while (fileMarker !== /* EOI (End of Image) = */
                    0xffd9) {
                    var i, j, l;
                    switch (fileMarker) {
                        case 0xffe0:
                        // APP0 (Application Specific)
                        case 0xffe1:
                        // APP1
                        case 0xffe2:
                        // APP2
                        case 0xffe3:
                        // APP3
                        case 0xffe4:
                        // APP4
                        case 0xffe5:
                        // APP5
                        case 0xffe6:
                        // APP6
                        case 0xffe7:
                        // APP7
                        case 0xffe8:
                        // APP8
                        case 0xffe9:
                        // APP9
                        case 0xffea:
                        // APP10
                        case 0xffeb:
                        // APP11
                        case 0xffec:
                        // APP12
                        case 0xffed:
                        // APP13
                        case 0xffee:
                        // APP14
                        case 0xffef:
                        // APP15
                        case 0xfffe:
                            // COM (Comment)
                            var appData = readDataBlock();

                            if (fileMarker === 0xffe0) {
                                // 'JFIF\x00'
                                if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                                    jfif = {
                                        version: {
                                            major: appData[5],
                                            minor: appData[6]
                                        },
                                        densityUnits: appData[7],
                                        xDensity: (appData[8] << 8) | appData[9],
                                        yDensity: (appData[10] << 8) | appData[11],
                                        thumbWidth: appData[12],
                                        thumbHeight: appData[13],
                                        thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13]),
                                    };
                                }
                            }
                            // TODO APP1 - Exif
                            if (fileMarker === 0xffee) {
                                // 'Adobe'
                                if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {
                                    adobe = {
                                        version: (appData[5] << 8) | appData[6],
                                        flags0: (appData[7] << 8) | appData[8],
                                        flags1: (appData[9] << 8) | appData[10],
                                        transformCode: appData[11],
                                    };
                                }
                            }
                            break;

                        case 0xffdb:
                            // DQT (Define Quantization Tables)
                            const quantizationTablesLength = readUint16(data, offset);
                            offset += 2;
                            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
                            var z;
                            while (offset < quantizationTablesEnd) {
                                var quantizationTableSpec = data[offset++];
                                var tableData = new Uint16Array(64);
                                if (quantizationTableSpec >> 4 === 0) {
                                    // 8 bit values
                                    for (j = 0; j < 64; j++) {
                                        z = dctZigZag[j];
                                        tableData[z] = data[offset++];
                                    }
                                } else if (quantizationTableSpec >> 4 === 1) {
                                    // 16 bit values
                                    for (j = 0; j < 64; j++) {
                                        z = dctZigZag[j];
                                        tableData[z] = readUint16(data, offset);
                                        offset += 2;
                                    }
                                } else {
                                    throw new JpegError("DQT - invalid table spec");
                                }
                                quantizationTables[quantizationTableSpec & 15] = tableData;
                            }
                            break;

                        case 0xffc0:
                        // SOF0 (Start of Frame, Baseline DCT)
                        case 0xffc1:
                        // SOF1 (Start of Frame, Extended DCT)
                        case 0xffc2:
                            // SOF2 (Start of Frame, Progressive DCT)
                            if (frame) {
                                throw new JpegError("Only single frame JPEGs supported");
                            }
                            offset += 2;
                            // Skip marker length.

                            frame = {};
                            frame.extended = fileMarker === 0xffc1;
                            frame.progressive = fileMarker === 0xffc2;
                            frame.precision = data[offset++];
                            const sofScanLines = readUint16(data, offset);
                            offset += 2;
                            frame.scanLines = dnlScanLines || sofScanLines;
                            frame.samplesPerLine = readUint16(data, offset);
                            offset += 2;
                            frame.components = [];
                            frame.componentIds = {};
                            var componentsCount = data[offset++], componentId;
                            var maxH = 0
                                , maxV = 0;
                            for (i = 0; i < componentsCount; i++) {
                                componentId = data[offset];
                                var h = data[offset + 1] >> 4;
                                var v = data[offset + 1] & 15;
                                if (maxH < h) {
                                    maxH = h;
                                }
                                if (maxV < v) {
                                    maxV = v;
                                }
                                var qId = data[offset + 2];
                                l = frame.components.push({
                                    h,
                                    v,
                                    quantizationId: qId,
                                    quantizationTable: null,
                                    // See comment below.
                                });
                                frame.componentIds[componentId] = l - 1;
                                offset += 3;
                            }
                            frame.maxH = maxH;
                            frame.maxV = maxV;
                            prepareComponents(frame);
                            break;

                        case 0xffc4:
                            // DHT (Define Huffman Tables)
                            const huffmanLength = readUint16(data, offset);
                            offset += 2;
                            for (i = 2; i < huffmanLength;) {
                                var huffmanTableSpec = data[offset++];
                                var codeLengths = new Uint8Array(16);
                                var codeLengthSum = 0;
                                for (j = 0; j < 16; j++,
                                    offset++) {
                                    codeLengthSum += codeLengths[j] = data[offset];
                                }
                                var huffmanValues = new Uint8Array(codeLengthSum);
                                for (j = 0; j < codeLengthSum; j++,
                                    offset++) {
                                    huffmanValues[j] = data[offset];
                                }
                                i += 17 + codeLengthSum;

                                (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                            }
                            break;

                        case 0xffdd:
                            // DRI (Define Restart Interval)
                            offset += 2;
                            // Skip marker length.

                            resetInterval = readUint16(data, offset);
                            offset += 2;
                            break;

                        case 0xffda:
                            // SOS (Start of Scan)
                            // A DNL marker (0xFFDC), if it exists, is only allowed at the end
                            // of the first scan segment and may only occur once in an image.
                            // Furthermore, to prevent an infinite loop, do *not* attempt to
                            // parse DNL markers during re-parsing of the JPEG scan data.
                            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;

                            offset += 2;
                            // Skip marker length.

                            var selectorsCount = data[offset++];
                            var components = [], component;
                            for (i = 0; i < selectorsCount; i++) {
                                const index = data[offset++];
                                var componentIndex = frame.componentIds[index];
                                component = frame.components[componentIndex];
                                component.index = index;
                                var tableSpec = data[offset++];
                                component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                                component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                                components.push(component);
                            }
                            var spectralStart = data[offset++];
                            var spectralEnd = data[offset++];
                            var successiveApproximation = data[offset++];
                            try {
                                var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);
                                offset += processed;
                            } catch (ex) {
                                if (ex instanceof DNLMarkerError) {
                                    warn(`${ex.message} -- attempting to re-parse the JPEG image.`);
                                    return this.parse(data, {
                                        dnlScanLines: ex.scanLines
                                    });
                                } else if (ex instanceof EOIMarkerError) {
                                    warn(`${ex.message} -- ignoring the rest of the image data.`);
                                    break markerLoop;
                                }
                                throw ex;
                            }
                            break;

                        case 0xffdc:
                            // DNL (Define Number of Lines)
                            // Ignore the marker, since it's being handled in `decodeScan`.
                            offset += 4;
                            break;

                        case 0xffff:
                            // Fill bytes
                            if (data[offset] !== 0xff) {
                                // Avoid skipping a valid marker.
                                offset--;
                            }
                            break;

                        default:
                            // Could be incorrect encoding -- the last 0xFF byte of the previous
                            // block could have been eaten by the encoder, hence we fallback to
                            // `startPos = offset - 3` when looking for the next valid marker.
                            const nextFileMarker = findNextFileMarker(data, /* currentPos = */
                                offset - 2, /* startPos = */
                                offset - 3);
                            if (nextFileMarker && nextFileMarker.invalid) {
                                warn("JpegImage.parse - unexpected data, current marker is: " + nextFileMarker.invalid);
                                offset = nextFileMarker.offset;
                                break;
                            }
                            if (offset >= data.length - 1) {
                                warn("JpegImage.parse - reached the end of the image data " + "without finding an EOI marker (0xFFD9).");
                                break markerLoop;
                            }
                            throw new JpegError("JpegImage.parse - unknown marker: " + fileMarker.toString(16));
                    }
                    fileMarker = readUint16(data, offset);
                    offset += 2;
                }

                this.width = frame.samplesPerLine;
                this.height = frame.scanLines;
                this.jfif = jfif;
                this.adobe = adobe;
                this.components = [];
                for (i = 0; i < frame.components.length; i++) {
                    component = frame.components[i];

                    // Prevent errors when DQT markers are placed after SOF{n} markers,
                    // by assigning the `quantizationTable` entry after the entire image
                    // has been parsed (fixes issue7406.pdf).
                    var quantizationTable = quantizationTables[component.quantizationId];
                    if (quantizationTable) {
                        component.quantizationTable = quantizationTable;
                    }

                    this.components.push({
                        index: component.index,
                        output: buildComponentData(frame, component),
                        scaleX: component.h / frame.maxH,
                        scaleY: component.v / frame.maxV,
                        blocksPerLine: component.blocksPerLine,
                        blocksPerColumn: component.blocksPerColumn,
                    });
                }
                this.numComponents = this.components.length;
                return undefined;
            },

            _getLinearizedBlockData(width, height, isSourcePDF = false) {
                var scaleX = this.width / width
                    , scaleY = this.height / height;

                var component, componentScaleX, componentScaleY, blocksPerScanline;
                var x, y, i, j, k;
                var index;
                var offset = 0;
                var output;
                var numComponents = this.components.length;
                var dataLength = width * height * numComponents;
                var data = new Uint8ClampedArray(dataLength);
                var xScaleBlockOffset = new Uint32Array(width);
                var mask3LSB = 0xfffffff8;
                // used to clear the 3 LSBs
                let lastComponentScaleX;

                for (i = 0; i < numComponents; i++) {
                    component = this.components[i];
                    componentScaleX = component.scaleX * scaleX;
                    componentScaleY = component.scaleY * scaleY;
                    offset = i;
                    output = component.output;
                    blocksPerScanline = (component.blocksPerLine + 1) << 3;
                    // Precalculate the `xScaleBlockOffset`. Since it doesn't depend on the
                    // component data, that's only necessary when `componentScaleX` changes.
                    if (componentScaleX !== lastComponentScaleX) {
                        for (x = 0; x < width; x++) {
                            j = 0 | (x * componentScaleX);
                            xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);
                        }
                        lastComponentScaleX = componentScaleX;
                    }
                    // linearize the blocks of the component
                    for (y = 0; y < height; y++) {
                        j = 0 | (y * componentScaleY);
                        index = (blocksPerScanline * (j & mask3LSB)) | ((j & 7) << 3);
                        for (x = 0; x < width; x++) {
                            data[offset] = output[index + xScaleBlockOffset[x]];
                            offset += numComponents;
                        }
                    }
                }

                // decodeTransform contains pairs of multiplier (-256..256) and additive
                let transform = this._decodeTransform;

                // In PDF files, JPEG images with CMYK colour spaces are usually inverted
                // (this can be observed by extracting the raw image data).
                // Since the conversion algorithms (see below) were written primarily for
                // the PDF use-cases, attempting to use `JpegImage` to parse standalone
                // JPEG (CMYK) images may thus result in inverted images (see issue 9513).
                //
                // Unfortunately it's not (always) possible to tell, from the image data
                // alone, if it needs to be inverted. Thus in an attempt to provide better
                // out-of-box behaviour when `JpegImage` is used standalone, default to
                // inverting JPEG (CMYK) images if and only if the image data does *not*
                // come from a PDF file and no `decodeTransform` was passed by the user.
                if (!isSourcePDF && numComponents === 4 && !transform) {
                    // prettier-ignore
                    transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);
                }

                if (transform) {
                    for (i = 0; i < dataLength;) {
                        for (j = 0,
                            k = 0; j < numComponents; j++,
                            i++,
                            k += 2) {
                            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];
                        }
                    }
                }
                return data;
            },

            get _isColorConversionNeeded() {
                if (this.adobe) {
                    // The adobe transform marker overrides any previous setting.
                    return !!this.adobe.transformCode;
                }
                if (this.numComponents === 3) {
                    if (this._colorTransform === 0) {
                        // If the Adobe transform marker is not present and the image
                        // dictionary has a 'ColorTransform' entry, explicitly set to `0`,
                        // then the colours should *not* be transformed.
                        return false;
                    } else if (this.components[0].index === /* "R" = */
                        0x52 && this.components[1].index === /* "G" = */
                        0x47 && this.components[2].index === /* "B" = */
                        0x42) {
                        // If the three components are indexed as RGB in ASCII
                        // then the colours should *not* be transformed.
                        return false;
                    }
                    return true;
                }
                // `this.numComponents !== 3`
                if (this._colorTransform === 1) {
                    // If the Adobe transform marker is not present and the image
                    // dictionary has a 'ColorTransform' entry, explicitly set to `1`,
                    // then the colours should be transformed.
                    return true;
                }
                return false;
            },

            _convertYccToRgb: function convertYccToRgb(data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 3) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = Y - 179.456 + 1.402 * Cr;
                    data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
                    data[i + 2] = Y - 226.816 + 1.772 * Cb;
                }
                return data;
            },

            _convertYcckToRgb: function convertYcckToRgb(data) {
                var Y, Cb, Cr, k;
                var offset = 0;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    k = data[i + 3];

                    data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);

                    data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);

                    data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);
                }
                // Ensure that only the converted RGB data is returned.
                return data.subarray(0, offset);
            },

            _convertYcckToCmyk: function convertYcckToCmyk(data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = 434.456 - Y - 1.402 * Cr;
                    data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;
                    data[i + 2] = 481.816 - Y - 1.772 * Cb;
                    // K in data[i + 3] is unchanged
                }
                return data;
            },

            _convertCmykToRgb: function convertCmykToRgb(data) {
                var c, m, y, k;
                var offset = 0;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    c = data[i];
                    m = data[i + 1];
                    y = data[i + 2];
                    k = data[i + 3];

                    data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);

                    data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.00031891311758832814 * k + 0.7364883807733168);

                    data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);
                }
                // Ensure that only the converted RGB data is returned.
                return data.subarray(0, offset);
            },

            getData({ width, height, forceRGB = false, isSourcePDF = false }) {
                if (this.numComponents > 4) {
                    throw new JpegError("Unsupported color mode");
                }
                // Type of data: Uint8ClampedArray(width * height * numComponents)
                var data = this._getLinearizedBlockData(width, height, isSourcePDF);

                if (this.numComponents === 1 && forceRGB) {
                    var dataLength = data.length;
                    var rgbData = new Uint8ClampedArray(dataLength * 3);
                    var offset = 0;
                    for (var i = 0; i < dataLength; i++) {
                        var grayColor = data[i];
                        rgbData[offset++] = grayColor;
                        rgbData[offset++] = grayColor;
                        rgbData[offset++] = grayColor;
                    }
                    return rgbData;
                } else if (this.numComponents === 3 && this._isColorConversionNeeded) {
                    return this._convertYccToRgb(data);
                } else if (this.numComponents === 4) {
                    if (this._isColorConversionNeeded) {
                        if (forceRGB) {
                            return this._convertYcckToRgb(data);
                        }
                        return this._convertYcckToCmyk(data);
                    } else if (forceRGB) {
                        return this._convertCmykToRgb(data);
                    }
                }
                return data;
            },
        };

        return JpegImage;
    }
    )();

    "use strict";
    var ArithmeticDecoder = function ArithmeticDecoderClosure() {
        var QeTable = [{
            qe: 0x5601,
            nmps: 1,
            nlps: 1,
            switchFlag: 1
        }, {
            qe: 0x3401,
            nmps: 2,
            nlps: 6,
            switchFlag: 0
        }, {
            qe: 0x1801,
            nmps: 3,
            nlps: 9,
            switchFlag: 0
        }, {
            qe: 0x0AC1,
            nmps: 4,
            nlps: 12,
            switchFlag: 0
        }, {
            qe: 0x0521,
            nmps: 5,
            nlps: 29,
            switchFlag: 0
        }, {
            qe: 0x0221,
            nmps: 38,
            nlps: 33,
            switchFlag: 0
        }, {
            qe: 0x5601,
            nmps: 7,
            nlps: 6,
            switchFlag: 1
        }, {
            qe: 0x5401,
            nmps: 8,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 0x4801,
            nmps: 9,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 0x3801,
            nmps: 10,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 0x3001,
            nmps: 11,
            nlps: 17,
            switchFlag: 0
        }, {
            qe: 0x2401,
            nmps: 12,
            nlps: 18,
            switchFlag: 0
        }, {
            qe: 0x1C01,
            nmps: 13,
            nlps: 20,
            switchFlag: 0
        }, {
            qe: 0x1601,
            nmps: 29,
            nlps: 21,
            switchFlag: 0
        }, {
            qe: 0x5601,
            nmps: 15,
            nlps: 14,
            switchFlag: 1
        }, {
            qe: 0x5401,
            nmps: 16,
            nlps: 14,
            switchFlag: 0
        }, {
            qe: 0x5101,
            nmps: 17,
            nlps: 15,
            switchFlag: 0
        }, {
            qe: 0x4801,
            nmps: 18,
            nlps: 16,
            switchFlag: 0
        }, {
            qe: 0x3801,
            nmps: 19,
            nlps: 17,
            switchFlag: 0
        }, {
            qe: 0x3401,
            nmps: 20,
            nlps: 18,
            switchFlag: 0
        }, {
            qe: 0x3001,
            nmps: 21,
            nlps: 19,
            switchFlag: 0
        }, {
            qe: 0x2801,
            nmps: 22,
            nlps: 19,
            switchFlag: 0
        }, {
            qe: 0x2401,
            nmps: 23,
            nlps: 20,
            switchFlag: 0
        }, {
            qe: 0x2201,
            nmps: 24,
            nlps: 21,
            switchFlag: 0
        }, {
            qe: 0x1C01,
            nmps: 25,
            nlps: 22,
            switchFlag: 0
        }, {
            qe: 0x1801,
            nmps: 26,
            nlps: 23,
            switchFlag: 0
        }, {
            qe: 0x1601,
            nmps: 27,
            nlps: 24,
            switchFlag: 0
        }, {
            qe: 0x1401,
            nmps: 28,
            nlps: 25,
            switchFlag: 0
        }, {
            qe: 0x1201,
            nmps: 29,
            nlps: 26,
            switchFlag: 0
        }, {
            qe: 0x1101,
            nmps: 30,
            nlps: 27,
            switchFlag: 0
        }, {
            qe: 0x0AC1,
            nmps: 31,
            nlps: 28,
            switchFlag: 0
        }, {
            qe: 0x09C1,
            nmps: 32,
            nlps: 29,
            switchFlag: 0
        }, {
            qe: 0x08A1,
            nmps: 33,
            nlps: 30,
            switchFlag: 0
        }, {
            qe: 0x0521,
            nmps: 34,
            nlps: 31,
            switchFlag: 0
        }, {
            qe: 0x0441,
            nmps: 35,
            nlps: 32,
            switchFlag: 0
        }, {
            qe: 0x02A1,
            nmps: 36,
            nlps: 33,
            switchFlag: 0
        }, {
            qe: 0x0221,
            nmps: 37,
            nlps: 34,
            switchFlag: 0
        }, {
            qe: 0x0141,
            nmps: 38,
            nlps: 35,
            switchFlag: 0
        }, {
            qe: 0x0111,
            nmps: 39,
            nlps: 36,
            switchFlag: 0
        }, {
            qe: 0x0085,
            nmps: 40,
            nlps: 37,
            switchFlag: 0
        }, {
            qe: 0x0049,
            nmps: 41,
            nlps: 38,
            switchFlag: 0
        }, {
            qe: 0x0025,
            nmps: 42,
            nlps: 39,
            switchFlag: 0
        }, {
            qe: 0x0015,
            nmps: 43,
            nlps: 40,
            switchFlag: 0
        }, {
            qe: 0x0009,
            nmps: 44,
            nlps: 41,
            switchFlag: 0
        }, {
            qe: 0x0005,
            nmps: 45,
            nlps: 42,
            switchFlag: 0
        }, {
            qe: 0x0001,
            nmps: 45,
            nlps: 43,
            switchFlag: 0
        }, {
            qe: 0x5601,
            nmps: 46,
            nlps: 46,
            switchFlag: 0
        }];
        function ArithmeticDecoder(data, start, end) {
            this.data = data;
            this.bp = start;
            this.dataEnd = end;
            this.chigh = data[start];
            this.clow = 0;
            this.byteIn();
            this.chigh = this.chigh << 7 & 0xFFFF | this.clow >> 9 & 0x7F;
            this.clow = this.clow << 7 & 0xFFFF;
            this.ct -= 7;
            this.a = 0x8000;
        }
        ArithmeticDecoder.prototype = {
            byteIn: function ArithmeticDecoder_byteIn() {
                var data = this.data;
                var bp = this.bp;
                if (data[bp] === 0xFF) {
                    var b1 = data[bp + 1];
                    if (b1 > 0x8F) {
                        this.clow += 0xFF00;
                        this.ct = 8;
                    } else {
                        bp++;
                        this.clow += data[bp] << 9;
                        this.ct = 7;
                        this.bp = bp;
                    }
                } else {
                    bp++;
                    this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xFF00;
                    this.ct = 8;
                    this.bp = bp;
                }
                if (this.clow > 0xFFFF) {
                    this.chigh += this.clow >> 16;
                    this.clow &= 0xFFFF;
                }
            },
            readBit: function ArithmeticDecoder_readBit(contexts, pos) {
                var cx_index = contexts[pos] >> 1
                    , cx_mps = contexts[pos] & 1;
                var qeTableIcx = QeTable[cx_index];
                var qeIcx = qeTableIcx.qe;
                var d;
                var a = this.a - qeIcx;
                if (this.chigh < qeIcx) {
                    if (a < qeIcx) {
                        a = qeIcx;
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                    } else {
                        a = qeIcx;
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                            cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                    }
                } else {
                    this.chigh -= qeIcx;
                    if ((a & 0x8000) !== 0) {
                        this.a = a;
                        return cx_mps;
                    }
                    if (a < qeIcx) {
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                            cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                    } else {
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                    }
                }
                do {
                    if (this.ct === 0) {
                        this.byteIn();
                    }
                    a <<= 1;
                    this.chigh = this.chigh << 1 & 0xFFFF | this.clow >> 15 & 1;
                    this.clow = this.clow << 1 & 0xFFFF;
                    this.ct--;
                } while ((a & 0x8000) === 0); this.a = a;
                contexts[pos] = cx_index << 1 | cx_mps;
                return d;
            }
        };
        return ArithmeticDecoder;
    }();

    "use strict";
    var JpxImage = function JpxImageClosure() {
        var SubbandsGainLog2 = {
            'LL': 0,
            'LH': 1,
            'HL': 1,
            'HH': 2
        };
        function JpxImage() {
            this.failOnCorruptedImage = false;
        }
        JpxImage.prototype = {
            parse: function JpxImage_parse(data) {
                var head = readUint16(data, 0);
                if (head === 0xFF4F) {
                    this.parseCodestream(data, 0, data.length);
                    return;
                }
                var position = 0
                    , length = data.length;
                while (position < length) {
                    var headerSize = 8;
                    var lbox = readUint32(data, position);
                    var tbox = readUint32(data, position + 4);
                    position += headerSize;
                    if (lbox === 1) {
                        lbox = readUint32(data, position) * 4294967296 + readUint32(data, position + 4);
                        position += 8;
                        headerSize += 8;
                    }
                    if (lbox === 0) {
                        lbox = length - position + headerSize;
                    }
                    if (lbox < headerSize) {
                        error('JPX Error: Invalid box field size');
                    }
                    var dataLength = lbox - headerSize;
                    var jumpDataLength = true;
                    switch (tbox) {
                        case 0x6A703268:
                            jumpDataLength = false;
                            break;
                        case 0x636F6C72:
                            var method = data[position];
                            if (method === 1) {
                                var colorspace = readUint32(data, position + 3);
                                switch (colorspace) {
                                    case 16:
                                    case 17:
                                    case 18:
                                        break;
                                    default:
                                        warn('Unknown colorspace ' + colorspace);
                                        break;
                                }
                            } else if (method === 2) {
                                info('ICC profile not supported');
                            }
                            break;
                        case 0x6A703263:
                            this.parseCodestream(data, position, position + dataLength);
                            break;
                        case 0x6A502020:
                            if (readUint32(data, position) !== 0x0d0a870a) {
                                warn('Invalid JP2 signature');
                            }
                            break;
                        case 0x6A501A1A:
                        case 0x66747970:
                        case 0x72726571:
                        case 0x72657320:
                        case 0x69686472:
                            break;
                        default:
                            var headerType = String.fromCharCode(tbox >> 24 & 0xFF, tbox >> 16 & 0xFF, tbox >> 8 & 0xFF, tbox & 0xFF);
                            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');
                            break;
                    }
                    if (jumpDataLength) {
                        position += dataLength;
                    }
                }
            },
            parseImageProperties: function JpxImage_parseImageProperties(stream) {
                var newByte = stream.getByte();
                while (newByte >= 0) {
                    var oldByte = newByte;
                    newByte = stream.getByte();
                    var code = oldByte << 8 | newByte;
                    if (code === 0xFF51) {
                        stream.skip(4);
                        var Xsiz = stream.getInt32() >>> 0;
                        var Ysiz = stream.getInt32() >>> 0;
                        var XOsiz = stream.getInt32() >>> 0;
                        var YOsiz = stream.getInt32() >>> 0;
                        stream.skip(16);
                        var Csiz = stream.getUint16();
                        this.width = Xsiz - XOsiz;
                        this.height = Ysiz - YOsiz;
                        this.componentsCount = Csiz;
                        this.bitsPerComponent = 8;
                        return;
                    }
                }
                error('JPX Error: No size marker found in JPX stream');
            },
            parseCodestream: function JpxImage_parseCodestream(data, start, end) {
                var context = {};
                var doNotRecover = false;
                try {
                    var position = start;
                    while (position + 1 < end) {
                        var code = readUint16(data, position);
                        position += 2;
                        var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;
                        switch (code) {
                            case 0xFF4F:
                                context.mainHeader = true;
                                break;
                            case 0xFFD9:
                                break;
                            case 0xFF51:
                                length = readUint16(data, position);
                                var siz = {};
                                siz.Xsiz = readUint32(data, position + 4);
                                siz.Ysiz = readUint32(data, position + 8);
                                siz.XOsiz = readUint32(data, position + 12);
                                siz.YOsiz = readUint32(data, position + 16);
                                siz.XTsiz = readUint32(data, position + 20);
                                siz.YTsiz = readUint32(data, position + 24);
                                siz.XTOsiz = readUint32(data, position + 28);
                                siz.YTOsiz = readUint32(data, position + 32);
                                var componentsCount = readUint16(data, position + 36);
                                siz.Csiz = componentsCount;
                                var components = [];
                                j = position + 38;
                                for (var i = 0; i < componentsCount; i++) {
                                    var component = {
                                        precision: (data[j] & 0x7F) + 1,
                                        isSigned: !!(data[j] & 0x80),
                                        XRsiz: data[j + 1],
                                        YRsiz: data[j + 1]
                                    };
                                    calculateComponentDimensions(component, siz);
                                    components.push(component);
                                }
                                context.SIZ = siz;
                                context.components = components;
                                calculateTileGrids(context, components);
                                context.QCC = [];
                                context.COC = [];
                                break;
                            case 0xFF5C:
                                length = readUint16(data, position);
                                var qcd = {};
                                j = position + 2;
                                sqcd = data[j++];
                                switch (sqcd & 0x1F) {
                                    case 0:
                                        spqcdSize = 8;
                                        scalarExpounded = true;
                                        break;
                                    case 1:
                                        spqcdSize = 16;
                                        scalarExpounded = false;
                                        break;
                                    case 2:
                                        spqcdSize = 16;
                                        scalarExpounded = true;
                                        break;
                                    default:
                                        throw new Error('Invalid SQcd value ' + sqcd);
                                }
                                qcd.noQuantization = spqcdSize === 8;
                                qcd.scalarExpounded = scalarExpounded;
                                qcd.guardBits = sqcd >> 5;
                                spqcds = [];
                                while (j < length + position) {
                                    var spqcd = {};
                                    if (spqcdSize === 8) {
                                        spqcd.epsilon = data[j++] >> 3;
                                        spqcd.mu = 0;
                                    } else {
                                        spqcd.epsilon = data[j] >> 3;
                                        spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
                                        j += 2;
                                    }
                                    spqcds.push(spqcd);
                                }
                                qcd.SPqcds = spqcds;
                                if (context.mainHeader) {
                                    context.QCD = qcd;
                                } else {
                                    context.currentTile.QCD = qcd;
                                    context.currentTile.QCC = [];
                                }
                                break;
                            case 0xFF5D:
                                length = readUint16(data, position);
                                var qcc = {};
                                j = position + 2;
                                var cqcc;
                                if (context.SIZ.Csiz < 257) {
                                    cqcc = data[j++];
                                } else {
                                    cqcc = readUint16(data, j);
                                    j += 2;
                                }
                                sqcd = data[j++];
                                switch (sqcd & 0x1F) {
                                    case 0:
                                        spqcdSize = 8;
                                        scalarExpounded = true;
                                        break;
                                    case 1:
                                        spqcdSize = 16;
                                        scalarExpounded = false;
                                        break;
                                    case 2:
                                        spqcdSize = 16;
                                        scalarExpounded = true;
                                        break;
                                    default:
                                        throw new Error('Invalid SQcd value ' + sqcd);
                                }
                                qcc.noQuantization = spqcdSize === 8;
                                qcc.scalarExpounded = scalarExpounded;
                                qcc.guardBits = sqcd >> 5;
                                spqcds = [];
                                while (j < length + position) {
                                    spqcd = {};
                                    if (spqcdSize === 8) {
                                        spqcd.epsilon = data[j++] >> 3;
                                        spqcd.mu = 0;
                                    } else {
                                        spqcd.epsilon = data[j] >> 3;
                                        spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
                                        j += 2;
                                    }
                                    spqcds.push(spqcd);
                                }
                                qcc.SPqcds = spqcds;
                                if (context.mainHeader) {
                                    context.QCC[cqcc] = qcc;
                                } else {
                                    context.currentTile.QCC[cqcc] = qcc;
                                }
                                break;
                            case 0xFF52:
                                length = readUint16(data, position);
                                var cod = {};
                                j = position + 2;
                                var scod = data[j++];
                                cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
                                cod.sopMarkerUsed = !!(scod & 2);
                                cod.ephMarkerUsed = !!(scod & 4);
                                cod.progressionOrder = data[j++];
                                cod.layersCount = readUint16(data, j);
                                j += 2;
                                cod.multipleComponentTransform = data[j++];
                                cod.decompositionLevelsCount = data[j++];
                                cod.xcb = (data[j++] & 0xF) + 2;
                                cod.ycb = (data[j++] & 0xF) + 2;
                                var blockStyle = data[j++];
                                cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
                                cod.resetContextProbabilities = !!(blockStyle & 2);
                                cod.terminationOnEachCodingPass = !!(blockStyle & 4);
                                cod.verticalyStripe = !!(blockStyle & 8);
                                cod.predictableTermination = !!(blockStyle & 16);
                                cod.segmentationSymbolUsed = !!(blockStyle & 32);
                                cod.reversibleTransformation = data[j++];
                                if (cod.entropyCoderWithCustomPrecincts) {
                                    var precinctsSizes = [];
                                    while (j < length + position) {
                                        var precinctsSize = data[j++];
                                        precinctsSizes.push({
                                            PPx: precinctsSize & 0xF,
                                            PPy: precinctsSize >> 4
                                        });
                                    }
                                    cod.precinctsSizes = precinctsSizes;
                                }
                                var unsupported = [];
                                if (cod.selectiveArithmeticCodingBypass) {
                                    unsupported.push('selectiveArithmeticCodingBypass');
                                }
                                if (cod.resetContextProbabilities) {
                                    unsupported.push('resetContextProbabilities');
                                }
                                if (cod.terminationOnEachCodingPass) {
                                    unsupported.push('terminationOnEachCodingPass');
                                }
                                if (cod.verticalyStripe) {
                                    unsupported.push('verticalyStripe');
                                }
                                if (cod.predictableTermination) {
                                    unsupported.push('predictableTermination');
                                }
                                if (unsupported.length > 0) {
                                    doNotRecover = true;
                                    throw new Error('Unsupported COD options (' + unsupported.join(', ') + ')');
                                }
                                if (context.mainHeader) {
                                    context.COD = cod;
                                } else {
                                    context.currentTile.COD = cod;
                                    context.currentTile.COC = [];
                                }
                                break;
                            case 0xFF90:
                                length = readUint16(data, position);
                                tile = {};
                                tile.index = readUint16(data, position + 2);
                                tile.length = readUint32(data, position + 4);
                                tile.dataEnd = tile.length + position - 2;
                                tile.partIndex = data[position + 8];
                                tile.partsCount = data[position + 9];
                                context.mainHeader = false;
                                if (tile.partIndex === 0) {
                                    tile.COD = context.COD;
                                    tile.COC = context.COC.slice(0);
                                    tile.QCD = context.QCD;
                                    tile.QCC = context.QCC.slice(0);
                                }
                                context.currentTile = tile;
                                break;
                            case 0xFF93:
                                tile = context.currentTile;
                                if (tile.partIndex === 0) {
                                    initializeTile(context, tile.index);
                                    buildPackets(context);
                                }
                                length = tile.dataEnd - position;
                                parseTilePackets(context, data, position, length);
                                break;
                            case 0xFF55:
                            case 0xFF57:
                            case 0xFF58:
                            case 0xFF64:
                                length = readUint16(data, position);
                                break;
                            case 0xFF53:
                                throw new Error('Codestream code 0xFF53 (COC) is ' + 'not implemented');
                            default:
                                throw new Error('Unknown codestream code: ' + code.toString(16));
                        }
                        position += length;
                    }
                } catch (e) {
                    if (doNotRecover || this.failOnCorruptedImage) {
                        error('JPX Error: ' + e.message);
                    } else {
                        warn('JPX: Trying to recover from: ' + e.message);
                    }
                }
                this.tiles = transformComponents(context);
                this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
                this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
                this.componentsCount = context.SIZ.Csiz;
            }
        };
        function calculateComponentDimensions(component, siz) {
            component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
            component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
            component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
            component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
            component.width = component.x1 - component.x0;
            component.height = component.y1 - component.y0;
        }
        function calculateTileGrids(context, components) {
            var siz = context.SIZ;
            var tile, tiles = [];
            var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
            var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
            for (var q = 0; q < numYtiles; q++) {
                for (var p = 0; p < numXtiles; p++) {
                    tile = {};
                    tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
                    tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
                    tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
                    tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
                    tile.width = tile.tx1 - tile.tx0;
                    tile.height = tile.ty1 - tile.ty0;
                    tile.components = [];
                    tiles.push(tile);
                }
            }
            context.tiles = tiles;
            var componentsCount = siz.Csiz;
            for (var i = 0, ii = componentsCount; i < ii; i++) {
                var component = components[i];
                for (var j = 0, jj = tiles.length; j < jj; j++) {
                    var tileComponent = {};
                    tile = tiles[j];
                    tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
                    tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
                    tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
                    tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
                    tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
                    tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
                    tile.components[i] = tileComponent;
                }
            }
        }
        function getBlocksDimensions(context, component, r) {
            var codOrCoc = component.codingStyleParameters;
            var result = {};
            if (!codOrCoc.entropyCoderWithCustomPrecincts) {
                result.PPx = 15;
                result.PPy = 15;
            } else {
                result.PPx = codOrCoc.precinctsSizes[r].PPx;
                result.PPy = codOrCoc.precinctsSizes[r].PPy;
            }
            result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);
            result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);
            return result;
        }
        function buildPrecincts(context, resolution, dimensions) {
            var precinctWidth = 1 << dimensions.PPx;
            var precinctHeight = 1 << dimensions.PPy;
            var isZeroRes = resolution.resLevel === 0;
            var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);
            var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);
            var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;
            var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;
            var numprecincts = numprecinctswide * numprecinctshigh;
            resolution.precinctParameters = {
                precinctWidth: precinctWidth,
                precinctHeight: precinctHeight,
                numprecinctswide: numprecinctswide,
                numprecinctshigh: numprecinctshigh,
                numprecincts: numprecincts,
                precinctWidthInSubband: precinctWidthInSubband,
                precinctHeightInSubband: precinctHeightInSubband
            };
        }
        function buildCodeblocks(context, subband, dimensions) {
            var xcb_ = dimensions.xcb_;
            var ycb_ = dimensions.ycb_;
            var codeblockWidth = 1 << xcb_;
            var codeblockHeight = 1 << ycb_;
            var cbx0 = subband.tbx0 >> xcb_;
            var cby0 = subband.tby0 >> ycb_;
            var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;
            var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;
            var precinctParameters = subband.resolution.precinctParameters;
            var codeblocks = [];
            var precincts = [];
            var i, j, codeblock, precinctNumber;
            for (j = cby0; j < cby1; j++) {
                for (i = cbx0; i < cbx1; i++) {
                    codeblock = {
                        cbx: i,
                        cby: j,
                        tbx0: codeblockWidth * i,
                        tby0: codeblockHeight * j,
                        tbx1: codeblockWidth * (i + 1),
                        tby1: codeblockHeight * (j + 1)
                    };
                    codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
                    codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
                    codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
                    codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);
                    var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);
                    var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);
                    precinctNumber = pi + pj * precinctParameters.numprecinctswide;
                    codeblock.precinctNumber = precinctNumber;
                    codeblock.subbandType = subband.type;
                    codeblock.Lblock = 3;
                    if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {
                        continue;
                    }
                    codeblocks.push(codeblock);
                    var precinct = precincts[precinctNumber];
                    if (precinct !== undefined) {
                        if (i < precinct.cbxMin) {
                            precinct.cbxMin = i;
                        } else if (i > precinct.cbxMax) {
                            precinct.cbxMax = i;
                        }
                        if (j < precinct.cbyMin) {
                            precinct.cbxMin = j;
                        } else if (j > precinct.cbyMax) {
                            precinct.cbyMax = j;
                        }
                    } else {
                        precincts[precinctNumber] = precinct = {
                            cbxMin: i,
                            cbyMin: j,
                            cbxMax: i,
                            cbyMax: j
                        };
                    }
                    codeblock.precinct = precinct;
                }
            }
            subband.codeblockParameters = {
                codeblockWidth: xcb_,
                codeblockHeight: ycb_,
                numcodeblockwide: cbx1 - cbx0 + 1,
                numcodeblockhigh: cby1 - cby0 + 1
            };
            subband.codeblocks = codeblocks;
            subband.precincts = precincts;
        }
        function createPacket(resolution, precinctNumber, layerNumber) {
            var precinctCodeblocks = [];
            var subbands = resolution.subbands;
            for (var i = 0, ii = subbands.length; i < ii; i++) {
                var subband = subbands[i];
                var codeblocks = subband.codeblocks;
                for (var j = 0, jj = codeblocks.length; j < jj; j++) {
                    var codeblock = codeblocks[j];
                    if (codeblock.precinctNumber !== precinctNumber) {
                        continue;
                    }
                    precinctCodeblocks.push(codeblock);
                }
            }
            return {
                layerNumber: layerNumber,
                codeblocks: precinctCodeblocks
            };
        }
        function LayerResolutionComponentPositionIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var maxDecompositionLevelsCount = 0;
            for (var q = 0; q < componentsCount; q++) {
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
            }
            var l = 0
                , r = 0
                , i = 0
                , k = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (; l < layersCount; l++) {
                    for (; r <= maxDecompositionLevelsCount; r++) {
                        for (; i < componentsCount; i++) {
                            var component = tile.components[i];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            for (; k < numprecincts;) {
                                var packet = createPacket(resolution, k, l);
                                k++;
                                return packet;
                            }
                            k = 0;
                        }
                        i = 0;
                    }
                    r = 0;
                }
                error('JPX Error: Out of packets');
            }
                ;
        }
        function ResolutionLayerComponentPositionIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var maxDecompositionLevelsCount = 0;
            for (var q = 0; q < componentsCount; q++) {
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
            }
            var r = 0
                , l = 0
                , i = 0
                , k = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (; r <= maxDecompositionLevelsCount; r++) {
                    for (; l < layersCount; l++) {
                        for (; i < componentsCount; i++) {
                            var component = tile.components[i];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            for (; k < numprecincts;) {
                                var packet = createPacket(resolution, k, l);
                                k++;
                                return packet;
                            }
                            k = 0;
                        }
                        i = 0;
                    }
                    l = 0;
                }
                error('JPX Error: Out of packets');
            }
                ;
        }
        function ResolutionPositionComponentLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var l, r, c, p;
            var maxDecompositionLevelsCount = 0;
            for (c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);
            }
            var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);
            for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
                var maxNumPrecincts = 0;
                for (c = 0; c < componentsCount; ++c) {
                    var resolutions = tile.components[c].resolutions;
                    if (r < resolutions.length) {
                        maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);
                    }
                }
                maxNumPrecinctsInLevel[r] = maxNumPrecincts;
            }
            l = 0;
            r = 0;
            c = 0;
            p = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (; r <= maxDecompositionLevelsCount; r++) {
                    for (; p < maxNumPrecinctsInLevel[r]; p++) {
                        for (; c < componentsCount; c++) {
                            var component = tile.components[c];
                            if (r > component.codingStyleParameters.decompositionLevelsCount) {
                                continue;
                            }
                            var resolution = component.resolutions[r];
                            var numprecincts = resolution.precinctParameters.numprecincts;
                            if (p >= numprecincts) {
                                continue;
                            }
                            for (; l < layersCount;) {
                                var packet = createPacket(resolution, p, l);
                                l++;
                                return packet;
                            }
                            l = 0;
                        }
                        c = 0;
                    }
                    p = 0;
                }
                error('JPX Error: Out of packets');
            }
                ;
        }
        function PositionComponentResolutionLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var precinctsSizes = getPrecinctSizesInImageScale(tile);
            var precinctsIterationSizes = precinctsSizes;
            var l = 0
                , r = 0
                , c = 0
                , px = 0
                , py = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (; py < precinctsIterationSizes.maxNumHigh; py++) {
                    for (; px < precinctsIterationSizes.maxNumWide; px++) {
                        for (; c < componentsCount; c++) {
                            var component = tile.components[c];
                            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                            for (; r <= decompositionLevelsCount; r++) {
                                var resolution = component.resolutions[r];
                                var sizeInImageScale = precinctsSizes.components[c].resolutions[r];
                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                                if (k === null) {
                                    continue;
                                }
                                for (; l < layersCount;) {
                                    var packet = createPacket(resolution, k, l);
                                    l++;
                                    return packet;
                                }
                                l = 0;
                            }
                            r = 0;
                        }
                        c = 0;
                    }
                    px = 0;
                }
                error('JPX Error: Out of packets');
            }
                ;
        }
        function ComponentPositionResolutionLayerIterator(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var layersCount = tile.codingStyleDefaultParameters.layersCount;
            var componentsCount = siz.Csiz;
            var precinctsSizes = getPrecinctSizesInImageScale(tile);
            var l = 0
                , r = 0
                , c = 0
                , px = 0
                , py = 0;
            this.nextPacket = function JpxImage_nextPacket() {
                for (; c < componentsCount; ++c) {
                    var component = tile.components[c];
                    var precinctsIterationSizes = precinctsSizes.components[c];
                    var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                    for (; py < precinctsIterationSizes.maxNumHigh; py++) {
                        for (; px < precinctsIterationSizes.maxNumWide; px++) {
                            for (; r <= decompositionLevelsCount; r++) {
                                var resolution = component.resolutions[r];
                                var sizeInImageScale = precinctsIterationSizes.resolutions[r];
                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
                                if (k === null) {
                                    continue;
                                }
                                for (; l < layersCount;) {
                                    var packet = createPacket(resolution, k, l);
                                    l++;
                                    return packet;
                                }
                                l = 0;
                            }
                            r = 0;
                        }
                        px = 0;
                    }
                    py = 0;
                }
                error('JPX Error: Out of packets');
            }
                ;
        }
        function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
            var posX = pxIndex * precinctIterationSizes.minWidth;
            var posY = pyIndex * precinctIterationSizes.minHeight;
            if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {
                return null;
            }
            var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;
            return posX / sizeInImageScale.height + startPrecinctRowIndex;
        }
        function getPrecinctSizesInImageScale(tile) {
            var componentsCount = tile.components.length;
            var minWidth = Number.MAX_VALUE;
            var minHeight = Number.MAX_VALUE;
            var maxNumWide = 0;
            var maxNumHigh = 0;
            var sizePerComponent = new Array(componentsCount);
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                var sizePerResolution = new Array(decompositionLevelsCount + 1);
                var minWidthCurrentComponent = Number.MAX_VALUE;
                var minHeightCurrentComponent = Number.MAX_VALUE;
                var maxNumWideCurrentComponent = 0;
                var maxNumHighCurrentComponent = 0;
                var scale = 1;
                for (var r = decompositionLevelsCount; r >= 0; --r) {
                    var resolution = component.resolutions[r];
                    var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;
                    var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;
                    minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);
                    minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);
                    maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);
                    maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);
                    sizePerResolution[r] = {
                        width: widthCurrentResolution,
                        height: heightCurrentResolution
                    };
                    scale <<= 1;
                }
                minWidth = Math.min(minWidth, minWidthCurrentComponent);
                minHeight = Math.min(minHeight, minHeightCurrentComponent);
                maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
                maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
                sizePerComponent[c] = {
                    resolutions: sizePerResolution,
                    minWidth: minWidthCurrentComponent,
                    minHeight: minHeightCurrentComponent,
                    maxNumWide: maxNumWideCurrentComponent,
                    maxNumHigh: maxNumHighCurrentComponent
                };
            }
            return {
                components: sizePerComponent,
                minWidth: minWidth,
                minHeight: minHeight,
                maxNumWide: maxNumWide,
                maxNumHigh: maxNumHigh
            };
        }
        function buildPackets(context) {
            var siz = context.SIZ;
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var componentsCount = siz.Csiz;
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
                var resolutions = [];
                var subbands = [];
                for (var r = 0; r <= decompositionLevelsCount; r++) {
                    var blocksDimensions = getBlocksDimensions(context, component, r);
                    var resolution = {};
                    var scale = 1 << decompositionLevelsCount - r;
                    resolution.trx0 = Math.ceil(component.tcx0 / scale);
                    resolution.try0 = Math.ceil(component.tcy0 / scale);
                    resolution.trx1 = Math.ceil(component.tcx1 / scale);
                    resolution.try1 = Math.ceil(component.tcy1 / scale);
                    resolution.resLevel = r;
                    buildPrecincts(context, resolution, blocksDimensions);
                    resolutions.push(resolution);
                    var subband;
                    if (r === 0) {
                        subband = {};
                        subband.type = 'LL';
                        subband.tbx0 = Math.ceil(component.tcx0 / scale);
                        subband.tby0 = Math.ceil(component.tcy0 / scale);
                        subband.tbx1 = Math.ceil(component.tcx1 / scale);
                        subband.tby1 = Math.ceil(component.tcy1 / scale);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolution.subbands = [subband];
                    } else {
                        var bscale = 1 << decompositionLevelsCount - r + 1;
                        var resolutionSubbands = [];
                        subband = {};
                        subband.type = 'HL';
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        subband = {};
                        subband.type = 'LH';
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        subband = {};
                        subband.type = 'HH';
                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
                        subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
                        subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
                        subband.resolution = resolution;
                        buildCodeblocks(context, subband, blocksDimensions);
                        subbands.push(subband);
                        resolutionSubbands.push(subband);
                        resolution.subbands = resolutionSubbands;
                    }
                }
                component.resolutions = resolutions;
                component.subbands = subbands;
            }
            var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
            switch (progressionOrder) {
                case 0:
                    tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);
                    break;
                case 1:
                    tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);
                    break;
                case 2:
                    tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);
                    break;
                case 3:
                    tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);
                    break;
                case 4:
                    tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);
                    break;
                default:
                    error('JPX Error: Unsupported progression order ' + progressionOrder);
            }
        }
        function parseTilePackets(context, data, offset, dataLength) {
            var position = 0;
            var buffer, bufferSize = 0, skipNextBit = false;
            function readBits(count) {
                while (bufferSize < count) {
                    var b = data[offset + position];
                    position++;
                    if (skipNextBit) {
                        buffer = buffer << 7 | b;
                        bufferSize += 7;
                        skipNextBit = false;
                    } else {
                        buffer = buffer << 8 | b;
                        bufferSize += 8;
                    }
                    if (b === 0xFF) {
                        skipNextBit = true;
                    }
                }
                bufferSize -= count;
                return buffer >>> bufferSize & (1 << count) - 1;
            }
            function skipMarkerIfEqual(value) {
                if (data[offset + position - 1] === 0xFF && data[offset + position] === value) {
                    skipBytes(1);
                    return true;
                } else if (data[offset + position] === 0xFF && data[offset + position + 1] === value) {
                    skipBytes(2);
                    return true;
                }
                return false;
            }
            function skipBytes(count) {
                position += count;
            }
            function alignToByte() {
                bufferSize = 0;
                if (skipNextBit) {
                    position++;
                    skipNextBit = false;
                }
            }
            function readCodingpasses() {
                if (readBits(1) === 0) {
                    return 1;
                }
                if (readBits(1) === 0) {
                    return 2;
                }
                var value = readBits(2);
                if (value < 3) {
                    return value + 3;
                }
                value = readBits(5);
                if (value < 31) {
                    return value + 6;
                }
                value = readBits(7);
                return value + 37;
            }
            var tileIndex = context.currentTile.index;
            var tile = context.tiles[tileIndex];
            var sopMarkerUsed = context.COD.sopMarkerUsed;
            var ephMarkerUsed = context.COD.ephMarkerUsed;
            var packetsIterator = tile.packetsIterator;
            while (position < dataLength) {
                alignToByte();
                if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {
                    skipBytes(4);
                }
                var packet = packetsIterator.nextPacket();
                if (!readBits(1)) {
                    continue;
                }
                var layerNumber = packet.layerNumber;
                var queue = [], codeblock;
                for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
                    codeblock = packet.codeblocks[i];
                    var precinct = codeblock.precinct;
                    var codeblockColumn = codeblock.cbx - precinct.cbxMin;
                    var codeblockRow = codeblock.cby - precinct.cbyMin;
                    var codeblockIncluded = false;
                    var firstTimeInclusion = false;
                    var valueReady;
                    if (codeblock['included'] !== undefined) {
                        codeblockIncluded = !!readBits(1);
                    } else {
                        precinct = codeblock.precinct;
                        var inclusionTree, zeroBitPlanesTree;
                        if (precinct['inclusionTree'] !== undefined) {
                            inclusionTree = precinct.inclusionTree;
                        } else {
                            var width = precinct.cbxMax - precinct.cbxMin + 1;
                            var height = precinct.cbyMax - precinct.cbyMin + 1;
                            inclusionTree = new InclusionTree(width, height, layerNumber);
                            zeroBitPlanesTree = new TagTree(width, height);
                            precinct.inclusionTree = inclusionTree;
                            precinct.zeroBitPlanesTree = zeroBitPlanesTree;
                        }
                        if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {
                            while (true) {
                                if (readBits(1)) {
                                    valueReady = !inclusionTree.nextLevel();
                                    if (valueReady) {
                                        codeblock.included = true;
                                        codeblockIncluded = firstTimeInclusion = true;
                                        break;
                                    }
                                } else {
                                    inclusionTree.incrementValue(layerNumber);
                                    break;
                                }
                            }
                        }
                    }
                    if (!codeblockIncluded) {
                        continue;
                    }
                    if (firstTimeInclusion) {
                        zeroBitPlanesTree = precinct.zeroBitPlanesTree;
                        zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
                        while (true) {
                            if (readBits(1)) {
                                valueReady = !zeroBitPlanesTree.nextLevel();
                                if (valueReady) {
                                    break;
                                }
                            } else {
                                zeroBitPlanesTree.incrementValue();
                            }
                        }
                        codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
                    }
                    var codingpasses = readCodingpasses();
                    while (readBits(1)) {
                        codeblock.Lblock++;
                    }
                    var codingpassesLog2 = log2(codingpasses);
                    var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
                    var codedDataLength = readBits(bits);
                    queue.push({
                        codeblock: codeblock,
                        codingpasses: codingpasses,
                        dataLength: codedDataLength
                    });
                }
                alignToByte();
                if (ephMarkerUsed) {
                    skipMarkerIfEqual(0x92);
                }
                while (queue.length > 0) {
                    var packetItem = queue.shift();
                    codeblock = packetItem.codeblock;
                    if (codeblock['data'] === undefined) {
                        codeblock.data = [];
                    }
                    codeblock.data.push({
                        data: data,
                        start: offset + position,
                        end: offset + position + packetItem.dataLength,
                        codingpasses: packetItem.codingpasses
                    });
                    position += packetItem.dataLength;
                }
            }
            return position;
        }
        function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {
            var x0 = subband.tbx0;
            var y0 = subband.tby0;
            var width = subband.tbx1 - subband.tbx0;
            var codeblocks = subband.codeblocks;
            var right = subband.type.charAt(0) === 'H' ? 1 : 0;
            var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;
            for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
                var codeblock = codeblocks[i];
                var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
                var blockHeight = codeblock.tby1_ - codeblock.tby0_;
                if (blockWidth === 0 || blockHeight === 0) {
                    continue;
                }
                if (codeblock['data'] === undefined) {
                    continue;
                }
                var bitModel, currentCodingpassType;
                bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);
                currentCodingpassType = 2;
                var data = codeblock.data
                    , totalLength = 0
                    , codingpasses = 0;
                var j, jj, dataItem;
                for (j = 0,
                    jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    totalLength += dataItem.end - dataItem.start;
                    codingpasses += dataItem.codingpasses;
                }
                var encodedData = new Uint8Array(totalLength);
                var position = 0;
                for (j = 0,
                    jj = data.length; j < jj; j++) {
                    dataItem = data[j];
                    var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
                    encodedData.set(chunk, position);
                    position += chunk.length;
                }
                var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);
                bitModel.setDecoder(decoder);
                for (j = 0; j < codingpasses; j++) {
                    switch (currentCodingpassType) {
                        case 0:
                            bitModel.runSignificancePropagationPass();
                            break;
                        case 1:
                            bitModel.runMagnitudeRefinementPass();
                            break;
                        case 2:
                            bitModel.runCleanupPass();
                            if (segmentationSymbolUsed) {
                                bitModel.checkSegmentationSymbol();
                            }
                            break;
                    }
                    currentCodingpassType = (currentCodingpassType + 1) % 3;
                }
                var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
                var sign = bitModel.coefficentsSign;
                var magnitude = bitModel.coefficentsMagnitude;
                var bitsDecoded = bitModel.bitsDecoded;
                var magnitudeCorrection = reversible ? 0 : 0.5;
                var k, n, nb;
                position = 0;
                var interleave = subband.type !== 'LL';
                for (j = 0; j < blockHeight; j++) {
                    var row = offset / width | 0;
                    var levelOffset = 2 * row * (levelWidth - width) + right + bottom;
                    for (k = 0; k < blockWidth; k++) {
                        n = magnitude[position];
                        if (n !== 0) {
                            n = (n + magnitudeCorrection) * delta;
                            if (sign[position] !== 0) {
                                n = -n;
                            }
                            nb = bitsDecoded[position];
                            var pos = interleave ? levelOffset + (offset << 1) : offset;
                            if (reversible && nb >= mb) {
                                coefficients[pos] = n;
                            } else {
                                coefficients[pos] = n * (1 << mb - nb);
                            }
                        }
                        offset++;
                        position++;
                    }
                    offset += width - blockWidth;
                }
            }
        }
        function transformTile(context, tile, c) {
            var component = tile.components[c];
            var codingStyleParameters = component.codingStyleParameters;
            var quantizationParameters = component.quantizationParameters;
            var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;
            var spqcds = quantizationParameters.SPqcds;
            var scalarExpounded = quantizationParameters.scalarExpounded;
            var guardBits = quantizationParameters.guardBits;
            var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
            var precision = context.components[c].precision;
            var reversible = codingStyleParameters.reversibleTransformation;
            var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();
            var subbandCoefficients = [];
            var b = 0;
            for (var i = 0; i <= decompositionLevelsCount; i++) {
                var resolution = component.resolutions[i];
                var width = resolution.trx1 - resolution.trx0;
                var height = resolution.try1 - resolution.try0;
                var coefficients = new Float32Array(width * height);
                for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {
                    var mu, epsilon;
                    if (!scalarExpounded) {
                        mu = spqcds[0].mu;
                        epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);
                    } else {
                        mu = spqcds[b].mu;
                        epsilon = spqcds[b].epsilon;
                        b++;
                    }
                    var subband = resolution.subbands[j];
                    var gainLog2 = SubbandsGainLog2[subband.type];
                    var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);
                    var mb = guardBits + epsilon - 1;
                    copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);
                }
                subbandCoefficients.push({
                    width: width,
                    height: height,
                    items: coefficients
                });
            }
            var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);
            return {
                left: component.tcx0,
                top: component.tcy0,
                width: result.width,
                height: result.height,
                items: result.items
            };
        }
        function transformComponents(context) {
            var siz = context.SIZ;
            var components = context.components;
            var componentsCount = siz.Csiz;
            var resultImages = [];
            for (var i = 0, ii = context.tiles.length; i < ii; i++) {
                var tile = context.tiles[i];
                var transformedTiles = [];
                var c;
                for (c = 0; c < componentsCount; c++) {
                    transformedTiles[c] = transformTile(context, tile, c);
                }
                var tile0 = transformedTiles[0];
                var out = new Uint8Array(tile0.items.length * componentsCount);
                var result = {
                    left: tile0.left,
                    top: tile0.top,
                    width: tile0.width,
                    height: tile0.height,
                    items: out
                };
                var shift, offset, max, min, maxK;
                var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;
                if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
                    var fourComponents = componentsCount === 4;
                    var y0items = transformedTiles[0].items;
                    var y1items = transformedTiles[1].items;
                    var y2items = transformedTiles[2].items;
                    var y3items = fourComponents ? transformedTiles[3].items : null;
                    shift = components[0].precision - 8;
                    offset = (128 << shift) + 0.5;
                    max = 255 * (1 << shift);
                    maxK = max * 0.5;
                    min = -maxK;
                    var component0 = tile.components[0];
                    var alpha01 = componentsCount - 3;
                    jj = y0items.length;
                    if (!component0.codingStyleParameters.reversibleTransformation) {
                        for (j = 0; j < jj; j++,
                            pos += alpha01) {
                            y0 = y0items[j] + offset;
                            y1 = y1items[j];
                            y2 = y2items[j];
                            r = y0 + 1.402 * y2;
                            g = y0 - 0.34413 * y1 - 0.71414 * y2;
                            b = y0 + 1.772 * y1;
                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
                        }
                    } else {
                        for (j = 0; j < jj; j++,
                            pos += alpha01) {
                            y0 = y0items[j] + offset;
                            y1 = y1items[j];
                            y2 = y2items[j];
                            g = y0 - (y2 + y1 >> 2);
                            r = g + y2;
                            b = g + y1;
                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;
                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;
                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;
                        }
                    }
                    if (fourComponents) {
                        for (j = 0,
                            pos = 3; j < jj; j++,
                            pos += 4) {
                            k = y3items[j];
                            out[pos] = k <= min ? 0 : k >= maxK ? 255 : k + offset >> shift;
                        }
                    }
                } else {
                    for (c = 0; c < componentsCount; c++) {
                        var items = transformedTiles[c].items;
                        shift = components[c].precision - 8;
                        offset = (128 << shift) + 0.5;
                        max = 127.5 * (1 << shift);
                        min = -max;
                        for (pos = c,
                            j = 0,
                            jj = items.length; j < jj; j++) {
                            val = items[j];
                            out[pos] = val <= min ? 0 : val >= max ? 255 : val + offset >> shift;
                            pos += componentsCount;
                        }
                    }
                }
                resultImages.push(result);
            }
            return resultImages;
        }
        function initializeTile(context, tileIndex) {
            var siz = context.SIZ;
            var componentsCount = siz.Csiz;
            var tile = context.tiles[tileIndex];
            for (var c = 0; c < componentsCount; c++) {
                var component = tile.components[c];
                var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;
                component.quantizationParameters = qcdOrQcc;
                var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;
                component.codingStyleParameters = codOrCoc;
            }
            tile.codingStyleDefaultParameters = context.currentTile.COD;
        }
        var TagTree = function TagTreeClosure() {
            function TagTree(width, height) {
                var levelsLength = log2(Math.max(width, height)) + 1;
                this.levels = [];
                for (var i = 0; i < levelsLength; i++) {
                    var level = {
                        width: width,
                        height: height,
                        items: []
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                }
            }
            TagTree.prototype = {
                reset: function TagTree_reset(i, j) {
                    var currentLevel = 0, value = 0, level;
                    while (currentLevel < this.levels.length) {
                        level = this.levels[currentLevel];
                        var index = i + j * level.width;
                        if (level.items[index] !== undefined) {
                            value = level.items[index];
                            break;
                        }
                        level.index = index;
                        i >>= 1;
                        j >>= 1;
                        currentLevel++;
                    }
                    currentLevel--;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    this.currentLevel = currentLevel;
                    delete this.value;
                },
                incrementValue: function TagTree_incrementValue() {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index]++;
                },
                nextLevel: function TagTree_nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    currentLevel--;
                    if (currentLevel < 0) {
                        this.value = value;
                        return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                }
            };
            return TagTree;
        }();
        var InclusionTree = function InclusionTreeClosure() {
            function InclusionTree(width, height, defaultValue) {
                var levelsLength = log2(Math.max(width, height)) + 1;
                this.levels = [];
                for (var i = 0; i < levelsLength; i++) {
                    var items = new Uint8Array(width * height);
                    for (var j = 0, jj = items.length; j < jj; j++) {
                        items[j] = defaultValue;
                    }
                    var level = {
                        width: width,
                        height: height,
                        items: items
                    };
                    this.levels.push(level);
                    width = Math.ceil(width / 2);
                    height = Math.ceil(height / 2);
                }
            }
            InclusionTree.prototype = {
                reset: function InclusionTree_reset(i, j, stopValue) {
                    var currentLevel = 0;
                    while (currentLevel < this.levels.length) {
                        var level = this.levels[currentLevel];
                        var index = i + j * level.width;
                        level.index = index;
                        var value = level.items[index];
                        if (value === 0xFF) {
                            break;
                        }
                        if (value > stopValue) {
                            this.currentLevel = currentLevel;
                            this.propagateValues();
                            return false;
                        }
                        i >>= 1;
                        j >>= 1;
                        currentLevel++;
                    }
                    this.currentLevel = currentLevel - 1;
                    return true;
                },
                incrementValue: function InclusionTree_incrementValue(stopValue) {
                    var level = this.levels[this.currentLevel];
                    level.items[level.index] = stopValue + 1;
                    this.propagateValues();
                },
                propagateValues: function InclusionTree_propagateValues() {
                    var levelIndex = this.currentLevel;
                    var level = this.levels[levelIndex];
                    var currentValue = level.items[level.index];
                    while (--levelIndex >= 0) {
                        level = this.levels[levelIndex];
                        level.items[level.index] = currentValue;
                    }
                },
                nextLevel: function InclusionTree_nextLevel() {
                    var currentLevel = this.currentLevel;
                    var level = this.levels[currentLevel];
                    var value = level.items[level.index];
                    level.items[level.index] = 0xFF;
                    currentLevel--;
                    if (currentLevel < 0) {
                        return false;
                    }
                    this.currentLevel = currentLevel;
                    level = this.levels[currentLevel];
                    level.items[level.index] = value;
                    return true;
                }
            };
            return InclusionTree;
        }();
        var BitModel = function BitModelClosure() {
            var UNIFORM_CONTEXT = 17;
            var RUNLENGTH_CONTEXT = 18;
            var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);
            var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);
            var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);
            function BitModel(width, height, subband, zeroBitPlanes, mb) {
                this.width = width;
                this.height = height;
                this.contextLabelTable = subband === 'HH' ? HHContextLabel : subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel;
                var coefficientCount = width * height;
                this.neighborsSignificance = new Uint8Array(coefficientCount);
                this.coefficentsSign = new Uint8Array(coefficientCount);
                this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) : mb > 6 ? new Uint16Array(coefficientCount) : new Uint8Array(coefficientCount);
                this.processingFlags = new Uint8Array(coefficientCount);
                var bitsDecoded = new Uint8Array(coefficientCount);
                if (zeroBitPlanes !== 0) {
                    for (var i = 0; i < coefficientCount; i++) {
                        bitsDecoded[i] = zeroBitPlanes;
                    }
                }
                this.bitsDecoded = bitsDecoded;
                this.reset();
            }
            BitModel.prototype = {
                setDecoder: function BitModel_setDecoder(decoder) {
                    this.decoder = decoder;
                },
                reset: function BitModel_reset() {
                    this.contexts = new Int8Array(19);
                    this.contexts[0] = 4 << 1 | 0;
                    this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;
                    this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;
                },
                setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {
                    var neighborsSignificance = this.neighborsSignificance;
                    var width = this.width
                        , height = this.height;
                    var left = column > 0;
                    var right = column + 1 < width;
                    var i;
                    if (row > 0) {
                        i = index - width;
                        if (left) {
                            neighborsSignificance[i - 1] += 0x10;
                        }
                        if (right) {
                            neighborsSignificance[i + 1] += 0x10;
                        }
                        neighborsSignificance[i] += 0x04;
                    }
                    if (row + 1 < height) {
                        i = index + width;
                        if (left) {
                            neighborsSignificance[i - 1] += 0x10;
                        }
                        if (right) {
                            neighborsSignificance[i + 1] += 0x10;
                        }
                        neighborsSignificance[i] += 0x04;
                    }
                    if (left) {
                        neighborsSignificance[index - 1] += 0x01;
                    }
                    if (right) {
                        neighborsSignificance[index + 1] += 0x01;
                    }
                    neighborsSignificance[index] |= 0x80;
                },
                runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {
                    var decoder = this.decoder;
                    var width = this.width
                        , height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var neighborsSignificance = this.neighborsSignificance;
                    var processingFlags = this.processingFlags;
                    var contexts = this.contexts;
                    var labels = this.contextLabelTable;
                    var bitsDecoded = this.bitsDecoded;
                    var processedInverseMask = ~1;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    for (var i0 = 0; i0 < height; i0 += 4) {
                        for (var j = 0; j < width; j++) {
                            var index = i0 * width + j;
                            for (var i1 = 0; i1 < 4; i1++,
                                index += width) {
                                var i = i0 + i1;
                                if (i >= height) {
                                    break;
                                }
                                processingFlags[index] &= processedInverseMask;
                                if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {
                                    continue;
                                }
                                var contextLabel = labels[neighborsSignificance[index]];
                                var decision = decoder.readBit(contexts, contextLabel);
                                if (decision) {
                                    var sign = this.decodeSignBit(i, j, index);
                                    coefficentsSign[index] = sign;
                                    coefficentsMagnitude[index] = 1;
                                    this.setNeighborsSignificance(i, j, index);
                                    processingFlags[index] |= firstMagnitudeBitMask;
                                }
                                bitsDecoded[index]++;
                                processingFlags[index] |= processedMask;
                            }
                        }
                    }
                },
                decodeSignBit: function BitModel_decodeSignBit(row, column, index) {
                    var width = this.width
                        , height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var contribution, sign0, sign1, significance1;
                    var contextLabel, decoded;
                    significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
                    if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
                        sign1 = coefficentsSign[index + 1];
                        if (significance1) {
                            sign0 = coefficentsSign[index - 1];
                            contribution = 1 - sign1 - sign0;
                        } else {
                            contribution = 1 - sign1 - sign1;
                        }
                    } else if (significance1) {
                        sign0 = coefficentsSign[index - 1];
                        contribution = 1 - sign0 - sign0;
                    } else {
                        contribution = 0;
                    }
                    var horizontalContribution = 3 * contribution;
                    significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;
                    if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
                        sign1 = coefficentsSign[index + width];
                        if (significance1) {
                            sign0 = coefficentsSign[index - width];
                            contribution = 1 - sign1 - sign0 + horizontalContribution;
                        } else {
                            contribution = 1 - sign1 - sign1 + horizontalContribution;
                        }
                    } else if (significance1) {
                        sign0 = coefficentsSign[index - width];
                        contribution = 1 - sign0 - sign0 + horizontalContribution;
                    } else {
                        contribution = horizontalContribution;
                    }
                    if (contribution >= 0) {
                        contextLabel = 9 + contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel);
                    } else {
                        contextLabel = 9 - contribution;
                        decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
                    }
                    return decoded;
                },
                runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {
                    var decoder = this.decoder;
                    var width = this.width
                        , height = this.height;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var neighborsSignificance = this.neighborsSignificance;
                    var contexts = this.contexts;
                    var bitsDecoded = this.bitsDecoded;
                    var processingFlags = this.processingFlags;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    var length = width * height;
                    var width4 = width * 4;
                    for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
                        indexNext = Math.min(length, index0 + width4);
                        for (var j = 0; j < width; j++) {
                            for (var index = index0 + j; index < indexNext; index += width) {
                                if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                                    continue;
                                }
                                var contextLabel = 16;
                                if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                                    processingFlags[index] ^= firstMagnitudeBitMask;
                                    var significance = neighborsSignificance[index] & 127;
                                    contextLabel = significance === 0 ? 15 : 14;
                                }
                                var bit = decoder.readBit(contexts, contextLabel);
                                coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;
                                bitsDecoded[index]++;
                                processingFlags[index] |= processedMask;
                            }
                        }
                    }
                },
                runCleanupPass: function BitModel_runCleanupPass() {
                    var decoder = this.decoder;
                    var width = this.width
                        , height = this.height;
                    var neighborsSignificance = this.neighborsSignificance;
                    var coefficentsMagnitude = this.coefficentsMagnitude;
                    var coefficentsSign = this.coefficentsSign;
                    var contexts = this.contexts;
                    var labels = this.contextLabelTable;
                    var bitsDecoded = this.bitsDecoded;
                    var processingFlags = this.processingFlags;
                    var processedMask = 1;
                    var firstMagnitudeBitMask = 2;
                    var oneRowDown = width;
                    var twoRowsDown = width * 2;
                    var threeRowsDown = width * 3;
                    var iNext;
                    for (var i0 = 0; i0 < height; i0 = iNext) {
                        iNext = Math.min(i0 + 4, height);
                        var indexBase = i0 * width;
                        var checkAllEmpty = i0 + 3 < height;
                        for (var j = 0; j < width; j++) {
                            var index0 = indexBase + j;
                            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;
                            var i1 = 0
                                , index = index0;
                            var i = i0, sign;
                            if (allEmpty) {
                                var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);
                                if (!hasSignificantCoefficent) {
                                    bitsDecoded[index0]++;
                                    bitsDecoded[index0 + oneRowDown]++;
                                    bitsDecoded[index0 + twoRowsDown]++;
                                    bitsDecoded[index0 + threeRowsDown]++;
                                    continue;
                                }
                                i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                                if (i1 !== 0) {
                                    i = i0 + i1;
                                    index += i1 * width;
                                }
                                sign = this.decodeSignBit(i, j, index);
                                coefficentsSign[index] = sign;
                                coefficentsMagnitude[index] = 1;
                                this.setNeighborsSignificance(i, j, index);
                                processingFlags[index] |= firstMagnitudeBitMask;
                                index = index0;
                                for (var i2 = i0; i2 <= i; i2++,
                                    index += width) {
                                    bitsDecoded[index]++;
                                }
                                i1++;
                            }
                            for (i = i0 + i1; i < iNext; i++,
                                index += width) {
                                if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                                    continue;
                                }
                                var contextLabel = labels[neighborsSignificance[index]];
                                var decision = decoder.readBit(contexts, contextLabel);
                                if (decision === 1) {
                                    sign = this.decodeSignBit(i, j, index);
                                    coefficentsSign[index] = sign;
                                    coefficentsMagnitude[index] = 1;
                                    this.setNeighborsSignificance(i, j, index);
                                    processingFlags[index] |= firstMagnitudeBitMask;
                                }
                                bitsDecoded[index]++;
                            }
                        }
                    }
                },
                checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {
                    var decoder = this.decoder;
                    var contexts = this.contexts;
                    var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
                    if (symbol !== 0xA) {
                        error('JPX Error: Invalid segmentation symbol');
                    }
                }
            };
            return BitModel;
        }();
        var Transform = function TransformClosure() {
            function Transform() { }
            Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {
                var ll = subbands[0];
                for (var i = 1, ii = subbands.length; i < ii; i++) {
                    ll = this.iterate(ll, subbands[i], u0, v0);
                }
                return ll;
            }
                ;
            Transform.prototype.extend = function extend(buffer, offset, size) {
                var i1 = offset - 1
                    , j1 = offset + 1;
                var i2 = offset + size - 2
                    , j2 = offset + size;
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1--] = buffer[j1++];
                buffer[j2++] = buffer[i2--];
                buffer[i1] = buffer[j1];
                buffer[j2] = buffer[i2];
            }
                ;
            Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {
                var llWidth = ll.width
                    , llHeight = ll.height
                    , llItems = ll.items;
                var width = hl_lh_hh.width;
                var height = hl_lh_hh.height;
                var items = hl_lh_hh.items;
                var i, j, k, l, u, v;
                for (k = 0,
                    i = 0; i < llHeight; i++) {
                    l = i * 2 * width;
                    for (j = 0; j < llWidth; j++,
                        k++,
                        l += 2) {
                        items[l] = llItems[k];
                    }
                }
                llItems = ll.items = null;
                var bufferPadding = 4;
                var rowBuffer = new Float32Array(width + 2 * bufferPadding);
                if (width === 1) {
                    if ((u0 & 1) !== 0) {
                        for (v = 0,
                            k = 0; v < height; v++,
                            k += width) {
                            items[k] *= 0.5;
                        }
                    }
                } else {
                    for (v = 0,
                        k = 0; v < height; v++,
                        k += width) {
                        rowBuffer.set(items.subarray(k, k + width), bufferPadding);
                        this.extend(rowBuffer, bufferPadding, width);
                        this.filter(rowBuffer, bufferPadding, width);
                        items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);
                    }
                }
                var numBuffers = 16;
                var colBuffers = [];
                for (i = 0; i < numBuffers; i++) {
                    colBuffers.push(new Float32Array(height + 2 * bufferPadding));
                }
                var b, currentBuffer = 0;
                ll = bufferPadding + height;
                if (height === 1) {
                    if ((v0 & 1) !== 0) {
                        for (u = 0; u < width; u++) {
                            items[u] *= 0.5;
                        }
                    }
                } else {
                    for (u = 0; u < width; u++) {
                        if (currentBuffer === 0) {
                            numBuffers = Math.min(width - u, numBuffers);
                            for (k = u,
                                l = bufferPadding; l < ll; k += width,
                                l++) {
                                for (b = 0; b < numBuffers; b++) {
                                    colBuffers[b][l] = items[k + b];
                                }
                            }
                            currentBuffer = numBuffers;
                        }
                        currentBuffer--;
                        var buffer = colBuffers[currentBuffer];
                        this.extend(buffer, bufferPadding, height);
                        this.filter(buffer, bufferPadding, height);
                        if (currentBuffer === 0) {
                            k = u - numBuffers + 1;
                            for (l = bufferPadding; l < ll; k += width,
                                l++) {
                                for (b = 0; b < numBuffers; b++) {
                                    items[k + b] = colBuffers[b][l];
                                }
                            }
                        }
                    }
                }
                return {
                    width: width,
                    height: height,
                    items: items
                };
            }
                ;
            return Transform;
        }();
        var IrreversibleTransform = function IrreversibleTransformClosure() {
            function IrreversibleTransform() {
                Transform.call(this);
            }
            IrreversibleTransform.prototype = Object.create(Transform.prototype);
            IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {
                var len = length >> 1;
                offset = offset | 0;
                var j, n, current, next;
                var alpha = -1.586134342059924;
                var beta = -0.052980118572961;
                var gamma = 0.882911075530934;
                var delta = 0.443506852043971;
                var K = 1.230174104914001;
                var K_ = 1 / K;
                j = offset - 3;
                for (n = len + 4; n--; j += 2) {
                    x[j] *= K_;
                }
                j = offset - 2;
                current = delta * x[j - 1];
                for (n = len + 3; n--; j += 2) {
                    next = delta * x[j + 1];
                    x[j] = K * x[j] - current - next;
                    if (n--) {
                        j += 2;
                        current = delta * x[j + 1];
                        x[j] = K * x[j] - current - next;
                    } else {
                        break;
                    }
                }
                j = offset - 1;
                current = gamma * x[j - 1];
                for (n = len + 2; n--; j += 2) {
                    next = gamma * x[j + 1];
                    x[j] -= current + next;
                    if (n--) {
                        j += 2;
                        current = gamma * x[j + 1];
                        x[j] -= current + next;
                    } else {
                        break;
                    }
                }
                j = offset;
                current = beta * x[j - 1];
                for (n = len + 1; n--; j += 2) {
                    next = beta * x[j + 1];
                    x[j] -= current + next;
                    if (n--) {
                        j += 2;
                        current = beta * x[j + 1];
                        x[j] -= current + next;
                    } else {
                        break;
                    }
                }
                if (len !== 0) {
                    j = offset + 1;
                    current = alpha * x[j - 1];
                    for (n = len; n--; j += 2) {
                        next = alpha * x[j + 1];
                        x[j] -= current + next;
                        if (n--) {
                            j += 2;
                            current = alpha * x[j + 1];
                            x[j] -= current + next;
                        } else {
                            break;
                        }
                    }
                }
            }
                ;
            return IrreversibleTransform;
        }();
        var ReversibleTransform = function ReversibleTransformClosure() {
            function ReversibleTransform() {
                Transform.call(this);
            }
            ReversibleTransform.prototype = Object.create(Transform.prototype);
            ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {
                var len = length >> 1;
                offset = offset | 0;
                var j, n;
                for (j = offset,
                    n = len + 1; n--; j += 2) {
                    x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;
                }
                for (j = offset + 1,
                    n = len; n--; j += 2) {
                    x[j] += x[j - 1] + x[j + 1] >> 1;
                }
            }
                ;
            return ReversibleTransform;
        }();
        return JpxImage;
    }();

    "use strict";

    var Jbig2Image = function Jbig2ImageClosure() {
        function ContextCache() { }
        ContextCache.prototype = {
            getContexts: function (id) {
                if (id in this) {
                    return this[id];
                }
                return this[id] = new Int8Array(1 << 16);
            }
        };
        function DecodingContext(data, start, end) {
            this.data = data;
            this.start = start;
            this.end = end;
        }
        DecodingContext.prototype = {
            get decoder() {
                var decoder = new ArithmeticDecoder(this.data, this.start, this.end);
                return shadow(this, 'decoder', decoder);
            },
            get contextCache() {
                var cache = new ContextCache();
                return shadow(this, 'contextCache', cache);
            }
        };
        function decodeInteger(contextCache, procedure, decoder) {
            var contexts = contextCache.getContexts(procedure);
            var prev = 1;
            function readBits(length) {
                var v = 0;
                for (var i = 0; i < length; i++) {
                    var bit = decoder.readBit(contexts, prev);
                    prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;
                    v = v << 1 | bit;
                }
                return v >>> 0;
            }
            var sign = readBits(1);
            var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);
            return sign === 0 ? value : value > 0 ? -value : null;
        }
        function decodeIAID(contextCache, decoder, codeLength) {
            var contexts = contextCache.getContexts('IAID');
            var prev = 1;
            for (var i = 0; i < codeLength; i++) {
                var bit = decoder.readBit(contexts, prev);
                prev = prev << 1 | bit;
            }
            if (codeLength < 31) {
                return prev & (1 << codeLength) - 1;
            }
            return prev & 0x7FFFFFFF;
        }
        var SegmentTypes = ['SymbolDictionary', null, null, null, 'IntermediateTextRegion', null, 'ImmediateTextRegion', 'ImmediateLosslessTextRegion', null, null, null, null, null, null, null, null, 'patternDictionary', null, null, null, 'IntermediateHalftoneRegion', null, 'ImmediateHalftoneRegion', 'ImmediateLosslessHalftoneRegion', null, null, null, null, null, null, null, null, null, null, null, null, 'IntermediateGenericRegion', null, 'ImmediateGenericRegion', 'ImmediateLosslessGenericRegion', 'IntermediateGenericRefinementRegion', null, 'ImmediateGenericRefinementRegion', 'ImmediateLosslessGenericRefinementRegion', null, null, null, null, 'PageInformation', 'EndOfPage', 'EndOfStripe', 'EndOfFile', 'Profiles', 'Tables', null, null, null, null, null, null, null, null, 'Extension'];
        var CodingTemplates = [[{
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: 2,
            y: -1
        }, {
            x: -4,
            y: 0
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        }], [{
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: 2,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: 2,
            y: -1
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        }], [{
            x: -1,
            y: -2
        }, {
            x: 0,
            y: -2
        }, {
            x: 1,
            y: -2
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        }], [{
            x: -3,
            y: -1
        }, {
            x: -2,
            y: -1
        }, {
            x: -1,
            y: -1
        }, {
            x: 0,
            y: -1
        }, {
            x: 1,
            y: -1
        }, {
            x: -4,
            y: 0
        }, {
            x: -3,
            y: 0
        }, {
            x: -2,
            y: 0
        }, {
            x: -1,
            y: 0
        }]];
        var RefinementTemplates = [{
            coding: [{
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            }],
            reference: [{
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            }, {
                x: 0,
                y: 0
            }, {
                x: 1,
                y: 0
            }, {
                x: -1,
                y: 1
            }, {
                x: 0,
                y: 1
            }, {
                x: 1,
                y: 1
            }]
        }, {
            coding: [{
                x: -1,
                y: -1
            }, {
                x: 0,
                y: -1
            }, {
                x: 1,
                y: -1
            }, {
                x: -1,
                y: 0
            }],
            reference: [{
                x: 0,
                y: -1
            }, {
                x: -1,
                y: 0
            }, {
                x: 0,
                y: 0
            }, {
                x: 1,
                y: 0
            }, {
                x: 0,
                y: 1
            }, {
                x: 1,
                y: 1
            }]
        }];
        var ReusedContexts = [0x9B25, 0x0795, 0x00E5, 0x0195];
        var RefinementReusedContexts = [0x0020, 0x0008];
        function decodeBitmapTemplate0(width, height, decodingContext) {
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts('GB');
            var contextLabel, i, j, pixel, row, row1, row2, bitmap = [];
            var OLD_PIXEL_MASK = 0x7BF7;
            for (i = 0; i < height; i++) {
                row = bitmap[i] = new Uint8Array(width);
                row1 = i < 1 ? row : bitmap[i - 1];
                row2 = i < 2 ? row : bitmap[i - 2];
                contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;
                for (j = 0; j < width; j++) {
                    row[j] = pixel = decoder.readBit(contexts, contextLabel);
                    contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;
                }
            }
            return bitmap;
        }
        function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {
            if (mmr) {
                error('JBIG2 error: MMR encoding is not supported');
            }
            if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {
                return decodeBitmapTemplate0(width, height, decodingContext);
            }
            var useskip = !!skip;
            var template = CodingTemplates[templateIndex].concat(at);
            template.sort(function (a, b) {
                return a.y - b.y || a.x - b.x;
            });
            var templateLength = template.length;
            var templateX = new Int8Array(templateLength);
            var templateY = new Int8Array(templateLength);
            var changingTemplateEntries = [];
            var reuseMask = 0
                , minX = 0
                , maxX = 0
                , minY = 0;
            var c, k;
            for (k = 0; k < templateLength; k++) {
                templateX[k] = template[k].x;
                templateY[k] = template[k].y;
                minX = Math.min(minX, template[k].x);
                maxX = Math.max(maxX, template[k].x);
                minY = Math.min(minY, template[k].y);
                if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {
                    reuseMask |= 1 << templateLength - 1 - k;
                } else {
                    changingTemplateEntries.push(k);
                }
            }
            var changingEntriesLength = changingTemplateEntries.length;
            var changingTemplateX = new Int8Array(changingEntriesLength);
            var changingTemplateY = new Int8Array(changingEntriesLength);
            var changingTemplateBit = new Uint16Array(changingEntriesLength);
            for (c = 0; c < changingEntriesLength; c++) {
                k = changingTemplateEntries[c];
                changingTemplateX[c] = template[k].x;
                changingTemplateY[c] = template[k].y;
                changingTemplateBit[c] = 1 << templateLength - 1 - k;
            }
            var sbb_left = -minX;
            var sbb_top = -minY;
            var sbb_right = width - maxX;
            var pseudoPixelContext = ReusedContexts[templateIndex];
            var row = new Uint8Array(width);
            var bitmap = [];
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts('GB');
            var ltp = 0, j, i0, j0, contextLabel = 0, bit, shift;
            for (var i = 0; i < height; i++) {
                if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                        bitmap.push(row);
                        continue;
                    }
                }
                row = new Uint8Array(row);
                bitmap.push(row);
                for (j = 0; j < width; j++) {
                    if (useskip && skip[i][j]) {
                        row[j] = 0;
                        continue;
                    }
                    if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
                        contextLabel = contextLabel << 1 & reuseMask;
                        for (k = 0; k < changingEntriesLength; k++) {
                            i0 = i + changingTemplateY[k];
                            j0 = j + changingTemplateX[k];
                            bit = bitmap[i0][j0];
                            if (bit) {
                                bit = changingTemplateBit[k];
                                contextLabel |= bit;
                            }
                        }
                    } else {
                        contextLabel = 0;
                        shift = templateLength - 1;
                        for (k = 0; k < templateLength; k++,
                            shift--) {
                            j0 = j + templateX[k];
                            if (j0 >= 0 && j0 < width) {
                                i0 = i + templateY[k];
                                if (i0 >= 0) {
                                    bit = bitmap[i0][j0];
                                    if (bit) {
                                        contextLabel |= bit << shift;
                                    }
                                }
                            }
                        }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                }
            }
            return bitmap;
        }
        function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {
            var codingTemplate = RefinementTemplates[templateIndex].coding;
            if (templateIndex === 0) {
                codingTemplate = codingTemplate.concat([at[0]]);
            }
            var codingTemplateLength = codingTemplate.length;
            var codingTemplateX = new Int32Array(codingTemplateLength);
            var codingTemplateY = new Int32Array(codingTemplateLength);
            var k;
            for (k = 0; k < codingTemplateLength; k++) {
                codingTemplateX[k] = codingTemplate[k].x;
                codingTemplateY[k] = codingTemplate[k].y;
            }
            var referenceTemplate = RefinementTemplates[templateIndex].reference;
            if (templateIndex === 0) {
                referenceTemplate = referenceTemplate.concat([at[1]]);
            }
            var referenceTemplateLength = referenceTemplate.length;
            var referenceTemplateX = new Int32Array(referenceTemplateLength);
            var referenceTemplateY = new Int32Array(referenceTemplateLength);
            for (k = 0; k < referenceTemplateLength; k++) {
                referenceTemplateX[k] = referenceTemplate[k].x;
                referenceTemplateY[k] = referenceTemplate[k].y;
            }
            var referenceWidth = referenceBitmap[0].length;
            var referenceHeight = referenceBitmap.length;
            var pseudoPixelContext = RefinementReusedContexts[templateIndex];
            var bitmap = [];
            var decoder = decodingContext.decoder;
            var contexts = decodingContext.contextCache.getContexts('GR');
            var ltp = 0;
            for (var i = 0; i < height; i++) {
                if (prediction) {
                    var sltp = decoder.readBit(contexts, pseudoPixelContext);
                    ltp ^= sltp;
                    if (ltp) {
                        error('JBIG2 error: prediction is not supported');
                    }
                }
                var row = new Uint8Array(width);
                bitmap.push(row);
                for (var j = 0; j < width; j++) {
                    var i0, j0;
                    var contextLabel = 0;
                    for (k = 0; k < codingTemplateLength; k++) {
                        i0 = i + codingTemplateY[k];
                        j0 = j + codingTemplateX[k];
                        if (i0 < 0 || j0 < 0 || j0 >= width) {
                            contextLabel <<= 1;
                        } else {
                            contextLabel = contextLabel << 1 | bitmap[i0][j0];
                        }
                    }
                    for (k = 0; k < referenceTemplateLength; k++) {
                        i0 = i + referenceTemplateY[k] + offsetY;
                        j0 = j + referenceTemplateX[k] + offsetX;
                        if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {
                            contextLabel <<= 1;
                        } else {
                            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];
                        }
                    }
                    var pixel = decoder.readBit(contexts, contextLabel);
                    row[j] = pixel;
                }
            }
            return bitmap;
        }
        function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext) {
            if (huffman) {
                error('JBIG2 error: huffman is not supported');
            }
            var newSymbols = [];
            var currentHeight = 0;
            var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);
            var decoder = decodingContext.decoder;
            var contextCache = decodingContext.contextCache;
            while (newSymbols.length < numberOfNewSymbols) {
                var deltaHeight = decodeInteger(contextCache, 'IADH', decoder);
                currentHeight += deltaHeight;
                var currentWidth = 0;
                while (true) {
                    var deltaWidth = decodeInteger(contextCache, 'IADW', decoder);
                    if (deltaWidth === null) {
                        break;
                    }
                    currentWidth += deltaWidth;
                    var bitmap;
                    if (refinement) {
                        var numberOfInstances = decodeInteger(contextCache, 'IAAI', decoder);
                        if (numberOfInstances > 1) {
                            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext);
                        } else {
                            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
                            var rdx = decodeInteger(contextCache, 'IARDX', decoder);
                            var rdy = decodeInteger(contextCache, 'IARDY', decoder);
                            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];
                            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);
                        }
                    } else {
                        bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);
                    }
                    newSymbols.push(bitmap);
                }
            }
            var exportedSymbols = [];
            var flags = []
                , currentFlag = false;
            var totalSymbolsLength = symbols.length + numberOfNewSymbols;
            while (flags.length < totalSymbolsLength) {
                var runLength = decodeInteger(contextCache, 'IAEX', decoder);
                while (runLength--) {
                    flags.push(currentFlag);
                }
                currentFlag = !currentFlag;
            }
            for (var i = 0, ii = symbols.length; i < ii; i++) {
                if (flags[i]) {
                    exportedSymbols.push(symbols[i]);
                }
            }
            for (var j = 0; j < numberOfNewSymbols; i++,
                j++) {
                if (flags[i]) {
                    exportedSymbols.push(newSymbols[j]);
                }
            }
            return exportedSymbols;
        }
        function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext) {
            if (huffman) {
                error('JBIG2 error: huffman is not supported');
            }
            var bitmap = [];
            var i, row;
            for (i = 0; i < height; i++) {
                row = new Uint8Array(width);
                if (defaultPixelValue) {
                    for (var j = 0; j < width; j++) {
                        row[j] = defaultPixelValue;
                    }
                }
                bitmap.push(row);
            }
            var decoder = decodingContext.decoder;
            var contextCache = decodingContext.contextCache;
            var stripT = -decodeInteger(contextCache, 'IADT', decoder);
            var firstS = 0;
            i = 0;
            while (i < numberOfSymbolInstances) {
                var deltaT = decodeInteger(contextCache, 'IADT', decoder);
                stripT += deltaT;
                var deltaFirstS = decodeInteger(contextCache, 'IAFS', decoder);
                firstS += deltaFirstS;
                var currentS = firstS;
                do {
                    var currentT = stripSize === 1 ? 0 : decodeInteger(contextCache, 'IAIT', decoder);
                    var t = stripSize * stripT + currentT;
                    var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);
                    var applyRefinement = refinement && decodeInteger(contextCache, 'IARI', decoder);
                    var symbolBitmap = inputSymbols[symbolId];
                    var symbolWidth = symbolBitmap[0].length;
                    var symbolHeight = symbolBitmap.length;
                    if (applyRefinement) {
                        var rdw = decodeInteger(contextCache, 'IARDW', decoder);
                        var rdh = decodeInteger(contextCache, 'IARDH', decoder);
                        var rdx = decodeInteger(contextCache, 'IARDX', decoder);
                        var rdy = decodeInteger(contextCache, 'IARDY', decoder);
                        symbolWidth += rdw;
                        symbolHeight += rdh;
                        symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);
                    }
                    var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight);
                    var offsetS = currentS - (referenceCorner & 2 ? symbolWidth : 0);
                    var s2, t2, symbolRow;
                    if (transposed) {
                        for (s2 = 0; s2 < symbolHeight; s2++) {
                            row = bitmap[offsetS + s2];
                            if (!row) {
                                continue;
                            }
                            symbolRow = symbolBitmap[s2];
                            var maxWidth = Math.min(width - offsetT, symbolWidth);
                            switch (combinationOperator) {
                                case 0:
                                    for (t2 = 0; t2 < maxWidth; t2++) {
                                        row[offsetT + t2] |= symbolRow[t2];
                                    }
                                    break;
                                case 2:
                                    for (t2 = 0; t2 < maxWidth; t2++) {
                                        row[offsetT + t2] ^= symbolRow[t2];
                                    }
                                    break;
                                default:
                                    error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
                            }
                        }
                        currentS += symbolHeight - 1;
                    } else {
                        for (t2 = 0; t2 < symbolHeight; t2++) {
                            row = bitmap[offsetT + t2];
                            if (!row) {
                                continue;
                            }
                            symbolRow = symbolBitmap[t2];
                            switch (combinationOperator) {
                                case 0:
                                    for (s2 = 0; s2 < symbolWidth; s2++) {
                                        row[offsetS + s2] |= symbolRow[s2];
                                    }
                                    break;
                                case 2:
                                    for (s2 = 0; s2 < symbolWidth; s2++) {
                                        row[offsetS + s2] ^= symbolRow[s2];
                                    }
                                    break;
                                default:
                                    error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
                            }
                        }
                        currentS += symbolWidth - 1;
                    }
                    i++;
                    var deltaS = decodeInteger(contextCache, 'IADS', decoder);
                    if (deltaS === null) {
                        break;
                    }
                    currentS += deltaS + dsOffset;
                } while (true);
            }
            return bitmap;
        }
        function readSegmentHeader(data, start) {
            var segmentHeader = {};
            segmentHeader.number = readUint32(data, start);
            var flags = data[start + 4];
            var segmentType = flags & 0x3F;
            if (!SegmentTypes[segmentType]) {
                error('JBIG2 error: invalid segment type: ' + segmentType);
            }
            segmentHeader.type = segmentType;
            segmentHeader.typeName = SegmentTypes[segmentType];
            segmentHeader.deferredNonRetain = !!(flags & 0x80);
            var pageAssociationFieldSize = !!(flags & 0x40);
            var referredFlags = data[start + 5];
            var referredToCount = referredFlags >> 5 & 7;
            var retainBits = [referredFlags & 31];
            var position = start + 6;
            if (referredFlags === 7) {
                referredToCount = readUint32(data, position - 1) & 0x1FFFFFFF;
                position += 3;
                var bytes = referredToCount + 7 >> 3;
                retainBits[0] = data[position++];
                while (--bytes > 0) {
                    retainBits.push(data[position++]);
                }
            } else if (referredFlags === 5 || referredFlags === 6) {
                error('JBIG2 error: invalid referred-to flags');
            }
            segmentHeader.retainBits = retainBits;
            var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 : segmentHeader.number <= 65536 ? 2 : 4;
            var referredTo = [];
            var i, ii;
            for (i = 0; i < referredToCount; i++) {
                var number = referredToSegmentNumberSize === 1 ? data[position] : referredToSegmentNumberSize === 2 ? readUint16(data, position) : readUint32(data, position);
                referredTo.push(number);
                position += referredToSegmentNumberSize;
            }
            segmentHeader.referredTo = referredTo;
            if (!pageAssociationFieldSize) {
                segmentHeader.pageAssociation = data[position++];
            } else {
                segmentHeader.pageAssociation = readUint32(data, position);
                position += 4;
            }
            segmentHeader.length = readUint32(data, position);
            position += 4;
            if (segmentHeader.length === 0xFFFFFFFF) {
                if (segmentType === 38) {
                    var genericRegionInfo = readRegionSegmentInformation(data, position);
                    var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];
                    var genericRegionMmr = !!(genericRegionSegmentFlags & 1);
                    var searchPatternLength = 6;
                    var searchPattern = new Uint8Array(searchPatternLength);
                    if (!genericRegionMmr) {
                        searchPattern[0] = 0xFF;
                        searchPattern[1] = 0xAC;
                    }
                    searchPattern[2] = genericRegionInfo.height >>> 24 & 0xFF;
                    searchPattern[3] = genericRegionInfo.height >> 16 & 0xFF;
                    searchPattern[4] = genericRegionInfo.height >> 8 & 0xFF;
                    searchPattern[5] = genericRegionInfo.height & 0xFF;
                    for (i = position,
                        ii = data.length; i < ii; i++) {
                        var j = 0;
                        while (j < searchPatternLength && searchPattern[j] === data[i + j]) {
                            j++;
                        }
                        if (j === searchPatternLength) {
                            segmentHeader.length = i + searchPatternLength;
                            break;
                        }
                    }
                    if (segmentHeader.length === 0xFFFFFFFF) {
                        error('JBIG2 error: segment end was not found');
                    }
                } else {
                    error('JBIG2 error: invalid unknown segment length');
                }
            }
            segmentHeader.headerEnd = position;
            return segmentHeader;
        }
        function readSegments(header, data, start, end) {
            var segments = [];
            var position = start;
            while (position < end) {
                var segmentHeader = readSegmentHeader(data, position);
                position = segmentHeader.headerEnd;
                var segment = {
                    header: segmentHeader,
                    data: data
                };
                if (!header.randomAccess) {
                    segment.start = position;
                    position += segmentHeader.length;
                    segment.end = position;
                }
                segments.push(segment);
                if (segmentHeader.type === 51) {
                    break;
                }
            }
            if (header.randomAccess) {
                for (var i = 0, ii = segments.length; i < ii; i++) {
                    segments[i].start = position;
                    position += segments[i].header.length;
                    segments[i].end = position;
                }
            }
            return segments;
        }
        function readRegionSegmentInformation(data, start) {
            return {
                width: readUint32(data, start),
                height: readUint32(data, start + 4),
                x: readUint32(data, start + 8),
                y: readUint32(data, start + 12),
                combinationOperator: data[start + 16] & 7
            };
        }
        var RegionSegmentInformationFieldLength = 17;
        function processSegment(segment, visitor) {
            var header = segment.header;
            var data = segment.data
                , position = segment.start
                , end = segment.end;
            var args, at, i, atLength;
            switch (header.type) {
                case 0:
                    var dictionary = {};
                    var dictionaryFlags = readUint16(data, position);
                    dictionary.huffman = !!(dictionaryFlags & 1);
                    dictionary.refinement = !!(dictionaryFlags & 2);
                    dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;
                    dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;
                    dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;
                    dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;
                    dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
                    dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
                    dictionary.template = dictionaryFlags >> 10 & 3;
                    dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;
                    position += 2;
                    if (!dictionary.huffman) {
                        atLength = dictionary.template === 0 ? 4 : 1;
                        at = [];
                        for (i = 0; i < atLength; i++) {
                            at.push({
                                x: readInt8(data, position),
                                y: readInt8(data, position + 1)
                            });
                            position += 2;
                        }
                        dictionary.at = at;
                    }
                    if (dictionary.refinement && !dictionary.refinementTemplate) {
                        at = [];
                        for (i = 0; i < 2; i++) {
                            at.push({
                                x: readInt8(data, position),
                                y: readInt8(data, position + 1)
                            });
                            position += 2;
                        }
                        dictionary.refinementAt = at;
                    }
                    dictionary.numberOfExportedSymbols = readUint32(data, position);
                    position += 4;
                    dictionary.numberOfNewSymbols = readUint32(data, position);
                    position += 4;
                    args = [dictionary, header.number, header.referredTo, data, position, end];
                    break;
                case 6:
                case 7:
                    var textRegion = {};
                    textRegion.info = readRegionSegmentInformation(data, position);
                    position += RegionSegmentInformationFieldLength;
                    var textRegionSegmentFlags = readUint16(data, position);
                    position += 2;
                    textRegion.huffman = !!(textRegionSegmentFlags & 1);
                    textRegion.refinement = !!(textRegionSegmentFlags & 2);
                    textRegion.stripSize = 1 << (textRegionSegmentFlags >> 2 & 3);
                    textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;
                    textRegion.transposed = !!(textRegionSegmentFlags & 64);
                    textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;
                    textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;
                    textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;
                    textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;
                    if (textRegion.huffman) {
                        var textRegionHuffmanFlags = readUint16(data, position);
                        position += 2;
                        textRegion.huffmanFS = textRegionHuffmanFlags & 3;
                        textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;
                        textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;
                        textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;
                        textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;
                        textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;
                        textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;
                        textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 14);
                    }
                    if (textRegion.refinement && !textRegion.refinementTemplate) {
                        at = [];
                        for (i = 0; i < 2; i++) {
                            at.push({
                                x: readInt8(data, position),
                                y: readInt8(data, position + 1)
                            });
                            position += 2;
                        }
                        textRegion.refinementAt = at;
                    }
                    textRegion.numberOfSymbolInstances = readUint32(data, position);
                    position += 4;
                    if (textRegion.huffman) {
                        error('JBIG2 error: huffman is not supported');
                    }
                    args = [textRegion, header.referredTo, data, position, end];
                    break;
                case 38:
                case 39:
                    var genericRegion = {};
                    genericRegion.info = readRegionSegmentInformation(data, position);
                    position += RegionSegmentInformationFieldLength;
                    var genericRegionSegmentFlags = data[position++];
                    genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
                    genericRegion.template = genericRegionSegmentFlags >> 1 & 3;
                    genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
                    if (!genericRegion.mmr) {
                        atLength = genericRegion.template === 0 ? 4 : 1;
                        at = [];
                        for (i = 0; i < atLength; i++) {
                            at.push({
                                x: readInt8(data, position),
                                y: readInt8(data, position + 1)
                            });
                            position += 2;
                        }
                        genericRegion.at = at;
                    }
                    args = [genericRegion, data, position, end];
                    break;
                case 48:
                    var pageInfo = {
                        width: readUint32(data, position),
                        height: readUint32(data, position + 4),
                        resolutionX: readUint32(data, position + 8),
                        resolutionY: readUint32(data, position + 12)
                    };
                    if (pageInfo.height === 0xFFFFFFFF) {
                        delete pageInfo.height;
                    }
                    var pageSegmentFlags = data[position + 16];
                    readUint16(data, position + 17);
                    pageInfo.lossless = !!(pageSegmentFlags & 1);
                    pageInfo.refinement = !!(pageSegmentFlags & 2);
                    pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;
                    pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;
                    pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
                    pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
                    args = [pageInfo];
                    break;
                case 49:
                    break;
                case 50:
                    break;
                case 51:
                    break;
                case 62:
                    break;
                default:
                    error('JBIG2 error: segment type ' + header.typeName + '(' + header.type + ') is not implemented');
            }
            var callbackName = 'on' + header.typeName;
            if (callbackName in visitor) {
                visitor[callbackName].apply(visitor, args);
            }
        }
        function processSegments(segments, visitor) {
            for (var i = 0, ii = segments.length; i < ii; i++) {
                processSegment(segments[i], visitor);
            }
        }
        function parseJbig2(data, start, end) {
            var position = start;
            if (data[position] !== 0x97 || data[position + 1] !== 0x4A || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0D || data[position + 5] !== 0x0A || data[position + 6] !== 0x1A || data[position + 7] !== 0x0A) {
                error('JBIG2 error: invalid header');
            }
            var header = {};
            position += 8;
            var flags = data[position++];
            header.randomAccess = !(flags & 1);
            if (!(flags & 2)) {
                header.numberOfPages = readUint32(data, position);
                position += 4;
            }
            readSegments(header, data, position, end);
            error('Not implemented');
        }
        function parseJbig2Chunks(chunks) {
            var visitor = new SimpleSegmentVisitor();
            for (var i = 0, ii = chunks.length; i < ii; i++) {
                var chunk = chunks[i];
                var segments = readSegments({}, chunk.data, chunk.start, chunk.end);
                processSegments(segments, visitor);
            }
            return visitor.buffer;
        }
        function SimpleSegmentVisitor() { }
        SimpleSegmentVisitor.prototype = {
            onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {
                this.currentPageInfo = info;
                var rowSize = info.width + 7 >> 3;
                var buffer = new Uint8Array(rowSize * info.height);
                if (info.defaultPixelValue) {
                    for (var i = 0, ii = buffer.length; i < ii; i++) {
                        buffer[i] = 0xFF;
                    }
                }
                this.buffer = buffer;
            },
            drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {
                var pageInfo = this.currentPageInfo;
                var width = regionInfo.width
                    , height = regionInfo.height;
                var rowSize = pageInfo.width + 7 >> 3;
                var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;
                var buffer = this.buffer;
                var mask0 = 128 >> (regionInfo.x & 7);
                var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
                var i, j, mask, offset;
                switch (combinationOperator) {
                    case 0:
                        for (i = 0; i < height; i++) {
                            mask = mask0;
                            offset = offset0;
                            for (j = 0; j < width; j++) {
                                if (bitmap[i][j]) {
                                    buffer[offset] |= mask;
                                }
                                mask >>= 1;
                                if (!mask) {
                                    mask = 128;
                                    offset++;
                                }
                            }
                            offset0 += rowSize;
                        }
                        break;
                    case 2:
                        for (i = 0; i < height; i++) {
                            mask = mask0;
                            offset = offset0;
                            for (j = 0; j < width; j++) {
                                if (bitmap[i][j]) {
                                    buffer[offset] ^= mask;
                                }
                                mask >>= 1;
                                if (!mask) {
                                    mask = 128;
                                    offset++;
                                }
                            }
                            offset0 += rowSize;
                        }
                        break;
                    default:
                        error('JBIG2 error: operator ' + combinationOperator + ' is not supported');
                }
            },
            onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {
                var regionInfo = region.info;
                var decodingContext = new DecodingContext(data, start, end);
                var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);
                this.drawBitmap(regionInfo, bitmap);
            },
            onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {
                this.onImmediateGenericRegion.apply(this, arguments);
            },
            onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {
                var huffmanTables;
                if (dictionary.huffman) {
                    error('JBIG2 error: huffman is not supported');
                }
                var symbols = this.symbols;
                if (!symbols) {
                    this.symbols = symbols = {};
                }
                var inputSymbols = [];
                for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
                }
                var decodingContext = new DecodingContext(data, start, end);
                symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext);
            },
            onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {
                var regionInfo = region.info;
                var huffmanTables;
                var symbols = this.symbols;
                var inputSymbols = [];
                for (var i = 0, ii = referredSegments.length; i < ii; i++) {
                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);
                }
                var symbolCodeLength = log2(inputSymbols.length);
                var decodingContext = new DecodingContext(data, start, end);
                var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext);
                this.drawBitmap(regionInfo, bitmap);
            },
            onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {
                this.onImmediateTextRegion.apply(this, arguments);
            }
        };
        function Jbig2Image() { }
        Jbig2Image.prototype = {
            parseChunks: function Jbig2Image_parseChunks(chunks) {
                return parseJbig2Chunks(chunks);
            }
        };
        return Jbig2Image;
    }();

    function log2(x) {
        var n = 1
            , i = 0;
        while (x > n) {
            n <<= 1;
            i++;
        }
        return i;
    }
    function readInt8(data, start) {
        return data[start] << 24 >> 24;
    }
    function readUint16(data, offset) {
        return data[offset] << 8 | data[offset + 1];
    }
    function readUint32(data, offset) {
        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
    }
    function shadow(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: false
        });
        return value;
    }
    var error = function () {
        console.error.apply(console, arguments);
        throw new Error("PDFJS error: " + arguments[0]);
    };
    var warn = function () {
        console.warn.apply(console, arguments);
    };
    var info = function () {
        console.info.apply(console, arguments);
    };
    Jbig2Image.prototype.parse = function parseJbig2(data) {
        var position = 0
            , end = data.length;
        if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {
            error("JBIG2 error: invalid header");
        }
        var header = {};
        position += 8;
        var flags = data[position++];
        header.randomAccess = !(flags & 1);
        if (!(flags & 2)) {
            header.numberOfPages = readUint32(data, position);
            position += 4;
        }
        var visitor = this.parseChunks([{
            data: data,
            start: position,
            end: end
        }]);
        var width = visitor.currentPageInfo.width;
        var height = visitor.currentPageInfo.height;
        var bitPacked = visitor.buffer;
        var data = new Uint8Array(width * height);
        var q = 0
            , k = 0;
        for (var i = 0; i < height; i++) {
            var mask = 0, buffer;
            for (var j = 0; j < width; j++) {
                if (!mask) {
                    mask = 128;
                    buffer = bitPacked[k++];
                }
                data[q++] = buffer & mask ? 0 : 255;
                mask >>= 1;
            }
        }
        this.width = width;
        this.height = height;
        this.data = data;
    }
        ;
    PDFJS.JpegImage = JpegImage;
    PDFJS.JpxImage = JpxImage;
    PDFJS.Jbig2Image = Jbig2Image;
}
)(PDFJS || (PDFJS = {}));

; (function () {
    var o, X = 0, e = null, n = null;
    o = window.FFT = {};
    var f = {
        o: function (G) {
            if (G !== 0 && (G & G - 1) === 0) {
                X = G;
                f.B();
                f.q();
                f.i()
            } else {
                throw new Error("init: radix-2 required")
            }
        },
        X: function (G, B) {
            f.G(G, B, 1)
        },
        e: function (G, B) {
            var j = 1 / X;
            f.G(G, B, -1);
            for (var q = 0; q < X; q++) {
                G[q] *= j;
                B[q] *= j
            }
        },
        n: function (G, B) {
            var j = []
                , q = []
                , i = 0;
            for (var m = 0; m < X; m++) {
                i = m * X;
                for (var Z = 0; Z < X; Z++) {
                    j[Z] = G[Z + i];
                    q[Z] = B[Z + i]
                }
                f.X(j, q);
                for (var p = 0; p < X; p++) {
                    G[p + i] = j[p];
                    B[p + i] = q[p]
                }
            }
            for (var C = 0; C < X; C++) {
                for (var a = 0; a < X; a++) {
                    i = C + a * X;
                    j[a] = G[i];
                    q[a] = B[i]
                }
                f.X(j, q);
                for (var r = 0; r < X; r++) {
                    i = C + r * X;
                    G[i] = j[r];
                    B[i] = q[r]
                }
            }
        },
        f: function (G, B) {
            var j = []
                , q = []
                , i = 0;
            for (var m = 0; m < X; m++) {
                i = m * X;
                for (var Z = 0; Z < X; Z++) {
                    j[Z] = G[Z + i];
                    q[Z] = B[Z + i]
                }
                f.e(j, q);
                for (var p = 0; p < X; p++) {
                    G[p + i] = j[p];
                    B[p + i] = q[p]
                }
            }
            for (var C = 0; C < X; C++) {
                for (var a = 0; a < X; a++) {
                    i = C + a * X;
                    j[a] = G[i];
                    q[a] = B[i]
                }
                f.e(j, q);
                for (var r = 0; r < X; r++) {
                    i = C + r * X;
                    G[i] = j[r];
                    B[i] = q[r]
                }
            }
        },
        G: function (G, B, j) {
            var q, i, m, Z, p, C, a, r, M, R = X >> 2;
            for (var P = 0; P < X; P++) {
                Z = e[P];
                if (P < Z) {
                    p = G[P];
                    G[P] = G[Z];
                    G[Z] = p;
                    p = B[P];
                    B[P] = B[Z];
                    B[Z] = p
                }
            }
            for (var y = 1; y < X; y <<= 1) {
                i = 0;
                q = X / (y << 1);
                for (var x = 0; x < y; x++) {
                    C = n[i + R];
                    a = j * n[i];
                    for (var t = x; t < X; t += y << 1) {
                        m = t + y;
                        r = C * G[m] + a * B[m];
                        M = C * B[m] - a * G[m];
                        G[m] = G[t] - r;
                        G[t] += r;
                        B[m] = B[t] - M;
                        B[t] += M
                    }
                    i += q
                }
            }
        },
        B: function () {
            var G = Uint32Array;
            if (X <= 256)
                G = Uint8Array;
            else if (X <= 65536)
                G = Uint16Array;
            e = new G(X);
            n = new Float64Array(X * 1.25)
        },
        j: function () { },
        q: function () {
            var G = 0
                , B = 0
                , q = 0;
            e[0] = 0;
            while (++G < X) {
                q = X >> 1;
                while (q <= B) {
                    B -= q;
                    q >>= 1
                }
                B += q;
                e[G] = B
            }
        },
        i: function () {
            var G = X >> 1
                , B = X >> 2
                , j = X >> 3
                , q = G + B
                , i = Math.sin(Math.PI / X)
                , m = 2 * i * i
                , Z = Math.sqrt(m * (2 - m))
                , p = n[B] = 1
                , C = n[0] = 0;
            i = 2 * m;
            for (var a = 1; a < j; a++) {
                p -= m;
                m += i * p;
                C += Z;
                Z -= i * C;
                n[a] = C;
                n[B - a] = p
            }
            if (j !== 0) {
                n[j] = Math.sqrt(.5)
            }
            for (var r = 0; r < B; r++) {
                n[G - r] = n[r]
            }
            for (var M = 0; M < q; M++) {
                n[M + G] = -n[M]
            }
        }
    };
    o.init = f.o;
    o.fft2d = f.n;
    o.ifft2d = f.f
}
    .call(this));

(function (r) {
    "object" === typeof exports && "undefined" !== typeof module ? module.exports = r() : "function" === typeof define && define.amd ? define([], r) : ("undefined" !== typeof window ? window : "undefined" !== typeof global ? global : "undefined" !== typeof self ? self : this).acorn = r()
}
)(function () {
    return function a(l, f, c) {
        function g(d, n) {
            if (!f[d]) {
                if (!l[d]) {
                    var e = "function" == typeof require && require;
                    if (!n && e)
                        return e(d, !0);
                    if (b)
                        return b(d, !0);
                    e = Error("Cannot find module '" + d + "'");
                    throw e.code = "MODULE_NOT_FOUND",
                    e;
                }
                e = f[d] = {
                    exports: {}
                };
                l[d][0].call(e.exports, function (b) {
                    var e = l[d][1][b];
                    return g(e ? e : b)
                }, e, e.exports, a, l, f, c)
            }
            return f[d].exports
        }
        for (var b = "function" == typeof require && require, d = 0; d < c.length; d++)
            g(c[d]);
        return g
    }({
        1: [function (a, l, f) {
            var c = a("./tokentype");
            a = a("./state").Parser.prototype;
            a.checkPropClash = function (b, c) {
                if (!(6 <= this.options.ecmaVersion && (b.computed || b.method || b.shorthand))) {
                    var d = b.key;
                    switch (d.type) {
                        case "Identifier":
                            var a = d.name;
                            break;
                        case "Literal":
                            a = String(d.value);
                            break;
                        default:
                            return
                    }
                    var e = b.kind;
                    if (6 <= this.options.ecmaVersion)
                        "__proto__" === a && "init" === e && (c.proto && this.raiseRecoverable(d.start, "Redefinition of __proto__ property"),
                            c.proto = !0);
                    else {
                        a = "$" + a;
                        var m = c[a];
                        m ? (a = "init" !== e,
                            (!this.strict && !a || !m[e]) && a ^ m.init || this.raiseRecoverable(d.start, "Redefinition of property")) : m = c[a] = {
                                init: !1,
                                get: !1,
                                set: !1
                            };
                        m[e] = !0
                    }
                }
            }
                ;
            a.parseExpression = function (b, a) {
                var d = this.start
                    , n = this.startLoc
                    , e = this.parseMaybeAssign(b, a);
                if (this.type === c.types.comma) {
                    d = this.startNodeAt(d, n);
                    for (d.expressions = [e]; this.eat(c.types.comma);)
                        d.expressions.push(this.parseMaybeAssign(b, a));
                    return this.finishNode(d, "SequenceExpression")
                }
                return e
            }
                ;
            a.parseMaybeAssign = function (b, a, h) {
                if (this.inGenerator && this.isContextual("yield"))
                    return this.parseYield();
                var d = !1;
                a || (a = {
                    shorthandAssign: 0,
                    trailingComma: 0
                },
                    d = !0);
                var e = this.start
                    , m = this.startLoc;
                if (this.type == c.types.parenL || this.type == c.types.name)
                    this.potentialArrowAt = this.start;
                var p = this.parseMaybeConditional(b, a);
                h && (p = h.call(this, p, e, m));
                if (this.type.isAssign)
                    return d && this.checkPatternErrors(a, !0),
                        h = this.startNodeAt(e, m),
                        h.operator = this.value,
                        h.left = this.type === c.types.eq ? this.toAssignable(p) : p,
                        a.shorthandAssign = 0,
                        this.checkLVal(p),
                        this.next(),
                        h.right = this.parseMaybeAssign(b),
                        this.finishNode(h, "AssignmentExpression");
                d && this.checkExpressionErrors(a, !0);
                return p
            }
                ;
            a.parseMaybeConditional = function (b, a) {
                var d = this.start
                    , n = this.startLoc
                    , e = this.parseExprOps(b, a);
                return this.checkExpressionErrors(a) ? e : this.eat(c.types.question) ? (d = this.startNodeAt(d, n),
                    d.test = e,
                    d.consequent = this.parseMaybeAssign(),
                    this.expect(c.types.colon),
                    d.alternate = this.parseMaybeAssign(b),
                    this.finishNode(d, "ConditionalExpression")) : e
            }
                ;
            a.parseExprOps = function (b, c) {
                var a = this.start
                    , d = this.startLoc
                    , e = this.parseMaybeUnary(c, !1);
                return this.checkExpressionErrors(c) ? e : this.parseExprOp(e, a, d, -1, b)
            }
                ;
            a.parseExprOp = function (b, a, h, n, e) {
                var d = this.type.binop;
                if (null != d && (!e || this.type !== c.types._in) && d > n) {
                    var p = this.type === c.types.logicalOR || this.type === c.types.logicalAND
                        , g = this.value;
                    this.next();
                    var k = this.start
                        , q = this.startLoc
                        , d = this.parseExprOp(this.parseMaybeUnary(null, !1), k, q, d, e);
                    b = this.buildBinary(a, h, b, d, g, p);
                    return this.parseExprOp(b, a, h, n, e)
                }
                return b
            }
                ;
            a.buildBinary = function (b, c, a, n, e, m) {
                b = this.startNodeAt(b, c);
                b.left = a;
                b.operator = e;
                b.right = n;
                return this.finishNode(b, m ? "LogicalExpression" : "BinaryExpression")
            }
                ;
            a.parseMaybeUnary = function (b, a) {
                var d = this.start
                    , n = this.startLoc;
                if (this.type.prefix) {
                    var e = this.startNode();
                    var m = this.type === c.types.incDec;
                    e.operator = this.value;
                    e.prefix = !0;
                    this.next();
                    e.argument = this.parseMaybeUnary(null, !0);
                    this.checkExpressionErrors(b, !0);
                    m ? this.checkLVal(e.argument) : this.strict && "delete" === e.operator && "Identifier" === e.argument.type ? this.raiseRecoverable(e.start, "Deleting local variable in strict mode") : a = !0;
                    m = this.finishNode(e, m ? "UpdateExpression" : "UnaryExpression")
                } else {
                    m = this.parseExprSubscripts(b);
                    if (this.checkExpressionErrors(b))
                        return m;
                    for (; this.type.postfix && !this.canInsertSemicolon();)
                        e = this.startNodeAt(d, n),
                            e.operator = this.value,
                            e.prefix = !1,
                            e.argument = m,
                            this.checkLVal(m),
                            this.next(),
                            m = this.finishNode(e, "UpdateExpression")
                }
                return !a && this.eat(c.types.starstar) ? this.buildBinary(d, n, m, this.parseMaybeUnary(null, !1), "**", !1) : m
            }
                ;
            a.parseExprSubscripts = function (b) {
                var c = this.start
                    , a = this.startLoc
                    , n = this.parseExprAtom(b)
                    , e = "ArrowFunctionExpression" === n.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd);
                return this.checkExpressionErrors(b) || e ? n : this.parseSubscripts(n, c, a)
            }
                ;
            a.parseSubscripts = function (b, a, h, n) {
                for (var e; ;)
                    if (this.eat(c.types.dot))
                        e = this.startNodeAt(a, h),
                            e.object = b,
                            e.property = this.parseIdent(!0),
                            e.computed = !1,
                            b = this.finishNode(e, "MemberExpression");
                    else if (this.eat(c.types.bracketL))
                        e = this.startNodeAt(a, h),
                            e.object = b,
                            e.property = this.parseExpression(),
                            e.computed = !0,
                            this.expect(c.types.bracketR),
                            b = this.finishNode(e, "MemberExpression");
                    else if (!n && this.eat(c.types.parenL))
                        e = this.startNodeAt(a, h),
                            e.callee = b,
                            e.arguments = this.parseExprList(c.types.parenR, !1),
                            b = this.finishNode(e, "CallExpression");
                    else if (this.type === c.types.backQuote)
                        e = this.startNodeAt(a, h),
                            e.tag = b,
                            e.quasi = this.parseTemplate(),
                            b = this.finishNode(e, "TaggedTemplateExpression");
                    else
                        return b
            }
                ;
            a.parseExprAtom = function (b) {
                var a = this.potentialArrowAt == this.start;
                switch (this.type) {
                    case c.types._super:
                        this.inFunction || this.raise(this.start, "'super' outside of function or class");
                    case c.types._this:
                        return b = this.type === c.types._this ? "ThisExpression" : "Super",
                            a = this.startNode(),
                            this.next(),
                            this.finishNode(a, b);
                    case c.types.name:
                        b = this.start;
                        var h = this.startLoc
                            , n = this.parseIdent(this.type !== c.types.name);
                        return a && !this.canInsertSemicolon() && this.eat(c.types.arrow) ? this.parseArrowExpression(this.startNodeAt(b, h), [n]) : n;
                    case c.types.regexp:
                        return b = this.value,
                            a = this.parseLiteral(b.value),
                            a.regex = {
                                pattern: b.pattern,
                                flags: b.flags
                            },
                            a;
                    case c.types.num:
                    case c.types.string:
                        return this.parseLiteral(this.value);
                    case c.types._null:
                    case c.types._true:
                    case c.types._false:
                        return a = this.startNode(),
                            a.value = this.type === c.types._null ? null : this.type === c.types._true,
                            a.raw = this.type.keyword,
                            this.next(),
                            this.finishNode(a, "Literal");
                    case c.types.parenL:
                        return this.parseParenAndDistinguishExpression(a);
                    case c.types.bracketL:
                        return a = this.startNode(),
                            this.next(),
                            a.elements = this.parseExprList(c.types.bracketR, !0, !0, b),
                            this.finishNode(a, "ArrayExpression");
                    case c.types.braceL:
                        return this.parseObj(!1, b);
                    case c.types._function:
                        return a = this.startNode(),
                            this.next(),
                            this.parseFunction(a, !1);
                    case c.types._class:
                        return this.parseClass(this.startNode(), !1);
                    case c.types._new:
                        return this.parseNew();
                    case c.types.backQuote:
                        return this.parseTemplate();
                    default:
                        this.unexpected()
                }
            }
                ;
            a.parseLiteral = function (b) {
                var a = this.startNode();
                a.value = b;
                a.raw = this.input.slice(this.start, this.end);
                this.next();
                return this.finishNode(a, "Literal")
            }
                ;
            a.parseParenExpression = function () {
                this.expect(c.types.parenL);
                var b = this.parseExpression();
                this.expect(c.types.parenR);
                return b
            }
                ;
            a.parseParenAndDistinguishExpression = function (b) {
                var a = this.start
                    , h = this.startLoc;
                if (6 <= this.options.ecmaVersion) {
                    this.next();
                    for (var n = this.start, e = this.startLoc, m = [], p = !0, g = {
                        shorthandAssign: 0,
                        trailingComma: 0
                    }, k = void 0, q = void 0; this.type !== c.types.parenR;)
                        if (p ? p = !1 : this.expect(c.types.comma),
                            this.type === c.types.ellipsis) {
                            k = this.start;
                            m.push(this.parseParenItem(this.parseRest()));
                            break
                        } else
                            this.type !== c.types.parenL || q || (q = this.start),
                                m.push(this.parseMaybeAssign(!1, g, this.parseParenItem));
                    var p = this.start
                        , f = this.startLoc;
                    this.expect(c.types.parenR);
                    if (b && !this.canInsertSemicolon() && this.eat(c.types.arrow))
                        return this.checkPatternErrors(g, !0),
                            q && this.unexpected(q),
                            this.parseParenArrowList(a, h, m);
                    m.length || this.unexpected(this.lastTokStart);
                    k && this.unexpected(k);
                    this.checkExpressionErrors(g, !0);
                    1 < m.length ? (b = this.startNodeAt(n, e),
                        b.expressions = m,
                        this.finishNodeAt(b, "SequenceExpression", p, f)) : b = m[0]
                } else
                    b = this.parseParenExpression();
                return this.options.preserveParens ? (a = this.startNodeAt(a, h),
                    a.expression = b,
                    this.finishNode(a, "ParenthesizedExpression")) : b
            }
                ;
            a.parseParenItem = function (b) {
                return b
            }
                ;
            a.parseParenArrowList = function (b, a, c) {
                return this.parseArrowExpression(this.startNodeAt(b, a), c)
            }
                ;
            var g = [];
            a.parseNew = function () {
                var b = this.startNode()
                    , a = this.parseIdent(!0);
                if (6 <= this.options.ecmaVersion && this.eat(c.types.dot))
                    return b.meta = a,
                        b.property = this.parseIdent(!0),
                        "target" !== b.property.name && this.raiseRecoverable(b.property.start, "The only valid meta property for new is new.target"),
                        this.inFunction || this.raiseRecoverable(b.start, "new.target can only be used in functions"),
                        this.finishNode(b, "MetaProperty");
                var a = this.start
                    , h = this.startLoc;
                b.callee = this.parseSubscripts(this.parseExprAtom(), a, h, !0);
                this.eat(c.types.parenL) ? b.arguments = this.parseExprList(c.types.parenR, !1) : b.arguments = g;
                return this.finishNode(b, "NewExpression")
            }
                ;
            a.parseTemplateElement = function () {
                var b = this.startNode();
                b.value = {
                    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
                    cooked: this.value
                };
                this.next();
                b.tail = this.type === c.types.backQuote;
                return this.finishNode(b, "TemplateElement")
            }
                ;
            a.parseTemplate = function () {
                var b = this.startNode();
                this.next();
                b.expressions = [];
                var a = this.parseTemplateElement();
                for (b.quasis = [a]; !a.tail;)
                    this.expect(c.types.dollarBraceL),
                        b.expressions.push(this.parseExpression()),
                        this.expect(c.types.braceR),
                        b.quasis.push(a = this.parseTemplateElement());
                this.next();
                return this.finishNode(b, "TemplateLiteral")
            }
                ;
            a.parseObj = function (b, a) {
                var d = this.startNode()
                    , n = !0
                    , e = {};
                d.properties = [];
                for (this.next(); !this.eat(c.types.braceR);) {
                    if (n)
                        n = !1;
                    else if (this.expect(c.types.comma),
                        this.afterTrailingComma(c.types.braceR))
                        break;
                    var m = this.startNode()
                        , p = void 0
                        , g = void 0
                        , k = void 0;
                    if (6 <= this.options.ecmaVersion) {
                        m.method = !1;
                        m.shorthand = !1;
                        if (b || a)
                            g = this.start,
                                k = this.startLoc;
                        b || (p = this.eat(c.types.star))
                    }
                    this.parsePropertyName(m);
                    this.parsePropertyValue(m, b, p, g, k, a);
                    this.checkPropClash(m, e);
                    d.properties.push(this.finishNode(m, "Property"))
                }
                return this.finishNode(d, b ? "ObjectPattern" : "ObjectExpression")
            }
                ;
            a.parsePropertyValue = function (b, a, h, n, e, m) {
                this.eat(c.types.colon) ? (b.value = a ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, m),
                    b.kind = "init") : 6 <= this.options.ecmaVersion && this.type === c.types.parenL ? (a && this.unexpected(),
                        b.kind = "init",
                        b.method = !0,
                        b.value = this.parseMethod(h)) : 5 <= this.options.ecmaVersion && !b.computed && "Identifier" === b.key.type && ("get" === b.key.name || "set" === b.key.name) && this.type != c.types.comma && this.type != c.types.braceR ? ((h || a) && this.unexpected(),
                            b.kind = b.key.name,
                            this.parsePropertyName(b),
                            b.value = this.parseMethod(!1),
                            b.value.params.length !== ("get" === b.kind ? 0 : 1) && (a = b.value.start,
                                "get" === b.kind ? this.raiseRecoverable(a, "getter should have no params") : this.raiseRecoverable(a, "setter should have exactly one param")),
                            "set" === b.kind && "RestElement" === b.value.params[0].type && this.raiseRecoverable(b.value.params[0].start, "Setter cannot use rest params")) : 6 <= this.options.ecmaVersion && !b.computed && "Identifier" === b.key.type ? (b.kind = "init",
                                a ? ((this.keywords.test(b.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(b.key.name) || this.inGenerator && "yield" == b.key.name) && this.raiseRecoverable(b.key.start, "Binding " + b.key.name),
                                    b.value = this.parseMaybeDefault(n, e, b.key)) : this.type === c.types.eq && m ? (m.shorthandAssign || (m.shorthandAssign = this.start),
                                        b.value = this.parseMaybeDefault(n, e, b.key)) : b.value = b.key,
                                b.shorthand = !0) : this.unexpected()
            }
                ;
            a.parsePropertyName = function (b) {
                if (6 <= this.options.ecmaVersion) {
                    if (this.eat(c.types.bracketL))
                        return b.computed = !0,
                            b.key = this.parseMaybeAssign(),
                            this.expect(c.types.bracketR),
                            b.key;
                    b.computed = !1
                }
                return b.key = this.type === c.types.num || this.type === c.types.string ? this.parseExprAtom() : this.parseIdent(!0)
            }
                ;
            a.initFunction = function (b) {
                b.id = null;
                6 <= this.options.ecmaVersion && (b.generator = !1,
                    b.expression = !1)
            }
                ;
            a.parseMethod = function (b) {
                var a = this.startNode()
                    , h = this.inGenerator;
                this.inGenerator = b;
                this.initFunction(a);
                this.expect(c.types.parenL);
                a.params = this.parseBindingList(c.types.parenR, !1, !1);
                6 <= this.options.ecmaVersion && (a.generator = b);
                this.parseFunctionBody(a, !1);
                this.inGenerator = h;
                return this.finishNode(a, "FunctionExpression")
            }
                ;
            a.parseArrowExpression = function (b, a) {
                var c = this.inGenerator;
                this.inGenerator = !1;
                this.initFunction(b);
                b.params = this.toAssignableList(a, !0);
                this.parseFunctionBody(b, !0);
                this.inGenerator = c;
                return this.finishNode(b, "ArrowFunctionExpression")
            }
                ;
            a.parseFunctionBody = function (b, a) {
                var d = a && this.type !== c.types.braceL;
                if (d)
                    b.body = this.parseMaybeAssign(),
                        b.expression = !0;
                else {
                    var n = this.inFunction
                        , e = this.labels;
                    this.inFunction = !0;
                    this.labels = [];
                    b.body = this.parseBlock(!0);
                    b.expression = !1;
                    this.inFunction = n;
                    this.labels = e
                }
                this.strict || !d && b.body.body.length && this.isUseStrict(b.body.body[0]) ? (d = this.strict,
                    this.strict = !0,
                    b.id && this.checkLVal(b.id, !0),
                    this.checkParams(b),
                    this.strict = d) : a && this.checkParams(b)
            }
                ;
            a.checkParams = function (b) {
                for (var a = {}, c = 0; c < b.params.length; c++)
                    this.checkLVal(b.params[c], !0, a)
            }
                ;
            a.parseExprList = function (b, a, h, n) {
                for (var e = [], d = !0; !this.eat(b);) {
                    if (d)
                        d = !1;
                    else if (this.expect(c.types.comma),
                        a && this.afterTrailingComma(b))
                        break;
                    if (h && this.type === c.types.comma)
                        var p = null;
                    else
                        this.type === c.types.ellipsis ? (p = this.parseSpread(n),
                            this.type === c.types.comma && n && !n.trailingComma && (n.trailingComma = this.lastTokStart)) : p = this.parseMaybeAssign(!1, n);
                    e.push(p)
                }
                return e
            }
                ;
            a.parseIdent = function (b) {
                var a = this.startNode();
                b && "never" == this.options.allowReserved && (b = !1);
                this.type === c.types.name ? (!b && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (6 <= this.options.ecmaVersion || -1 == this.input.slice(this.start, this.end).indexOf("\\")) && this.raiseRecoverable(this.start, "The keyword '" + this.value + "' is reserved"),
                    !b && this.inGenerator && "yield" === this.value && this.raiseRecoverable(this.start, "Can not use 'yield' as identifier inside a generator"),
                    a.name = this.value) : b && this.type.keyword ? a.name = this.type.keyword : this.unexpected();
                this.next();
                return this.finishNode(a, "Identifier")
            }
                ;
            a.parseYield = function () {
                var b = this.startNode();
                this.next();
                this.type == c.types.semi || this.canInsertSemicolon() || this.type != c.types.star && !this.type.startsExpr ? (b.delegate = !1,
                    b.argument = null) : (b.delegate = this.eat(c.types.star),
                        b.argument = this.parseMaybeAssign());
                return this.finishNode(b, "YieldExpression")
            }
        }
            , {
            "./state": 10,
            "./tokentype": 14
        }],
        2: [function (a, l, f) {
            function c(b, a) {
                for (var e = 65536, c = 0; c < a.length; c += 2) {
                    e += a[c];
                    if (e > b)
                        return !1;
                    e += a[c + 1];
                    if (e >= b)
                        return !0
                }
            }
            f.__esModule = !0;
            f.isIdentifierStart = function (b, a) {
                return 65 > b ? 36 === b : 91 > b ? !0 : 97 > b ? 95 === b : 123 > b ? !0 : 65535 >= b ? 170 <= b && g.test(String.fromCharCode(b)) : !1 === a ? !1 : c(b, d)
            }
                ;
            f.isIdentifierChar = function (a, e) {
                return 48 > a ? 36 === a : 58 > a ? !0 : 65 > a ? !1 : 91 > a ? !0 : 97 > a ? 95 === a : 123 > a ? !0 : 65535 >= a ? 170 <= a && b.test(String.fromCharCode(a)) : !1 === e ? !1 : c(a, d) || c(a, h)
            }
                ;
            f.reservedWords = {
                3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
                5: "class enum extends super const export import",
                6: "enum",
                7: "enum",
                strict: "implements interface let package private protected public static yield",
                strictBind: "eval arguments"
            };
            f.keywords = {
                5: "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",
                6: "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this const class extends export import super"
            };
            a = "\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ad\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
            var g = new RegExp("[" + a + "]")
                , b = new RegExp("[" + a + "\u200c\u200d\u00b7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfc-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]");
            a = null;
            var d = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 287, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 1288, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541]
                , h = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 168, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 3617, 6, 792618, 239]
        }
            , {}],
        3: [function (a, l, f) {
            f.__esModule = !0;
            f.parse = function (a, b) {
                return (new c.Parser(b, a)).parse()
            }
                ;
            f.parseExpressionAt = function (a, b, d) {
                a = new c.Parser(d, a, b);
                a.nextToken();
                return a.parseExpression()
            }
                ;
            f.tokenizer = function (a, b) {
                return new c.Parser(b, a)
            }
                ;
            var c = a("./state");
            a("./parseutil");
            a("./statement");
            a("./lval");
            a("./expression");
            a("./location");
            f.Parser = c.Parser;
            f.plugins = c.plugins;
            l = a("./options");
            f.defaultOptions = l.defaultOptions;
            l = a("./locutil");
            f.Position = l.Position;
            f.SourceLocation = l.SourceLocation;
            f.getLineInfo = l.getLineInfo;
            l = a("./node");
            f.Node = l.Node;
            l = a("./tokentype");
            f.TokenType = l.TokenType;
            f.tokTypes = l.types;
            l = a("./tokencontext");
            f.TokContext = l.TokContext;
            f.tokContexts = l.types;
            l = a("./identifier");
            f.isIdentifierChar = l.isIdentifierChar;
            f.isIdentifierStart = l.isIdentifierStart;
            l = a("./tokenize");
            f.Token = l.Token;
            a = a("./whitespace");
            f.isNewLine = a.isNewLine;
            f.lineBreak = a.lineBreak;
            f.lineBreakG = a.lineBreakG;
            f.version = "3.1.0"
        }
            , {
            "./expression": 1,
            "./identifier": 2,
            "./location": 4,
            "./locutil": 5,
            "./lval": 6,
            "./node": 7,
            "./options": 8,
            "./parseutil": 9,
            "./state": 10,
            "./statement": 11,
            "./tokencontext": 12,
            "./tokenize": 13,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        4: [function (a, l, f) {
            l = a("./state");
            var c = a("./locutil");
            a = l.Parser.prototype;
            a.raise = function (a, b) {
                var d = c.getLineInfo(this.input, a);
                b += " (" + d.line + ":" + d.column + ")";
                var h = new SyntaxError(b);
                h.pos = a;
                h.loc = d;
                h.raisedAt = this.pos;
                throw h;
            }
                ;
            a.raiseRecoverable = a.raise;
            a.curPosition = function () {
                if (this.options.locations)
                    return new c.Position(this.curLine, this.pos - this.lineStart)
            }
        }
            , {
            "./locutil": 5,
            "./state": 10
        }],
        5: [function (a, l, f) {
            function c(a, b) {
                if (!(a instanceof b))
                    throw new TypeError("Cannot call a class as a function");
            }
            f.__esModule = !0;
            f.getLineInfo = function (a, c) {
                for (var d = 1, e = 0; ;) {
                    g.lineBreakG.lastIndex = e;
                    var m = g.lineBreakG.exec(a);
                    if (m && m.index < c)
                        ++d,
                            e = m.index + m[0].length;
                    else
                        return new b(d, c - e)
                }
            }
                ;
            var g = a("./whitespace")
                , b = function () {
                    function a(b, d) {
                        c(this, a);
                        this.line = b;
                        this.column = d
                    }
                    a.prototype.offset = function (b) {
                        return new a(this.line, this.column + b)
                    }
                        ;
                    return a
                }();
            f.Position = b;
            f.SourceLocation = function h(a, b, m) {
                c(this, h);
                this.start = b;
                this.end = m;
                null !== a.sourceFile && (this.source = a.sourceFile)
            }
        }
            , {
            "./whitespace": 16
        }],
        6: [function (a, l, f) {
            var c = a("./tokentype");
            l = a("./state");
            var g = a("./util");
            a = l.Parser.prototype;
            a.toAssignable = function (a, c) {
                if (6 <= this.options.ecmaVersion && a)
                    switch (a.type) {
                        case "Identifier":
                        case "ObjectPattern":
                        case "ArrayPattern":
                            break;
                        case "ObjectExpression":
                            a.type = "ObjectPattern";
                            for (var b = 0; b < a.properties.length; b++) {
                                var d = a.properties[b];
                                "init" !== d.kind && this.raise(d.key.start, "Object pattern can't contain getter or setter");
                                this.toAssignable(d.value, c)
                            }
                            break;
                        case "ArrayExpression":
                            a.type = "ArrayPattern";
                            this.toAssignableList(a.elements, c);
                            break;
                        case "AssignmentExpression":
                            if ("=" === a.operator)
                                a.type = "AssignmentPattern",
                                    delete a.operator;
                            else {
                                this.raise(a.left.end, "Only '=' operator can be used for specifying default value.");
                                break
                            }
                        case "AssignmentPattern":
                            "YieldExpression" === a.right.type && this.raise(a.right.start, "Yield expression cannot be a default value");
                            break;
                        case "ParenthesizedExpression":
                            a.expression = this.toAssignable(a.expression, c);
                            break;
                        case "MemberExpression":
                            if (!c)
                                break;
                        default:
                            this.raise(a.start, "Assigning to rvalue")
                    }
                return a
            }
                ;
            a.toAssignableList = function (a, c) {
                var b = a.length;
                if (b) {
                    var d = a[b - 1];
                    if (d && "RestElement" == d.type)
                        --b;
                    else if (d && "SpreadElement" == d.type) {
                        d.type = "RestElement";
                        var e = d.argument;
                        this.toAssignable(e, c);
                        "Identifier" !== e.type && "MemberExpression" !== e.type && "ArrayPattern" !== e.type && this.unexpected(e.start);
                        --b
                    }
                    c && "RestElement" === d.type && "Identifier" !== d.argument.type && this.unexpected(d.argument.start)
                }
                for (d = 0; d < b; d++)
                    (e = a[d]) && this.toAssignable(e, c);
                return a
            }
                ;
            a.parseSpread = function (a) {
                var b = this.startNode();
                this.next();
                b.argument = this.parseMaybeAssign(a);
                return this.finishNode(b, "SpreadElement")
            }
                ;
            a.parseRest = function (a) {
                var b = this.startNode();
                this.next();
                b.argument = a ? this.type === c.types.name ? this.parseIdent() : this.unexpected() : this.type === c.types.name || this.type === c.types.bracketL ? this.parseBindingAtom() : this.unexpected();
                return this.finishNode(b, "RestElement")
            }
                ;
            a.parseBindingAtom = function () {
                if (6 > this.options.ecmaVersion)
                    return this.parseIdent();
                switch (this.type) {
                    case c.types.name:
                        return this.parseIdent();
                    case c.types.bracketL:
                        var a = this.startNode();
                        this.next();
                        a.elements = this.parseBindingList(c.types.bracketR, !0, !0);
                        return this.finishNode(a, "ArrayPattern");
                    case c.types.braceL:
                        return this.parseObj(!0);
                    default:
                        this.unexpected()
                }
            }
                ;
            a.parseBindingList = function (a, d, h, n) {
                for (var b = [], m = !0; !this.eat(a);)
                    if (m ? m = !1 : this.expect(c.types.comma),
                        d && this.type === c.types.comma)
                        b.push(null);
                    else if (h && this.afterTrailingComma(a))
                        break;
                    else if (this.type === c.types.ellipsis) {
                        d = this.parseRest(n);
                        this.parseBindingListItem(d);
                        b.push(d);
                        this.type === c.types.comma && this.raise(this.start, "Comma is not permitted after the rest element");
                        this.expect(a);
                        break
                    } else {
                        var p = this.parseMaybeDefault(this.start, this.startLoc);
                        this.parseBindingListItem(p);
                        b.push(p)
                    }
                return b
            }
                ;
            a.parseBindingListItem = function (a) {
                return a
            }
                ;
            a.parseMaybeDefault = function (a, d, h) {
                h = h || this.parseBindingAtom();
                if (6 > this.options.ecmaVersion || !this.eat(c.types.eq))
                    return h;
                a = this.startNodeAt(a, d);
                a.left = h;
                a.right = this.parseMaybeAssign();
                return this.finishNode(a, "AssignmentPattern")
            }
                ;
            a.checkLVal = function (a, c, h) {
                switch (a.type) {
                    case "Identifier":
                        this.strict && this.reservedWordsStrictBind.test(a.name) && this.raiseRecoverable(a.start, (c ? "Binding " : "Assigning to ") + a.name + " in strict mode");
                        h && (g.has(h, a.name) && this.raiseRecoverable(a.start, "Argument name clash"),
                            h[a.name] = !0);
                        break;
                    case "MemberExpression":
                        c && this.raiseRecoverable(a.start, (c ? "Binding" : "Assigning to") + " member expression");
                        break;
                    case "ObjectPattern":
                        for (var b = 0; b < a.properties.length; b++)
                            this.checkLVal(a.properties[b].value, c, h);
                        break;
                    case "ArrayPattern":
                        for (b = 0; b < a.elements.length; b++) {
                            var e = a.elements[b];
                            e && this.checkLVal(e, c, h)
                        }
                        break;
                    case "AssignmentPattern":
                        this.checkLVal(a.left, c, h);
                        break;
                    case "RestElement":
                        this.checkLVal(a.argument, c, h);
                        break;
                    case "ParenthesizedExpression":
                        this.checkLVal(a.expression, c, h);
                        break;
                    default:
                        this.raise(a.start, (c ? "Binding" : "Assigning to") + " rvalue")
                }
            }
        }
            , {
            "./state": 10,
            "./tokentype": 14,
            "./util": 15
        }],
        7: [function (a, l, f) {
            function c(a, b, c, e) {
                a.type = b;
                a.end = c;
                this.options.locations && (a.loc.end = e);
                this.options.ranges && (a.range[1] = c);
                return a
            }
            f.__esModule = !0;
            l = a("./state");
            var g = a("./locutil")
                , b = function h(a, b, c) {
                    if (!(this instanceof h))
                        throw new TypeError("Cannot call a class as a function");
                    this.type = "";
                    this.start = b;
                    this.end = 0;
                    a.options.locations && (this.loc = new g.SourceLocation(a, c));
                    a.options.directSourceFile && (this.sourceFile = a.options.directSourceFile);
                    a.options.ranges && (this.range = [b, 0])
                };
            f.Node = b;
            a = l.Parser.prototype;
            a.startNode = function () {
                return new b(this, this.start, this.startLoc)
            }
                ;
            a.startNodeAt = function (a, c) {
                return new b(this, a, c)
            }
                ;
            a.finishNode = function (a, b) {
                return c.call(this, a, b, this.lastTokEnd, this.lastTokEndLoc)
            }
                ;
            a.finishNodeAt = function (a, b, e, m) {
                return c.call(this, a, b, e, m)
            }
        }
            , {
            "./locutil": 5,
            "./state": 10
        }],
        8: [function (a, l, f) {
            function c(a, c) {
                return function (e, m, d, h, k, q) {
                    e = {
                        type: e ? "Block" : "Line",
                        value: m,
                        start: d,
                        end: h
                    };
                    a.locations && (e.loc = new b.SourceLocation(this, k, q));
                    a.ranges && (e.range = [d, h]);
                    c.push(e)
                }
            }
            f.__esModule = !0;
            f.getOptions = function (a) {
                var b = {}, e;
                for (e in d)
                    b[e] = a && g.has(a, e) ? a[e] : d[e];
                null == b.allowReserved && (b.allowReserved = 5 > b.ecmaVersion);
                g.isArray(b.onToken) && function () {
                    var a = b.onToken;
                    b.onToken = function (b) {
                        return a.push(b)
                    }
                }();
                g.isArray(b.onComment) && (b.onComment = c(b, b.onComment));
                return b
            }
                ;
            var g = a("./util")
                , b = a("./locutil")
                , d = {
                    ecmaVersion: 6,
                    sourceType: "script",
                    onInsertedSemicolon: null,
                    onTrailingComma: null,
                    allowReserved: null,
                    allowReturnOutsideFunction: !1,
                    allowImportExportEverywhere: !1,
                    allowHashBang: !1,
                    locations: !1,
                    onToken: null,
                    onComment: null,
                    ranges: !1,
                    program: null,
                    sourceFile: null,
                    directSourceFile: null,
                    preserveParens: !1,
                    plugins: {}
                };
            f.defaultOptions = d
        }
            , {
            "./locutil": 5,
            "./util": 15
        }],
        9: [function (a, l, f) {
            var c = a("./tokentype");
            l = a("./state");
            var g = a("./whitespace");
            a = l.Parser.prototype;
            a.isUseStrict = function (a) {
                return 5 <= this.options.ecmaVersion && "ExpressionStatement" === a.type && "Literal" === a.expression.type && "use strict" === a.expression.raw.slice(1, -1)
            }
                ;
            a.eat = function (a) {
                return this.type === a ? (this.next(),
                    !0) : !1
            }
                ;
            a.isContextual = function (a) {
                return this.type === c.types.name && this.value === a
            }
                ;
            a.eatContextual = function (a) {
                return this.value === a && this.eat(c.types.name)
            }
                ;
            a.expectContextual = function (a) {
                this.eatContextual(a) || this.unexpected()
            }
                ;
            a.canInsertSemicolon = function () {
                return this.type === c.types.eof || this.type === c.types.braceR || g.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
            }
                ;
            a.insertSemicolon = function () {
                if (this.canInsertSemicolon()) {
                    if (this.options.onInsertedSemicolon)
                        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
                    return !0
                }
            }
                ;
            a.semicolon = function () {
                this.eat(c.types.semi) || this.insertSemicolon() || this.unexpected()
            }
                ;
            a.afterTrailingComma = function (a) {
                if (this.type == a) {
                    if (this.options.onTrailingComma)
                        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
                    this.next();
                    return !0
                }
            }
                ;
            a.expect = function (a) {
                this.eat(a) || this.unexpected()
            }
                ;
            a.unexpected = function (a) {
                this.raise(null != a ? a : this.start, "Unexpected token")
            }
                ;
            a.checkPatternErrors = function (a, c) {
                var b = a && a.trailingComma;
                if (!c)
                    return !!b;
                b && this.raise(b, "Comma is not permitted after the rest element")
            }
                ;
            a.checkExpressionErrors = function (a, c) {
                var b = a && a.shorthandAssign;
                if (!c)
                    return !!b;
                b && this.raise(b, "Shorthand property assignments are valid only in destructuring patterns")
            }
        }
            , {
            "./state": 10,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        10: [function (a, l, f) {
            function c(a) {
                return new RegExp("^(" + a.replace(/ /g, "|") + ")$")
            }
            f.__esModule = !0;
            var g = a("./identifier")
                , b = a("./tokentype")
                , d = a("./whitespace")
                , h = a("./options")
                , n = {};
            f.plugins = n;
            a = function () {
                function a(e, p, f) {
                    if (!(this instanceof a))
                        throw new TypeError("Cannot call a class as a function");
                    this.options = e = h.getOptions(e);
                    this.sourceFile = e.sourceFile;
                    this.keywords = c(g.keywords[6 <= e.ecmaVersion ? 6 : 5]);
                    var k = e.allowReserved ? "" : g.reservedWords[e.ecmaVersion] + ("module" == e.sourceType ? " await" : "");
                    this.reservedWords = c(k);
                    k = (k ? k + " " : "") + g.reservedWords.strict;
                    this.reservedWordsStrict = c(k);
                    this.reservedWordsStrictBind = c(k + " " + g.reservedWords.strictBind);
                    this.input = String(p);
                    this.containsEsc = !1;
                    this.loadPlugins(e.plugins);
                    f ? (this.pos = f,
                        this.lineStart = Math.max(0, this.input.lastIndexOf("\n", f)),
                        this.curLine = this.input.slice(0, this.lineStart).split(d.lineBreak).length) : (this.pos = this.lineStart = 0,
                            this.curLine = 1);
                    this.type = b.types.eof;
                    this.value = null;
                    this.start = this.end = this.pos;
                    this.startLoc = this.endLoc = this.curPosition();
                    this.lastTokEndLoc = this.lastTokStartLoc = null;
                    this.lastTokStart = this.lastTokEnd = this.pos;
                    this.context = this.initialContext();
                    this.exprAllowed = !0;
                    this.strict = this.inModule = "module" === e.sourceType;
                    this.potentialArrowAt = -1;
                    this.inFunction = this.inGenerator = !1;
                    this.labels = [];
                    0 === this.pos && e.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2)
                }
                a.prototype.isKeyword = function (a) {
                    return this.keywords.test(a)
                }
                    ;
                a.prototype.isReservedWord = function (a) {
                    return this.reservedWords.test(a)
                }
                    ;
                a.prototype.extend = function (a, b) {
                    this[a] = b(this[a])
                }
                    ;
                a.prototype.loadPlugins = function (a) {
                    for (var b in a) {
                        var c = n[b];
                        if (!c)
                            throw Error("Plugin '" + b + "' not found");
                        c(this, a[b])
                    }
                }
                    ;
                a.prototype.parse = function () {
                    var a = this.options.program || this.startNode();
                    this.nextToken();
                    return this.parseTopLevel(a)
                }
                    ;
                return a
            }();
            f.Parser = a
        }
            , {
            "./identifier": 2,
            "./options": 8,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        11: [function (a, l, f) {
            var c = a("./tokentype");
            l = a("./state");
            var g = a("./whitespace")
                , b = a("./identifier");
            a = l.Parser.prototype;
            a.parseTopLevel = function (a) {
                var b = !0;
                a.body || (a.body = []);
                for (; this.type !== c.types.eof;) {
                    var e = this.parseStatement(!0, !0);
                    a.body.push(e);
                    b && (this.isUseStrict(e) && this.setStrict(!0),
                        b = !1)
                }
                this.next();
                6 <= this.options.ecmaVersion && (a.sourceType = this.options.sourceType);
                return this.finishNode(a, "Program")
            }
                ;
            var d = {
                kind: "loop"
            }
                , h = {
                    kind: "switch"
                };
            a.isLet = function () {
                if (this.type !== c.types.name || 6 > this.options.ecmaVersion || "let" != this.value)
                    return !1;
                g.skipWhiteSpace.lastIndex = this.pos;
                var a = g.skipWhiteSpace.exec(this.input)
                    , a = this.pos + a[0].length
                    , d = this.input.charCodeAt(a);
                if (91 === d || 123 == d)
                    return !0;
                if (b.isIdentifierStart(d, !0)) {
                    for (d = a + 1; b.isIdentifierChar(this.input.charCodeAt(d, !0)); ++d)
                        ;
                    a = this.input.slice(a, d);
                    if (!this.isKeyword(a))
                        return !0
                }
                return !1
            }
                ;
            a.parseStatement = function (a, b) {
                var e = this.type
                    , d = this.startNode()
                    , k = void 0;
                this.isLet() && (e = c.types._var,
                    k = "let");
                switch (e) {
                    case c.types._break:
                    case c.types._continue:
                        return this.parseBreakContinueStatement(d, e.keyword);
                    case c.types._debugger:
                        return this.parseDebuggerStatement(d);
                    case c.types._do:
                        return this.parseDoStatement(d);
                    case c.types._for:
                        return this.parseForStatement(d);
                    case c.types._function:
                        return !a && 6 <= this.options.ecmaVersion && this.unexpected(),
                            this.parseFunctionStatement(d);
                    case c.types._class:
                        return a || this.unexpected(),
                            this.parseClass(d, !0);
                    case c.types._if:
                        return this.parseIfStatement(d);
                    case c.types._return:
                        return this.parseReturnStatement(d);
                    case c.types._switch:
                        return this.parseSwitchStatement(d);
                    case c.types._throw:
                        return this.parseThrowStatement(d);
                    case c.types._try:
                        return this.parseTryStatement(d);
                    case c.types._const:
                    case c.types._var:
                        return k = k || this.value,
                            a || "var" == k || this.unexpected(),
                            this.parseVarStatement(d, k);
                    case c.types._while:
                        return this.parseWhileStatement(d);
                    case c.types._with:
                        return this.parseWithStatement(d);
                    case c.types.braceL:
                        return this.parseBlock();
                    case c.types.semi:
                        return this.parseEmptyStatement(d);
                    case c.types._export:
                    case c.types._import:
                        return this.options.allowImportExportEverywhere || (b || this.raise(this.start, "'import' and 'export' may only appear at the top level"),
                            this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")),
                            e === c.types._import ? this.parseImport(d) : this.parseExport(d);
                    default:
                        var k = this.value
                            , m = this.parseExpression();
                        return e === c.types.name && "Identifier" === m.type && this.eat(c.types.colon) ? this.parseLabeledStatement(d, k, m) : this.parseExpressionStatement(d, m)
                }
            }
                ;
            a.parseBreakContinueStatement = function (a, b) {
                var e = "break" == b;
                this.next();
                this.eat(c.types.semi) || this.insertSemicolon() ? a.label = null : this.type !== c.types.name ? this.unexpected() : (a.label = this.parseIdent(),
                    this.semicolon());
                for (var d = 0; d < this.labels.length; ++d) {
                    var k = this.labels[d];
                    if (null == a.label || k.name === a.label.name) {
                        if (null != k.kind && (e || "loop" === k.kind))
                            break;
                        if (a.label && e)
                            break
                    }
                }
                d === this.labels.length && this.raise(a.start, "Unsyntactic " + b);
                return this.finishNode(a, e ? "BreakStatement" : "ContinueStatement")
            }
                ;
            a.parseDebuggerStatement = function (a) {
                this.next();
                this.semicolon();
                return this.finishNode(a, "DebuggerStatement")
            }
                ;
            a.parseDoStatement = function (a) {
                this.next();
                this.labels.push(d);
                a.body = this.parseStatement(!1);
                this.labels.pop();
                this.expect(c.types._while);
                a.test = this.parseParenExpression();
                6 <= this.options.ecmaVersion ? this.eat(c.types.semi) : this.semicolon();
                return this.finishNode(a, "DoWhileStatement")
            }
                ;
            a.parseForStatement = function (a) {
                this.next();
                this.labels.push(d);
                this.expect(c.types.parenL);
                if (this.type === c.types.semi)
                    return this.parseFor(a, null);
                var b = this.isLet();
                if (this.type === c.types._var || this.type === c.types._const || b) {
                    var e = this.startNode()
                        , b = b ? "let" : this.value;
                    this.next();
                    this.parseVar(e, !0, b);
                    this.finishNode(e, "VariableDeclaration");
                    return !(this.type === c.types._in || 6 <= this.options.ecmaVersion && this.isContextual("of")) || 1 !== e.declarations.length || "var" !== b && e.declarations[0].init ? this.parseFor(a, e) : this.parseForIn(a, e)
                }
                e = {
                    shorthandAssign: 0,
                    trailingComma: 0
                };
                b = this.parseExpression(!0, e);
                if (this.type === c.types._in || 6 <= this.options.ecmaVersion && this.isContextual("of"))
                    return this.checkPatternErrors(e, !0),
                        this.toAssignable(b),
                        this.checkLVal(b),
                        this.parseForIn(a, b);
                this.checkExpressionErrors(e, !0);
                return this.parseFor(a, b)
            }
                ;
            a.parseFunctionStatement = function (a) {
                this.next();
                return this.parseFunction(a, !0)
            }
                ;
            a.parseIfStatement = function (a) {
                this.next();
                a.test = this.parseParenExpression();
                a.consequent = this.parseStatement(!1);
                a.alternate = this.eat(c.types._else) ? this.parseStatement(!1) : null;
                return this.finishNode(a, "IfStatement")
            }
                ;
            a.parseReturnStatement = function (a) {
                this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function");
                this.next();
                this.eat(c.types.semi) || this.insertSemicolon() ? a.argument = null : (a.argument = this.parseExpression(),
                    this.semicolon());
                return this.finishNode(a, "ReturnStatement")
            }
                ;
            a.parseSwitchStatement = function (a) {
                this.next();
                a.discriminant = this.parseParenExpression();
                a.cases = [];
                this.expect(c.types.braceL);
                this.labels.push(h);
                for (var b, e = !1; this.type != c.types.braceR;)
                    if (this.type === c.types._case || this.type === c.types._default) {
                        var d = this.type === c.types._case;
                        b && this.finishNode(b, "SwitchCase");
                        a.cases.push(b = this.startNode());
                        b.consequent = [];
                        this.next();
                        d ? b.test = this.parseExpression() : (e && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"),
                            e = !0,
                            b.test = null);
                        this.expect(c.types.colon)
                    } else
                        b || this.unexpected(),
                            b.consequent.push(this.parseStatement(!0));
                b && this.finishNode(b, "SwitchCase");
                this.next();
                this.labels.pop();
                return this.finishNode(a, "SwitchStatement")
            }
                ;
            a.parseThrowStatement = function (a) {
                this.next();
                g.lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw");
                a.argument = this.parseExpression();
                this.semicolon();
                return this.finishNode(a, "ThrowStatement")
            }
                ;
            var n = [];
            a.parseTryStatement = function (a) {
                this.next();
                a.block = this.parseBlock();
                a.handler = null;
                if (this.type === c.types._catch) {
                    var b = this.startNode();
                    this.next();
                    this.expect(c.types.parenL);
                    b.param = this.parseBindingAtom();
                    this.checkLVal(b.param, !0);
                    this.expect(c.types.parenR);
                    b.body = this.parseBlock();
                    a.handler = this.finishNode(b, "CatchClause")
                }
                a.finalizer = this.eat(c.types._finally) ? this.parseBlock() : null;
                a.handler || a.finalizer || this.raise(a.start, "Missing catch or finally clause");
                return this.finishNode(a, "TryStatement")
            }
                ;
            a.parseVarStatement = function (a, b) {
                this.next();
                this.parseVar(a, !1, b);
                this.semicolon();
                return this.finishNode(a, "VariableDeclaration")
            }
                ;
            a.parseWhileStatement = function (a) {
                this.next();
                a.test = this.parseParenExpression();
                this.labels.push(d);
                a.body = this.parseStatement(!1);
                this.labels.pop();
                return this.finishNode(a, "WhileStatement")
            }
                ;
            a.parseWithStatement = function (a) {
                this.strict && this.raise(this.start, "'with' in strict mode");
                this.next();
                a.object = this.parseParenExpression();
                a.body = this.parseStatement(!1);
                return this.finishNode(a, "WithStatement")
            }
                ;
            a.parseEmptyStatement = function (a) {
                this.next();
                return this.finishNode(a, "EmptyStatement")
            }
                ;
            a.parseLabeledStatement = function (a, b, d) {
                for (var e = 0; e < this.labels.length; ++e)
                    this.labels[e].name === b && this.raise(d.start, "Label '" + b + "' is already declared");
                for (var k = this.type.isLoop ? "loop" : this.type === c.types._switch ? "switch" : null, e = this.labels.length - 1; 0 <= e; e--) {
                    var q = this.labels[e];
                    if (q.statementStart == a.start)
                        q.statementStart = this.start,
                            q.kind = k;
                    else
                        break
                }
                this.labels.push({
                    name: b,
                    kind: k,
                    statementStart: this.start
                });
                a.body = this.parseStatement(!0);
                this.labels.pop();
                a.label = d;
                return this.finishNode(a, "LabeledStatement")
            }
                ;
            a.parseExpressionStatement = function (a, b) {
                a.expression = b;
                this.semicolon();
                return this.finishNode(a, "ExpressionStatement")
            }
                ;
            a.parseBlock = function (a) {
                var b = this.startNode()
                    , e = !0
                    , d = void 0;
                b.body = [];
                for (this.expect(c.types.braceL); !this.eat(c.types.braceR);) {
                    var k = this.parseStatement(!0);
                    b.body.push(k);
                    e && a && this.isUseStrict(k) && (d = this.strict,
                        this.setStrict(this.strict = !0));
                    e = !1
                }
                !1 === d && this.setStrict(!1);
                return this.finishNode(b, "BlockStatement")
            }
                ;
            a.parseFor = function (a, b) {
                a.init = b;
                this.expect(c.types.semi);
                a.test = this.type === c.types.semi ? null : this.parseExpression();
                this.expect(c.types.semi);
                a.update = this.type === c.types.parenR ? null : this.parseExpression();
                this.expect(c.types.parenR);
                a.body = this.parseStatement(!1);
                this.labels.pop();
                return this.finishNode(a, "ForStatement")
            }
                ;
            a.parseForIn = function (a, b) {
                var e = this.type === c.types._in ? "ForInStatement" : "ForOfStatement";
                this.next();
                a.left = b;
                a.right = this.parseExpression();
                this.expect(c.types.parenR);
                a.body = this.parseStatement(!1);
                this.labels.pop();
                return this.finishNode(a, e)
            }
                ;
            a.parseVar = function (a, b, d) {
                a.declarations = [];
                for (a.kind = d; ;) {
                    var e = this.startNode();
                    this.parseVarId(e);
                    this.eat(c.types.eq) ? e.init = this.parseMaybeAssign(b) : "const" !== d || this.type === c.types._in || 6 <= this.options.ecmaVersion && this.isContextual("of") ? "Identifier" == e.id.type || b && (this.type === c.types._in || this.isContextual("of")) ? e.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected();
                    a.declarations.push(this.finishNode(e, "VariableDeclarator"));
                    if (!this.eat(c.types.comma))
                        break
                }
                return a
            }
                ;
            a.parseVarId = function (a) {
                a.id = this.parseBindingAtom();
                this.checkLVal(a.id, !0)
            }
                ;
            a.parseFunction = function (a, b, d) {
                this.initFunction(a);
                6 <= this.options.ecmaVersion && (a.generator = this.eat(c.types.star));
                var e = this.inGenerator;
                this.inGenerator = a.generator;
                if (b || this.type === c.types.name)
                    a.id = this.parseIdent();
                this.parseFunctionParams(a);
                this.parseFunctionBody(a, d);
                this.inGenerator = e;
                return this.finishNode(a, b ? "FunctionDeclaration" : "FunctionExpression")
            }
                ;
            a.parseFunctionParams = function (a) {
                this.expect(c.types.parenL);
                a.params = this.parseBindingList(c.types.parenR, !1, !1, !0)
            }
                ;
            a.parseClass = function (a, b) {
                this.next();
                this.parseClassId(a, b);
                this.parseClassSuper(a);
                var e = this.startNode()
                    , d = !1;
                e.body = [];
                for (this.expect(c.types.braceL); !this.eat(c.types.braceR);)
                    if (!this.eat(c.types.semi)) {
                        var k = this.startNode()
                            , q = this.eat(c.types.star)
                            , h = this.type === c.types.name && "static" === this.value;
                        this.parsePropertyName(k);
                        k["static"] = h && this.type !== c.types.parenL;
                        k["static"] && (q && this.unexpected(),
                            q = this.eat(c.types.star),
                            this.parsePropertyName(k));
                        k.kind = "method";
                        h = !1;
                        if (!k.computed) {
                            var f = k.key;
                            q || "Identifier" !== f.type || this.type === c.types.parenL || "get" !== f.name && "set" !== f.name || (h = !0,
                                k.kind = f.name,
                                f = this.parsePropertyName(k));
                            !k["static"] && ("Identifier" === f.type && "constructor" === f.name || "Literal" === f.type && "constructor" === f.value) && (d && this.raise(f.start, "Duplicate constructor in the same class"),
                                h && this.raise(f.start, "Constructor can't have get/set modifier"),
                                q && this.raise(f.start, "Constructor can't be a generator"),
                                k.kind = "constructor",
                                d = !0)
                        }
                        this.parseClassMethod(e, k, q);
                        h && (k.value.params.length !== ("get" === k.kind ? 0 : 1) && (q = k.value.start,
                            "get" === k.kind ? this.raiseRecoverable(q, "getter should have no params") : this.raiseRecoverable(q, "setter should have exactly one param")),
                            "set" === k.kind && "RestElement" === k.value.params[0].type && this.raise(k.value.params[0].start, "Setter cannot use rest params"))
                    }
                a.body = this.finishNode(e, "ClassBody");
                return this.finishNode(a, b ? "ClassDeclaration" : "ClassExpression")
            }
                ;
            a.parseClassMethod = function (a, b, c) {
                b.value = this.parseMethod(c);
                a.body.push(this.finishNode(b, "MethodDefinition"))
            }
                ;
            a.parseClassId = function (a, b) {
                a.id = this.type === c.types.name ? this.parseIdent() : b ? this.unexpected() : null
            }
                ;
            a.parseClassSuper = function (a) {
                a.superClass = this.eat(c.types._extends) ? this.parseExprSubscripts() : null
            }
                ;
            a.parseExport = function (a) {
                this.next();
                if (this.eat(c.types.star))
                    return this.expectContextual("from"),
                        a.source = this.type === c.types.string ? this.parseExprAtom() : this.unexpected(),
                        this.semicolon(),
                        this.finishNode(a, "ExportAllDeclaration");
                if (this.eat(c.types._default)) {
                    var b = this.type == c.types.parenL
                        , e = this.parseMaybeAssign()
                        , d = !0;
                    b || "FunctionExpression" != e.type && "ClassExpression" != e.type || (d = !1,
                        e.id && (e.type = "FunctionExpression" == e.type ? "FunctionDeclaration" : "ClassDeclaration"));
                    a.declaration = e;
                    d && this.semicolon();
                    return this.finishNode(a, "ExportDefaultDeclaration")
                }
                if (this.shouldParseExportStatement())
                    a.declaration = this.parseStatement(!0),
                        a.specifiers = [],
                        a.source = null;
                else {
                    a.declaration = null;
                    a.specifiers = this.parseExportSpecifiers();
                    if (this.eatContextual("from"))
                        a.source = this.type === c.types.string ? this.parseExprAtom() : this.unexpected();
                    else {
                        for (b = 0; b < a.specifiers.length; b++)
                            (this.keywords.test(a.specifiers[b].local.name) || this.reservedWords.test(a.specifiers[b].local.name)) && this.unexpected(a.specifiers[b].local.start);
                        a.source = null
                    }
                    this.semicolon()
                }
                return this.finishNode(a, "ExportNamedDeclaration")
            }
                ;
            a.shouldParseExportStatement = function () {
                return this.type.keyword || this.isLet()
            }
                ;
            a.parseExportSpecifiers = function () {
                var a = []
                    , b = !0;
                for (this.expect(c.types.braceL); !this.eat(c.types.braceR);) {
                    if (b)
                        b = !1;
                    else if (this.expect(c.types.comma),
                        this.afterTrailingComma(c.types.braceR))
                        break;
                    var d = this.startNode();
                    d.local = this.parseIdent(this.type === c.types._default);
                    d.exported = this.eatContextual("as") ? this.parseIdent(!0) : d.local;
                    a.push(this.finishNode(d, "ExportSpecifier"))
                }
                return a
            }
                ;
            a.parseImport = function (a) {
                this.next();
                this.type === c.types.string ? (a.specifiers = n,
                    a.source = this.parseExprAtom()) : (a.specifiers = this.parseImportSpecifiers(),
                        this.expectContextual("from"),
                        a.source = this.type === c.types.string ? this.parseExprAtom() : this.unexpected());
                this.semicolon();
                return this.finishNode(a, "ImportDeclaration")
            }
                ;
            a.parseImportSpecifiers = function () {
                var a = []
                    , b = !0;
                if (this.type === c.types.name) {
                    var d = this.startNode();
                    d.local = this.parseIdent();
                    this.checkLVal(d.local, !0);
                    a.push(this.finishNode(d, "ImportDefaultSpecifier"));
                    if (!this.eat(c.types.comma))
                        return a
                }
                if (this.type === c.types.star)
                    return d = this.startNode(),
                        this.next(),
                        this.expectContextual("as"),
                        d.local = this.parseIdent(),
                        this.checkLVal(d.local, !0),
                        a.push(this.finishNode(d, "ImportNamespaceSpecifier")),
                        a;
                for (this.expect(c.types.braceL); !this.eat(c.types.braceR);) {
                    if (b)
                        b = !1;
                    else if (this.expect(c.types.comma),
                        this.afterTrailingComma(c.types.braceR))
                        break;
                    d = this.startNode();
                    d.imported = this.parseIdent(!0);
                    this.eatContextual("as") ? d.local = this.parseIdent() : (d.local = d.imported,
                        this.isKeyword(d.local.name) && this.unexpected(d.local.start),
                        this.reservedWordsStrict.test(d.local.name) && this.raise(d.local.start, "The keyword '" + d.local.name + "' is reserved"));
                    this.checkLVal(d.local, !0);
                    a.push(this.finishNode(d, "ImportSpecifier"))
                }
                return a
            }
        }
            , {
            "./identifier": 2,
            "./state": 10,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        12: [function (a, l, f) {
            f.__esModule = !0;
            l = a("./state");
            var c = a("./tokentype")
                , g = a("./whitespace");
            a = function h(a, b, c, f) {
                if (!(this instanceof h))
                    throw new TypeError("Cannot call a class as a function");
                this.token = a;
                this.isExpr = !!b;
                this.preserveSpace = !!c;
                this.override = f
            }
                ;
            f.TokContext = a;
            var b = {
                b_stat: new a("{", !1),
                b_expr: new a("{", !0),
                b_tmpl: new a("${", !0),
                p_stat: new a("(", !1),
                p_expr: new a("(", !0),
                q_tmpl: new a("`", !0, !0, function (a) {
                    return a.readTmplToken()
                }
                ),
                f_expr: new a("function", !0)
            };
            f.types = b;
            f = l.Parser.prototype;
            f.initialContext = function () {
                return [b.b_stat]
            }
                ;
            f.braceIsBlock = function (a) {
                if (a === c.types.colon) {
                    var f = this.curContext();
                    if (f === b.b_stat || f === b.b_expr)
                        return !f.isExpr
                }
                return a === c.types._return ? g.lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : a === c.types._else || a === c.types.semi || a === c.types.eof || a === c.types.parenR ? !0 : a == c.types.braceL ? this.curContext() === b.b_stat : !this.exprAllowed
            }
                ;
            f.updateContext = function (a) {
                var b, e = this.type;
                e.keyword && a == c.types.dot ? this.exprAllowed = !1 : (b = e.updateContext) ? b.call(this, a) : this.exprAllowed = e.beforeExpr
            }
                ;
            c.types.parenR.updateContext = c.types.braceR.updateContext = function () {
                if (1 == this.context.length)
                    this.exprAllowed = !0;
                else {
                    var a = this.context.pop();
                    a === b.b_stat && this.curContext() === b.f_expr ? (this.context.pop(),
                        this.exprAllowed = !1) : this.exprAllowed = a === b.b_tmpl ? !0 : !a.isExpr
                }
            }
                ;
            c.types.braceL.updateContext = function (a) {
                this.context.push(this.braceIsBlock(a) ? b.b_stat : b.b_expr);
                this.exprAllowed = !0
            }
                ;
            c.types.dollarBraceL.updateContext = function () {
                this.context.push(b.b_tmpl);
                this.exprAllowed = !0
            }
                ;
            c.types.parenL.updateContext = function (a) {
                this.context.push(a === c.types._if || a === c.types._for || a === c.types._with || a === c.types._while ? b.p_stat : b.p_expr);
                this.exprAllowed = !0
            }
                ;
            c.types.incDec.updateContext = function () { }
                ;
            c.types._function.updateContext = function (a) {
                !a.beforeExpr || a === c.types.semi || a === c.types._else || a === c.types.colon && this.curContext() === b.b_stat || this.context.push(b.f_expr);
                this.exprAllowed = !1
            }
                ;
            c.types.backQuote.updateContext = function () {
                this.curContext() === b.q_tmpl ? this.context.pop() : this.context.push(b.q_tmpl);
                this.exprAllowed = !1
            }
        }
            , {
            "./state": 10,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        13: [function (a, l, f) {
            function c(a, b, c, d) {
                try {
                    return new RegExp(a, b)
                } catch (t) {
                    if (void 0 !== c)
                        throw t instanceof SyntaxError && d.raise(c, "Error parsing regular expression: " + t.message),
                        t;
                }
            }
            function g(a) {
                if (65535 >= a)
                    return String.fromCharCode(a);
                a -= 65536;
                return String.fromCharCode((a >> 10) + 55296, (a & 1023) + 56320)
            }
            f.__esModule = !0;
            var b = a("./identifier")
                , d = a("./tokentype");
            l = a("./state");
            var h = a("./locutil")
                , n = a("./whitespace")
                , e = function k(a) {
                    if (!(this instanceof k))
                        throw new TypeError("Cannot call a class as a function");
                    this.type = a.type;
                    this.value = a.value;
                    this.start = a.start;
                    this.end = a.end;
                    a.options.locations && (this.loc = new h.SourceLocation(a, a.startLoc, a.endLoc));
                    a.options.ranges && (this.range = [a.start, a.end])
                };
            f.Token = e;
            a = l.Parser.prototype;
            var m = "object" == typeof Packages && "[object JavaPackage]" == Object.prototype.toString.call(Packages);
            a.next = function () {
                if (this.options.onToken)
                    this.options.onToken(new e(this));
                this.lastTokEnd = this.end;
                this.lastTokStart = this.start;
                this.lastTokEndLoc = this.endLoc;
                this.lastTokStartLoc = this.startLoc;
                this.nextToken()
            }
                ;
            a.getToken = function () {
                this.next();
                return new e(this)
            }
                ;
            "undefined" !== typeof Symbol && (a[Symbol.iterator] = function () {
                var a = this;
                return {
                    next: function () {
                        var b = a.getToken();
                        return {
                            done: b.type === d.types.eof,
                            value: b
                        }
                    }
                }
            }
            );
            a.setStrict = function (a) {
                this.strict = a;
                if (this.type === d.types.num || this.type === d.types.string) {
                    this.pos = this.start;
                    if (this.options.locations)
                        for (; this.pos < this.lineStart;)
                            this.lineStart = this.input.lastIndexOf("\n", this.lineStart - 2) + 1,
                                --this.curLine;
                    this.nextToken()
                }
            }
                ;
            a.curContext = function () {
                return this.context[this.context.length - 1]
            }
                ;
            a.nextToken = function () {
                var a = this.curContext();
                a && a.preserveSpace || this.skipSpace();
                this.start = this.pos;
                this.options.locations && (this.startLoc = this.curPosition());
                if (this.pos >= this.input.length)
                    return this.finishToken(d.types.eof);
                if (a.override)
                    return a.override(this);
                this.readToken(this.fullCharCodeAtPos())
            }
                ;
            a.readToken = function (a) {
                return b.isIdentifierStart(a, 6 <= this.options.ecmaVersion) || 92 === a ? this.readWord() : this.getTokenFromCode(a)
            }
                ;
            a.fullCharCodeAtPos = function () {
                var a = this.input.charCodeAt(this.pos);
                if (55295 >= a || 57344 <= a)
                    return a;
                var b = this.input.charCodeAt(this.pos + 1);
                return (a << 10) + b - 56613888
            }
                ;
            a.skipBlockComment = function () {
                var a = this.options.onComment && this.curPosition()
                    , b = this.pos
                    , c = this.input.indexOf("*/", this.pos += 2);
                -1 === c && this.raise(this.pos - 2, "Unterminated comment");
                this.pos = c + 2;
                if (this.options.locations) {
                    n.lineBreakG.lastIndex = b;
                    for (var d = void 0; (d = n.lineBreakG.exec(this.input)) && d.index < this.pos;)
                        ++this.curLine,
                            this.lineStart = d.index + d[0].length
                }
                if (this.options.onComment)
                    this.options.onComment(!0, this.input.slice(b + 2, c), b, this.pos, a, this.curPosition())
            }
                ;
            a.skipLineComment = function (a) {
                for (var b = this.pos, c = this.options.onComment && this.curPosition(), d = this.input.charCodeAt(this.pos += a); this.pos < this.input.length && 10 !== d && 13 !== d && 8232 !== d && 8233 !== d;)
                    ++this.pos,
                        d = this.input.charCodeAt(this.pos);
                if (this.options.onComment)
                    this.options.onComment(!1, this.input.slice(b + a, this.pos), b, this.pos, c, this.curPosition())
            }
                ;
            a.skipSpace = function () {
                a: for (; this.pos < this.input.length;) {
                    var a = this.input.charCodeAt(this.pos);
                    switch (a) {
                        case 32:
                        case 160:
                            ++this.pos;
                            break;
                        case 13:
                            10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
                        case 10:
                        case 8232:
                        case 8233:
                            ++this.pos;
                            this.options.locations && (++this.curLine,
                                this.lineStart = this.pos);
                            break;
                        case 47:
                            switch (this.input.charCodeAt(this.pos + 1)) {
                                case 42:
                                    this.skipBlockComment();
                                    break;
                                case 47:
                                    this.skipLineComment(2);
                                    break;
                                default:
                                    break a
                            }
                            break;
                        default:
                            if (8 < a && 14 > a || 5760 <= a && n.nonASCIIwhitespace.test(String.fromCharCode(a)))
                                ++this.pos;
                            else
                                break a
                    }
                }
            }
                ;
            a.finishToken = function (a, b) {
                this.end = this.pos;
                this.options.locations && (this.endLoc = this.curPosition());
                var c = this.type;
                this.type = a;
                this.value = b;
                this.updateContext(c)
            }
                ;
            a.readToken_dot = function () {
                var a = this.input.charCodeAt(this.pos + 1);
                if (48 <= a && 57 >= a)
                    return this.readNumber(!0);
                var b = this.input.charCodeAt(this.pos + 2);
                if (6 <= this.options.ecmaVersion && 46 === a && 46 === b)
                    return this.pos += 3,
                        this.finishToken(d.types.ellipsis);
                ++this.pos;
                return this.finishToken(d.types.dot)
            }
                ;
            a.readToken_slash = function () {
                var a = this.input.charCodeAt(this.pos + 1);
                return this.exprAllowed ? (++this.pos,
                    this.readRegexp()) : 61 === a ? this.finishOp(d.types.assign, 2) : this.finishOp(d.types.slash, 1)
            }
                ;
            a.readToken_mult_modulo_exp = function (a) {
                var b = this.input.charCodeAt(this.pos + 1)
                    , c = 1;
                a = 42 === a ? d.types.star : d.types.modulo;
                7 <= this.options.ecmaVersion && 42 === b && (++c,
                    a = d.types.starstar,
                    b = this.input.charCodeAt(this.pos + 2));
                return 61 === b ? this.finishOp(d.types.assign, c + 1) : this.finishOp(a, c)
            }
                ;
            a.readToken_pipe_amp = function (a) {
                var b = this.input.charCodeAt(this.pos + 1);
                return b === a ? this.finishOp(124 === a ? d.types.logicalOR : d.types.logicalAND, 2) : 61 === b ? this.finishOp(d.types.assign, 2) : this.finishOp(124 === a ? d.types.bitwiseOR : d.types.bitwiseAND, 1)
            }
                ;
            a.readToken_caret = function () {
                return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(d.types.assign, 2) : this.finishOp(d.types.bitwiseXOR, 1)
            }
                ;
            a.readToken_plus_min = function (a) {
                var b = this.input.charCodeAt(this.pos + 1);
                return b === a ? 45 == b && 62 == this.input.charCodeAt(this.pos + 2) && n.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? (this.skipLineComment(3),
                    this.skipSpace(),
                    this.nextToken()) : this.finishOp(d.types.incDec, 2) : 61 === b ? this.finishOp(d.types.assign, 2) : this.finishOp(d.types.plusMin, 1)
            }
                ;
            a.readToken_lt_gt = function (a) {
                var b = this.input.charCodeAt(this.pos + 1)
                    , c = 1;
                if (b === a)
                    return c = 62 === a && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2,
                        61 === this.input.charCodeAt(this.pos + c) ? this.finishOp(d.types.assign, c + 1) : this.finishOp(d.types.bitShift, c);
                if (33 == b && 60 == a && 45 == this.input.charCodeAt(this.pos + 2) && 45 == this.input.charCodeAt(this.pos + 3))
                    return this.inModule && this.unexpected(),
                        this.skipLineComment(4),
                        this.skipSpace(),
                        this.nextToken();
                61 === b && (c = 2);
                return this.finishOp(d.types.relational, c)
            }
                ;
            a.readToken_eq_excl = function (a) {
                var b = this.input.charCodeAt(this.pos + 1);
                return 61 === b ? this.finishOp(d.types.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === a && 62 === b && 6 <= this.options.ecmaVersion ? (this.pos += 2,
                    this.finishToken(d.types.arrow)) : this.finishOp(61 === a ? d.types.eq : d.types.prefix, 1)
            }
                ;
            a.getTokenFromCode = function (a) {
                switch (a) {
                    case 46:
                        return this.readToken_dot();
                    case 40:
                        return ++this.pos,
                            this.finishToken(d.types.parenL);
                    case 41:
                        return ++this.pos,
                            this.finishToken(d.types.parenR);
                    case 59:
                        return ++this.pos,
                            this.finishToken(d.types.semi);
                    case 44:
                        return ++this.pos,
                            this.finishToken(d.types.comma);
                    case 91:
                        return ++this.pos,
                            this.finishToken(d.types.bracketL);
                    case 93:
                        return ++this.pos,
                            this.finishToken(d.types.bracketR);
                    case 123:
                        return ++this.pos,
                            this.finishToken(d.types.braceL);
                    case 125:
                        return ++this.pos,
                            this.finishToken(d.types.braceR);
                    case 58:
                        return ++this.pos,
                            this.finishToken(d.types.colon);
                    case 63:
                        return ++this.pos,
                            this.finishToken(d.types.question);
                    case 96:
                        if (6 > this.options.ecmaVersion)
                            break;
                        ++this.pos;
                        return this.finishToken(d.types.backQuote);
                    case 48:
                        a = this.input.charCodeAt(this.pos + 1);
                        if (120 === a || 88 === a)
                            return this.readRadixNumber(16);
                        if (6 <= this.options.ecmaVersion) {
                            if (111 === a || 79 === a)
                                return this.readRadixNumber(8);
                            if (98 === a || 66 === a)
                                return this.readRadixNumber(2)
                        }
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        return this.readNumber(!1);
                    case 34:
                    case 39:
                        return this.readString(a);
                    case 47:
                        return this.readToken_slash();
                    case 37:
                    case 42:
                        return this.readToken_mult_modulo_exp(a);
                    case 124:
                    case 38:
                        return this.readToken_pipe_amp(a);
                    case 94:
                        return this.readToken_caret();
                    case 43:
                    case 45:
                        return this.readToken_plus_min(a);
                    case 60:
                    case 62:
                        return this.readToken_lt_gt(a);
                    case 61:
                    case 33:
                        return this.readToken_eq_excl(a);
                    case 126:
                        return this.finishOp(d.types.prefix, 1)
                }
                this.raise(this.pos, "Unexpected character '" + g(a) + "'")
            }
                ;
            a.finishOp = function (a, b) {
                var c = this.input.slice(this.pos, this.pos + b);
                this.pos += b;
                return this.finishToken(a, c)
            }
                ;
            var p = !!c("\uffff", "u");
            a.readRegexp = function () {
                for (var a = this, b = void 0, e = void 0, f = this.pos; ;) {
                    this.pos >= this.input.length && this.raise(f, "Unterminated regular expression");
                    var g = this.input.charAt(this.pos);
                    n.lineBreak.test(g) && this.raise(f, "Unterminated regular expression");
                    if (b)
                        b = !1;
                    else {
                        if ("[" === g)
                            e = !0;
                        else if ("]" === g && e)
                            e = !1;
                        else if ("/" === g && !e)
                            break;
                        b = "\\" === g
                    }
                    ++this.pos
                }
                b = this.input.slice(f, this.pos);
                ++this.pos;
                e = this.readWord1();
                g = b;
                if (e) {
                    var h = /^[gim]*$/;
                    6 <= this.options.ecmaVersion && (h = /^[gimuy]*$/);
                    h.test(e) || this.raise(f, "Invalid regular expression flag");
                    0 <= e.indexOf("u") && !p && (g = g.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (b, c, d) {
                        c = Number("0x" + c);
                        1114111 < c && a.raise(f + d + 3, "Code point out of bounds");
                        return "x"
                    }),
                        g = g.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x"))
                }
                h = null;
                m || (c(g, void 0, f, this),
                    h = c(b, e));
                return this.finishToken(d.types.regexp, {
                    pattern: b,
                    flags: e,
                    value: h
                })
            }
                ;
            a.readInt = function (a, b) {
                for (var c = this.pos, d = 0, e = 0, f = null == b ? Infinity : b; e < f; ++e) {
                    var k = this.input.charCodeAt(this.pos)
                        , k = 97 <= k ? k - 97 + 10 : 65 <= k ? k - 65 + 10 : 48 <= k && 57 >= k ? k - 48 : Infinity;
                    if (k >= a)
                        break;
                    ++this.pos;
                    d = d * a + k
                }
                return this.pos === c || null != b && this.pos - c !== b ? null : d
            }
                ;
            a.readRadixNumber = function (a) {
                this.pos += 2;
                var c = this.readInt(a);
                null == c && this.raise(this.start + 2, "Expected number in radix " + a);
                b.isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
                return this.finishToken(d.types.num, c)
            }
                ;
            a.readNumber = function (a) {
                var c = this.pos
                    , e = !1
                    , f = 48 === this.input.charCodeAt(this.pos);
                a || null !== this.readInt(10) || this.raise(c, "Invalid number");
                a = this.input.charCodeAt(this.pos);
                46 === a && (++this.pos,
                    this.readInt(10),
                    e = !0,
                    a = this.input.charCodeAt(this.pos));
                if (69 === a || 101 === a)
                    a = this.input.charCodeAt(++this.pos),
                        43 !== a && 45 !== a || ++this.pos,
                        null === this.readInt(10) && this.raise(c, "Invalid number"),
                        e = !0;
                b.isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
                a = this.input.slice(c, this.pos);
                var k = void 0;
                e ? k = parseFloat(a) : f && 1 !== a.length ? /[89]/.test(a) || this.strict ? this.raise(c, "Invalid number") : k = parseInt(a, 8) : k = parseInt(a, 10);
                return this.finishToken(d.types.num, k)
            }
                ;
            a.readCodePoint = function () {
                if (123 === this.input.charCodeAt(this.pos)) {
                    6 > this.options.ecmaVersion && this.unexpected();
                    var a = ++this.pos;
                    var b = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
                    ++this.pos;
                    1114111 < b && this.raise(a, "Code point out of bounds")
                } else
                    b = this.readHexChar(4);
                return b
            }
                ;
            a.readString = function (a) {
                for (var b = "", c = ++this.pos; ;) {
                    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
                    var e = this.input.charCodeAt(this.pos);
                    if (e === a)
                        break;
                    92 === e ? (b += this.input.slice(c, this.pos),
                        b += this.readEscapedChar(!1),
                        c = this.pos) : (n.isNewLine(e) && this.raise(this.start, "Unterminated string constant"),
                            ++this.pos)
                }
                b += this.input.slice(c, this.pos++);
                return this.finishToken(d.types.string, b)
            }
                ;
            a.readTmplToken = function () {
                for (var a = "", b = this.pos; ;) {
                    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
                    var c = this.input.charCodeAt(this.pos);
                    if (96 === c || 36 === c && 123 === this.input.charCodeAt(this.pos + 1)) {
                        if (this.pos === this.start && this.type === d.types.template) {
                            if (36 === c)
                                return this.pos += 2,
                                    this.finishToken(d.types.dollarBraceL);
                            ++this.pos;
                            return this.finishToken(d.types.backQuote)
                        }
                        a += this.input.slice(b, this.pos);
                        return this.finishToken(d.types.template, a)
                    }
                    if (92 === c)
                        a += this.input.slice(b, this.pos),
                            a += this.readEscapedChar(!0),
                            b = this.pos;
                    else if (n.isNewLine(c)) {
                        a += this.input.slice(b, this.pos);
                        ++this.pos;
                        switch (c) {
                            case 13:
                                10 === this.input.charCodeAt(this.pos) && ++this.pos;
                            case 10:
                                a += "\n";
                                break;
                            default:
                                a += String.fromCharCode(c)
                        }
                        this.options.locations && (++this.curLine,
                            this.lineStart = this.pos);
                        b = this.pos
                    } else
                        ++this.pos
                }
            }
                ;
            a.readEscapedChar = function (a) {
                var b = this.input.charCodeAt(++this.pos);
                ++this.pos;
                switch (b) {
                    case 110:
                        return "\n";
                    case 114:
                        return "\r";
                    case 120:
                        return String.fromCharCode(this.readHexChar(2));
                    case 117:
                        return g(this.readCodePoint());
                    case 116:
                        return "\t";
                    case 98:
                        return "\b";
                    case 118:
                        return "\x0B";
                    case 102:
                        return "\f";
                    case 13:
                        10 === this.input.charCodeAt(this.pos) && ++this.pos;
                    case 10:
                        return this.options.locations && (this.lineStart = this.pos,
                            ++this.curLine),
                            "";
                    default:
                        if (48 <= b && 55 >= b) {
                            var b = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]
                                , c = parseInt(b, 8);
                            255 < c && (b = b.slice(0, -1),
                                c = parseInt(b, 8));
                            "0" !== b && (this.strict || a) && this.raise(this.pos - 2, "Octal literal in strict mode");
                            this.pos += b.length - 1;
                            return String.fromCharCode(c)
                        }
                        return String.fromCharCode(b)
                }
            }
                ;
            a.readHexChar = function (a) {
                var b = this.pos;
                a = this.readInt(16, a);
                null === a && this.raise(b, "Bad character escape sequence");
                return a
            }
                ;
            a.readWord1 = function () {
                this.containsEsc = !1;
                for (var a = "", c = !0, d = this.pos, e = 6 <= this.options.ecmaVersion; this.pos < this.input.length;) {
                    var f = this.fullCharCodeAtPos();
                    if (b.isIdentifierChar(f, e))
                        this.pos += 65535 >= f ? 1 : 2;
                    else if (92 === f)
                        this.containsEsc = !0,
                            a += this.input.slice(d, this.pos),
                            d = this.pos,
                            117 != this.input.charCodeAt(++this.pos) && this.raise(this.pos, "Expecting Unicode escape sequence \\uXXXX"),
                            ++this.pos,
                            f = this.readCodePoint(),
                            (c ? b.isIdentifierStart : b.isIdentifierChar)(f, e) || this.raise(d, "Invalid Unicode escape"),
                            a += g(f),
                            d = this.pos;
                    else
                        break;
                    c = !1
                }
                return a + this.input.slice(d, this.pos)
            }
                ;
            a.readWord = function () {
                var a = this.readWord1()
                    , b = d.types.name;
                (6 <= this.options.ecmaVersion || !this.containsEsc) && this.keywords.test(a) && (b = d.keywords[a]);
                return this.finishToken(b, a)
            }
        }
            , {
            "./identifier": 2,
            "./locutil": 5,
            "./state": 10,
            "./tokentype": 14,
            "./whitespace": 16
        }],
        14: [function (a, l, f) {
            function c(a, c) {
                return new b(a, {
                    beforeExpr: !0,
                    binop: c
                })
            }
            function g(a) {
                var c = 1 >= arguments.length || void 0 === arguments[1] ? {} : arguments[1];
                c.keyword = a;
                h[a] = d["_" + a] = new b(a, c)
            }
            f.__esModule = !0;
            var b = function e(a) {
                var b = 1 >= arguments.length || void 0 === arguments[1] ? {} : arguments[1];
                if (!(this instanceof e))
                    throw new TypeError("Cannot call a class as a function");
                this.label = a;
                this.keyword = b.keyword;
                this.beforeExpr = !!b.beforeExpr;
                this.startsExpr = !!b.startsExpr;
                this.isLoop = !!b.isLoop;
                this.isAssign = !!b.isAssign;
                this.prefix = !!b.prefix;
                this.postfix = !!b.postfix;
                this.binop = b.binop || null;
                this.updateContext = null
            };
            f.TokenType = b;
            a = {
                beforeExpr: !0
            };
            l = {
                startsExpr: !0
            };
            var d = {
                num: new b("num", l),
                regexp: new b("regexp", l),
                string: new b("string", l),
                name: new b("name", l),
                eof: new b("eof"),
                bracketL: new b("[", {
                    beforeExpr: !0,
                    startsExpr: !0
                }),
                bracketR: new b("]"),
                braceL: new b("{", {
                    beforeExpr: !0,
                    startsExpr: !0
                }),
                braceR: new b("}"),
                parenL: new b("(", {
                    beforeExpr: !0,
                    startsExpr: !0
                }),
                parenR: new b(")"),
                comma: new b(",", a),
                semi: new b(";", a),
                colon: new b(":", a),
                dot: new b("."),
                question: new b("?", a),
                arrow: new b("=>", a),
                template: new b("template"),
                ellipsis: new b("...", a),
                backQuote: new b("`", l),
                dollarBraceL: new b("${", {
                    beforeExpr: !0,
                    startsExpr: !0
                }),
                eq: new b("=", {
                    beforeExpr: !0,
                    isAssign: !0
                }),
                assign: new b("_=", {
                    beforeExpr: !0,
                    isAssign: !0
                }),
                incDec: new b("++/--", {
                    prefix: !0,
                    postfix: !0,
                    startsExpr: !0
                }),
                prefix: new b("prefix", {
                    beforeExpr: !0,
                    prefix: !0,
                    startsExpr: !0
                }),
                logicalOR: c("||", 1),
                logicalAND: c("&&", 2),
                bitwiseOR: c("|", 3),
                bitwiseXOR: c("^", 4),
                bitwiseAND: c("&", 5),
                equality: c("==/!=", 6),
                relational: c("</>", 7),
                bitShift: c("<</>>", 8),
                plusMin: new b("+/-", {
                    beforeExpr: !0,
                    binop: 9,
                    prefix: !0,
                    startsExpr: !0
                }),
                modulo: c("%", 10),
                star: c("*", 10),
                slash: c("/", 10),
                starstar: new b("**", {
                    beforeExpr: !0
                })
            };
            f.types = d;
            var h = {};
            f.keywords = h;
            g("break");
            g("case", a);
            g("catch");
            g("continue");
            g("debugger");
            g("default", a);
            g("do", {
                isLoop: !0,
                beforeExpr: !0
            });
            g("else", a);
            g("finally");
            g("for", {
                isLoop: !0
            });
            g("function", l);
            g("if");
            g("return", a);
            g("switch");
            g("throw", a);
            g("try");
            g("var");
            g("const");
            g("while", {
                isLoop: !0
            });
            g("with");
            g("new", {
                beforeExpr: !0,
                startsExpr: !0
            });
            g("this", l);
            g("super", l);
            g("class");
            g("extends", a);
            g("export");
            g("import");
            g("null", l);
            g("true", l);
            g("false", l);
            g("in", {
                beforeExpr: !0,
                binop: 7
            });
            g("instanceof", {
                beforeExpr: !0,
                binop: 7
            });
            g("typeof", {
                beforeExpr: !0,
                prefix: !0,
                startsExpr: !0
            });
            g("void", {
                beforeExpr: !0,
                prefix: !0,
                startsExpr: !0
            });
            g("delete", {
                beforeExpr: !0,
                prefix: !0,
                startsExpr: !0
            })
        }
            , {}],
        15: [function (a, l, f) {
            f.__esModule = !0;
            f.isArray = function (a) {
                return "[object Array]" === Object.prototype.toString.call(a)
            }
                ;
            f.has = function (a, f) {
                return Object.prototype.hasOwnProperty.call(a, f)
            }
        }
            , {}],
        16: [function (a, l, f) {
            f.__esModule = !0;
            f.isNewLine = function (a) {
                return 10 === a || 13 === a || 8232 === a || 8233 == a
            }
                ;
            a = /\r\n?|\n|\u2028|\u2029/;
            f.lineBreak = a;
            f.lineBreakG = new RegExp(a.source, "g");
            f.nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
            f.skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g
        }
            , {}]
    }, {}, [3])(3)
});
var UPNG = {};

UPNG.toRGBA8 = function (out) {
    var w = out.width
        , h = out.height;
    if (out.tabs.acTL == null)
        return [UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer];

    var frms = [];
    if (out.frames[0].data == null)
        out.frames[0].data = out.data;

    var len = w * h * 4
        , img = new Uint8Array(len)
        , empty = new Uint8Array(len)
        , prev = new Uint8Array(len);
    for (var i = 0; i < out.frames.length; i++) {
        var frm = out.frames[i];
        var fx = frm.rect.x
            , fy = frm.rect.y
            , fw = frm.rect.width
            , fh = frm.rect.height;
        var fdata = UPNG.toRGBA8.decodeImage(frm.data, fw, fh, out);

        if (i != 0)
            for (var j = 0; j < len; j++)
                prev[j] = img[j];

        if (frm.blend == 0)
            UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);
        else if (frm.blend == 1)
            UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);

        frms.push(img.buffer.slice(0));

        if (frm.dispose == 0) { } else if (frm.dispose == 1)
            UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);
        else if (frm.dispose == 2)
            for (var j = 0; j < len; j++)
                img[j] = prev[j];
    }
    return frms;
}
UPNG.toRGBA8.decodeImage = function (data, w, h, out) {
    var area = w * h
        , bpp = UPNG.decode._getBPP(out);
    var bpl = Math.ceil(w * bpp / 8);
    // bytes per line

    var bf = new Uint8Array(area * 4)
        , bf32 = new Uint32Array(bf.buffer);
    var ctype = out.ctype
        , depth = out.depth;
    var rs = UPNG._bin.readUshort;

    //console.log(ctype, depth);
    var time = Date.now();

    if (ctype == 6) {
        // RGB + alpha
        var qarea = area << 2;
        if (depth == 8)
            for (var i = 0; i < qarea; i += 4) {
                bf[i] = data[i];
                bf[i + 1] = data[i + 1];
                bf[i + 2] = data[i + 2];
                bf[i + 3] = data[i + 3];
            }
        if (depth == 16)
            for (var i = 0; i < qarea; i++) {
                bf[i] = data[i << 1];
            }
    } else if (ctype == 2) {
        // RGB
        var ts = out.tabs["tRNS"];
        if (ts == null) {
            if (depth == 8)
                for (var i = 0; i < area; i++) {
                    var ti = i * 3;
                    bf32[i] = (255 << 24) | (data[ti + 2] << 16) | (data[ti + 1] << 8) | data[ti];
                }
            if (depth == 16)
                for (var i = 0; i < area; i++) {
                    var ti = i * 6;
                    bf32[i] = (255 << 24) | (data[ti + 4] << 16) | (data[ti + 2] << 8) | data[ti];
                }
        } else {
            var tr = ts[0]
                , tg = ts[1]
                , tb = ts[2];
            if (depth == 8)
                for (var i = 0; i < area; i++) {
                    var qi = i << 2
                        , ti = i * 3;
                    bf32[i] = (255 << 24) | (data[ti + 2] << 16) | (data[ti + 1] << 8) | data[ti];
                    if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb)
                        bf[qi + 3] = 0;
                }
            if (depth == 16)
                for (var i = 0; i < area; i++) {
                    var qi = i << 2
                        , ti = i * 6;
                    bf32[i] = (255 << 24) | (data[ti + 4] << 16) | (data[ti + 2] << 8) | data[ti];
                    if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb)
                        bf[qi + 3] = 0;
                }
        }
    } else if (ctype == 3) {
        // palette
        var p = out.tabs["PLTE"]
            , ap = out.tabs["tRNS"]
            , tl = ap ? ap.length : 0;
        //console.log(p, ap);
        if (depth == 1)
            for (var y = 0; y < h; y++) {
                var s0 = y * bpl
                    , t0 = y * w;
                for (var i = 0; i < w; i++) {
                    var qi = (t0 + i) << 2
                        , j = ((data[s0 + (i >> 3)] >> (7 - ((i & 7) << 0))) & 1)
                        , cj = 3 * j;
                    bf[qi] = p[cj];
                    bf[qi + 1] = p[cj + 1];
                    bf[qi + 2] = p[cj + 2];
                    bf[qi + 3] = (j < tl) ? ap[j] : 255;
                }
            }
        if (depth == 2)
            for (var y = 0; y < h; y++) {
                var s0 = y * bpl
                    , t0 = y * w;
                for (var i = 0; i < w; i++) {
                    var qi = (t0 + i) << 2
                        , j = ((data[s0 + (i >> 2)] >> (6 - ((i & 3) << 1))) & 3)
                        , cj = 3 * j;
                    bf[qi] = p[cj];
                    bf[qi + 1] = p[cj + 1];
                    bf[qi + 2] = p[cj + 2];
                    bf[qi + 3] = (j < tl) ? ap[j] : 255;
                }
            }
        if (depth == 4)
            for (var y = 0; y < h; y++) {
                var s0 = y * bpl
                    , t0 = y * w;
                for (var i = 0; i < w; i++) {
                    var qi = (t0 + i) << 2
                        , j = ((data[s0 + (i >> 1)] >> (4 - ((i & 1) << 2))) & 15)
                        , cj = 3 * j;
                    bf[qi] = p[cj];
                    bf[qi + 1] = p[cj + 1];
                    bf[qi + 2] = p[cj + 2];
                    bf[qi + 3] = (j < tl) ? ap[j] : 255;
                }
            }
        if (depth == 8)
            for (var i = 0; i < area; i++) {
                var qi = i << 2
                    , j = data[i]
                    , cj = 3 * j;
                bf[qi] = p[cj];
                bf[qi + 1] = p[cj + 1];
                bf[qi + 2] = p[cj + 2];
                bf[qi + 3] = (j < tl) ? ap[j] : 255;
            }
    } else if (ctype == 4) {
        // gray + alpha
        if (depth == 8)
            for (var i = 0; i < area; i++) {
                var qi = i << 2
                    , di = i << 1
                    , gr = data[di];
                bf[qi] = gr;
                bf[qi + 1] = gr;
                bf[qi + 2] = gr;
                bf[qi + 3] = data[di + 1];
            }
        if (depth == 16)
            for (var i = 0; i < area; i++) {
                var qi = i << 2
                    , di = i << 2
                    , gr = data[di];
                bf[qi] = gr;
                bf[qi + 1] = gr;
                bf[qi + 2] = gr;
                bf[qi + 3] = data[di + 2];
            }
    } else if (ctype == 0) {
        // gray
        var tr = out.tabs["tRNS"] ? out.tabs["tRNS"] : -1;
        for (var y = 0; y < h; y++) {
            var off = y * bpl
                , to = y * w;
            if (depth == 1)
                for (var x = 0; x < w; x++) {
                    var gr = 255 * ((data[off + (x >>> 3)] >>> (7 - ((x & 7)))) & 1)
                        , al = (gr == tr * 255) ? 0 : 255;
                    bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr;
                }
            else if (depth == 2)
                for (var x = 0; x < w; x++) {
                    var gr = 85 * ((data[off + (x >>> 2)] >>> (6 - ((x & 3) << 1))) & 3)
                        , al = (gr == tr * 85) ? 0 : 255;
                    bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr;
                }
            else if (depth == 4)
                for (var x = 0; x < w; x++) {
                    var gr = 17 * ((data[off + (x >>> 1)] >>> (4 - ((x & 1) << 2))) & 15)
                        , al = (gr == tr * 17) ? 0 : 255;
                    bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr;
                }
            else if (depth == 8)
                for (var x = 0; x < w; x++) {
                    var gr = data[off + x]
                        , al = (gr == tr) ? 0 : 255;
                    bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr;
                }
            else if (depth == 16)
                for (var x = 0; x < w; x++) {
                    var gr = data[off + (x << 1)]
                        , al = (rs(data, off + (x << i)) == tr) ? 0 : 255;
                    bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr;
                }
        }
    }
    //console.log(Date.now()-time);
    return bf;
}

UPNG.decode = function (buff) {
    var data = new Uint8Array(buff)
        , offset = 8
        , bin = UPNG._bin
        , rUs = bin.readUshort
        , rUi = bin.readUint;
    var out = {
        tabs: {},
        frames: []
    };
    var dd = new Uint8Array(data.length)
        , doff = 0;
    // put all IDAT data into it
    var fd, foff = 0;
    // frames

    var mgck = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
    for (var i = 0; i < 8; i++)
        if (data[i] != mgck[i])
            throw "The input is not a PNG file!";

    while (offset < data.length) {
        var len = bin.readUint(data, offset);
        offset += 4;
        var type = bin.readASCII(data, offset, 4);
        offset += 4;
        //console.log(type,len);

        if (type == "IHDR") {
            UPNG.decode._IHDR(data, offset, out);
        } else if (type == "CgBI") {
            out.tabs[type] = data.slice(offset, offset + 4);
        } else if (type == "IDAT") {
            for (var i = 0; i < len; i++)
                dd[doff + i] = data[offset + i];
            doff += len;
        } else if (type == "acTL") {
            out.tabs[type] = {
                num_frames: rUi(data, offset),
                num_plays: rUi(data, offset + 4)
            };
            fd = new Uint8Array(data.length);
        } else if (type == "fcTL") {
            if (foff != 0) {
                var fr = out.frames[out.frames.length - 1];
                fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);
                foff = 0;
            }
            var rct = {
                x: rUi(data, offset + 12),
                y: rUi(data, offset + 16),
                width: rUi(data, offset + 4),
                height: rUi(data, offset + 8)
            };
            var del = rUs(data, offset + 22);
            del = rUs(data, offset + 20) / (del == 0 ? 100 : del);
            var frm = {
                rect: rct,
                delay: Math.round(del * 1000),
                dispose: data[offset + 24],
                blend: data[offset + 25]
            };
            //console.log(frm);
            out.frames.push(frm);
        } else if (type == "fdAT") {
            for (var i = 0; i < len - 4; i++)
                fd[foff + i] = data[offset + i + 4];
            foff += len - 4;
        } else if (type == "pHYs") {
            out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]];
        } else if (type == "cHRM") {
            out.tabs[type] = [];
            for (var i = 0; i < 8; i++)
                out.tabs[type].push(bin.readUint(data, offset + i * 4));
        } else if (type == "tEXt" || type == "zTXt") {
            if (out.tabs[type] == null)
                out.tabs[type] = {};
            var nz = bin.nextZero(data, offset);
            var keyw = bin.readASCII(data, offset, nz - offset);
            var text, tl = offset + len - nz - 1;
            if (type == "tEXt")
                text = bin.readASCII(data, nz + 1, tl);
            else {
                var bfr = UPNG.decode._inflate(data.slice(nz + 2, nz + 2 + tl));
                text = bin.readUTF8(bfr, 0, bfr.length);
            }
            out.tabs[type][keyw] = text;
        } else if (type == "iTXt") {
            if (out.tabs[type] == null)
                out.tabs[type] = {};
            var nz = 0
                , off = offset;
            nz = bin.nextZero(data, off);
            var keyw = bin.readASCII(data, off, nz - off);
            off = nz + 1;
            var cflag = data[off]
                , cmeth = data[off + 1];
            off += 2;
            nz = bin.nextZero(data, off);
            var ltag = bin.readASCII(data, off, nz - off);
            off = nz + 1;
            nz = bin.nextZero(data, off);
            var tkeyw = bin.readUTF8(data, off, nz - off);
            off = nz + 1;
            var text, tl = len - (off - offset);
            if (cflag == 0)
                text = bin.readUTF8(data, off, tl);
            else {
                var bfr = UPNG.decode._inflate(data.slice(off, off + tl));
                text = bin.readUTF8(bfr, 0, bfr.length);
            }
            out.tabs[type][keyw] = text;
        } else if (type == "PLTE") {
            out.tabs[type] = bin.readBytes(data, offset, len);
        } else if (type == "hIST") {
            var pl = out.tabs["PLTE"].length / 3;
            out.tabs[type] = [];
            for (var i = 0; i < pl; i++)
                out.tabs[type].push(rUs(data, offset + i * 2));
        } else if (type == "tRNS") {
            if (out.ctype == 3)
                out.tabs[type] = bin.readBytes(data, offset, len);
            else if (out.ctype == 0)
                out.tabs[type] = rUs(data, offset);
            else if (out.ctype == 2)
                out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];
            //else console.log("tRNS for unsupported color type",out.ctype, len);
        } else if (type == "gAMA")
            out.tabs[type] = bin.readUint(data, offset) / 100000;
        else if (type == "sRGB")
            out.tabs[type] = data[offset];
        else if (type == "bKGD") {
            if (out.ctype == 0 || out.ctype == 4)
                out.tabs[type] = [rUs(data, offset)];
            else if (out.ctype == 2 || out.ctype == 6)
                out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];
            else if (out.ctype == 3)
                out.tabs[type] = data[offset];
        } else if (type == "IEND") {
            break;
        }
        //else {  console.log("unknown chunk type", type, len);  out.tabs[type]=data.slice(offset,offset+len);  }
        offset += len;
        var crc = bin.readUint(data, offset);
        offset += 4;
    }
    if (foff != 0) {
        var fr = out.frames[out.frames.length - 1];
        fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);
        foff = 0;
    }
    out.data = UPNG.decode._decompress(out, dd, out.width, out.height);

    delete out.compress;
    delete out.interlace;
    delete out.filter;
    return out;
}

UPNG.decode._decompress = function (out, dd, w, h) {
    var time = Date.now();
    var bpp = UPNG.decode._getBPP(out)
        , bpl = Math.ceil(w * bpp / 8)
        , buff = new Uint8Array((bpl + 1 + out.interlace) * h);
    if (out.tabs["CgBI"])
        dd = UPNG.inflateRaw(dd, buff);
    else
        dd = UPNG.decode._inflate(dd, buff);
    //console.log(dd.length, buff.length);
    //console.log(Date.now()-time);

    var time = Date.now();
    if (out.interlace == 0)
        dd = UPNG.decode._filterZero(dd, out, 0, w, h);
    else if (out.interlace == 1)
        dd = UPNG.decode._readInterlace(dd, out);
    //console.log(Date.now()-time);
    return dd;
}

UPNG.decode._inflate = function (data, buff) {
    var out = UPNG["inflateRaw"](new Uint8Array(data.buffer, 2, data.length - 6), buff);
    return out;
}
UPNG.inflateRaw = function () {
    var H = {};
    H.H = {};
    H.H.N = function (N, W) {
        var R = Uint8Array, i = 0, m = 0, J = 0, h = 0, Q = 0, X = 0, u = 0, w = 0, d = 0, v, C;
        if (N[0] == 3 && N[1] == 0)
            return W ? W : new R(0);
        var V = H.H
            , n = V.b
            , A = V.e
            , l = V.R
            , M = V.n
            , I = V.A
            , e = V.Z
            , b = V.m
            , Z = W == null;
        if (Z)
            W = new R(N.length >>> 2 << 5);
        while (i == 0) {
            i = n(N, d, 1);
            m = n(N, d + 1, 2);
            d += 3;
            if (m == 0) {
                if ((d & 7) != 0)
                    d += 8 - (d & 7);
                var D = (d >>> 3) + 4
                    , q = N[D - 4] | N[D - 3] << 8;
                if (Z)
                    W = H.H.W(W, w + q);
                W.set(new R(N.buffer, N.byteOffset + D, q), w);
                d = D + q << 3;
                w += q;
                continue
            }
            if (Z)
                W = H.H.W(W, w + (1 << 17));
            if (m == 1) {
                v = b.J;
                C = b.h;
                X = (1 << 9) - 1;
                u = (1 << 5) - 1
            }
            if (m == 2) {
                J = A(N, d, 5) + 257;
                h = A(N, d + 5, 5) + 1;
                Q = A(N, d + 10, 4) + 4;
                d += 14;
                var E = d
                    , j = 1;
                for (var c = 0; c < 38; c += 2) {
                    b.Q[c] = 0;
                    b.Q[c + 1] = 0
                }
                for (var c = 0; c < Q; c++) {
                    var K = A(N, d + c * 3, 3);
                    b.Q[(b.X[c] << 1) + 1] = K;
                    if (K > j)
                        j = K
                }
                d += 3 * Q;
                M(b.Q, j);
                I(b.Q, j, b.u);
                v = b.w;
                C = b.d;
                d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);
                var r = V.V(b.v, 0, J, b.C);
                X = (1 << r) - 1;
                var S = V.V(b.v, J, h, b.D);
                u = (1 << S) - 1;
                M(b.C, r);
                I(b.C, r, v);
                M(b.D, S);
                I(b.D, S, C)
            }
            while (!0) {
                var T = v[e(N, d) & X];
                d += T & 15;
                var p = T >>> 4;
                if (p >>> 8 == 0) {
                    W[w++] = p
                } else if (p == 256) {
                    break
                } else {
                    var z = w + p - 254;
                    if (p > 264) {
                        var _ = b.q[p - 257];
                        z = w + (_ >>> 3) + A(N, d, _ & 7);
                        d += _ & 7
                    }
                    var $ = C[e(N, d) & u];
                    d += $ & 15;
                    var s = $ >>> 4
                        , Y = b.c[s]
                        , a = (Y >>> 4) + n(N, d, Y & 15);
                    d += Y & 15;
                    while (w < z) {
                        W[w] = W[w++ - a];
                        W[w] = W[w++ - a];
                        W[w] = W[w++ - a];
                        W[w] = W[w++ - a]
                    }
                    w = z
                }
            }
        }
        return W.length == w ? W : W.slice(0, w)
    }
        ;
    H.H.W = function (N, W) {
        var R = N.length;
        if (W <= R)
            return N;
        var V = new Uint8Array(R << 1);
        V.set(N, 0);
        return V
    }
        ;
    H.H.R = function (N, W, R, V, n, A) {
        var l = H.H.e
            , M = H.H.Z
            , I = 0;
        while (I < R) {
            var e = N[M(V, n) & W];
            n += e & 15;
            var b = e >>> 4;
            if (b <= 15) {
                A[I] = b;
                I++
            } else {
                var Z = 0
                    , m = 0;
                if (b == 16) {
                    m = 3 + l(V, n, 2);
                    n += 2;
                    Z = A[I - 1]
                } else if (b == 17) {
                    m = 3 + l(V, n, 3);
                    n += 3
                } else if (b == 18) {
                    m = 11 + l(V, n, 7);
                    n += 7
                }
                var J = I + m;
                while (I < J) {
                    A[I] = Z;
                    I++
                }
            }
        }
        return n
    }
        ;
    H.H.V = function (N, W, R, V) {
        var n = 0
            , A = 0
            , l = V.length >>> 1;
        while (A < R) {
            var M = N[A + W];
            V[A << 1] = 0;
            V[(A << 1) + 1] = M;
            if (M > n)
                n = M;
            A++
        }
        while (A < l) {
            V[A << 1] = 0;
            V[(A << 1) + 1] = 0;
            A++
        }
        return n
    }
        ;
    H.H.n = function (N, W) {
        var R = H.H.m, V = N.length, n, A, l, M, I, e = R.j;
        for (var M = 0; M <= W; M++)
            e[M] = 0;
        for (M = 1; M < V; M += 2)
            e[N[M]]++;
        var b = R.K;
        n = 0;
        e[0] = 0;
        for (A = 1; A <= W; A++) {
            n = n + e[A - 1] << 1;
            b[A] = n
        }
        for (l = 0; l < V; l += 2) {
            I = N[l + 1];
            if (I != 0) {
                N[l] = b[I];
                b[I]++
            }
        }
    }
        ;
    H.H.A = function (N, W, R) {
        var V = N.length
            , n = H.H.m
            , A = n.r;
        for (var l = 0; l < V; l += 2)
            if (N[l + 1] != 0) {
                var M = l >> 1
                    , I = N[l + 1]
                    , e = M << 4 | I
                    , b = W - I
                    , Z = N[l] << b
                    , m = Z + (1 << b);
                while (Z != m) {
                    var J = A[Z] >>> 15 - W;
                    R[J] = e;
                    Z++
                }
            }
    }
        ;
    H.H.l = function (N, W) {
        var R = H.H.m.r
            , V = 15 - W;
        for (var n = 0; n < N.length; n += 2) {
            var A = N[n] << W - N[n + 1];
            N[n] = R[A] >>> V
        }
    }
        ;
    H.H.M = function (N, W, R) {
        R = R << (W & 7);
        var V = W >>> 3;
        N[V] |= R;
        N[V + 1] |= R >>> 8
    }
        ;
    H.H.I = function (N, W, R) {
        R = R << (W & 7);
        var V = W >>> 3;
        N[V] |= R;
        N[V + 1] |= R >>> 8;
        N[V + 2] |= R >>> 16
    }
        ;
    H.H.e = function (N, W, R) {
        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1
    }
        ;
    H.H.b = function (N, W, R) {
        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1
    }
        ;
    H.H.Z = function (N, W) {
        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7)
    }
        ;
    H.H.i = function (N, W) {
        return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7)
    }
        ;
    H.H.m = function () {
        var N = Uint16Array
            , W = Uint32Array;
        return {
            K: new N(16),
            j: new N(16),
            X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
            S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],
            T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],
            q: new N(32),
            p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],
            z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],
            c: new W(32),
            J: new N(512),
            _: [],
            h: new N(32),
            $: [],
            w: new N(32768),
            C: [],
            v: [],
            d: new N(32768),
            D: [],
            u: new N(512),
            Q: [],
            r: new N(1 << 15),
            s: new W(286),
            Y: new W(30),
            a: new W(19),
            t: new W(15e3),
            k: new N(1 << 16),
            g: new N(1 << 15)
        }
    }();
    (function () {
        var N = H.H.m
            , W = 1 << 15;
        for (var R = 0; R < W; R++) {
            var V = R;
            V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;
            V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;
            V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;
            V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;
            N.r[R] = (V >>> 16 | V << 16) >>> 17
        }
        function n(A, l, M) {
            while (l-- != 0)
                A.push(0, M)
        }
        for (var R = 0; R < 32; R++) {
            N.q[R] = N.S[R] << 3 | N.T[R];
            N.c[R] = N.p[R] << 4 | N.z[R]
        }
        n(N._, 144, 8);
        n(N._, 255 - 143, 9);
        n(N._, 279 - 255, 7);
        n(N._, 287 - 279, 8);
        H.H.n(N._, 9);
        H.H.A(N._, 9, N.J);
        H.H.l(N._, 9);
        n(N.$, 32, 5);
        H.H.n(N.$, 5);
        H.H.A(N.$, 5, N.h);
        H.H.l(N.$, 5);
        n(N.Q, 19, 0);
        n(N.C, 286, 0);
        n(N.D, 30, 0);
        n(N.v, 320, 0)
    }());
    return H.H.N
}()

UPNG.decode._readInterlace = function (data, out) {
    var w = out.width
        , h = out.height;
    var bpp = UPNG.decode._getBPP(out)
        , cbpp = bpp >> 3
        , bpl = Math.ceil(w * bpp / 8);
    var img = new Uint8Array(h * bpl);
    var di = 0;

    var starting_row = [0, 0, 4, 0, 2, 0, 1];
    var starting_col = [0, 4, 0, 2, 0, 1, 0];
    var row_increment = [8, 8, 8, 4, 4, 2, 2];
    var col_increment = [8, 8, 4, 4, 2, 2, 1];

    var pass = 0;
    while (pass < 7) {
        var ri = row_increment[pass]
            , ci = col_increment[pass];
        var sw = 0
            , sh = 0;
        var cr = starting_row[pass];
        while (cr < h) {
            cr += ri;
            sh++;
        }
        var cc = starting_col[pass];
        while (cc < w) {
            cc += ci;
            sw++;
        }
        var bpll = Math.ceil(sw * bpp / 8);
        UPNG.decode._filterZero(data, out, di, sw, sh);

        var y = 0
            , row = starting_row[pass];
        while (row < h) {
            var col = starting_col[pass];
            var cdi = (di + y * bpll) << 3;

            while (col < w) {
                if (bpp == 1) {
                    var val = data[cdi >> 3];
                    val = (val >> (7 - (cdi & 7))) & 1;
                    img[row * bpl + (col >> 3)] |= (val << (7 - ((col & 7) << 0)));
                }
                if (bpp == 2) {
                    var val = data[cdi >> 3];
                    val = (val >> (6 - (cdi & 7))) & 3;
                    img[row * bpl + (col >> 2)] |= (val << (6 - ((col & 3) << 1)));
                }
                if (bpp == 4) {
                    var val = data[cdi >> 3];
                    val = (val >> (4 - (cdi & 7))) & 15;
                    img[row * bpl + (col >> 1)] |= (val << (4 - ((col & 1) << 2)));
                }
                if (bpp >= 8) {
                    var ii = row * bpl + col * cbpp;
                    for (var j = 0; j < cbpp; j++)
                        img[ii + j] = data[(cdi >> 3) + j];
                }
                cdi += bpp;
                col += ci;
            }
            y++;
            row += ri;
        }
        if (sw * sh != 0)
            di += sh * (1 + bpll);
        pass = pass + 1;
    }
    return img;
}

UPNG.decode._getBPP = function (out) {
    var noc = [1, null, 3, 1, 2, null, 4][out.ctype];
    return noc * out.depth;
}

UPNG.decode._filterZero = function (data, out, off, w, h) {
    var bpp = UPNG.decode._getBPP(out)
        , bpl = Math.ceil(w * bpp / 8)
        , paeth = UPNG.decode._paeth;
    bpp = Math.ceil(bpp / 8);

    var i = 0
        , di = 1
        , type = data[off]
        , x = 0;

    if (type > 1)
        data[off] = [0, 0, 1][type - 2];
    if (type == 3)
        for (x = bpp; x < bpl; x++)
            data[x + 1] = (data[x + 1] + (data[x + 1 - bpp] >>> 1)) & 255;

    for (var y = 0; y < h; y++) {
        i = off + y * bpl;
        di = i + y + 1;
        type = data[di - 1];
        x = 0;

        if (type == 0)
            for (; x < bpl; x++)
                data[i + x] = data[di + x];
        else if (type == 1) {
            for (; x < bpp; x++)
                data[i + x] = data[di + x];
            for (; x < bpl; x++)
                data[i + x] = (data[di + x] + data[i + x - bpp]);
        } else if (type == 2) {
            for (; x < bpl; x++)
                data[i + x] = (data[di + x] + data[i + x - bpl]);
        } else if (type == 3) {
            for (; x < bpp; x++)
                data[i + x] = (data[di + x] + (data[i + x - bpl] >>> 1));
            for (; x < bpl; x++)
                data[i + x] = (data[di + x] + ((data[i + x - bpl] + data[i + x - bpp]) >>> 1));
        } else {
            for (; x < bpp; x++)
                data[i + x] = (data[di + x] + paeth(0, data[i + x - bpl], 0));
            for (; x < bpl; x++)
                data[i + x] = (data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]));
        }
    }
    return data;
}

UPNG.decode._paeth = function (a, b, c) {
    var p = a + b - c
        , pa = (p - a)
        , pb = (p - b)
        , pc = (p - c);
    if (pa * pa <= pb * pb && pa * pa <= pc * pc)
        return a;
    else if (pb * pb <= pc * pc)
        return b;
    return c;
}

UPNG.decode._IHDR = function (data, offset, out) {
    var bin = UPNG._bin;
    out.width = bin.readUint(data, offset);
    offset += 4;
    out.height = bin.readUint(data, offset);
    offset += 4;
    out.depth = data[offset];
    offset++;
    out.ctype = data[offset];
    offset++;
    out.compress = data[offset];
    offset++;
    out.filter = data[offset];
    offset++;
    out.interlace = data[offset];
    offset++;
}

UPNG._bin = {
    nextZero: function (data, p) {
        while (data[p] != 0)
            p++;
        return p;
    },
    readUshort: function (buff, p) {
        return (buff[p] << 8) | buff[p + 1];
    },
    writeUshort: function (buff, p, n) {
        buff[p] = (n >> 8) & 255;
        buff[p + 1] = n & 255;
    },
    readUint: function (buff, p) {
        return (buff[p] * (256 * 256 * 256)) + ((buff[p + 1] << 16) | (buff[p + 2] << 8) | buff[p + 3]);
    },
    writeUint: function (buff, p, n) {
        buff[p] = (n >> 24) & 255;
        buff[p + 1] = (n >> 16) & 255;
        buff[p + 2] = (n >> 8) & 255;
        buff[p + 3] = n & 255;
    },
    readASCII: function (buff, p, l) {
        var s = "";
        for (var i = 0; i < l; i++)
            s += String.fromCharCode(buff[p + i]);
        return s;
    },
    writeASCII: function (data, p, s) {
        for (var i = 0; i < s.length; i++)
            data[p + i] = s.charCodeAt(i);
    },
    readBytes: function (buff, p, l) {
        var arr = [];
        for (var i = 0; i < l; i++)
            arr.push(buff[p + i]);
        return arr;
    },
    pad: function (n) {
        return n.length < 2 ? "0" + n : n;
    },
    readUTF8: function (buff, p, l) {
        var s = "", ns;
        for (var i = 0; i < l; i++)
            s += "%" + UPNG._bin.pad(buff[p + i].toString(16));
        try {
            ns = decodeURIComponent(s);
        } catch (e) {
            return UPNG._bin.readASCII(buff, p, l);
        }
        return ns;
    }
}
UPNG._copyTile = function (sb, sw, sh, tb, tw, th, xoff, yoff, mode) {
    var w = Math.min(sw, tw)
        , h = Math.min(sh, th);
    var si = 0
        , ti = 0;
    for (var y = 0; y < h; y++)
        for (var x = 0; x < w; x++) {
            if (xoff >= 0 && yoff >= 0) {
                si = (y * sw + x) << 2;
                ti = ((yoff + y) * tw + xoff + x) << 2;
            } else {
                si = ((-yoff + y) * sw - xoff + x) << 2;
                ti = (y * tw + x) << 2;
            }

            if (mode == 0) {
                tb[ti] = sb[si];
                tb[ti + 1] = sb[si + 1];
                tb[ti + 2] = sb[si + 2];
                tb[ti + 3] = sb[si + 3];
            } else if (mode == 1) {
                var fa = sb[si + 3] * (1 / 255)
                    , fr = sb[si] * fa
                    , fg = sb[si + 1] * fa
                    , fb = sb[si + 2] * fa;
                var ba = tb[ti + 3] * (1 / 255)
                    , br = tb[ti] * ba
                    , bg = tb[ti + 1] * ba
                    , bb = tb[ti + 2] * ba;

                var ifa = 1 - fa
                    , oa = fa + ba * ifa
                    , ioa = (oa == 0 ? 0 : 1 / oa);
                tb[ti + 3] = 255 * oa;
                tb[ti + 0] = (fr + br * ifa) * ioa;
                tb[ti + 1] = (fg + bg * ifa) * ioa;
                tb[ti + 2] = (fb + bb * ifa) * ioa;
            } else if (mode == 2) {
                // copy only differences, otherwise zero
                var fa = sb[si + 3]
                    , fr = sb[si]
                    , fg = sb[si + 1]
                    , fb = sb[si + 2];
                var ba = tb[ti + 3]
                    , br = tb[ti]
                    , bg = tb[ti + 1]
                    , bb = tb[ti + 2];
                if (fa == ba && fr == br && fg == bg && fb == bb) {
                    tb[ti] = 0;
                    tb[ti + 1] = 0;
                    tb[ti + 2] = 0;
                    tb[ti + 3] = 0;
                } else {
                    tb[ti] = fr;
                    tb[ti + 1] = fg;
                    tb[ti + 2] = fb;
                    tb[ti + 3] = fa;
                }
            } else if (mode == 3) {
                // check if can be blended
                var fa = sb[si + 3]
                    , fr = sb[si]
                    , fg = sb[si + 1]
                    , fb = sb[si + 2];
                var ba = tb[ti + 3]
                    , br = tb[ti]
                    , bg = tb[ti + 1]
                    , bb = tb[ti + 2];
                if (fa == ba && fr == br && fg == bg && fb == bb)
                    continue;
                //if(fa!=255 && ba!=0) return false;
                if (fa < 220 && ba > 20)
                    return false;
            }
        }
    return true;
}

UPNG.encode = function (bufs, w, h, ps, dels, tabs, forbidPlte) {
    if (ps == null)
        ps = 0;
    if (forbidPlte == null)
        forbidPlte = false;

    var nimg = UPNG.encode.compress(bufs, w, h, ps, [false, false, false, 0, forbidPlte]);
    UPNG.encode.compressPNG(nimg, -1);

    return UPNG.encode._main(nimg, w, h, dels, tabs);
}

UPNG.encodeLL = function (bufs, w, h, cc, ac, depth, dels, tabs) {
    var nimg = {
        ctype: 0 + (cc == 1 ? 0 : 2) + (ac == 0 ? 0 : 4),
        depth: depth,
        frames: []
    };

    var time = Date.now();
    var bipp = (cc + ac) * depth
        , bipl = bipp * w;
    for (var i = 0; i < bufs.length; i++)
        nimg.frames.push({
            rect: {
                x: 0,
                y: 0,
                width: w,
                height: h
            },
            img: new Uint8Array(bufs[i]),
            blend: 0,
            dispose: 1,
            bpp: Math.ceil(bipp / 8),
            bpl: Math.ceil(bipl / 8)
        });

    UPNG.encode.compressPNG(nimg, 0, true);

    var out = UPNG.encode._main(nimg, w, h, dels, tabs);
    return out;
}

UPNG.encode._main = function (nimg, w, h, dels, tabs) {
    if (tabs == null)
        tabs = {};
    var crc = UPNG.crc.crc
        , wUi = UPNG._bin.writeUint
        , wUs = UPNG._bin.writeUshort
        , wAs = UPNG._bin.writeASCII;
    var offset = 8
        , anim = nimg.frames.length > 1
        , pltAlpha = false;

    var leng = 8 + (16 + 5 + 4)/*+ (9+4)*/
        + (anim ? 20 : 0);
    if (tabs["sRGB"] != null)
        leng += 8 + 1 + 4;
    if (tabs["pHYs"] != null)
        leng += 8 + 9 + 4;
    if (nimg.ctype == 3) {
        var dl = nimg.plte.length;
        for (var i = 0; i < dl; i++)
            if ((nimg.plte[i] >>> 24) != 255)
                pltAlpha = true;
        leng += (8 + dl * 3 + 4) + (pltAlpha ? (8 + dl * 1 + 4) : 0);
    }
    for (var j = 0; j < nimg.frames.length; j++) {
        var fr = nimg.frames[j];
        if (anim)
            leng += 38;
        leng += fr.cimg.length + 12;
        if (j != 0)
            leng += 4;
    }
    leng += 12;

    var data = new Uint8Array(leng);
    var wr = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
    for (var i = 0; i < 8; i++)
        data[i] = wr[i];

    wUi(data, offset, 13);
    offset += 4;
    wAs(data, offset, "IHDR");
    offset += 4;
    wUi(data, offset, w);
    offset += 4;
    wUi(data, offset, h);
    offset += 4;
    data[offset] = nimg.depth;
    offset++;
    // depth
    data[offset] = nimg.ctype;
    offset++;
    // ctype
    data[offset] = 0;
    offset++;
    // compress
    data[offset] = 0;
    offset++;
    // filter
    data[offset] = 0;
    offset++;
    // interlace
    wUi(data, offset, crc(data, offset - 17, 17));
    offset += 4;
    // crc

    // 13 bytes to say, that it is sRGB
    if (tabs["sRGB"] != null) {
        wUi(data, offset, 1);
        offset += 4;
        wAs(data, offset, "sRGB");
        offset += 4;
        data[offset] = tabs["sRGB"];
        offset++;
        wUi(data, offset, crc(data, offset - 5, 5));
        offset += 4;
        // crc
    }
    if (tabs["pHYs"] != null) {
        wUi(data, offset, 9);
        offset += 4;
        wAs(data, offset, "pHYs");
        offset += 4;
        wUi(data, offset, tabs["pHYs"][0]);
        offset += 4;
        wUi(data, offset, tabs["pHYs"][1]);
        offset += 4;
        data[offset] = tabs["pHYs"][2];
        offset++;
        wUi(data, offset, crc(data, offset - 13, 13));
        offset += 4;
        // crc
    }

    if (anim) {
        wUi(data, offset, 8);
        offset += 4;
        wAs(data, offset, "acTL");
        offset += 4;
        wUi(data, offset, nimg.frames.length);
        offset += 4;
        wUi(data, offset, tabs["loop"] != null ? tabs["loop"] : 0);
        offset += 4;
        wUi(data, offset, crc(data, offset - 12, 12));
        offset += 4;
        // crc
    }

    if (nimg.ctype == 3) {
        var dl = nimg.plte.length;
        wUi(data, offset, dl * 3);
        offset += 4;
        wAs(data, offset, "PLTE");
        offset += 4;
        for (var i = 0; i < dl; i++) {
            var ti = i * 3
                , c = nimg.plte[i]
                , r = (c) & 255
                , g = (c >>> 8) & 255
                , b = (c >>> 16) & 255;
            data[offset + ti + 0] = r;
            data[offset + ti + 1] = g;
            data[offset + ti + 2] = b;
        }
        offset += dl * 3;
        wUi(data, offset, crc(data, offset - dl * 3 - 4, dl * 3 + 4));
        offset += 4;
        // crc

        if (pltAlpha) {
            wUi(data, offset, dl);
            offset += 4;
            wAs(data, offset, "tRNS");
            offset += 4;
            for (var i = 0; i < dl; i++)
                data[offset + i] = (nimg.plte[i] >>> 24) & 255;
            offset += dl;
            wUi(data, offset, crc(data, offset - dl - 4, dl + 4));
            offset += 4;
            // crc
        }
    }

    var fi = 0;
    for (var j = 0; j < nimg.frames.length; j++) {
        var fr = nimg.frames[j];
        if (anim) {
            wUi(data, offset, 26);
            offset += 4;
            wAs(data, offset, "fcTL");
            offset += 4;
            wUi(data, offset, fi++);
            offset += 4;
            wUi(data, offset, fr.rect.width);
            offset += 4;
            wUi(data, offset, fr.rect.height);
            offset += 4;
            wUi(data, offset, fr.rect.x);
            offset += 4;
            wUi(data, offset, fr.rect.y);
            offset += 4;
            wUs(data, offset, dels[j]);
            offset += 2;
            wUs(data, offset, 1000);
            offset += 2;
            data[offset] = fr.dispose;
            offset++;
            // dispose
            data[offset] = fr.blend;
            offset++;
            // blend
            wUi(data, offset, crc(data, offset - 30, 30));
            offset += 4;
            // crc
        }

        var imgd = fr.cimg
            , dl = imgd.length;
        wUi(data, offset, dl + (j == 0 ? 0 : 4));
        offset += 4;
        var ioff = offset;
        wAs(data, offset, (j == 0) ? "IDAT" : "fdAT");
        offset += 4;
        if (j != 0) {
            wUi(data, offset, fi++);
            offset += 4;
        }
        data.set(imgd, offset);
        offset += dl;
        wUi(data, offset, crc(data, ioff, offset - ioff));
        offset += 4;
        // crc
    }

    wUi(data, offset, 0);
    offset += 4;
    wAs(data, offset, "IEND");
    offset += 4;
    wUi(data, offset, crc(data, offset - 4, 4));
    offset += 4;
    // crc

    return data.buffer;
}

UPNG.encode.compressPNG = function (out, filter, levelZero) {
    for (var i = 0; i < out.frames.length; i++) {
        var frm = out.frames[i]
            , nw = frm.rect.width
            , nh = frm.rect.height;
        var fdata = new Uint8Array(nh * frm.bpl + nh);
        frm.cimg = UPNG.encode._filterZero(frm.img, nh, frm.bpp, frm.bpl, fdata, filter, levelZero);
    }
}

UPNG.encode.compress = function (bufs, w, h, ps, prms) // prms:  onlyBlend, minBits, forbidPlte
{
    //var time = Date.now();
    var onlyBlend = prms[0]
        , evenCrd = prms[1]
        , forbidPrev = prms[2]
        , minBits = prms[3]
        , forbidPlte = prms[4];

    var ctype = 6
        , depth = 8
        , alphaAnd = 255

    for (var j = 0; j < bufs.length; j++) {
        // when not quantized, other frames can contain colors, that are not in an initial frame
        var img = new Uint8Array(bufs[j])
            , ilen = img.length;
        for (var i = 0; i < ilen; i += 4)
            alphaAnd &= img[i + 3];
    }
    var gotAlpha = (alphaAnd != 255);

    //console.log("alpha check", Date.now()-time);  time = Date.now();

    //var brute = gotAlpha && forGIF;		// brute : frames can only be copied, not "blended"
    var frms = UPNG.encode.framize(bufs, w, h, onlyBlend, evenCrd, forbidPrev);
    //console.log("framize", Date.now()-time);  time = Date.now();

    var cmap = {}
        , plte = []
        , inds = [];

    if (ps != 0) {
        var nbufs = [];
        for (var i = 0; i < frms.length; i++)
            nbufs.push(frms[i].img.buffer);

        var abuf = UPNG.encode.concatRGBA(nbufs)
            , qres = UPNG.quantize(abuf, ps);
        console.log(qres);
        var cof = 0
            , bb = new Uint8Array(qres.abuf);
        for (var i = 0; i < frms.length; i++) {
            var ti = frms[i].img
                , bln = ti.length;
            inds.push(new Uint8Array(qres.inds.buffer, cof >> 2, bln >> 2));
            for (var j = 0; j < bln; j += 4) {
                ti[j] = bb[cof + j];
                ti[j + 1] = bb[cof + j + 1];
                ti[j + 2] = bb[cof + j + 2];
                ti[j + 3] = bb[cof + j + 3];
            }
            cof += bln;
        }

        for (var i = 0; i < qres.plte.length; i++)
            plte.push(qres.plte[i].est.rgba);
        //console.log("quantize", Date.now()-time);  time = Date.now();
    } else {
        // what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used
        for (var j = 0; j < frms.length; j++) {
            // when not quantized, other frames can contain colors, that are not in an initial frame
            var frm = frms[j]
                , img32 = new Uint32Array(frm.img.buffer)
                , nw = frm.rect.width
                , ilen = img32.length;
            var ind = new Uint8Array(ilen);
            inds.push(ind);
            for (var i = 0; i < ilen; i++) {
                var c = img32[i];
                if (i != 0 && c == img32[i - 1])
                    ind[i] = ind[i - 1];
                else if (i > nw && c == img32[i - nw])
                    ind[i] = ind[i - nw];
                else {
                    var cmc = cmap[c];
                    if (cmc == null) {
                        cmap[c] = cmc = plte.length;
                        plte.push(c);
                        if (plte.length >= 300)
                            break;
                    }
                    ind[i] = cmc;
                }
            }
        }
        //console.log("make palette", Date.now()-time);  time = Date.now();
    }

    var cc = plte.length;
    //console.log("colors:",cc);
    if (cc <= 256 && forbidPlte == false) {
        if (cc <= 2)
            depth = 1;
        else if (cc <= 4)
            depth = 2;
        else if (cc <= 16)
            depth = 4;
        else
            depth = 8;
        depth = Math.max(depth, minBits);
    }

    for (var j = 0; j < frms.length; j++) {
        var frm = frms[j]
            , nx = frm.rect.x
            , ny = frm.rect.y
            , nw = frm.rect.width
            , nh = frm.rect.height;
        var cimg = frm.img
            , cimg32 = new Uint32Array(cimg.buffer);
        var bpl = 4 * nw
            , bpp = 4;
        if (cc <= 256 && forbidPlte == false) {
            bpl = Math.ceil(depth * nw / 8);
            var nimg = new Uint8Array(bpl * nh);
            var inj = inds[j];
            for (var y = 0; y < nh; y++) {
                var i = y * bpl
                    , ii = y * nw;
                if (depth == 8)
                    for (var x = 0; x < nw; x++)
                        nimg[i + (x)] = (inj[ii + x]);
                else if (depth == 4)
                    for (var x = 0; x < nw; x++)
                        nimg[i + (x >> 1)] |= (inj[ii + x] << (4 - (x & 1) * 4));
                else if (depth == 2)
                    for (var x = 0; x < nw; x++)
                        nimg[i + (x >> 2)] |= (inj[ii + x] << (6 - (x & 3) * 2));
                else if (depth == 1)
                    for (var x = 0; x < nw; x++)
                        nimg[i + (x >> 3)] |= (inj[ii + x] << (7 - (x & 7) * 1));
            }
            cimg = nimg;
            ctype = 3;
            bpp = 1;
        } else if (gotAlpha == false && frms.length == 1) {
            // some next "reduced" frames may contain alpha for blending
            var nimg = new Uint8Array(nw * nh * 3)
                , area = nw * nh;
            for (var i = 0; i < area; i++) {
                var ti = i * 3
                    , qi = i * 4;
                nimg[ti] = cimg[qi];
                nimg[ti + 1] = cimg[qi + 1];
                nimg[ti + 2] = cimg[qi + 2];
            }
            cimg = nimg;
            ctype = 2;
            bpp = 3;
            bpl = 3 * nw;
        }
        frm.img = cimg;
        frm.bpl = bpl;
        frm.bpp = bpp;
    }
    //console.log("colors => palette indices", Date.now()-time);  time = Date.now();

    return {
        ctype: ctype,
        depth: depth,
        plte: plte,
        frames: frms
    };
}
UPNG.encode.framize = function (bufs, w, h, alwaysBlend, evenCrd, forbidPrev) {
    /*  DISPOSE
      - 0 : no change
    - 1 : clear to transparent
    - 2 : retstore to content before rendering (previous frame disposed)
    BLEND
    - 0 : replace
    - 1 : blend
  */
    var frms = [];
    for (var j = 0; j < bufs.length; j++) {
        var cimg = new Uint8Array(bufs[j])
            , cimg32 = new Uint32Array(cimg.buffer);
        var nimg;

        var nx = 0
            , ny = 0
            , nw = w
            , nh = h
            , blend = alwaysBlend ? 1 : 0;
        if (j != 0) {
            var tlim = (forbidPrev || alwaysBlend || j == 1 || frms[j - 2].dispose != 0) ? 1 : 2
                , tstp = 0
                , tarea = 1e9;
            for (var it = 0; it < tlim; it++) {
                var pimg = new Uint8Array(bufs[j - 1 - it])
                    , p32 = new Uint32Array(bufs[j - 1 - it]);
                var mix = w
                    , miy = h
                    , max = -1
                    , may = -1;
                for (var y = 0; y < h; y++)
                    for (var x = 0; x < w; x++) {
                        var i = y * w + x;
                        if (cimg32[i] != p32[i]) {
                            if (x < mix)
                                mix = x;
                            if (x > max)
                                max = x;
                            if (y < miy)
                                miy = y;
                            if (y > may)
                                may = y;
                        }
                    }
                if (max == -1)
                    mix = miy = max = may = 0;
                if (evenCrd) {
                    if ((mix & 1) == 1)
                        mix--;
                    if ((miy & 1) == 1)
                        miy--;
                }
                var sarea = (max - mix + 1) * (may - miy + 1);
                if (sarea < tarea) {
                    tarea = sarea;
                    tstp = it;
                    nx = mix;
                    ny = miy;
                    nw = max - mix + 1;
                    nh = may - miy + 1;
                }
            }

            // alwaysBlend: pokud zjistím, že blendit nelze, nastavím předchozímu snímku dispose=1. Zajistím, aby obsahoval můj obdélník.
            var pimg = new Uint8Array(bufs[j - 1 - tstp]);
            if (tstp == 1)
                frms[j - 1].dispose = 2;

            nimg = new Uint8Array(nw * nh * 4);
            UPNG._copyTile(pimg, w, h, nimg, nw, nh, -nx, -ny, 0);

            blend = UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 3) ? 1 : 0;
            if (blend == 1)
                UPNG.encode._prepareDiff(cimg, w, h, nimg, {
                    x: nx,
                    y: ny,
                    width: nw,
                    height: nh
                });
            else
                UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 0);
            //UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, blend==1?2:0);
        } else
            nimg = cimg.slice(0);
        // img may be rewritten further ... don't rewrite input

        frms.push({
            rect: {
                x: nx,
                y: ny,
                width: nw,
                height: nh
            },
            img: nimg,
            blend: blend,
            dispose: 0
        });
    }

    if (alwaysBlend)
        for (var j = 0; j < frms.length; j++) {
            var frm = frms[j];
            if (frm.blend == 1)
                continue;
            var r0 = frm.rect
                , r1 = frms[j - 1].rect
            var miX = Math.min(r0.x, r1.x)
                , miY = Math.min(r0.y, r1.y);
            var maX = Math.max(r0.x + r0.width, r1.x + r1.width)
                , maY = Math.max(r0.y + r0.height, r1.y + r1.height);
            var r = {
                x: miX,
                y: miY,
                width: maX - miX,
                height: maY - miY
            };

            frms[j - 1].dispose = 1;
            if (j - 1 != 0)
                UPNG.encode._updateFrame(bufs, w, h, frms, j - 1, r, evenCrd);
            UPNG.encode._updateFrame(bufs, w, h, frms, j, r, evenCrd);
        }
    var area = 0;
    if (bufs.length != 1)
        for (var i = 0; i < frms.length; i++) {
            var frm = frms[i];
            area += frm.rect.width * frm.rect.height;
            //if(i==0 || frm.blend!=1) continue;
            //var ob = new Uint8Array(
            //console.log(frm.blend, frm.dispose, frm.rect);
        }
    //if(area!=0) console.log(area);
    return frms;
}
UPNG.encode._updateFrame = function (bufs, w, h, frms, i, r, evenCrd) {
    var U8 = Uint8Array
        , U32 = Uint32Array;
    var pimg = new U8(bufs[i - 1])
        , pimg32 = new U32(bufs[i - 1])
        , nimg = i + 1 < bufs.length ? new U8(bufs[i + 1]) : null;
    var cimg = new U8(bufs[i])
        , cimg32 = new U32(cimg.buffer);

    var mix = w
        , miy = h
        , max = -1
        , may = -1;
    for (var y = 0; y < r.height; y++)
        for (var x = 0; x < r.width; x++) {
            var cx = r.x + x
                , cy = r.y + y;
            var j = cy * w + cx
                , cc = cimg32[j];
            // no need to draw transparency, or to dispose it. Or, if writing the same color and the next one does not need transparency.
            if (cc == 0 || (frms[i - 1].dispose == 0 && pimg32[j] == cc && (nimg == null || nimg[j * 4 + 3] != 0))/**/
            ) { } else {
                if (cx < mix)
                    mix = cx;
                if (cx > max)
                    max = cx;
                if (cy < miy)
                    miy = cy;
                if (cy > may)
                    may = cy;
            }
        }
    if (max == -1)
        mix = miy = max = may = 0;
    if (evenCrd) {
        if ((mix & 1) == 1)
            mix--;
        if ((miy & 1) == 1)
            miy--;
    }
    r = {
        x: mix,
        y: miy,
        width: max - mix + 1,
        height: may - miy + 1
    };

    var fr = frms[i];
    fr.rect = r;
    fr.blend = 1;
    fr.img = new Uint8Array(r.width * r.height * 4);
    if (frms[i - 1].dispose == 0) {
        UPNG._copyTile(pimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);
        UPNG.encode._prepareDiff(cimg, w, h, fr.img, r);
        //UPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 2);
    } else
        UPNG._copyTile(cimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);
}
UPNG.encode._prepareDiff = function (cimg, w, h, nimg, rec) {
    UPNG._copyTile(cimg, w, h, nimg, rec.width, rec.height, -rec.x, -rec.y, 2);
    /*
  var n32 = new Uint32Array(nimg.buffer);
  var og = new Uint8Array(rec.width*rec.height*4), o32 = new Uint32Array(og.buffer);
  UPNG._copyTile(cimg,w,h, og,rec.width,rec.height, -rec.x,-rec.y, 0);
  for(var i=4; i<nimg.length; i+=4) {
    if(nimg[i-1]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)-1]) {
      n32[i>>>2]=o32[i>>>2];
      //var j = i, c=p32[(i>>>2)-1];
      //while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }
    }
  }
  for(var i=nimg.length-8; i>0; i-=4) {
    if(nimg[i+7]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)+1]) {
      n32[i>>>2]=o32[i>>>2];
      //var j = i, c=p32[(i>>>2)-1];
      //while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }
    }
  }*/
}

UPNG.encode._filterZero = function (img, h, bpp, bpl, data, filter, levelZero) {
    var fls = []
        , ftry = [0, 1, 2, 3, 4];
    if (filter != -1)
        ftry = [filter];
    else if (h * bpl > 500000 || bpp == 1)
        ftry = [0];
    var opts;
    if (levelZero)
        opts = {
            level: 0
        };

    var CMPR = (data.length > 10e6 && UZIP != null) ? UZIP : pako;

    var time = Date.now();
    for (var i = 0; i < ftry.length; i++) {
        for (var y = 0; y < h; y++)
            UPNG.encode._filterLine(data, img, y, bpl, bpp, ftry[i]);
        //var nimg = new Uint8Array(data.length);
        //var sz = UZIP.F.deflate(data, nimg);  fls.push(nimg.slice(0,sz));
        //var dfl = pako["deflate"](data), dl=dfl.length-4;
        //var crc = (dfl[dl+3]<<24)|(dfl[dl+2]<<16)|(dfl[dl+1]<<8)|(dfl[dl+0]<<0);
        //console.log(crc, UZIP.adler(data,2,data.length-6));
        fls.push(CMPR["deflate"](data, opts));
    }

    var ti, tsize = 1e9;
    for (var i = 0; i < fls.length; i++)
        if (fls[i].length < tsize) {
            ti = i;
            tsize = fls[i].length;
        }
    return fls[ti];
}
UPNG.encode._filterLine = function (data, img, y, bpl, bpp, type) {
    var i = y * bpl
        , di = i + y
        , paeth = UPNG.decode._paeth
    data[di] = type;
    di++;

    if (type == 0) {
        if (bpl < 500)
            for (var x = 0; x < bpl; x++)
                data[di + x] = img[i + x];
        else
            data.set(new Uint8Array(img.buffer, i, bpl), di);
    } else if (type == 1) {
        for (var x = 0; x < bpp; x++)
            data[di + x] = img[i + x];
        for (var x = bpp; x < bpl; x++)
            data[di + x] = (img[i + x] - img[i + x - bpp] + 256) & 255;
    } else if (y == 0) {
        for (var x = 0; x < bpp; x++)
            data[di + x] = img[i + x];

        if (type == 2)
            for (var x = bpp; x < bpl; x++)
                data[di + x] = img[i + x];
        if (type == 3)
            for (var x = bpp; x < bpl; x++)
                data[di + x] = (img[i + x] - (img[i + x - bpp] >> 1) + 256) & 255;
        if (type == 4)
            for (var x = bpp; x < bpl; x++)
                data[di + x] = (img[i + x] - paeth(img[i + x - bpp], 0, 0) + 256) & 255;
    } else {
        if (type == 2) {
            for (var x = 0; x < bpl; x++)
                data[di + x] = (img[i + x] + 256 - img[i + x - bpl]) & 255;
        }
        if (type == 3) {
            for (var x = 0; x < bpp; x++)
                data[di + x] = (img[i + x] + 256 - (img[i + x - bpl] >> 1)) & 255;
            for (var x = bpp; x < bpl; x++)
                data[di + x] = (img[i + x] + 256 - ((img[i + x - bpl] + img[i + x - bpp]) >> 1)) & 255;
        }
        if (type == 4) {
            for (var x = 0; x < bpp; x++)
                data[di + x] = (img[i + x] + 256 - paeth(0, img[i + x - bpl], 0)) & 255;
            for (var x = bpp; x < bpl; x++)
                data[di + x] = (img[i + x] + 256 - paeth(img[i + x - bpp], img[i + x - bpl], img[i + x - bpp - bpl])) & 255;
        }
    }
}

UPNG.crc = {
    table: (function () {
        var tab = new Uint32Array(256);
        for (var n = 0; n < 256; n++) {
            var c = n;
            for (var k = 0; k < 8; k++) {
                if (c & 1)
                    c = 0xedb88320 ^ (c >>> 1);
                else
                    c = c >>> 1;
            }
            tab[n] = c;
        }
        return tab;
    }
    )(),
    update: function (c, buf, off, len) {
        for (var i = 0; i < len; i++)
            c = UPNG.crc.table[(c ^ buf[off + i]) & 0xff] ^ (c >>> 8);
        return c;
    },
    crc: function (b, o, l) {
        return UPNG.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;
    }
}

UPNG.quantize = function (abuf, ps) {
    var oimg = new Uint8Array(abuf)
        , nimg = oimg.slice(0)
        , nimg32 = new Uint32Array(nimg.buffer);

    var KD = UPNG.quantize.getKDtree(nimg, ps);
    var root = KD[0]
        , leafs = KD[1];

    var planeDst = UPNG.quantize.planeDst;
    var sb = oimg
        , tb = nimg32
        , len = sb.length;

    var inds = new Uint8Array(oimg.length >> 2), nd;
    if (oimg.length < 20e6)
        // precise, but slow :(
        for (var i = 0; i < len; i += 4) {
            var r = sb[i] * (1 / 255)
                , g = sb[i + 1] * (1 / 255)
                , b = sb[i + 2] * (1 / 255)
                , a = sb[i + 3] * (1 / 255);

            nd = UPNG.quantize.getNearest(root, r, g, b, a);
            inds[i >> 2] = nd.ind;
            tb[i >> 2] = nd.est.rgba;
        }
    else
        for (var i = 0; i < len; i += 4) {
            var r = sb[i] * (1 / 255)
                , g = sb[i + 1] * (1 / 255)
                , b = sb[i + 2] * (1 / 255)
                , a = sb[i + 3] * (1 / 255);

            nd = root;
            while (nd.left)
                nd = (planeDst(nd.est, r, g, b, a) <= 0) ? nd.left : nd.right;
            inds[i >> 2] = nd.ind;
            tb[i >> 2] = nd.est.rgba;
        }
    return {
        abuf: nimg.buffer,
        inds: inds,
        plte: leafs
    };
}

UPNG.quantize.getKDtree = function (nimg, ps, err) {
    if (err == null)
        err = 0.0001;
    var nimg32 = new Uint32Array(nimg.buffer);

    var root = {
        i0: 0,
        i1: nimg.length,
        bst: null,
        est: null,
        tdst: 0,
        left: null,
        right: null
    };
    // basic statistic, extra statistic
    root.bst = UPNG.quantize.stats(nimg, root.i0, root.i1);
    root.est = UPNG.quantize.estats(root.bst);
    var leafs = [root];

    while (leafs.length < ps) {
        var maxL = 0
            , mi = 0;
        for (var i = 0; i < leafs.length; i++)
            if (leafs[i].est.L > maxL) {
                maxL = leafs[i].est.L;
                mi = i;
            }
        if (maxL < err)
            break;
        var node = leafs[mi];

        var s0 = UPNG.quantize.splitPixels(nimg, nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);
        var s0wrong = (node.i0 >= s0 || node.i1 <= s0);
        //console.log(maxL, leafs.length, mi);
        if (s0wrong) {
            node.est.L = 0;
            continue;
        }

        var ln = {
            i0: node.i0,
            i1: s0,
            bst: null,
            est: null,
            tdst: 0,
            left: null,
            right: null
        };
        ln.bst = UPNG.quantize.stats(nimg, ln.i0, ln.i1);
        ln.est = UPNG.quantize.estats(ln.bst);
        var rn = {
            i0: s0,
            i1: node.i1,
            bst: null,
            est: null,
            tdst: 0,
            left: null,
            right: null
        };
        rn.bst = {
            R: [],
            m: [],
            N: node.bst.N - ln.bst.N
        };
        for (var i = 0; i < 16; i++)
            rn.bst.R[i] = node.bst.R[i] - ln.bst.R[i];
        for (var i = 0; i < 4; i++)
            rn.bst.m[i] = node.bst.m[i] - ln.bst.m[i];
        rn.est = UPNG.quantize.estats(rn.bst);

        node.left = ln;
        node.right = rn;
        leafs[mi] = ln;
        leafs.push(rn);
    }
    leafs.sort(function (a, b) {
        return b.bst.N - a.bst.N;
    });
    for (var i = 0; i < leafs.length; i++)
        leafs[i].ind = i;
    return [root, leafs];
}

UPNG.quantize.getNearest = function (nd, r, g, b, a) {
    if (nd.left == null) {
        nd.tdst = UPNG.quantize.dist(nd.est.q, r, g, b, a);
        return nd;
    }
    var planeDst = UPNG.quantize.planeDst(nd.est, r, g, b, a);

    var node0 = nd.left
        , node1 = nd.right;
    if (planeDst > 0) {
        node0 = nd.right;
        node1 = nd.left;
    }

    var ln = UPNG.quantize.getNearest(node0, r, g, b, a);
    if (ln.tdst <= planeDst * planeDst)
        return ln;
    var rn = UPNG.quantize.getNearest(node1, r, g, b, a);
    return rn.tdst < ln.tdst ? rn : ln;
}
UPNG.quantize.planeDst = function (est, r, g, b, a) {
    var e = est.e;
    return e[0] * r + e[1] * g + e[2] * b + e[3] * a - est.eMq;
}
UPNG.quantize.dist = function (q, r, g, b, a) {
    var d0 = r - q[0]
        , d1 = g - q[1]
        , d2 = b - q[2]
        , d3 = a - q[3];
    return d0 * d0 + d1 * d1 + d2 * d2 + d3 * d3;
}

UPNG.quantize.splitPixels = function (nimg, nimg32, i0, i1, e, eMq) {
    var vecDot = UPNG.quantize.vecDot;
    i1 -= 4;
    var shfs = 0;
    while (i0 < i1) {
        while (vecDot(nimg, i0, e) <= eMq)
            i0 += 4;
        while (vecDot(nimg, i1, e) > eMq)
            i1 -= 4;
        if (i0 >= i1)
            break;

        var t = nimg32[i0 >> 2];
        nimg32[i0 >> 2] = nimg32[i1 >> 2];
        nimg32[i1 >> 2] = t;

        i0 += 4;
        i1 -= 4;
    }
    while (vecDot(nimg, i0, e) > eMq)
        i0 -= 4;
    return i0 + 4;
}
UPNG.quantize.vecDot = function (nimg, i, e) {
    return nimg[i] * e[0] + nimg[i + 1] * e[1] + nimg[i + 2] * e[2] + nimg[i + 3] * e[3];
}
UPNG.quantize.stats = function (nimg, i0, i1) {
    var R = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var m = [0, 0, 0, 0];
    var N = (i1 - i0) >> 2;
    for (var i = i0; i < i1; i += 4) {
        var r = nimg[i] * (1 / 255)
            , g = nimg[i + 1] * (1 / 255)
            , b = nimg[i + 2] * (1 / 255)
            , a = nimg[i + 3] * (1 / 255);
        //var r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];
        m[0] += r;
        m[1] += g;
        m[2] += b;
        m[3] += a;

        R[0] += r * r;
        R[1] += r * g;
        R[2] += r * b;
        R[3] += r * a;
        R[5] += g * g;
        R[6] += g * b;
        R[7] += g * a;
        R[10] += b * b;
        R[11] += b * a;
        R[15] += a * a;
    }
    R[4] = R[1];
    R[8] = R[2];
    R[9] = R[6];
    R[12] = R[3];
    R[13] = R[7];
    R[14] = R[11];

    return {
        R: R,
        m: m,
        N: N
    };
}
UPNG.quantize.estats = function (stats) {
    var R = stats.R
        , m = stats.m
        , N = stats.N;

    // when all samples are equal, but N is large (millions), the Rj can be non-zero ( 0.0003.... - precission error)
    var m0 = m[0]
        , m1 = m[1]
        , m2 = m[2]
        , m3 = m[3]
        , iN = (N == 0 ? 0 : 1 / N);
    var Rj = [R[0] - m0 * m0 * iN, R[1] - m0 * m1 * iN, R[2] - m0 * m2 * iN, R[3] - m0 * m3 * iN, R[4] - m1 * m0 * iN, R[5] - m1 * m1 * iN, R[6] - m1 * m2 * iN, R[7] - m1 * m3 * iN, R[8] - m2 * m0 * iN, R[9] - m2 * m1 * iN, R[10] - m2 * m2 * iN, R[11] - m2 * m3 * iN, R[12] - m3 * m0 * iN, R[13] - m3 * m1 * iN, R[14] - m3 * m2 * iN, R[15] - m3 * m3 * iN];

    var A = Rj
        , M = UPNG.M4;
    var b = [Math.random(), Math.random(), Math.random(), Math.random()]
        , mi = 0
        , tmi = 0;

    if (N != 0)
        for (var i = 0; i < 16; i++) {
            b = M.multVec(A, b);
            tmi = Math.sqrt(M.dot(b, b));
            b = M.sml(1 / tmi, b);
            if (i != 0 && Math.abs(tmi - mi) < 1e-9)
                break;
            mi = tmi;
        }
    //b = [0,0,1,0];  mi=N;
    var q = [m0 * iN, m1 * iN, m2 * iN, m3 * iN];
    var eMq255 = M.dot(M.sml(255, q), b);

    return {
        Cov: Rj,
        q: q,
        e: b,
        L: mi,
        eMq255: eMq255,
        eMq: M.dot(b, q),
        rgba: (((Math.round(255 * q[3]) << 24) | (Math.round(255 * q[2]) << 16) | (Math.round(255 * q[1]) << 8) | (Math.round(255 * q[0]) << 0)) >>> 0)
    };
}
UPNG.M4 = {
    multVec: function (m, v) {
        return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3], m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3], m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3], m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]];
    },
    dot: function (x, y) {
        return x[0] * y[0] + x[1] * y[1] + x[2] * y[2] + x[3] * y[3];
    },
    sml: function (a, y) {
        return [a * y[0], a * y[1], a * y[2], a * y[3]];
    }
}

UPNG.encode.concatRGBA = function (bufs) {
    var tlen = 0;
    for (var i = 0; i < bufs.length; i++)
        tlen += bufs[i].byteLength;
    var nimg = new Uint8Array(tlen)
        , noff = 0;
    for (var i = 0; i < bufs.length; i++) {
        var img = new Uint8Array(bufs[i])
            , il = img.length;
        for (var j = 0; j < il; j += 4) {
            var r = img[j]
                , g = img[j + 1]
                , b = img[j + 2]
                , a = img[j + 3];
            if (a == 0)
                r = g = b = 0;
            nimg[noff + j] = r;
            nimg[noff + j + 1] = g;
            nimg[noff + j + 2] = b;
            nimg[noff + j + 3] = a;
        }
        noff += il;
    }
    return nimg.buffer;
}
var UTEX = function () {
    function L(W, l, M, F, t) {
        var K = new Uint8Array(4 * 4 * 4);
        for (var $ = 0; $ < t; $ += 4)
            for (var I = 0; I < F; I += 4) {
                D(W, l, K);
                n(M, F, t, I, $, K);
                l += 8
            }
        return l
    }
    function a6(W, l, M, F, t) {
        var K = new Uint8Array(4 * 4 * 4);
        for (var $ = 0; $ < t; $ += 4)
            for (var I = 0; I < F; I += 4) {
                D(W, l + 8, K);
                n(M, F, t, I, $, K);
                l += 16
            }
        return l
    }
    function aa(W, l, M, F, t) {
        var K = new Uint8Array(4 * 4 * 4);
        for (var $ = 0; $ < t; $ += 4)
            for (var I = 0; I < F; I += 4) {
                Y(W, l, K);
                n(M, F, t, I, $, K);
                l += 8
            }
        return l
    }
    function k(W, l, M, F, t) {
        var K = new Uint8Array(16 * 4);
        for (var $ = 0; $ < M; $ += 4)
            for (var I = 0; I < l; I += 4) {
                r(W, l, M, I, $, K);
                c(F, t, K);
                t += 8
            }
        return t
    }
    function B(W, l, M, F, t) {
        var K = {
            W: l * 8
        }
            , $ = new Uint8Array(4 * 4 * 4);
        for (var I = 0; I < t; I += 4)
            for (var O = 0; O < F; O += 4) {
                Y(W, l + 8, $);
                for (var C = 0; C < 64; C += 4) {
                    var j = a2(W, K, 4);
                    $[C + 3] = 255 * (j / 15)
                }
                n(M, F, t, O, I, $);
                l += 16;
                K.W += 64
            }
        return l
    }
    function Q(W, l) {
        var M = [W, l];
        if (W > l)
            M.push(6 / 7 * W + 1 / 7 * l, 5 / 7 * W + 2 / 7 * l, 4 / 7 * W + 3 / 7 * l, 3 / 7 * W + 4 / 7 * l, 2 / 7 * W + 5 / 7 * l, 1 / 7 * W + 6 / 7 * l);
        else
            M.push(4 / 5 * W + 1 / 5 * l, 3 / 5 * W + 2 / 5 * l, 2 / 5 * W + 3 / 5 * l, 1 / 5 * W + 4 / 5 * l, 0, 255);
        return M
    }
    function T(W, l, M, F, t) {
        var K = Q(W[l], W[l + 1]);
        M.W += 16;
        for (var $ = 0; $ < 64; $ += 4) {
            var I = a2(W, M, 3);
            F[$ + t] = K[I]
        }
    }
    function u(W, l, M, F, t) {
        var K = {
            W: l * 8
        }
            , $ = new Uint8Array(4 * 4 * 4);
        $.fill(255);
        for (var I = 0; I < t; I += 4)
            for (var O = 0; O < F; O += 4) {
                T(W, l, K, $, 1);
                l += 8;
                T(W, l, K, $, 0);
                l += 8;
                n(M, F, t, O, I, $)
            }
        return l
    }
    function G(W, l, M, F, t) {
        var K = {
            W: l * 8
        }
            , $ = new Uint8Array(4 * 4 * 4);
        for (var I = 0; I < t; I += 4)
            for (var O = 0; O < F; O += 4) {
                Y(W, l + 8, $);
                T(W, l, K, $, 3);
                K.W += 64;
                n(M, F, t, O, I, $);
                l += 16
            }
        return l
    }
    function a(W, l, M, F, t) {
        var K = new Uint8Array(16 * 4);
        for (var $ = 0; $ < M; $ += 4)
            for (var I = 0; I < l; I += 4) {
                r(W, l, M, I, $, K);
                var O = K[3]
                    , C = K[3];
                for (var j = 7; j < 64; j += 4) {
                    var b = K[j];
                    if (b < O)
                        O = b;
                    else if (C < b)
                        C = b
                }
                F[t] = C;
                F[t + 1] = O;
                t += 2;
                var h = Q(C, O)
                    , _ = t + 2 << 3;
                for (var j = 0; j < 64; j += 32) {
                    var S = 0
                        , _ = 0;
                    for (var J = 0; J < 32; J += 4) {
                        var v = 0
                            , V = 500
                            , b = K[j + J + 3];
                        for (var p = 0; p < 8; p++) {
                            var w = Math.abs(h[p] - b);
                            if (w < V) {
                                V = w;
                                v = p
                            }
                        }
                        S = S | v << _;
                        _ += 3
                    }
                    F[t] = S;
                    F[t + 1] = S >> 8;
                    F[t + 2] = S >> 16;
                    t += 3
                }
                c(F, t, K);
                t += 8
            }
        return t
    }
    var E = new Uint8Array(16);
    function D(W, l, M) {
        var F = W[l + 1] << 8 | W[l]
            , t = W[l + 3] << 8 | W[l + 2]
            , K = (F & 31) * (255 / 31)
            , $ = (F >>> 5 & 31) * (255 / 31)
            , I = (F >> 10) * (255 / 31)
            , O = (t & 31) * (255 / 31)
            , C = (t >>> 5 & 63) * (255 / 63)
            , j = (t >> 11) * (255 / 31)
            , b = E;
        b[0] = ~~I;
        b[1] = ~~$;
        b[2] = ~~K;
        b[3] = 255;
        b[12] = ~~j;
        b[13] = ~~C;
        b[14] = ~~O;
        b[15] = 255;
        var h = 2 / 3
            , _ = 1 - h;
        b[4] = ~~(h * I + _ * j);
        b[5] = ~~(h * $ + _ * C);
        b[6] = ~~(h * K + _ * O);
        b[7] = 255;
        h = 1 / 3;
        _ = 1 - h;
        b[8] = ~~(h * I + _ * j);
        b[9] = ~~(h * $ + _ * C);
        b[10] = ~~(h * K + _ * O);
        b[11] = 255;
        z(W, M, b, l)
    }
    function Y(W, l, M) {
        var F = W[l + 1] << 8 | W[l]
            , t = W[l + 3] << 8 | W[l + 2]
            , K = (F & 31) * (255 / 31)
            , $ = (F >>> 5 & 63) * (255 / 63)
            , I = (F >> 11) * (255 / 31)
            , O = (t & 31) * (255 / 31)
            , C = (t >>> 5 & 63) * (255 / 63)
            , j = (t >> 11) * (255 / 31)
            , b = E;
        b[0] = ~~I;
        b[1] = ~~$;
        b[2] = ~~K;
        b[3] = 255;
        b[4] = ~~j;
        b[5] = ~~C;
        b[6] = ~~O;
        b[7] = 255;
        if (t < F) {
            var h = 2 / 3
                , _ = 1 - h;
            b[8] = ~~(h * I + _ * j);
            b[9] = ~~(h * $ + _ * C);
            b[10] = ~~(h * K + _ * O);
            b[11] = 255;
            h = 1 / 3;
            _ = 1 - h;
            b[12] = ~~(h * I + _ * j);
            b[13] = ~~(h * $ + _ * C);
            b[14] = ~~(h * K + _ * O);
            b[15] = 255
        } else {
            var h = 1 / 2
                , _ = 1 - h;
            b[8] = ~~(h * I + _ * j);
            b[9] = ~~(h * $ + _ * C);
            b[10] = ~~(h * K + _ * O);
            b[11] = 255;
            b[12] = 0;
            b[13] = 0;
            b[14] = 0;
            b[15] = 0
        }
        z(W, M, b, l)
    }
    function c(W, l, M) {
        var F = A
            , t = af(M)
            , K = M[t >> 8]
            , $ = M[(t >> 8) + 1]
            , I = M[(t >> 8) + 2]
            , O = M[t & 255]
            , C = M[(t & 255) + 1]
            , j = M[(t & 255) + 2]
            , b = K >> 3 << 11 | $ >> 2 << 5 | I >> 3
            , h = O >> 3 << 11 | C >> 2 << 5 | j >> 3;
        if (b < h) {
            var _ = b;
            b = h;
            h = _
        }
        var I = Math.floor((b & 31) * (255 / 31))
            , $ = Math.floor((b >>> 5 & 63) * (255 / 63))
            , K = Math.floor((b >> 11) * (255 / 31))
            , j = Math.floor((h & 31) * (255 / 31))
            , C = Math.floor((h >>> 5 & 63) * (255 / 63))
            , O = Math.floor((h >> 11) * (255 / 31));
        W[l + 0] = b & 255;
        W[l + 1] = b >> 8;
        W[l + 2] = h & 255;
        W[l + 3] = h >> 8;
        var S = 2 / 3
            , J = 1 - S
            , v = Math.floor(S * K + J * O)
            , V = Math.floor(S * $ + J * C)
            , p = Math.floor(S * I + J * j);
        S = 1 / 3;
        J = 1 - S;
        var w = Math.floor(S * K + J * O)
            , a5 = Math.floor(S * $ + J * C)
            , y = Math.floor(S * I + J * j)
            , m = l * 8 + 32;
        for (var i = 0; i < 64; i += 4) {
            var f = M[i]
                , H = M[i + 1]
                , an = M[i + 2]
                , a9 = F(f, H, an, K, $, I)
                , a8 = F(f, H, an, O, C, j)
                , o = F(f, H, an, v, V, p)
                , R = F(f, H, an, w, a5, y)
                , al = Math.min(a9, Math.min(a8, Math.min(o, R)))
                , g = 0;
            if (al == a8)
                g = 1;
            else if (al == o)
                g = 2;
            else if (al == R)
                g = 3;
            W[m >> 3] |= g << (m & 7);
            m += 2
        }
    }
    function z(W, l, M, F) {
        var t = F + 4 << 3;
        for (var K = 0; K < 64; K += 4) {
            var $ = W[t >> 3] >> (t & 7) & 3;
            t += 2;
            $ = $ << 2;
            l[K] = M[$];
            l[K + 1] = M[$ + 1];
            l[K + 2] = M[$ + 2];
            l[K + 3] = M[$ + 3]
        }
    }
    function r(W, l, M, F, t, K) {
        for (var $ = 0; $ < 4; $++) {
            var I = (t + $) * l + F << 2
                , O = $ << 4;
            K[O + 0] = W[I + 0];
            K[O + 1] = W[I + 1];
            K[O + 2] = W[I + 2];
            K[O + 3] = W[I + 3];
            K[O + 4] = W[I + 4];
            K[O + 5] = W[I + 5];
            K[O + 6] = W[I + 6];
            K[O + 7] = W[I + 7];
            K[O + 8] = W[I + 8];
            K[O + 9] = W[I + 9];
            K[O + 10] = W[I + 10];
            K[O + 11] = W[I + 11];
            K[O + 12] = W[I + 12];
            K[O + 13] = W[I + 13];
            K[O + 14] = W[I + 14];
            K[O + 15] = W[I + 15]
        }
    }
    function n(W, l, M, F, t, K) {
        for (var $ = 0; $ < 4; $++) {
            var I = (t + $) * l + F << 2
                , O = $ << 4;
            W[I + 0] = K[O + 0];
            W[I + 1] = K[O + 1];
            W[I + 2] = K[O + 2];
            W[I + 3] = K[O + 3];
            W[I + 4] = K[O + 4];
            W[I + 5] = K[O + 5];
            W[I + 6] = K[O + 6];
            W[I + 7] = K[O + 7];
            W[I + 8] = K[O + 8];
            W[I + 9] = K[O + 9];
            W[I + 10] = K[O + 10];
            W[I + 11] = K[O + 11];
            W[I + 12] = K[O + 12];
            W[I + 13] = K[O + 13];
            W[I + 14] = K[O + 14];
            W[I + 15] = K[O + 15]
        }
    }
    var dsplit(" ")
        , qsplit(" ")
        , Z = [[0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 2, 0], [0, 8, 0], [0, 2, 0], [0, 2, 0], [0, 8, 0], [0, 8, 0], [0, 15, 0], [0, 2, 0], [0, 8, 0], [0, 2, 0], [0, 2, 0], [0, 8, 0], [0, 8, 0], [0, 2, 0], [0, 2, 0], [0, 15, 0], [0, 15, 0], [0, 6, 0], [0, 8, 0], [0, 2, 0], [0, 8, 0], [0, 15, 0], [0, 15, 0], [0, 2, 0], [0, 8, 0], [0, 2, 0], [0, 2, 0], [0, 2, 0], [0, 15, 0], [0, 15, 0], [0, 6, 0], [0, 6, 0], [0, 2, 0], [0, 6, 0], [0, 8, 0], [0, 15, 0], [0, 15, 0], [0, 2, 0], [0, 2, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 15, 0], [0, 2, 0], [0, 2, 0], [0, 15, 0]]
        , ae = [[0, 3, 15], [0, 3, 8], [0, 15, 8], [0, 15, 3], [0, 8, 15], [0, 3, 15], [0, 15, 3], [0, 15, 8], [0, 8, 15], [0, 8, 15], [0, 6, 15], [0, 6, 15], [0, 6, 15], [0, 5, 15], [0, 3, 15], [0, 3, 8], [0, 3, 15], [0, 3, 8], [0, 8, 15], [0, 15, 3], [0, 3, 15], [0, 3, 8], [0, 6, 15], [0, 10, 8], [0, 5, 3], [0, 8, 15], [0, 8, 6], [0, 6, 10], [0, 8, 15], [0, 5, 15], [0, 15, 10], [0, 15, 8], [0, 8, 15], [0, 15, 3], [0, 3, 15], [0, 5, 10], [0, 6, 10], [0, 10, 8], [0, 8, 9], [0, 15, 10], [0, 15, 6], [0, 3, 15], [0, 15, 8], [0, 5, 15], [0, 15, 3], [0, 15, 6], [0, 15, 6], [0, 15, 8], [0, 3, 15], [0, 15, 3], [0, 5, 15], [0, 5, 15], [0, 5, 15], [0, 8, 15], [0, 5, 15], [0, 10, 15], [0, 5, 15], [0, 10, 15], [0, 8, 15], [0, 13, 15], [0, 15, 3], [0, 12, 15], [0, 3, 15], [0, 3, 8]];
    function P(W, l, M, F, t) {
        var K = a2
            , $ = {
                W: 0
            }
            , I = new Uint8Array(4 * 4 * 4)
            , O = [null, null, [0, 21, 43, 64], [0, 9, 18, 27, 37, 46, 55, 64], [0, 4, 9, 13, 17, 21, 26, 30, 34, 38, 43, 47, 51, 55, 60, 64]]
            , C = [null, null, d, q]
            , j = [null, null, Z, ae];
        for (var b = 0; b < t; b += 4)
            for (var h = 0; h < F; h += 4) {
                var _ = 0
                    , al = "0000000000000000";
                while ((W[l] >> _ & 1) != 1)
                    _++;
                $.W = (l << 3) + _ + 1;
                var S = _ == 4 || _ == 5 ? K(W, $, 2) : 0
                    , J = _ == 4 ? K(W, $, 1) : 0
                    , v = [4, 6, 6, 6, 0, 0, 0, 6][_]
                    , V = K(W, $, v)
                    , p = [4, 6, 5, 7, 5, 7, 7, 5][_]
                    , w = [0, 0, 0, 0, 6, 8, 7, 5][_]
                    , a5 = [1, 1, 0, 1, 0, 0, 1, 1][_]
                    , y = [6, 4, 6, 4, 2, 2, 2, 4][_]
                    , m = [];
                for (var i = 0; i < 4; i++) {
                    var f = i == 3 ? w : p;
                    for (var H = 0; H < y; H++)
                        m[i * y + H] = K(W, $, f)
                }
                for (var H = 0; H < y; H++) {
                    if (_ == 1 && (H & 1) == 1)
                        $.W--;
                    var an = K(W, $, a5);
                    for (var i = 0; i < 3; i++)
                        m[i * y + H] = m[i * y + H] << a5 | an;
                    if (w != 0)
                        m[3 * y + H] = m[3 * y + H] << a5 | an
                }
                p += a5;
                if (w != 0)
                    w += a5;
                for (var i = 0; i < 4; i++) {
                    var f = i == 3 ? w : p
                        , a9 = f == 0 ? 0 : 1 / ((1 << f) - 1);
                    for (var H = 0; H < y; H++)
                        m[i * y + H] *= a9
                }
                if (w == 0)
                    for (var H = 0; H < y; H++)
                        m[3 * y + H] = 1;
                var a8 = [3, 2, 3, 2, 1, 1, 1, 2][_]
                    , o = [3, 3, 2, 2, 2, 2, 4, 2][_]
                    , R = [0, 0, 0, 0, 3, 2, 0, 0][_]
                    , g = [0, 0, 0];
                if (a8 != 1) {
                    al = C[a8][V];
                    g = j[a8][V]
                }
                var ah = $.W
                    , ac = ah + 16 * o - a8;
                if (J == 1) {
                    var ao = ah;
                    ah = ac;
                    ac = ao;
                    ao = o;
                    o = R;
                    R = ao
                }
                var ak = O[o];
                $.W = ah;
                for (var i = 0; i < 64; i += 4) {
                    var x = al.charCodeAt(i >> 2) - 48
                        , a0 = g[x] == i >> 2 ? 1 : 0
                        , a4 = K(W, $, o - a0)
                        , s = ak[a4] / 64
                        , a7 = (1 - s) * m[0 * y + 2 * x + 0] + s * m[0 * y + 2 * x + 1]
                        , ad = (1 - s) * m[1 * y + 2 * x + 0] + s * m[1 * y + 2 * x + 1]
                        , ag = (1 - s) * m[2 * y + 2 * x + 0] + s * m[2 * y + 2 * x + 1]
                        , a1 = (1 - s) * m[3 * y + 2 * x + 0] + s * m[3 * y + 2 * x + 1];
                    I[i] = a7 * 255;
                    I[i + 1] = ad * 255;
                    I[i + 2] = ag * 255;
                    I[i + 3] = a1 * 255
                }
                ak = O[R];
                $.W = ac;
                if (R != 0)
                    for (var i = 0; i < 64; i += 4) {
                        var x = al.charCodeAt(i >> 2) - 48
                            , a0 = g[x] == i >> 2 ? 1 : 0
                            , a4 = K(W, $, R - a0)
                            , s = ak[a4] / 64
                            , a1 = (1 - s) * m[3 * y + 2 * x + 0] + s * m[3 * y + 2 * x + 1];
                        I[i + 3] = a1 * 255
                    }
                ai(I, S);
                n(M, F, t, h, b, I);
                l += 16
            }
        return l
    }
    function ai(W, l) {
        if (l == 0)
            return;
        for (var M = 0; M < 64; M += 4) {
            var F = W[M]
                , t = W[M + 1]
                , K = W[M + 2]
                , $ = W[M + 3];
            if (l == 1) {
                var I = $;
                $ = F;
                F = I
            }
            if (l == 2) {
                var I = $;
                $ = t;
                t = I
            }
            if (l == 3) {
                var I = $;
                $ = K;
                K = I
            }
            W[M] = F;
            W[M + 1] = t;
            W[M + 2] = K;
            W[M + 3] = $
        }
    }
    function a2(W, l, M) {
        var F = 0
            , t = M;
        while (M != 0) {
            F = F | X(W, l) << t - M;
            M--
        }
        return F
    }
    function X(W, l) {
        var M = l.W;
        l.W++;
        return W[M >> 3] >> (M & 7) & 1
    }
    function e(W, l, M) {
        var F = l >> 1
            , t = M >> 1
            , K = new Uint8Array(F * t * 4);
        for (var $ = 0; $ < t; $++)
            for (var I = 0; I < F; I++) {
                var O = $ * F + I << 2
                    , C = ($ << 1) * l + (I << 1) << 2
                    , j = W[C + 3]
                    , b = W[C + 7]
                    , h = W[C] * j + W[C + 4] * b
                    , _ = W[C + 1] * j + W[C + 5] * b
                    , S = W[C + 2] * j + W[C + 6] * b;
                C += l << 2;
                var J = W[C + 3]
                    , v = W[C + 7];
                h += W[C] * J + W[C + 4] * v;
                _ += W[C + 1] * J + W[C + 5] * v;
                S += W[C + 2] * J + W[C + 6] * v;
                var V = j + b + J + v + 2 >> 2
                    , p = V == 0 ? 0 : .25 / V;
                K[O] = ~~(h * p + .5);
                K[O + 1] = ~~(_ * p + .5);
                K[O + 2] = ~~(S * p + .5);
                K[O + 3] = V
            }
        return K
    }
    function A(W, l, M, F, t, K) {
        return (W - F) * (W - F) + (l - t) * (l - t) + (M - K) * (M - K)
    }
    function af(W) {
        var l = A
            , M = 0
            , F = 0;
        for (var t = 0; t < 64; t += 4) {
            var K = W[t]
                , $ = W[t + 1]
                , I = W[t + 2];
            for (var O = t + 4; O < 64; O += 4) {
                var C = l(K, $, I, W[O], W[O + 1], W[O + 2]);
                if (C > F) {
                    F = C;
                    M = t << 8 | O
                }
            }
        }
        return M
    }
    var aj = new ArrayBuffer(4)
        , N = new Uint8Array(aj)
        , ab = new Uint32Array(aj)
        , am = new Uint16Array(aj)
        , a3 = {
            Y: function (W, l) {
                N[0] = W[l + 0];
                N[1] = W[l + 1];
                return am[0]
            },
            T: function (W, l) {
                N[0] = W[l + 0];
                N[1] = W[l + 1];
                N[2] = W[l + 2];
                N[3] = W[l + 3];
                return ab[0]
            },
            G: function (W, l, M) {
                ab[0] = M;
                W[l + 0] = N[0];
                W[l + 1] = N[1];
                W[l + 2] = N[2];
                W[l + 3] = N[3]
            },
            t: function (W, l, M) {
                var F = "";
                for (var t = 0; t < M; t++)
                    F += String.fromCharCode(W[l + t]);
                return F
            },
            b: function (W, l, M) {
                for (var F = 0; F < M.length; F++)
                    W[l + F] = M.charCodeAt(F)
            }
        };
    return {
        R: aa,
        C: B,
        k: G,
        M: u,
        K: P,
        e: L,
        J: a6,
        P: k,
        n: a,
        o: e,
        X: a3
    }
}();
UTEX.DDS = function () {
    var L = {
        r: 1,
        D: 2,
        h: 4,
        L: 8,
        S: 4096,
        _: 131072,
        N: 524288,
        q: 8388608,
        Q: 1,
        i: 2,
        a: 4,
        I: 64,
        O: 512,
        $: 131072,
        B: 8,
        z: 4194304,
        A: 4096
    };
    function a6(G) {
        var a = new Uint8Array(G), E = 0, D = UTEX.X.t(a, E, 4), Y, c, z;
        E += 4;
        Y = k(a, E);
        E += 124;
        c = Y.Z;
        if (c.u & L.a && c.f == "DX10") {
            z = u(a, E);
            E += 20
        }
        var r = Y.width
            , n = Y.height
            , d = []
            , q = c.f
            , Z = c.w
            , ae = {
                DXT1: "BC1",
                DXT3: "BC2",
                DXT5: "BC3",
                DX10: "BC7",
                ATI2: "BC5"
            };
        if (ae[q])
            q = ae[q];
        if (z) {
            var P = z.V;
            if (70 <= P && P <= 72)
                q = "BC1";
            else if (73 <= P && P <= 75)
                q = "BC2";
            else if (76 <= P && P <= 78)
                q = "BC3";
            else if (97 <= P && P <= 99)
                q = "BC7";
            else
                console.log("Unknown DX10 format", P)
        }
        var a2 = Math.max(1, Y.c);
        for (var X = 0; X < a2; X++) {
            var e = r * n * 4
                , A = new Uint8Array(e);
            if (!1) { } else if (q == "BC1")
                E = UTEX.R(a, E, A, r, n);
            else if (q == "BC2")
                E = UTEX.C(a, E, A, r, n);
            else if (q == "BC3")
                E = UTEX.k(a, E, A, r, n);
            else if (q == "BC5")
                E = UTEX.M(a, E, A, r, n);
            else if (q == "BC7")
                E = UTEX.K(a, E, A, r, n);
            else if (q == "ATC ")
                E = UTEX.e(a, E, A, r, n);
            else if (q == "ATCA")
                E = UTEX.J(a, E, A, r, n);
            else if (q == "ATCI")
                E = UTEX.J(a, E, A, r, n);
            else if (c.u & L.Q && c.u & L.I) {
                var af = c.l
                    , N = 255 / af
                    , ab = c.j
                    , am = 255 / ab
                    , W = c.H
                    , l = 255 / W
                    , M = c.m
                    , F = 255 / M;
                if (Z == 32) {
                    for (var t = 0; t < e; t += 4) {
                        var K = a[E + t + 3] << 24 | a[E + t + 2] << 16 | a[E + t + 1] << 8 | a[E + t];
                        A[t + 0] = (K & af) * N;
                        A[t + 1] = (K & ab) * am;
                        A[t + 2] = (K & W) * l;
                        A[t + 3] = (K & M) * F
                    }
                    E += e
                } else if (Z == 16) {
                    for (var t = 0; t < e; t += 4) {
                        var K = a[E + (t >> 1) + 1] << 8 | a[E + (t >> 1)];
                        A[t + 0] = (K & af) * N;
                        A[t + 1] = (K & ab) * am;
                        A[t + 2] = (K & W) * l;
                        A[t + 3] = (K & M) * F
                    }
                    E += e >>> 1
                } else
                    throw "unknown bit count " + Z
            } else if (c.u & L.i || c.u & L.Q || c.u & L.$) {
                if (Z == 8) {
                    for (var t = 0; t < e; t += 4)
                        A[t + 3] = a[E + (t >> 2)];
                    E += e >>> 2
                } else
                    throw "unknown bit count " + Z
            } else {
                console.log("unknown texture format, head flags: ", Y.u.toString(2), "pixelFormat flags: ", c.u.toString(2));
                throw "e"
            }
            d.push({
                width: r,
                height: n,
                image: A.buffer
            });
            r = r >>> 1;
            n = n >>> 1
        }
        return d
    }
    function aa(G, a, E) {
        var G = new Uint8Array(G)
            , D = 255
            , r = 0
            , n = 0;
        for (var Y = 3; Y < G.length; Y += 4)
            D &= G[Y];
        var c = D < 250
            , z = new Uint8Array(124 + a * E * 2);
        UTEX.X.b(z, r, "DDS ");
        r += 4;
        B(z, a, E, c, r);
        r += 124;
        while (a * E != 0) {
            if (c)
                r = UTEX.n(G, a, E, z, r);
            else
                r = UTEX.P(G, a, E, z, r);
            G = UTEX.o(G, a, E);
            a = a >> 1;
            E = E >> 1;
            n++
        }
        z[28] = n;
        return z.buffer.slice(0, r)
    }
    function k(G, a) {
        var E = {}
            , D = UTEX.X.T;
        a += 4;
        E.u = D(G, a);
        a += 4;
        E.height = D(G, a);
        a += 4;
        E.width = D(G, a);
        a += 4;
        E.pitch = D(G, a);
        a += 4;
        E.depth = D(G, a);
        a += 4;
        E.c = D(G, a);
        a += 4;
        a += 11 * 4;
        E.Z = Q(G, a);
        a += 32;
        E.v = D(G, a);
        a += 4;
        E.g = D(G, a);
        a += 4;
        E.a3 = D(G, a);
        a += 4;
        E.a8 = D(G, a);
        a += 4;
        a += 4;
        return E
    }
    function B(G, a, E, D, Y) {
        var c = UTEX.X.G
            , z = L.r | L.D | L.h | L.S;
        z |= L._ | L.N;
        var r = L.B | L.z | L.A
            , n = (a * E >> 1) * (D ? 2 : 1)
            , d = D ? 1 : 0;
        c(G, Y, 124);
        Y += 4;
        c(G, Y, z);
        Y += 4;
        c(G, Y, E);
        Y += 4;
        c(G, Y, a);
        Y += 4;
        c(G, Y, n);
        Y += 4;
        c(G, Y, d);
        Y += 4;
        c(G, Y, 10);
        Y += 4;
        Y += 11 * 4;
        T(G, D, Y);
        Y += 32;
        c(G, Y, r);
        Y += 4;
        Y += 4 * 4
    }
    function Q(G, a) {
        var E = {}
            , D = UTEX.X.T;
        a += 4;
        E.u = D(G, a);
        a += 4;
        E.f = UTEX.X.t(G, a, 4);
        a += 4;
        E.w = D(G, a);
        a += 4;
        E.l = D(G, a);
        a += 4;
        E.j = D(G, a);
        a += 4;
        E.H = D(G, a);
        a += 4;
        E.m = D(G, a);
        a += 4;
        return E
    }
    function T(G, a, E) {
        var D = UTEX.X.G
            , Y = L.a;
        D(G, E, 32);
        E += 4;
        D(G, E, Y);
        E += 4;
        UTEX.X.b(G, E, a ? "DXT5" : "DXT1");
        E += 4;
        E += 5 * 4
    }
    function u(G, a) {
        var E = {}
            , D = UTEX.X.T;
        E.V = D(G, a);
        a += 4;
        E.a4 = D(G, a);
        a += 4;
        E.a6 = D(G, a);
        a += 4;
        E.a1 = D(G, a);
        a += 4;
        E.a0 = D(G, a);
        a += 4;
        return E
    }
    return {
        encode: aa,
        decode: a6
    }
}();
UTEX.VTF = function () {
    var L = {};
    function a6(k) {
        var B = new Uint8Array(k)
            , Q = 0
            , T = {};
        Q = aa(B, Q, T);
        var u = T.F
            , G = T.d;
        if (u * G != 0) {
            var a = new Uint8Array(u * G * 4);
            Q = UTEX.R(B, Q, a, u, G)
        }
        var E = T.s
            , D = T.p
            , Y = [];
        for (var c = 0; c < D; c++) {
            var z = T.width >>> D - 1 - c
                , r = T.height >>> D - 1 - c;
            for (var n = 0; n < T.frames; n++) {
                var a = new Uint8Array(z * r * 4);
                if (E == 0 || E == 12) {
                    var d = Q
                        , q = E == 0 ? [0, 1, 2, 3] : [2, 1, 0, 3]
                        , Z = q[0]
                        , ae = q[1]
                        , P = q[2]
                        , a2 = q[3];
                    for (var X = 0; X < a.length; X += 4) {
                        a[X + Z] = B[d++];
                        a[X + ae] = B[d++];
                        a[X + P] = B[d++];
                        a[X + a2] = B[d++]
                    }
                    Q += z * r * 4
                } else if (E == 2) {
                    for (var X = 0; X < a.length; X += 4) {
                        a[X] = B[Q++];
                        a[X + 1] = B[Q++];
                        a[X + 2] = B[Q++];
                        a[X + 3] = 255
                    }
                } else if (E == 13)
                    Q = UTEX.R(B, Q, a, z, r);
                else if (E == 14)
                    Q = UTEX.C(B, Q, a, z, r);
                else if (E == 15)
                    Q = UTEX.k(B, Q, a, z, r);
                else
                    throw E;
                Y.push({
                    width: z,
                    height: r,
                    image: a.buffer
                })
            }
        }
        return Y
    }
    function aa(k, B, Q) {
        var T = UTEX.X.T
            , u = UTEX.X.Y
            , G = UTEX.X.t(k, B, 4);
        B += 4;
        var a = T(k, B);
        B += 4;
        var E = T(k, B);
        B += 4;
        var D = T(k, B);
        B += 4;
        Q.width = u(k, B);
        B += 2;
        Q.height = u(k, B);
        B += 2;
        Q.u = T(k, B);
        B += 4;
        Q.frames = u(k, B);
        B += 2;
        Q.a7 = u(k, B);
        B += 2;
        B += 4;
        B += 12;
        B += 4;
        B += 4;
        Q.s = T(k, B);
        B += 4;
        Q.p = k[B++];
        Q.a2 = T(k, B);
        B += 4;
        Q.F = k[B++];
        Q.d = k[B++];
        if (E >= 2) {
            Q.depth = u(k, B);
            B += 2;
            if (E >= 3) {
                B += 3;
                Q.a5 = T(k, B);
                B += 4
            }
        }
        return D
    }
    return {
        decode: a6
    }
}();
(function () {
    var u = {};
    if (typeof module == "object") {
        module.exports = u
    } else {
        self.UTIF = u
    }
    var ay = typeof require === "function" ? require("pako") : self.pako;
    function ap() {
        if (typeof process == "undefined" || process.env.NODE_ENV == "development")
            console.log.apply(console, arguments)
    }
    (function (u, ay) {
        (function () {
            "use strict";
            var K = function f() {
                function K(v) {
                    this.message = "JPEG error: " + v
                }
                K.prototype = new Error;
                K.prototype.name = "JpegError";
                K.constructor = K;
                return K
            }()
                , J = function n() {
                    var v = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63])
                        , q = 4017
                        , N = 799
                        , D = 3406
                        , I = 2276
                        , M = 1567
                        , a = 3784
                        , C = 5793
                        , i = 2896;
                    function J(m) {
                        if (m == null)
                            m = {};
                        if (m.w == null)
                            m.w = -1;
                        this.V = m.n;
                        this.N = m.w
                    }
                    function _(m, t) {
                        var R = 0, H = [], h, U, T = 16, c;
                        while (T > 0 && !m[T - 1]) {
                            T--
                        }
                        H.push({
                            children: [],
                            index: 0
                        });
                        var W = H[0];
                        for (h = 0; h < T; h++) {
                            for (U = 0; U < m[h]; U++) {
                                W = H.pop();
                                W.children[W.index] = t[R];
                                while (W.index > 0) {
                                    W = H.pop()
                                }
                                W.index++;
                                H.push(W);
                                while (H.length <= h) {
                                    H.push(c = {
                                        children: [],
                                        index: 0
                                    });
                                    W.children[W.index] = c.children;
                                    W = c
                                }
                                R++
                            }
                            if (h + 1 < T) {
                                H.push(c = {
                                    children: [],
                                    index: 0
                                });
                                W.children[W.index] = c.children;
                                W = c
                            }
                        }
                        return H[0].children
                    }
                    function G(m, t, R) {
                        return 64 * ((m.P + 1) * t + R)
                    }
                    function e(m, t, R, H, h, U, T, c, W, E) {
                        if (E == null)
                            E = !1;
                        var y = R.m, A = R.Z, r = t, p = 0, Z = 0, P = 0, X = 0, aL, o = 0, O, k, Y, j, a6, aR, av = 0, aJ, b6, b7, aV;
                        function Q() {
                            if (Z > 0) {
                                Z--;
                                return p >> Z & 1
                            }
                            p = m[t++];
                            if (p === 255) {
                                var g = m[t++];
                                if (g) {
                                    if (g === 220 && E) {
                                        t += 2;
                                        var au = d(m, t);
                                        t += 2;
                                        if (au > 0 && au !== R.s) {
                                            throw new DNLMarkerError("Found DNL marker (0xFFDC) while parsing scan data", au)
                                        }
                                    } else if (g === 217) {
                                        if (E) {
                                            var af = o * 8;
                                            if (af > 0 && af < R.s / 10) {
                                                throw new DNLMarkerError("Found EOI marker (0xFFD9) while parsing scan data, " + "possibly caused by incorrect `scanLines` parameter", af)
                                            }
                                        }
                                        throw new EOIMarkerError("Found EOI marker (0xFFD9) while parsing scan data")
                                    }
                                    throw new K("unexpected marker")
                                }
                            }
                            Z = 7;
                            return p >>> 7
                        }
                        function b5(g) {
                            var au = g;
                            while (!0) {
                                au = au[Q()];
                                switch (typeof au) {
                                    case "number":
                                        return au;
                                    case "object":
                                        continue
                                }
                                throw new K("invalid huffman sequence")
                            }
                        }
                        function as(g) {
                            var a6 = 0;
                            while (g > 0) {
                                a6 = a6 << 1 | Q();
                                g--
                            }
                            return a6
                        }
                        function z(g) {
                            if (g === 1) {
                                return Q() === 1 ? 1 : -1
                            }
                            var a6 = as(g);
                            if (a6 >= 1 << g - 1) {
                                return a6
                            }
                            return a6 + (-1 << g) + 1
                        }
                        function b1(O, g) {
                            var au = b5(O.J)
                                , af = au === 0 ? 0 : z(au)
                                , j = 1;
                            O.D[g] = O.Q += af;
                            while (j < 64) {
                                var aO = b5(O.i)
                                    , aT = aO & 15
                                    , a8 = aO >> 4;
                                if (aT === 0) {
                                    if (a8 < 15) {
                                        break
                                    }
                                    j += 16;
                                    continue
                                }
                                j += a8;
                                var ab = v[j];
                                O.D[g + ab] = z(aT);
                                j++
                            }
                        }
                        function al(O, g) {
                            var au = b5(O.J)
                                , af = au === 0 ? 0 : z(au) << W;
                            O.D[g] = O.Q += af
                        }
                        function b4(O, g) {
                            O.D[g] |= Q() << W
                        }
                        function aQ(O, g) {
                            if (P > 0) {
                                P--;
                                return
                            }
                            var j = U
                                , au = T;
                            while (j <= au) {
                                var af = b5(O.i)
                                    , aO = af & 15
                                    , aT = af >> 4;
                                if (aO === 0) {
                                    if (aT < 15) {
                                        P = as(aT) + (1 << aT) - 1;
                                        break
                                    }
                                    j += 16;
                                    continue
                                }
                                j += aT;
                                var a8 = v[j];
                                O.D[g + a8] = z(aO) * (1 << W);
                                j++
                            }
                        }
                        function ac(O, g) {
                            var j = U, au = T, af = 0, aO, aT;
                            while (j <= au) {
                                var a8 = g + v[j]
                                    , ab = O.D[a8] < 0 ? -1 : 1;
                                switch (X) {
                                    case 0:
                                        aT = b5(O.i);
                                        aO = aT & 15;
                                        af = aT >> 4;
                                        if (aO === 0) {
                                            if (af < 15) {
                                                P = as(af) + (1 << af);
                                                X = 4
                                            } else {
                                                af = 16;
                                                X = 1
                                            }
                                        } else {
                                            if (aO !== 1) {
                                                throw new K("invalid ACn encoding")
                                            }
                                            aL = z(aO);
                                            X = af ? 2 : 3
                                        }
                                        continue;
                                    case 1:
                                    case 2:
                                        if (O.D[a8]) {
                                            O.D[a8] += ab * (Q() << W)
                                        } else {
                                            af--;
                                            if (af === 0) {
                                                X = X === 2 ? 3 : 0
                                            }
                                        }
                                        break;
                                    case 3:
                                        if (O.D[a8]) {
                                            O.D[a8] += ab * (Q() << W)
                                        } else {
                                            O.D[a8] = aL << W;
                                            X = 0
                                        }
                                        break;
                                    case 4:
                                        if (O.D[a8]) {
                                            O.D[a8] += ab * (Q() << W)
                                        }
                                        break
                                }
                                j++
                            }
                            if (X === 4) {
                                P--;
                                if (P === 0) {
                                    X = 0
                                }
                            }
                        }
                        function ah(O, g, av, au, af) {
                            var aO = av / y | 0
                                , aT = av % y;
                            o = aO * O.A + au;
                            var a8 = aT * O.h + af
                                , ab = G(O, o, a8);
                            g(O, ab)
                        }
                        function aB(O, g, av) {
                            o = av / O.P | 0;
                            var au = av % O.P
                                , af = G(O, o, au);
                            g(O, af)
                        }
                        var aa = H.length;
                        if (A) {
                            if (U === 0) {
                                aR = c === 0 ? al : b4
                            } else {
                                aR = c === 0 ? aQ : ac
                            }
                        } else {
                            aR = b1
                        }
                        if (aa === 1) {
                            b6 = H[0].P * H[0].c
                        } else {
                            b6 = y * R.R
                        }
                        while (av <= b6) {
                            var aC = h ? Math.min(b6 - av, h) : b6;
                            if (aC > 0) {
                                for (k = 0; k < aa; k++) {
                                    H[k].Q = 0
                                }
                                P = 0;
                                if (aa === 1) {
                                    O = H[0];
                                    for (a6 = 0; a6 < aC; a6++) {
                                        aB(O, aR, av);
                                        av++
                                    }
                                } else {
                                    for (a6 = 0; a6 < aC; a6++) {
                                        for (k = 0; k < aa; k++) {
                                            O = H[k];
                                            b7 = O.h;
                                            aV = O.A;
                                            for (Y = 0; Y < aV; Y++) {
                                                for (j = 0; j < b7; j++) {
                                                    ah(O, aR, av, Y, j)
                                                }
                                            }
                                        }
                                        av++
                                    }
                                }
                            }
                            Z = 0;
                            aJ = l(m, t);
                            if (!aJ) {
                                break
                            }
                            if (aJ.u) {
                                var aq = aC > 0 ? "unexpected" : "excessive";
                                t = aJ.offset
                            }
                            if (aJ.M >= 65488 && aJ.M <= 65495) {
                                t += 2
                            } else {
                                break
                            }
                        }
                        return t - r
                    }
                    function B(m, t, R) {
                        var H = m.$, h = m.D, U, T, c, W, E, y, A, r, p, Z, P, X, aL, o, O, ad, k;
                        if (!H) {
                            throw new K("missing required Quantization Table.")
                        }
                        for (var Y = 0; Y < 64; Y += 8) {
                            p = h[t + Y];
                            Z = h[t + Y + 1];
                            P = h[t + Y + 2];
                            X = h[t + Y + 3];
                            aL = h[t + Y + 4];
                            o = h[t + Y + 5];
                            O = h[t + Y + 6];
                            ad = h[t + Y + 7];
                            p *= H[Y];
                            if ((Z | P | X | aL | o | O | ad) === 0) {
                                k = C * p + 512 >> 10;
                                R[Y] = k;
                                R[Y + 1] = k;
                                R[Y + 2] = k;
                                R[Y + 3] = k;
                                R[Y + 4] = k;
                                R[Y + 5] = k;
                                R[Y + 6] = k;
                                R[Y + 7] = k;
                                continue
                            }
                            Z *= H[Y + 1];
                            P *= H[Y + 2];
                            X *= H[Y + 3];
                            aL *= H[Y + 4];
                            o *= H[Y + 5];
                            O *= H[Y + 6];
                            ad *= H[Y + 7];
                            U = C * p + 128 >> 8;
                            T = C * aL + 128 >> 8;
                            c = P;
                            W = O;
                            E = i * (Z - ad) + 128 >> 8;
                            r = i * (Z + ad) + 128 >> 8;
                            y = X << 4;
                            A = o << 4;
                            U = U + T + 1 >> 1;
                            T = U - T;
                            k = c * a + W * M + 128 >> 8;
                            c = c * M - W * a + 128 >> 8;
                            W = k;
                            E = E + A + 1 >> 1;
                            A = E - A;
                            r = r + y + 1 >> 1;
                            y = r - y;
                            U = U + W + 1 >> 1;
                            W = U - W;
                            T = T + c + 1 >> 1;
                            c = T - c;
                            k = E * I + r * D + 2048 >> 12;
                            E = E * D - r * I + 2048 >> 12;
                            r = k;
                            k = y * N + A * q + 2048 >> 12;
                            y = y * q - A * N + 2048 >> 12;
                            A = k;
                            R[Y] = U + r;
                            R[Y + 7] = U - r;
                            R[Y + 1] = T + A;
                            R[Y + 6] = T - A;
                            R[Y + 2] = c + y;
                            R[Y + 5] = c - y;
                            R[Y + 3] = W + E;
                            R[Y + 4] = W - E
                        }
                        for (var j = 0; j < 8; ++j) {
                            p = R[j];
                            Z = R[j + 8];
                            P = R[j + 16];
                            X = R[j + 24];
                            aL = R[j + 32];
                            o = R[j + 40];
                            O = R[j + 48];
                            ad = R[j + 56];
                            if ((Z | P | X | aL | o | O | ad) === 0) {
                                k = C * p + 8192 >> 14;
                                if (k < -2040) {
                                    k = 0
                                } else if (k >= 2024) {
                                    k = 255
                                } else {
                                    k = k + 2056 >> 4
                                }
                                h[t + j] = k;
                                h[t + j + 8] = k;
                                h[t + j + 16] = k;
                                h[t + j + 24] = k;
                                h[t + j + 32] = k;
                                h[t + j + 40] = k;
                                h[t + j + 48] = k;
                                h[t + j + 56] = k;
                                continue
                            }
                            U = C * p + 2048 >> 12;
                            T = C * aL + 2048 >> 12;
                            c = P;
                            W = O;
                            E = i * (Z - ad) + 2048 >> 12;
                            r = i * (Z + ad) + 2048 >> 12;
                            y = X;
                            A = o;
                            U = (U + T + 1 >> 1) + 4112;
                            T = U - T;
                            k = c * a + W * M + 2048 >> 12;
                            c = c * M - W * a + 2048 >> 12;
                            W = k;
                            E = E + A + 1 >> 1;
                            A = E - A;
                            r = r + y + 1 >> 1;
                            y = r - y;
                            U = U + W + 1 >> 1;
                            W = U - W;
                            T = T + c + 1 >> 1;
                            c = T - c;
                            k = E * I + r * D + 2048 >> 12;
                            E = E * D - r * I + 2048 >> 12;
                            r = k;
                            k = y * N + A * q + 2048 >> 12;
                            y = y * q - A * N + 2048 >> 12;
                            A = k;
                            p = U + r;
                            ad = U - r;
                            Z = T + A;
                            O = T - A;
                            P = c + y;
                            o = c - y;
                            X = W + E;
                            aL = W - E;
                            if (p < 16) {
                                p = 0
                            } else if (p >= 4080) {
                                p = 255
                            } else {
                                p >>= 4
                            }
                            if (Z < 16) {
                                Z = 0
                            } else if (Z >= 4080) {
                                Z = 255
                            } else {
                                Z >>= 4
                            }
                            if (P < 16) {
                                P = 0
                            } else if (P >= 4080) {
                                P = 255
                            } else {
                                P >>= 4
                            }
                            if (X < 16) {
                                X = 0
                            } else if (X >= 4080) {
                                X = 255
                            } else {
                                X >>= 4
                            }
                            if (aL < 16) {
                                aL = 0
                            } else if (aL >= 4080) {
                                aL = 255
                            } else {
                                aL >>= 4
                            }
                            if (o < 16) {
                                o = 0
                            } else if (o >= 4080) {
                                o = 255
                            } else {
                                o >>= 4
                            }
                            if (O < 16) {
                                O = 0
                            } else if (O >= 4080) {
                                O = 255
                            } else {
                                O >>= 4
                            }
                            if (ad < 16) {
                                ad = 0
                            } else if (ad >= 4080) {
                                ad = 255
                            } else {
                                ad >>= 4
                            }
                            h[t + j] = p;
                            h[t + j + 8] = Z;
                            h[t + j + 16] = P;
                            h[t + j + 24] = X;
                            h[t + j + 32] = aL;
                            h[t + j + 40] = o;
                            h[t + j + 48] = O;
                            h[t + j + 56] = ad
                        }
                    }
                    function w(m, t) {
                        var R = t.P
                            , H = t.c
                            , h = new Int16Array(64);
                        for (var U = 0; U < H; U++) {
                            for (var T = 0; T < R; T++) {
                                var c = G(t, U, T);
                                B(t, c, h)
                            }
                        }
                        return t.D
                    }
                    function l(m, t, R) {
                        if (R == null)
                            R = t;
                        var H = m.length - 1
                            , h = R < t ? R : t;
                        if (t >= H) {
                            return null
                        }
                        var U = d(m, t);
                        if (U >= 65472 && U <= 65534) {
                            return {
                                u: null,
                                M: U,
                                offset: t
                            }
                        }
                        var T = d(m, h);
                        while (!(T >= 65472 && T <= 65534)) {
                            if (++h >= H) {
                                return null
                            }
                            T = d(m, h)
                        }
                        return {
                            u: U.toString(16),
                            M: T,
                            offset: h
                        }
                    }
                    J.prototype = {
                        parse(m, t) {
                            if (t == null)
                                t = {};
                            var R = t.F, H = 0, h = null, U = null, T, c, W = 0;
                            function E() {
                                var a8 = d(m, H);
                                H += 2;
                                var ab = H + a8 - 2
                                    , Z = l(m, ab, H);
                                if (Z && Z.u) {
                                    ab = Z.offset
                                }
                                var aY = m.subarray(H, ab);
                                H += aY.length;
                                return aY
                            }
                            function y(T) {
                                var a8 = Math.ceil(T.o / 8 / T.X)
                                    , ab = Math.ceil(T.s / 8 / T.B);
                                for (var P = 0; P < T.W.length; P++) {
                                    aQ = T.W[P];
                                    var aY = Math.ceil(Math.ceil(T.o / 8) * aQ.h / T.X)
                                        , ae = Math.ceil(Math.ceil(T.s / 8) * aQ.A / T.B)
                                        , aF = a8 * aQ.h
                                        , a4 = ab * aQ.A
                                        , a5 = 64 * a4 * (aF + 1);
                                    aQ.D = new Int16Array(a5);
                                    aQ.P = aY;
                                    aQ.c = ae
                                }
                                T.m = a8;
                                T.R = ab
                            }
                            var A = []
                                , r = []
                                , p = []
                                , Z = d(m, H);
                            H += 2;
                            if (Z !== 65496) {
                                throw new K("SOI not found")
                            }
                            Z = d(m, H);
                            H += 2;
                            markerLoop: while (Z !== 65497) {
                                var P, X, aL;
                                switch (Z) {
                                    case 65504:
                                    case 65505:
                                    case 65506:
                                    case 65507:
                                    case 65508:
                                    case 65509:
                                    case 65510:
                                    case 65511:
                                    case 65512:
                                    case 65513:
                                    case 65514:
                                    case 65515:
                                    case 65516:
                                    case 65517:
                                    case 65518:
                                    case 65519:
                                    case 65534:
                                        var o = E();
                                        if (Z === 65504) {
                                            if (o[0] === 74 && o[1] === 70 && o[2] === 73 && o[3] === 70 && o[4] === 0) {
                                                h = {
                                                    version: {
                                                        d: o[5],
                                                        T: o[6]
                                                    },
                                                    K: o[7],
                                                    j: o[8] << 8 | o[9],
                                                    H: o[10] << 8 | o[11],
                                                    S: o[12],
                                                    I: o[13],
                                                    C: o.subarray(14, 14 + 3 * o[12] * o[13])
                                                }
                                            }
                                        }
                                        if (Z === 65518) {
                                            if (o[0] === 65 && o[1] === 100 && o[2] === 111 && o[3] === 98 && o[4] === 101) {
                                                U = {
                                                    version: o[5] << 8 | o[6],
                                                    k: o[7] << 8 | o[8],
                                                    q: o[9] << 8 | o[10],
                                                    a: o[11]
                                                }
                                            }
                                        }
                                        break;
                                    case 65499:
                                        var O = d(m, H), ad;
                                        H += 2;
                                        var k = O + H - 2;
                                        while (H < k) {
                                            var Y = m[H++]
                                                , j = new Uint16Array(64);
                                            if (Y >> 4 === 0) {
                                                for (X = 0; X < 64; X++) {
                                                    ad = v[X];
                                                    j[ad] = m[H++]
                                                }
                                            } else if (Y >> 4 === 1) {
                                                for (X = 0; X < 64; X++) {
                                                    ad = v[X];
                                                    j[ad] = d(m, H);
                                                    H += 2
                                                }
                                            } else {
                                                throw new K("DQT - invalid table spec")
                                            }
                                            A[Y & 15] = j
                                        }
                                        break;
                                    case 65472:
                                    case 65473:
                                    case 65474:
                                        if (T) {
                                            throw new K("Only single frame JPEGs supported")
                                        }
                                        H += 2;
                                        T = {};
                                        T.G = Z === 65473;
                                        T.Z = Z === 65474;
                                        T.precision = m[H++];
                                        var a6 = d(m, H), aR, av = 0, aJ = 0;
                                        H += 2;
                                        T.s = R || a6;
                                        T.o = d(m, H);
                                        H += 2;
                                        T.W = [];
                                        T._ = {};
                                        var b6 = m[H++];
                                        for (P = 0; P < b6; P++) {
                                            aR = m[H];
                                            var b7 = m[H + 1] >> 4
                                                , aV = m[H + 1] & 15;
                                            if (av < b7) {
                                                av = b7
                                            }
                                            if (aJ < aV) {
                                                aJ = aV
                                            }
                                            var Q = m[H + 2];
                                            aL = T.W.push({
                                                h: b7,
                                                A: aV,
                                                L: Q,
                                                $: null
                                            });
                                            T._[aR] = aL - 1;
                                            H += 3
                                        }
                                        T.X = av;
                                        T.B = aJ;
                                        y(T);
                                        break;
                                    case 65476:
                                        var b5 = d(m, H);
                                        H += 2;
                                        for (P = 2; P < b5;) {
                                            var as = m[H++]
                                                , z = new Uint8Array(16)
                                                , b1 = 0;
                                            for (X = 0; X < 16; X++,
                                                H++) {
                                                b1 += z[X] = m[H]
                                            }
                                            var al = new Uint8Array(b1);
                                            for (X = 0; X < b1; X++,
                                                H++) {
                                                al[X] = m[H]
                                            }
                                            P += 17 + b1;
                                            (as >> 4 === 0 ? p : r)[as & 15] = _(z, al)
                                        }
                                        break;
                                    case 65501:
                                        H += 2;
                                        c = d(m, H);
                                        H += 2;
                                        break;
                                    case 65498:
                                        var b4 = ++W === 1 && !R, aQ;
                                        H += 2;
                                        var ac = m[H++]
                                            , ah = [];
                                        for (P = 0; P < ac; P++) {
                                            var aB = m[H++]
                                                , aa = T._[aB];
                                            aQ = T.W[aa];
                                            aQ.index = aB;
                                            var aC = m[H++];
                                            aQ.J = p[aC >> 4];
                                            aQ.i = r[aC & 15];
                                            ah.push(aQ)
                                        }
                                        var aq = m[H++]
                                            , g = m[H++]
                                            , au = m[H++];
                                        try {
                                            var af = e(m, H, T, ah, c, aq, g, au >> 4, au & 15, b4);
                                            H += af
                                        } catch (ex) {
                                            if (ex instanceof DNLMarkerError) {
                                                return this.parse(m, {
                                                    F: ex.s
                                                })
                                            } else if (ex instanceof EOIMarkerError) {
                                                break markerLoop
                                            }
                                            throw ex
                                        }
                                        break;
                                    case 65500:
                                        H += 4;
                                        break;
                                    case 65535:
                                        if (m[H] !== 255) {
                                            H--
                                        }
                                        break;
                                    default:
                                        var aO = l(m, H - 2, H - 3);
                                        if (aO && aO.u) {
                                            H = aO.offset;
                                            break
                                        }
                                        if (H >= m.length - 1) {
                                            break markerLoop
                                        }
                                        throw new K("JpegImage.parse - unknown marker: " + Z.toString(16))
                                }
                                Z = d(m, H);
                                H += 2
                            }
                            this.width = T.o;
                            this.height = T.s;
                            this.g = h;
                            this.b = U;
                            this.W = [];
                            for (P = 0; P < T.W.length; P++) {
                                aQ = T.W[P];
                                var aT = A[aQ.L];
                                if (aT) {
                                    aQ.$ = aT
                                }
                                this.W.push({
                                    index: aQ.index,
                                    e: w(T, aQ),
                                    l: aQ.h / T.X,
                                    t: aQ.A / T.B,
                                    P: aQ.P,
                                    c: aQ.c
                                })
                            }
                            this.p = this.W.length;
                            return undefined
                        },
                        Y(m, t, R) {
                            if (R == null)
                                R = !1;
                            var H = this.width / m, h = this.height / t, U, T, c, W, E, y, A, r, p, Z, P = 0, X, aL = this.W.length, o = m * t * aL, O = new Uint8ClampedArray(o), ad = new Uint32Array(m), k = 4294967288, Y;
                            for (A = 0; A < aL; A++) {
                                U = this.W[A];
                                T = U.l * H;
                                c = U.t * h;
                                P = A;
                                X = U.e;
                                W = U.P + 1 << 3;
                                if (T !== Y) {
                                    for (E = 0; E < m; E++) {
                                        r = 0 | E * T;
                                        ad[E] = (r & k) << 3 | r & 7
                                    }
                                    Y = T
                                }
                                for (y = 0; y < t; y++) {
                                    r = 0 | y * c;
                                    Z = W * (r & k) | (r & 7) << 3;
                                    for (E = 0; E < m; E++) {
                                        O[P] = X[Z + ad[E]];
                                        P += aL
                                    }
                                }
                            }
                            var j = this.V;
                            if (!R && aL === 4 && !j) {
                                j = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255])
                            }
                            if (j) {
                                for (A = 0; A < o;) {
                                    for (r = 0,
                                        p = 0; r < aL; r++,
                                        A++,
                                        p += 2) {
                                        O[A] = (O[A] * j[p] >> 8) + j[p + 1]
                                    }
                                }
                            }
                            return O
                        },
                        get f() {
                            if (this.b) {
                                return !!this.b.a
                            }
                            if (this.p === 3) {
                                if (this.N === 0) {
                                    return !1
                                } else if (this.W[0].index === 82 && this.W[1].index === 71 && this.W[2].index === 66) {
                                    return !1
                                }
                                return !0
                            }
                            if (this.N === 1) {
                                return !0
                            }
                            return !1
                        },
                        z: function aM(m) {
                            var t, R, H;
                            for (var h = 0, U = m.length; h < U; h += 3) {
                                t = m[h];
                                R = m[h + 1];
                                H = m[h + 2];
                                m[h] = t - 179.456 + 1.402 * H;
                                m[h + 1] = t + 135.459 - .344 * R - .714 * H;
                                m[h + 2] = t - 226.816 + 1.772 * R
                            }
                            return m
                        },
                        O: function L(m) {
                            var t, R, H, h, U = 0;
                            for (var T = 0, c = m.length; T < c; T += 4) {
                                t = m[T];
                                R = m[T + 1];
                                H = m[T + 2];
                                h = m[T + 3];
                                m[U++] = -122.67195406894 + R * (-660635669420364e-19 * R + .000437130475926232 * H - 54080610064599e-18 * t + .00048449797120281 * h - .154362151871126) + H * (-.000957964378445773 * H + .000817076911346625 * t - .00477271405408747 * h + 1.53380253221734) + t * (.000961250184130688 * t - .00266257332283933 * h + .48357088451265) + h * (-.000336197177618394 * h + .484791561490776);
                                m[U++] = 107.268039397724 + R * (219927104525741e-19 * R - .000640992018297945 * H + .000659397001245577 * t + .000426105652938837 * h - .176491792462875) + H * (-.000778269941513683 * H + .00130872261408275 * t + .000770482631801132 * h - .151051492775562) + t * (.00126935368114843 * t - .00265090189010898 * h + .25802910206845) + h * (-.000318913117588328 * h - .213742400323665);
                                m[U++] = -20.810012546947 + R * (-.000570115196973677 * R - 263409051004589e-19 * H + .0020741088115012 * t - .00288260236853442 * h + .814272968359295) + H * (-153496057440975e-19 * H - .000132689043961446 * t + .000560833691242812 * h - .195152027534049) + t * (.00174418132927582 * t - .00255243321439347 * h + .116935020465145) + h * (-.000343531996510555 * h + .24165260232407)
                            }
                            return m.subarray(0, U)
                        },
                        r: function aK(m) {
                            var t, R, H;
                            for (var h = 0, U = m.length; h < U; h += 4) {
                                t = m[h];
                                R = m[h + 1];
                                H = m[h + 2];
                                m[h] = 434.456 - t - 1.402 * H;
                                m[h + 1] = 119.541 - t + .344 * R + .714 * H;
                                m[h + 2] = 481.816 - t - 1.772 * R
                            }
                            return m
                        },
                        U: function b(m) {
                            var t, R, H, h, U = 0;
                            for (var T = 0, c = m.length; T < c; T += 4) {
                                t = m[T];
                                R = m[T + 1];
                                H = m[T + 2];
                                h = m[T + 3];
                                m[U++] = 255 + t * (-6747147073602441e-20 * t + .0008379262121013727 * R + .0002894718188643294 * H + .003264231057537806 * h - 1.1185611867203937) + R * (26374107616089404e-21 * R - 8626949158638572e-20 * H - .0002748769067499491 * h - .02155688794978967) + H * (-3878099212869363e-20 * H - .0003267808279485286 * h + .0686742238595345) - h * (.0003361971776183937 * h + .7430659151342254);
                                m[U++] = 255 + t * (.00013596372813588848 * t + .000924537132573585 * R + .00010567359618683593 * H + .0004791864687436512 * h - .3109689587515875) + R * (-.00023545346108370344 * R + .0002702845253534714 * H + .0020200308977307156 * h - .7488052167015494) + H * (6834815998235662e-20 * H + .00015168452363460973 * h - .09751927774728933) - h * (.0003189131175883281 * h + .7364883807733168);
                                m[U++] = 255 + t * (13598650411385308e-21 * t + .00012423956175490851 * R + .0004751985097583589 * H - 36729317476630424e-22 * h - .05562186980264034) + R * (.00016141380598724676 * R + .0009692239130725186 * H + .0007782692450036253 * h - .44015232367526463) + H * (5.068882914068769e-7 * H + .0017778369011375071 * h - .7591454649749609) - h * (.0003435319965105553 * h + .7063770186160144)
                            }
                            return m.subarray(0, U)
                        },
                        getData: function (m) {
                            var t = m.width
                                , R = m.height
                                , H = m.forceRGB
                                , h = m.isSourcePDF;
                            if (this.p > 4) {
                                throw new K("Unsupported color mode")
                            }
                            var U = this.Y(t, R, h);
                            if (this.p === 1 && H) {
                                var T = U.length
                                    , c = new Uint8ClampedArray(T * 3)
                                    , W = 0;
                                for (var E = 0; E < T; E++) {
                                    var y = U[E];
                                    c[W++] = y;
                                    c[W++] = y;
                                    c[W++] = y
                                }
                                return c
                            } else if (this.p === 3 && this.f) {
                                return this.z(U)
                            } else if (this.p === 4) {
                                if (this.f) {
                                    if (H) {
                                        return this.O(U)
                                    }
                                    return this.r(U)
                                } else if (H) {
                                    return this.U(U)
                                }
                            }
                            return U
                        }
                    };
                    return J
                }();
            function S(v, q) {
                return v[q] << 24 >> 24
            }
            function d(v, q) {
                return v[q] << 8 | v[q + 1]
            }
            function x(v, q) {
                return (v[q] << 24 | v[q + 1] << 16 | v[q + 2] << 8 | v[q + 3]) >>> 0
            }
            u.JpegDecoder = J
        }());
        u.encodeImage = function (K, J, f, n) {
            var d = {
                t256: [J],
                t257: [f],
                t258: [8, 8, 8, 8],
                t259: [1],
                t262: [2],
                t273: [1e3],
                t277: [4],
                t278: [f],
                t279: [J * f * 4],
                t282: [[72, 1]],
                t283: [[72, 1]],
                t284: [1],
                t286: [[0, 1]],
                t287: [[0, 1]],
                t296: [1],
                t305: ["Photopea (UTIF.js)"],
                t338: [1]
            };
            if (n)
                for (var x in n)
                    d[x] = n[x];
            var v = new Uint8Array(u.encode([d]))
                , q = new Uint8Array(K)
                , N = new Uint8Array(1e3 + J * f * 4);
            for (var x = 0; x < v.length; x++)
                N[x] = v[x];
            for (var x = 0; x < q.length; x++)
                N[1e3 + x] = q[x];
            return N.buffer
        }
            ;
        u.encode = function (K) {
            var J = !1
                , f = new Uint8Array(2e4)
                , n = 4
                , S = J ? u._binLE : u._binBE
                , d = 8;
            f[0] = f[1] = J ? 73 : 77;
            S.writeUshort(f, 2, 42);
            S.writeUint(f, n, d);
            n += 4;
            for (var x = 0; x < K.length; x++) {
                var v = u._writeIFD(S, u._types.basic, f, d, K[x]);
                d = v[1];
                if (x < K.length - 1) {
                    if ((d & 3) != 0)
                        d += 4 - (d & 3);
                    S.writeUint(f, v[0], d)
                }
            }
            return f.slice(0, d).buffer
        }
            ;
        u.decode = function (K, J) {
            if (J == null)
                J = {
                    parseMN: !0,
                    debug: !1
                };
            var f = new Uint8Array(K)
                , n = 0
                , S = u._binBE.readASCII(f, n, 2);
            n += 2;
            var d = S == "II" ? u._binLE : u._binBE
                , x = d.readUshort(f, n);
            n += 2;
            var v = d.readUint(f, n);
            n += 4;
            var q = [];
            while (!0) {
                var N = d.readUshort(f, v)
                    , D = d.readUshort(f, v + 4);
                if (N != 0)
                    if (D < 1 || 13 < D) {
                        ap("error in TIFF");
                        break
                    }
                u._readIFD(d, f, v, q, 0, J);
                v = d.readUint(f, v + 2 + N * 12);
                if (v == 0)
                    break
            }
            return q
        }
            ;
        u.decodeImage = function (K, J, f) {
            if (J.data)
                return;
            var n = new Uint8Array(K), S = u._binBE.readASCII(n, 0, 2), v, s = 0;
            if (J.t256 == null)
                return;
            J.isLE = S == "II";
            J.width = J.t256[0];
            J.height = J.t257[0];
            var d = J.t259 ? J.t259[0] : 1
                , x = J.t266 ? J.t266[0] : 1;
            if (J.t284 && J.t284[0] == 2)
                ap("PlanarConfiguration 2 should not be used!");
            if (J.t258)
                v = Math.min(32, J.t258[0]) * J.t258.length;
            else
                v = J.t277 ? J.t277[0] : 1;
            if (d == 1 && J.t279 != null && J.t278 && J.t262[0] == 32803) {
                v = Math.round(J.t279[0] * 8 / (J.width * J.t278[0]))
            }
            var q = Math.ceil(J.width * v / 8) * 8
                , N = J.t273;
            if (N == null)
                N = J.t324;
            var D = J.t279;
            if (d == 1 && N.length == 1)
                D = [J.height * (q >>> 3)];
            if (D == null)
                D = J.t325;
            var I = new Uint8Array(J.height * (q >>> 3));
            if (J.t322 != null) {
                var M = J.t322[0]
                    , a = J.t323[0]
                    , C = Math.floor((J.width + M - 1) / M)
                    , F = Math.floor((J.height + a - 1) / a)
                    , i = new Uint8Array(Math.ceil(M * a * v / 8) | 0);
                for (var _ = 0; _ < F; _++)
                    for (var G = 0; G < C; G++) {
                        var w = _ * C + G;
                        for (var l = 0; l < i.length; l++)
                            i[l] = 0;
                        u.decode._decompress(J, f, n, N[w], D[w], d, i, 0, x);
                        if (d == 6)
                            I = i;
                        else
                            u._copyTile(i, Math.ceil(M * v / 8) | 0, a, I, Math.ceil(J.width * v / 8) | 0, J.height, Math.ceil(G * M * v / 8) | 0, _ * a)
                    }
                s = I.length * 8
            } else {
                var aM = J.t278 ? J.t278[0] : J.height;
                aM = Math.min(aM, J.height);
                for (var w = 0; w < N.length; w++) {
                    u.decode._decompress(J, f, n, N[w], D[w], d, I, Math.ceil(s / 8) | 0, x);
                    s += q * aM
                }
                s = Math.min(s, I.length * 8)
            }
            J.data = new Uint8Array(I.buffer, 0, Math.ceil(s / 8) | 0)
        }
            ;
        u.decode._decompress = function (K, J, f, n, S, d, x, v, q) {
            if (!1) { } else if (d == 1)
                for (var N = 0; N < S; N++)
                    x[v + N] = f[n + N];
            else if (d == 3)
                u.decode._decodeG3(f, n, S, x, v, K.width, q, K.t292 ? (K.t292[0] & 1) == 1 : !1);
            else if (d == 4)
                u.decode._decodeG4(f, n, S, x, v, K.width, q);
            else if (d == 5)
                u.decode._decodeLZW(f, n, S, x, v, 8);
            else if (d == 6)
                u.decode._decodeOldJPEG(K, f, n, S, x, v);
            else if (d == 7 || d == 34892)
                u.decode._decodeNewJPEG(K, f, n, S, x, v);
            else if (d == 8 || d == 32946) {
                var D = new Uint8Array(f.buffer, n, S)
                    , I = ay.inflate(D);
                for (var s = 0; s < I.length; s++)
                    x[v + s] = I[s]
            } else if (d == 9)
                u.decode._decodeVC5(f, n, S, x, v);
            else if (d == 32767)
                u.decode._decodeARW(K, f, n, S, x, v);
            else if (d == 32773)
                u.decode._decodePackBits(f, n, S, x, v);
            else if (d == 32809)
                u.decode._decodeThunder(f, n, S, x, v);
            else if (d == 34713)
                u.decode._decodeNikon(K, J, f, n, S, x, v);
            else
                ap("Unknown compression", d);
            var M = K.t258 ? Math.min(32, K.t258[0]) : 1
                , a = K.t277 ? K.t277[0] : 1
                , C = M * a >>> 3
                , F = K.t278 ? K.t278[0] : K.height
                , i = Math.ceil(M * a * K.width / 8);
            if (M == 16 && !K.isLE && K.t33422 == null)
                for (var _ = 0; _ < F; _++) {
                    var G = v + _ * i;
                    for (var e = 1; e < i; e += 2) {
                        var w = x[G + e];
                        x[G + e] = x[G + e - 1];
                        x[G + e - 1] = w
                    }
                }
            if (K.t317 && K.t317[0] == 2) {
                for (var _ = 0; _ < F; _++) {
                    var l = v + _ * i;
                    if (M == 16)
                        for (var N = C; N < i; N += 2) {
                            var aM = (x[l + N + 1] << 8 | x[l + N]) + (x[l + N - C + 1] << 8 | x[l + N - C]);
                            x[l + N] = aM & 255;
                            x[l + N + 1] = aM >>> 8 & 255
                        }
                    else if (a == 3)
                        for (var N = 3; N < i; N += 3) {
                            x[l + N] = x[l + N] + x[l + N - 3] & 255;
                            x[l + N + 1] = x[l + N + 1] + x[l + N - 2] & 255;
                            x[l + N + 2] = x[l + N + 2] + x[l + N - 1] & 255
                        }
                    else
                        for (var N = C; N < i; N++)
                            x[l + N] = x[l + N] + x[l + N - C] & 255
                }
            }
        }
            ;
        u.decode._decodeVC5 = u.decode._decodeVC5 = function () {
            var K = [1, 0, 1, 0, 2, 2, 1, 1, 3, 7, 1, 2, 5, 25, 1, 3, 6, 48, 1, 4, 6, 54, 1, 5, 7, 111, 1, 8, 7, 99, 1, 6, 7, 105, 12, 0, 7, 107, 1, 7, 8, 209, 20, 0, 8, 212, 1, 9, 8, 220, 1, 10, 9, 393, 1, 11, 9, 394, 32, 0, 9, 416, 1, 12, 9, 427, 1, 13, 10, 887, 1, 18, 10, 784, 1, 14, 10, 790, 1, 15, 10, 835, 60, 0, 10, 852, 1, 16, 10, 885, 1, 17, 11, 1571, 1, 19, 11, 1668, 1, 20, 11, 1669, 100, 0, 11, 1707, 1, 21, 11, 1772, 1, 22, 12, 3547, 1, 29, 12, 3164, 1, 24, 12, 3166, 1, 25, 12, 3140, 1, 23, 12, 3413, 1, 26, 12, 3537, 1, 27, 12, 3539, 1, 28, 13, 7093, 1, 35, 13, 6283, 1, 30, 13, 6331, 1, 31, 13, 6335, 180, 0, 13, 6824, 1, 32, 13, 7072, 1, 33, 13, 7077, 320, 0, 13, 7076, 1, 34, 14, 12565, 1, 36, 14, 12661, 1, 37, 14, 12669, 1, 38, 14, 13651, 1, 39, 14, 14184, 1, 40, 15, 28295, 1, 46, 15, 28371, 1, 47, 15, 25320, 1, 42, 15, 25336, 1, 43, 15, 25128, 1, 41, 15, 27300, 1, 44, 15, 28293, 1, 45, 16, 50259, 1, 48, 16, 50643, 1, 49, 16, 50675, 1, 50, 16, 56740, 1, 53, 16, 56584, 1, 51, 16, 56588, 1, 52, 17, 113483, 1, 61, 17, 113482, 1, 60, 17, 101285, 1, 55, 17, 101349, 1, 56, 17, 109205, 1, 57, 17, 109207, 1, 58, 17, 100516, 1, 54, 17, 113171, 1, 59, 18, 202568, 1, 62, 18, 202696, 1, 63, 18, 218408, 1, 64, 18, 218412, 1, 65, 18, 226340, 1, 66, 18, 226356, 1, 67, 18, 226358, 1, 68, 19, 402068, 1, 69, 19, 405138, 1, 70, 19, 405394, 1, 71, 19, 436818, 1, 72, 19, 436826, 1, 73, 19, 452714, 1, 75, 19, 452718, 1, 76, 19, 452682, 1, 74, 20, 804138, 1, 77, 20, 810279, 1, 78, 20, 810790, 1, 79, 20, 873638, 1, 80, 20, 873654, 1, 81, 20, 905366, 1, 82, 20, 905430, 1, 83, 20, 905438, 1, 84, 21, 1608278, 1, 85, 21, 1620557, 1, 86, 21, 1621582, 1, 87, 21, 1621583, 1, 88, 21, 1747310, 1, 89, 21, 1810734, 1, 90, 21, 1810735, 1, 91, 21, 1810863, 1, 92, 21, 1810879, 1, 93, 22, 3621725, 1, 99, 22, 3621757, 1, 100, 22, 3241112, 1, 94, 22, 3494556, 1, 95, 22, 3494557, 1, 96, 22, 3494622, 1, 97, 22, 3494623, 1, 98, 23, 6482227, 1, 102, 23, 6433117, 1, 101, 23, 6989117, 1, 103, 23, 6989119, 1, 105, 23, 6989118, 1, 104, 23, 7243449, 1, 106, 23, 7243512, 1, 107, 24, 13978233, 1, 111, 24, 12964453, 1, 109, 24, 12866232, 1, 108, 24, 14486897, 1, 113, 24, 13978232, 1, 110, 24, 14486896, 1, 112, 24, 14487026, 1, 114, 24, 14487027, 1, 115, 25, 25732598, 1, 225, 25, 25732597, 1, 189, 25, 25732596, 1, 188, 25, 25732595, 1, 203, 25, 25732594, 1, 202, 25, 25732593, 1, 197, 25, 25732592, 1, 207, 25, 25732591, 1, 169, 25, 25732590, 1, 223, 25, 25732589, 1, 159, 25, 25732522, 1, 235, 25, 25732579, 1, 152, 25, 25732575, 1, 192, 25, 25732489, 1, 179, 25, 25732573, 1, 201, 25, 25732472, 1, 172, 25, 25732576, 1, 149, 25, 25732488, 1, 178, 25, 25732566, 1, 120, 25, 25732571, 1, 219, 25, 25732577, 1, 150, 25, 25732487, 1, 127, 25, 25732506, 1, 211, 25, 25732548, 1, 125, 25, 25732588, 1, 158, 25, 25732486, 1, 247, 25, 25732467, 1, 238, 25, 25732508, 1, 163, 25, 25732552, 1, 228, 25, 25732603, 1, 183, 25, 25732513, 1, 217, 25, 25732587, 1, 168, 25, 25732520, 1, 122, 25, 25732484, 1, 128, 25, 25732562, 1, 249, 25, 25732505, 1, 187, 25, 25732504, 1, 186, 25, 25732483, 1, 136, 25, 25928905, 1, 181, 25, 25732560, 1, 255, 25, 25732500, 1, 230, 25, 25732482, 1, 135, 25, 25732555, 1, 233, 25, 25732568, 1, 222, 25, 25732583, 1, 145, 25, 25732481, 1, 134, 25, 25732586, 1, 167, 25, 25732521, 1, 248, 25, 25732518, 1, 209, 25, 25732480, 1, 243, 25, 25732512, 1, 216, 25, 25732509, 1, 164, 25, 25732547, 1, 140, 25, 25732479, 1, 157, 25, 25732544, 1, 239, 25, 25732574, 1, 191, 25, 25732564, 1, 251, 25, 25732478, 1, 156, 25, 25732546, 1, 139, 25, 25732498, 1, 242, 25, 25732557, 1, 133, 25, 25732477, 1, 162, 25, 25732515, 1, 213, 25, 25732584, 1, 165, 25, 25732514, 1, 212, 25, 25732476, 1, 227, 25, 25732494, 1, 198, 25, 25732531, 1, 236, 25, 25732530, 1, 234, 25, 25732529, 1, 117, 25, 25732528, 1, 215, 25, 25732527, 1, 124, 25, 25732526, 1, 123, 25, 25732525, 1, 254, 25, 25732524, 1, 253, 25, 25732523, 1, 148, 25, 25732570, 1, 218, 25, 25732580, 1, 146, 25, 25732581, 1, 147, 25, 25732569, 1, 224, 25, 25732533, 1, 143, 25, 25732540, 1, 184, 25, 25732541, 1, 185, 25, 25732585, 1, 166, 25, 25732556, 1, 132, 25, 25732485, 1, 129, 25, 25732563, 1, 250, 25, 25732578, 1, 151, 25, 25732501, 1, 119, 25, 25732502, 1, 193, 25, 25732536, 1, 176, 25, 25732496, 1, 245, 25, 25732553, 1, 229, 25, 25732516, 1, 206, 25, 25732582, 1, 144, 25, 25732517, 1, 208, 25, 25732558, 1, 137, 25, 25732543, 1, 241, 25, 25732466, 1, 237, 25, 25732507, 1, 190, 25, 25732542, 1, 240, 25, 25732551, 1, 131, 25, 25732554, 1, 232, 25, 25732565, 1, 252, 25, 25732475, 1, 171, 25, 25732493, 1, 205, 25, 25732492, 1, 204, 25, 25732491, 1, 118, 25, 25732490, 1, 214, 25, 25928904, 1, 180, 25, 25732549, 1, 126, 25, 25732602, 1, 182, 25, 25732539, 1, 175, 25, 25732545, 1, 141, 25, 25732559, 1, 138, 25, 25732537, 1, 177, 25, 25732534, 1, 153, 25, 25732503, 1, 194, 25, 25732606, 1, 160, 25, 25732567, 1, 121, 25, 25732538, 1, 174, 25, 25732497, 1, 246, 25, 25732550, 1, 130, 25, 25732572, 1, 200, 25, 25732474, 1, 170, 25, 25732511, 1, 221, 25, 25732601, 1, 196, 25, 25732532, 1, 142, 25, 25732519, 1, 210, 25, 25732495, 1, 199, 25, 25732605, 1, 155, 25, 25732535, 1, 154, 25, 25732499, 1, 244, 25, 25732510, 1, 220, 25, 25732600, 1, 195, 25, 25732607, 1, 161, 25, 25732604, 1, 231, 25, 25732473, 1, 173, 25, 25732599, 1, 226, 26, 51465122, 1, 116, 26, 51465123, 0, 1], f, n, S, d = [3, 3, 3, 3, 2, 2, 2, 1, 1, 1], x = 24576, v = 16384, q = 8192, N = v | q;
            function D(B) {
                var w = B[1]
                    , L = B[0][w >>> 3] >>> 7 - (w & 7) & 1;
                B[1]++;
                return L
            }
            function I(B, w) {
                if (f == null) {
                    f = {};
                    for (var L = 0; L < K.length; L += 4)
                        f[K[L + 1]] = K.slice(L, L + 4)
                }
                var b = D(B)
                    , m = f[b];
                while (m == null) {
                    b = b << 1 | D(B);
                    m = f[b]
                }
                var t = m[3];
                if (t != 0)
                    t = D(B) == 0 ? t : -t;
                w[0] = m[2];
                w[1] = t
            }
            function s(B, w) {
                for (var L = 0; L < w; L++) {
                    if ((B & 1) == 1)
                        B++;
                    B = B >>> 1
                }
                return B
            }
            function M(B, w) {
                return B >> w
            }
            function a(B, w, L, b, m, t) {
                w[L] = M(M(11 * B[m] - 4 * B[m + t] + B[m + t + t] + 4, 3) + B[b], 1);
                w[L + t] = M(M(5 * B[m] + 4 * B[m + t] - B[m + t + t] + 4, 3) - B[b], 1)
            }
            function C(B, w, L, b, m, t) {
                var H = B[m - t] - B[m + t]
                    , h = B[m]
                    , c = B[b];
                w[L] = M(M(H + 4, 3) + h + c, 1);
                w[L + t] = M(M(-H + 4, 3) + h - c, 1)
            }
            function F(B, w, L, b, m, t) {
                w[L] = M(M(5 * B[m] + 4 * B[m - t] - B[m - t - t] + 4, 3) + B[b], 1);
                w[L + t] = M(M(11 * B[m] - 4 * B[m - t] + B[m - t - t] + 4, 3) - B[b], 1)
            }
            function _(B) {
                B = B < 0 ? 0 : B > 4095 ? 4095 : B;
                B = S[B] >>> 2;
                return B
            }
            function G(B, w, L, b, m) {
                b = new Uint16Array(b.buffer);
                var t = Date.now(), H = u._binBE, h = w + L, c, A, $, p, a2, P, b3, X, aL, a9, a_, aw, o, aH, O, aS, aW, b0;
                w += 4;
                while (w < h) {
                    var aU = H.readShort(B, w)
                        , Y = H.readUshort(B, w + 2);
                    w += 4;
                    if (aU == 12)
                        c = Y;
                    else if (aU == 20)
                        A = Y;
                    else if (aU == 21)
                        $ = Y;
                    else if (aU == 48)
                        p = Y;
                    else if (aU == 53)
                        a2 = Y;
                    else if (aU == 35)
                        P = Y;
                    else if (aU == 62)
                        b3 = Y;
                    else if (aU == 101)
                        X = Y;
                    else if (aU == 109)
                        aL = Y;
                    else if (aU == 84)
                        a9 = Y;
                    else if (aU == 106)
                        a_ = Y;
                    else if (aU == 107)
                        aw = Y;
                    else if (aU == 108)
                        o = Y;
                    else if (aU == 102)
                        aH = Y;
                    else if (aU == 104)
                        O = Y;
                    else if (aU == 105)
                        aS = Y;
                    else {
                        var j = aU < 0 ? -aU : aU
                            , at = j & 65280
                            , aN = 0;
                        if (j & N) {
                            if (j & q) {
                                aN = Y & 65535;
                                aN += (j & 255) << 16
                            } else {
                                aN = Y & 65535
                            }
                        }
                        if ((j & x) == x) {
                            if (aW == null) {
                                aW = [];
                                for (var ak = 0; ak < 4; ak++)
                                    aW[ak] = new Int16Array((A >>> 1) * ($ >>> 1));
                                b0 = new Int16Array((A >>> 1) * ($ >>> 1));
                                n = new Int16Array(1024);
                                for (var ak = 0; ak < 1024; ak++) {
                                    var an = ak - 512
                                        , b8 = Math.abs(an)
                                        , c = Math.floor(768 * b8 * b8 * b8 / (255 * 255 * 255)) + b8;
                                    n[ak] = Math.sign(an) * c
                                }
                                S = new Uint16Array(4096);
                                var a6 = (1 << 16) - 1;
                                for (var ak = 0; ak < 4096; ak++) {
                                    var aR = ak
                                        , aZ = a6 * (Math.pow(113, aR / 4095) - 1) / 112;
                                    S[ak] = Math.min(aZ, a6)
                                }
                            }
                            var b2 = aW[b3]
                                , av = s(A, 1 + d[p])
                                , b6 = s($, 1 + d[p]);
                            if (p == 0) {
                                for (var Q = 0; Q < b6; Q++)
                                    for (var z = 0; z < av; z++) {
                                        var b1 = w + (Q * av + z) * 2;
                                        b2[Q * (A >>> 1) + z] = B[b1] << 8 | B[b1 + 1]
                                    }
                            } else {
                                var al = [B, w * 8]
                                    , b4 = []
                                    , ac = 0
                                    , ah = av * b6
                                    , aB = [0, 0]
                                    , aa = 0
                                    , Y = 0;
                                while (ac < ah) {
                                    I(al, aB);
                                    aa = aB[0];
                                    Y = aB[1];
                                    while (aa > 0) {
                                        b4[ac++] = Y;
                                        aa--
                                    }
                                }
                                var aC = (p - 1) % 3
                                    , aq = aC != 1 ? av : 0
                                    , g = aC != 0 ? b6 : 0;
                                for (var Q = 0; Q < b6; Q++) {
                                    var au = (Q + g) * (A >>> 1) + aq
                                        , af = Q * av;
                                    for (var z = 0; z < av; z++)
                                        b2[au + z] = n[b4[af + z] + 512] * a2
                                }
                                if (aC == 2) {
                                    var O = A >>> 1
                                        , aO = av * 2
                                        , aT = b6 * 2;
                                    for (var Q = 0; Q < b6; Q++) {
                                        for (var z = 0; z < aO; z++) {
                                            var ak = Q * 2 * O + z
                                                , a8 = Q * O + z
                                                , ab = b6 * O + a8;
                                            if (Q == 0)
                                                a(b2, b0, ak, ab, a8, O);
                                            else if (Q == b6 - 1)
                                                F(b2, b0, ak, ab, a8, O);
                                            else
                                                C(b2, b0, ak, ab, a8, O)
                                        }
                                    }
                                    var aY = b2;
                                    b2 = b0;
                                    b0 = aY;
                                    for (var Q = 0; Q < aT; Q++) {
                                        for (var z = 0; z < av; z++) {
                                            var ak = Q * O + 2 * z
                                                , a8 = Q * O + z
                                                , ab = av + a8;
                                            if (z == 0)
                                                a(b2, b0, ak, ab, a8, 1);
                                            else if (z == av - 1)
                                                F(b2, b0, ak, ab, a8, 1);
                                            else
                                                C(b2, b0, ak, ab, a8, 1)
                                        }
                                    }
                                    var aY = b2;
                                    b2 = b0;
                                    b0 = aY;
                                    var ae = []
                                        , aF = 2 - ~~((p - 1) / 3);
                                    for (var a4 = 0; a4 < 3; a4++)
                                        ae[a4] = aL >> 14 - a4 * 2 & 3;
                                    var a5 = ae[aF];
                                    if (a5 != 0)
                                        for (var Q = 0; Q < aT; Q++)
                                            for (var z = 0; z < aO; z++) {
                                                var ak = Q * O + z;
                                                b2[ak] = b2[ak] << a5
                                            }
                                }
                            }
                            if (p == 9 && b3 == 3) {
                                var aX = aW[0]
                                    , aD = aW[1]
                                    , aG = aW[2]
                                    , a3 = aW[3];
                                for (var Q = 0; Q < $; Q += 2)
                                    for (var z = 0; z < A; z += 2) {
                                        var aE = Q * A + z
                                            , b1 = (Q >>> 1) * (A >>> 1) + (z >>> 1)
                                            , ax = aX[b1]
                                            , ar = aD[b1] - 2048
                                            , aP = aG[b1] - 2048
                                            , ag = a3[b1] - 2048
                                            , aI = (ar << 1) + ax
                                            , az = (aP << 1) + ax
                                            , a1 = ax + ag
                                            , aA = ax - ag;
                                        b[aE] = _(aI);
                                        b[aE + 1] = _(a1);
                                        b[aE + A] = _(aA);
                                        b[aE + A + 1] = _(az)
                                    }
                            }
                            w += aN * 4
                        } else if (j == 16388) {
                            w += aN * 4
                        } else if (at == 8192 || at == 8448 || at == 9216) { } else
                            throw j.toString(16)
                    }
                }
                console.log(Date.now() - t)
            }
            return G
        }();
        u.decode._ljpeg_diff = function (K, J, f) {
            var n = u.decode._getbithuff, S, d;
            S = n(K, J, f[0], f);
            d = n(K, J, S, 0);
            if ((d & 1 << S - 1) == 0)
                d -= (1 << S) - 1;
            return d
        }
            ;
        u.decode._decodeARW = function (K, J, f, n, S, d) {
            var x = K.t256[0], v = K.t257[0], q = K.t258[0], N = K.isLE ? u._binLE : u._binBE, D = x * v == n || x * v * 1.5 == n, _, i, b, m, t, R, H, h, U, a, T;
            if (!D) {
                v += 8;
                var I = [f, 0, 0, 0], s = new Uint16Array(32770), M = [3857, 3856, 3599, 3342, 3085, 2828, 2571, 2314, 2057, 1800, 1543, 1286, 1029, 772, 771, 768, 514, 513], a, C, F, i, _, G = 0, e = u.decode._ljpeg_diff;
                s[0] = 15;
                for (F = a = 0; a < 18; a++) {
                    var B = 32768 >>> (M[a] >>> 8);
                    for (var C = 0; C < B; C++)
                        s[++F] = M[a]
                }
                for (i = x; i--;)
                    for (_ = 0; _ < v + 1; _ += 2) {
                        if (_ == v)
                            _ = 1;
                        G += e(J, I, s);
                        if (_ < v) {
                            var w = G & 4095;
                            u.decode._putsF(S, (_ * x + i) * q, w << 16 - q)
                        }
                    }
                return
            }
            if (x * v * 1.5 == n) {
                for (var a = 0; a < n; a += 3) {
                    var l = J[f + a + 0]
                        , aM = J[f + a + 1]
                        , L = J[f + a + 2];
                    S[d + a] = aM << 4 | l >>> 4;
                    S[d + a + 1] = l << 4 | L >>> 4;
                    S[d + a + 2] = L << 4 | aM >>> 4
                }
                return
            }
            var aK = new Uint16Array(16)
                , c = new Uint8Array(x + 1);
            for (_ = 0; _ < v; _++) {
                for (var W = 0; W < x; W++)
                    c[W] = J[f++];
                for (T = 0,
                    i = 0; i < x - 30; T += 16) {
                    m = 2047 & (b = N.readUint(c, T));
                    t = 2047 & b >>> 11;
                    R = 15 & b >>> 22;
                    H = 15 & b >>> 26;
                    for (h = 0; h < 4 && 128 << h <= m - t; h++)
                        ;
                    for (U = 30,
                        a = 0; a < 16; a++)
                        if (a == R)
                            aK[a] = m;
                        else if (a == H)
                            aK[a] = t;
                        else {
                            aK[a] = ((N.readUshort(c, T + (U >> 3)) >>> (U & 7) & 127) << h) + t;
                            if (aK[a] > 2047)
                                aK[a] = 2047;
                            U += 7
                        }
                    for (a = 0; a < 16; a++,
                        i += 2) {
                        var w = aK[a] << 1;
                        u.decode._putsF(S, (_ * x + i) * q, w << 16 - q)
                    }
                    i -= i & 1 ? 1 : 31
                }
            }
        }
            ;
        u.decode._decodeNikon = function (K, J, f, n, S, d, x) {
            var v = [[0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 4, 3, 6, 2, 7, 1, 0, 8, 9, 11, 10, 12], [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 57, 90, 56, 39, 22, 5, 4, 3, 2, 1, 0, 11, 12, 12], [0, 0, 1, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 6, 3, 7, 2, 8, 1, 9, 0, 10, 11, 12], [0, 0, 1, 4, 3, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 5, 6, 4, 7, 8, 3, 9, 2, 1, 0, 10, 11, 12, 13, 14], [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 8, 92, 75, 58, 41, 7, 6, 5, 4, 3, 2, 1, 0, 13, 14], [0, 0, 1, 4, 2, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 8, 5, 9, 4, 10, 3, 11, 12, 2, 0, 1, 13, 14]], q = K.t256[0], N = K.t257[0], D = K.t258[0], I = 0, s = 0, M = u.decode._make_decoder, a = u.decode._getbithuff, C = J[0].exifIFD.makerNote, F = C.t150 ? C.t150 : C.t140, i = 0, _ = F[i++], G = F[i++], L = 0, w, b, m, t, R, H, h = 0;
            if (_ == 73 || G == 88)
                i += 2110;
            if (_ == 70)
                I = 2;
            if (D == 14)
                I += 3;
            var e = [[0, 0], [0, 0]]
                , B = K.isLE ? u._binLE : u._binBE;
            for (var w = 0; w < 2; w++)
                for (var l = 0; l < 2; l++) {
                    e[w][l] = B.readShort(F, i);
                    i += 2
                }
            var aM = 1 << D & 32767
                , aK = B.readShort(F, i);
            i += 2;
            if (aK > 1)
                L = Math.floor(aM / (aK - 1));
            if (_ == 68 && G == 32 && L > 0)
                s = B.readShort(F, 562);
            var U = [0, 0]
                , T = M(v[I])
                , c = [n, 0, 0, 0];
            for (h = b = 0; b < N; b++) {
                if (s && b == s) {
                    T = M(v[I + 1])
                }
                for (m = 0; m < q; m++) {
                    w = a(f, c, T[0], T);
                    t = w & 15;
                    R = w >>> 4;
                    H = (a(f, c, t - R, 0) << 1) + 1 << R >>> 1;
                    if ((H & 1 << t - 1) == 0)
                        H -= (1 << t) - (R == 0 ? 1 : 0);
                    if (m < 2)
                        U[m] = e[b & 1][m] += H;
                    else
                        U[m & 1] += H;
                    var W = Math.min(Math.max(U[m & 1], 0), (1 << D) - 1)
                        , E = (b * q + m) * D;
                    u.decode._putsF(d, E, W << 16 - D)
                }
            }
        }
            ;
        u.decode._putsF = function (K, J, f) {
            f = f << 8 - (J & 7);
            var n = J >>> 3;
            K[n] |= f >>> 16;
            K[n + 1] |= f >>> 8;
            K[n + 2] |= f
        }
            ;
        u.decode._getbithuff = function (K, J, f, n) {
            var S = 0, d = u.decode._get_byte, x, v = J[0], q = J[1], N = J[2], D = J[3];
            if (f == 0 || N < 0)
                return 0;
            while (!D && N < f && (x = K[v++]) != -1 && !(D = S && x == 255 && K[v++])) {
                q = (q << 8) + x;
                N += 8
            }
            x = q << 32 - N >>> 32 - f;
            if (n) {
                N -= n[x + 1] >>> 8;
                x = n[x + 1] & 255
            } else
                N -= f;
            if (N < 0)
                throw "e";
            J[0] = v;
            J[1] = q;
            J[2] = N;
            J[3] = D;
            return x
        }
            ;
        u.decode._make_decoder = function (K) {
            var J, f, n, d, x, v = [], q = 17;
            for (J = 16; J != 0 && !K[J]; J--)
                ;
            v[0] = J;
            for (n = f = 1; f <= J; f++)
                for (d = 0; d < K[f]; d++,
                    ++q)
                    for (x = 0; x < 1 << J - f; x++)
                        if (n <= 1 << J)
                            v[n++] = f << 8 | K[q];
            return v
        }
            ;
        u.decode._decodeNewJPEG = function (K, J, f, n, S, d) {
            n = Math.min(n, J.length - f);
            var x = K.t347
                , v = x ? x.length : 0
                , q = new Uint8Array(v + n);
            if (x) {
                var N = 216
                    , D = 217
                    , I = 0;
                for (var s = 0; s < v - 1; s++) {
                    if (x[s] == 255 && x[s + 1] == D)
                        break;
                    q[I++] = x[s]
                }
                var M = J[f]
                    , a = J[f + 1];
                if (M != 255 || a != N) {
                    q[I++] = M;
                    q[I++] = a
                }
                for (var s = 2; s < n; s++)
                    q[I++] = J[f + s]
            } else
                for (var s = 0; s < n; s++)
                    q[s] = J[f + s];
            if (K.t262[0] == 32803 || K.t259[0] == 7 && K.t262[0] == 34892) {
                var C = K.t258[0]
                    , F = u.LosslessJpegDecode(q)
                    , i = F.length;
                if (!1) { } else if (C == 16) {
                    if (K.isLE)
                        for (var s = 0; s < i; s++) {
                            S[d + (s << 1)] = F[s] & 255;
                            S[d + (s << 1) + 1] = F[s] >>> 8
                        }
                    else
                        for (var s = 0; s < i; s++) {
                            S[d + (s << 1)] = F[s] >>> 8;
                            S[d + (s << 1) + 1] = F[s] & 255
                        }
                } else if (C == 14 || C == 12) {
                    var _ = 16 - C;
                    for (var s = 0; s < i; s++)
                        u.decode._putsF(S, s * C, F[s] << _)
                } else if (C == 8) {
                    for (var s = 0; s < i; s++)
                        S[d + s] = F[s]
                } else
                    throw new Error("unsupported bit depth " + C)
            } else {
                var G = new u.JpegDecoder;
                G.parse(q);
                var e = G.getData({
                    width: G.width,
                    height: G.height,
                    forceRGB: !0,
                    isSourcePDF: !1
                });
                for (var s = 0; s < e.length; s++)
                    S[d + s] = e[s]
            }
            if (K.t262[0] == 6)
                K.t262[0] = 2
        }
            ;
        u.decode._decodeOldJPEGInit = function (K, J, f, n) {
            var S = 216, d = 217, x = 219, v = 196, q = 221, N = 192, D = 218, I = 0, s = 0, M, a, C = !1, F, i, _, G = K.t513, e = G ? G[0] : 0, B = K.t514, w = B ? B[0] : 0, l = K.t324 || K.t273 || G, aM = K.t530, L = 0, aK = 0, b = K.t277 ? K.t277[0] : 1, m = K.t515;
            if (l) {
                s = l[0];
                C = l.length > 1
            }
            if (!C) {
                if (J[f] == 255 && J[f + 1] == S)
                    return {
                        jpegOffset: f
                    };
                if (G != null) {
                    if (J[f + e] == 255 && J[f + e + 1] == S)
                        I = f + e;
                    else
                        ap("JPEGInterchangeFormat does not point to SOI");
                    if (B == null)
                        ap("JPEGInterchangeFormatLength field is missing");
                    else if (e >= s || e + w <= s)
                        ap("JPEGInterchangeFormatLength field value is invalid");
                    if (I != null)
                        return {
                            jpegOffset: I
                        }
                }
            }
            if (aM != null) {
                L = aM[0];
                aK = aM[1]
            }
            if (G != null)
                if (B != null)
                    if (w >= 2 && e + w <= s) {
                        if (J[f + e + w - 2] == 255 && J[f + e + w - 1] == S)
                            M = new Uint8Array(w - 2);
                        else
                            M = new Uint8Array(w);
                        for (F = 0; F < M.length; F++)
                            M[F] = J[f + e + F];
                        ap("Incorrect JPEG interchange format: using JPEGInterchangeFormat offset to derive tables")
                    } else
                        ap("JPEGInterchangeFormat+JPEGInterchangeFormatLength > offset to first strip or tile");
            if (M == null) {
                var t = 0
                    , R = [];
                R[t++] = 255;
                R[t++] = S;
                var H = K.t519;
                if (H == null)
                    throw new Error("JPEGQTables tag is missing");
                for (F = 0; F < H.length; F++) {
                    R[t++] = 255;
                    R[t++] = x;
                    R[t++] = 0;
                    R[t++] = 67;
                    R[t++] = F;
                    for (i = 0; i < 64; i++)
                        R[t++] = J[f + H[F] + i]
                }
                for (_ = 0; _ < 2; _++) {
                    var h = K[_ == 0 ? "t520" : "t521"];
                    if (h == null)
                        throw new Error((_ == 0 ? "JPEGDCTables" : "JPEGACTables") + " tag is missing");
                    for (F = 0; F < h.length; F++) {
                        R[t++] = 255;
                        R[t++] = v;
                        var U = 19;
                        for (i = 0; i < 16; i++)
                            U += J[f + h[F] + i];
                        R[t++] = U >>> 8;
                        R[t++] = U & 255;
                        R[t++] = F | _ << 4;
                        for (i = 0; i < 16; i++)
                            R[t++] = J[f + h[F] + i];
                        for (i = 0; i < U; i++)
                            R[t++] = J[f + h[F] + 16 + i]
                    }
                }
                R[t++] = 255;
                R[t++] = N;
                R[t++] = 0;
                R[t++] = 8 + 3 * b;
                R[t++] = 8;
                R[t++] = K.height >>> 8 & 255;
                R[t++] = K.height & 255;
                R[t++] = K.width >>> 8 & 255;
                R[t++] = K.width & 255;
                R[t++] = b;
                if (b == 1) {
                    R[t++] = 1;
                    R[t++] = 17;
                    R[t++] = 0
                } else
                    for (F = 0; F < 3; F++) {
                        R[t++] = F + 1;
                        R[t++] = F != 0 ? 17 : (L & 15) << 4 | aK & 15;
                        R[t++] = F
                    }
                if (m != null && m[0] != 0) {
                    R[t++] = 255;
                    R[t++] = q;
                    R[t++] = 0;
                    R[t++] = 4;
                    R[t++] = m[0] >>> 8 & 255;
                    R[t++] = m[0] & 255
                }
                M = new Uint8Array(R)
            }
            var T = -1;
            F = 0;
            while (F < M.length - 1) {
                if (M[F] == 255 && M[F + 1] == N) {
                    T = F;
                    break
                }
                F++
            }
            if (T == -1) {
                var c = new Uint8Array(M.length + 10 + 3 * b);
                c.set(M);
                var W = M.length;
                T = M.length;
                M = c;
                M[W++] = 255;
                M[W++] = N;
                M[W++] = 0;
                M[W++] = 8 + 3 * b;
                M[W++] = 8;
                M[W++] = K.height >>> 8 & 255;
                M[W++] = K.height & 255;
                M[W++] = K.width >>> 8 & 255;
                M[W++] = K.width & 255;
                M[W++] = b;
                if (b == 1) {
                    M[W++] = 1;
                    M[W++] = 17;
                    M[W++] = 0
                } else
                    for (F = 0; F < 3; F++) {
                        M[W++] = F + 1;
                        M[W++] = F != 0 ? 17 : (L & 15) << 4 | aK & 15;
                        M[W++] = F
                    }
            }
            if (J[s] == 255 && J[s + 1] == D) {
                var E = J[s + 2] << 8 | J[s + 3];
                a = new Uint8Array(E + 2);
                a[0] = J[s];
                a[1] = J[s + 1];
                a[2] = J[s + 2];
                a[3] = J[s + 3];
                for (F = 0; F < E - 2; F++)
                    a[F + 4] = J[s + F + 4]
            } else {
                a = new Uint8Array(2 + 6 + 2 * b);
                var y = 0;
                a[y++] = 255;
                a[y++] = D;
                a[y++] = 0;
                a[y++] = 6 + 2 * b;
                a[y++] = b;
                if (b == 1) {
                    a[y++] = 1;
                    a[y++] = 0
                } else
                    for (F = 0; F < 3; F++) {
                        a[y++] = F + 1;
                        a[y++] = F << 4 | F
                    }
                a[y++] = 0;
                a[y++] = 63;
                a[y++] = 0
            }
            return {
                jpegOffset: f,
                tables: M,
                sosMarker: a,
                sofPosition: T
            }
        }
            ;
        u.decode._decodeOldJPEG = function (K, J, f, n, S, d) {
            var x, v, q, N, D, I = u.decode._decodeOldJPEGInit(K, J, f, n);
            if (I.jpegOffset != null) {
                v = f + n - I.jpegOffset;
                N = new Uint8Array(v);
                for (x = 0; x < v; x++)
                    N[x] = J[I.jpegOffset + x]
            } else {
                q = I.tables.length;
                N = new Uint8Array(q + I.sosMarker.length + n + 2);
                N.set(I.tables);
                D = q;
                N[I.sofPosition + 5] = K.height >>> 8 & 255;
                N[I.sofPosition + 6] = K.height & 255;
                N[I.sofPosition + 7] = K.width >>> 8 & 255;
                N[I.sofPosition + 8] = K.width & 255;
                if (J[f] != 255 || J[f + 1] != SOS) {
                    N.set(I.sosMarker, D);
                    D += sosMarker.length
                }
                for (x = 0; x < n; x++)
                    N[D++] = J[f + x];
                N[D++] = 255;
                N[D++] = EOI
            }
            var s = new u.JpegDecoder;
            s.parse(N);
            var M = s.getData({
                width: s.width,
                height: s.height,
                forceRGB: !0,
                isSourcePDF: !1
            });
            for (var x = 0; x < M.length; x++)
                S[d + x] = M[x];
            if (K.t262 && K.t262[0] == 6)
                K.t262[0] = 2
        }
            ;
        u.decode._decodePackBits = function (K, J, f, n, S) {
            var d = new Int8Array(K.buffer)
                , x = new Int8Array(n.buffer)
                , v = J + f;
            while (J < v) {
                var q = d[J];
                J++;
                if (q >= 0 && q < 128)
                    for (var N = 0; N < q + 1; N++) {
                        x[S] = d[J];
                        S++;
                        J++
                    }
                if (q >= -127 && q < 0) {
                    for (var N = 0; N < -q + 1; N++) {
                        x[S] = d[J];
                        S++
                    }
                    J++
                }
            }
        }
            ;
        u.decode._decodeThunder = function (K, J, f, n, S) {
            var d = [0, 1, 0, -1]
                , x = [0, 1, 2, 3, 0, -3, -2, -1]
                , v = J + f
                , q = S * 2
                , N = 0;
            while (J < v) {
                var D = K[J]
                    , I = D >>> 6
                    , s = D & 63;
                J++;
                if (I == 3) {
                    N = s & 15;
                    n[q >>> 1] |= N << 4 * (1 - q & 1);
                    q++
                }
                if (I == 0)
                    for (var M = 0; M < s; M++) {
                        n[q >>> 1] |= N << 4 * (1 - q & 1);
                        q++
                    }
                if (I == 2)
                    for (var M = 0; M < 2; M++) {
                        var a = s >>> 3 * (1 - M) & 7;
                        if (a != 4) {
                            N += x[a];
                            n[q >>> 1] |= N << 4 * (1 - q & 1);
                            q++
                        }
                    }
                if (I == 1)
                    for (var M = 0; M < 3; M++) {
                        var a = s >>> 2 * (2 - M) & 3;
                        if (a != 2) {
                            N += d[a];
                            n[q >>> 1] |= N << 4 * (1 - q & 1);
                            q++
                        }
                    }
            }
        }
            ;
        u.decode._dmap = {
            "1": 0,
            "011": 1,
            "000011": 2,
            "0000011": 3,
            "010": -1,
            "000010": -2,
            "0000010": -3
        };
        u.decode._lens = function () {
            var K = function (q, N, D, I) {
                for (var s = 0; s < N.length; s++)
                    q[N[s]] = D + s * I
            }
                , J = "00110101,000111,0111,1000,1011,1100,1110,1111,10011,10100,00111,01000,001000,000011,110100,110101," + "101010,101011,0100111,0001100,0001000,0010111,0000011,0000100,0101000,0101011,0010011,0100100,0011000,00000010,00000011,00011010," + "00011011,00010010,00010011,00010100,00010101,00010110,00010111,00101000,00101001,00101010,00101011,00101100,00101101,00000100,00000101,00001010," + "00001011,01010010,01010011,01010100,01010101,00100100,00100101,01011000,01011001,01011010,01011011,01001010,01001011,00110010,00110011,00110100"
                , f = "0000110111,010,11,10,011,0011,0010,00011,000101,000100,0000100,0000101,0000111,00000100,00000111,000011000," + "0000010111,0000011000,0000001000,00001100111,00001101000,00001101100,00000110111,00000101000,00000010111,00000011000,000011001010,000011001011,000011001100,000011001101,000001101000,000001101001," + "000001101010,000001101011,000011010010,000011010011,000011010100,000011010101,000011010110,000011010111,000001101100,000001101101,000011011010,000011011011,000001010100,000001010101,000001010110,000001010111," + "000001100100,000001100101,000001010010,000001010011,000000100100,000000110111,000000111000,000000100111,000000101000,000001011000,000001011001,000000101011,000000101100,000001011010,000001100110,000001100111"
                , n = "11011,10010,010111,0110111,00110110,00110111,01100100,01100101,01101000,01100111,011001100,011001101,011010010,011010011,011010100,011010101,011010110," + "011010111,011011000,011011001,011011010,011011011,010011000,010011001,010011010,011000,010011011"
                , S = "0000001111,000011001000,000011001001,000001011011,000000110011,000000110100,000000110101,0000001101100,0000001101101,0000001001010,0000001001011,0000001001100," + "0000001001101,0000001110010,0000001110011,0000001110100,0000001110101,0000001110110,0000001110111,0000001010010,0000001010011,0000001010100,0000001010101,0000001011010," + "0000001011011,0000001100100,0000001100101"
                , d = "00000001000,00000001100,00000001101,000000010010,000000010011,000000010100,000000010101,000000010110,000000010111,000000011100,000000011101,000000011110,000000011111";
            J = J.split(",");
            f = f.split(",");
            n = n.split(",");
            S = S.split(",");
            d = d.split(",");
            var x = {}
                , v = {};
            K(x, J, 0, 1);
            K(x, n, 64, 64);
            K(x, d, 1792, 64);
            K(v, f, 0, 1);
            K(v, S, 64, 64);
            K(v, d, 1792, 64);
            return [x, v]
        }();
        u.decode._decodeG4 = function (K, J, f, n, S, d, x) {
            var v = u.decode
                , q = J << 3
                , N = 0
                , D = ""
                , I = []
                , s = []
                , a = 0
                , C = 0
                , F = 0
                , i = 0
                , _ = 0
                , e = 0
                , B = 0
                , w = ""
                , l = 0;
            for (var M = 0; M < d; M++)
                s.push(0);
            s = v._makeDiff(s);
            var aM = Math.ceil(d / 8) * 8;
            while (q >>> 3 < J + f) {
                i = v._findDiff(s, a + (a == 0 ? 0 : 1), 1 - e),
                    _ = v._findDiff(s, i, e);
                var L = 0;
                if (x == 1)
                    L = K[q >>> 3] >>> 7 - (q & 7) & 1;
                if (x == 2)
                    L = K[q >>> 3] >>> (q & 7) & 1;
                q++;
                D += L;
                if (w == "H") {
                    if (v._lens[e][D] != null) {
                        var aK = v._lens[e][D];
                        D = "";
                        N += aK;
                        if (aK < 64) {
                            v._addNtimes(I, N, e);
                            a += N;
                            e = 1 - e;
                            N = 0;
                            l--;
                            if (l == 0)
                                w = ""
                        }
                    }
                } else {
                    if (D == "0001") {
                        D = "";
                        v._addNtimes(I, _ - a, e);
                        a = _
                    }
                    if (D == "001") {
                        D = "";
                        w = "H";
                        l = 2
                    }
                    if (v._dmap[D] != null) {
                        C = i + v._dmap[D];
                        v._addNtimes(I, C - a, e);
                        a = C;
                        D = "";
                        e = 1 - e
                    }
                }
                if (I.length == d && w == "") {
                    v._writeBits(I, n, S * 8 + B * aM);
                    e = 0;
                    B++;
                    a = 0;
                    s = v._makeDiff(I);
                    I = []
                }
            }
        }
            ;
        u.decode._findDiff = function (K, J, f) {
            for (var n = 0; n < K.length; n += 2)
                if (K[n] >= J && K[n + 1] == f)
                    return K[n]
        }
            ;
        u.decode._makeDiff = function (K) {
            var J = [];
            if (K[0] == 1)
                J.push(0, 1);
            for (var f = 1; f < K.length; f++)
                if (K[f - 1] != K[f])
                    J.push(f, K[f]);
            J.push(K.length, 0, K.length, 1);
            return J
        }
            ;
        u.decode._decodeG3 = function (K, J, f, n, S, d, x, v) {
            var q = u.decode
                , N = J << 3
                , D = 0
                , I = ""
                , s = []
                , M = []
                , C = 0
                , F = 0
                , i = 0
                , _ = 0
                , e = 0
                , B = 0
                , l = ""
                , aM = 0
                , L = !0;
            for (var a = 0; a < d; a++)
                s.push(0);
            var w = -1
                , aK = Math.ceil(d / 8) * 8;
            while (N >>> 3 < J + f) {
                _ = q._findDiff(M, C + (C == 0 ? 0 : 1), 1 - B),
                    e = q._findDiff(M, _, B);
                var b = 0;
                if (x == 1)
                    b = K[N >>> 3] >>> 7 - (N & 7) & 1;
                if (x == 2)
                    b = K[N >>> 3] >>> (N & 7) & 1;
                N++;
                I += b;
                if (L) {
                    if (q._lens[B][I] != null) {
                        var m = q._lens[B][I];
                        I = "";
                        D += m;
                        if (m < 64) {
                            q._addNtimes(s, D, B);
                            B = 1 - B;
                            D = 0
                        }
                    }
                } else {
                    if (l == "H") {
                        if (q._lens[B][I] != null) {
                            var m = q._lens[B][I];
                            I = "";
                            D += m;
                            if (m < 64) {
                                q._addNtimes(s, D, B);
                                C += D;
                                B = 1 - B;
                                D = 0;
                                aM--;
                                if (aM == 0)
                                    l = ""
                            }
                        }
                    } else {
                        if (I == "0001") {
                            I = "";
                            q._addNtimes(s, e - C, B);
                            C = e
                        }
                        if (I == "001") {
                            I = "";
                            l = "H";
                            aM = 2
                        }
                        if (q._dmap[I] != null) {
                            F = _ + q._dmap[I];
                            q._addNtimes(s, F - C, B);
                            C = F;
                            I = "";
                            B = 1 - B
                        }
                    }
                }
                if (I.endsWith("000000000001")) {
                    if (w >= 0)
                        q._writeBits(s, n, S * 8 + w * aK);
                    if (v) {
                        if (x == 1)
                            L = (K[N >>> 3] >>> 7 - (N & 7) & 1) == 1;
                        if (x == 2)
                            L = (K[N >>> 3] >>> (N & 7) & 1) == 1;
                        N++
                    }
                    I = "";
                    B = 0;
                    w++;
                    C = 0;
                    M = q._makeDiff(s);
                    s = []
                }
            }
            if (s.length == d)
                q._writeBits(s, n, S * 8 + w * aK)
        }
            ;
        u.decode._addNtimes = function (K, J, f) {
            for (var n = 0; n < J; n++)
                K.push(f)
        }
            ;
        u.decode._writeBits = function (K, J, f) {
            for (var n = 0; n < K.length; n++)
                J[f + n >>> 3] |= K[n] << 7 - (f + n & 7)
        }
            ;
        u.decode._decodeLZW = u.decode._decodeLZW = function () {
            var K, f, n, S, d = 0, x = 0, v = 0, q = 0, N = function () {
                var _ = K >>> 3
                    , e = f[_] << 16 | f[_ + 1] << 8 | f[_ + 2]
                    , B = e >>> 24 - (K & 7) - x & (1 << x) - 1;
                K += x;
                return B
            }, D = new Uint32Array(4096 * 4), I = 0, s = function (_) {
                if (_ == I)
                    return;
                I = _;
                v = 1 << _;
                q = v + 1;
                for (var e = 0; e < q + 1; e++) {
                    D[4 * e] = D[4 * e + 3] = e;
                    D[4 * e + 1] = 65535;
                    D[4 * e + 2] = 1
                }
            }, M = function (_) {
                x = _ + 1;
                d = q + 1
            }, a = function (_) {
                var e = _ << 2
                    , B = D[e + 2]
                    , w = S + B - 1;
                while (e != 65535) {
                    n[w--] = D[e];
                    e = D[e + 1]
                }
                S += B
            }, C = function (_, e) {
                var B = d << 2
                    , w = _ << 2;
                D[B] = D[(e << 2) + 3];
                D[B + 1] = w;
                D[B + 2] = D[w + 2] + 1;
                D[B + 3] = D[w + 3];
                d++;
                if (d + 1 == 1 << x && x != 12)
                    x++
            }, F = function (_, e, B, w, aM, L) {
                K = e << 3;
                f = _;
                n = w;
                S = aM;
                var b = e + B << 3
                    , m = 0
                    , t = 0;
                s(L);
                M(L);
                while (K < b && (m = N()) != q) {
                    if (m == v) {
                        M(L);
                        m = N();
                        if (m == q)
                            break;
                        a(m)
                    } else {
                        if (m < d) {
                            a(m);
                            C(t, m)
                        } else {
                            C(t, t);
                            a(d - 1)
                        }
                    }
                    t = m
                }
                return S
            };
            return F
        }();
        u.tags = {};
        u._types = function () {
            var K = new Array(250);
            K.fill(0);
            K = K.concat([0, 0, 0, 0, 4, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2, 4, 3, 0, 0, 3, 4, 4, 3, 3, 5, 5, 3, 2, 5, 5, 0, 0, 0, 0, 4, 4, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 5, 5, 3, 0, 3, 3, 4, 4, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            var J = {
                33432: 2,
                33434: 5,
                33437: 5,
                34665: 4,
                34850: 3,
                34853: 4,
                34855: 3,
                34864: 3,
                34866: 4,
                36864: 7,
                36867: 2,
                36868: 2,
                37121: 7,
                37377: 10,
                37378: 5,
                37380: 10,
                37381: 5,
                37383: 3,
                37384: 3,
                37385: 3,
                37386: 5,
                37510: 7,
                37520: 2,
                37521: 2,
                37522: 2,
                40960: 7,
                40961: 3,
                40962: 4,
                40963: 4,
                40965: 4,
                41486: 5,
                41487: 5,
                41488: 3,
                41985: 3,
                41986: 3,
                41987: 3,
                41988: 5,
                41989: 3,
                41990: 3,
                41993: 3,
                41994: 3,
                41995: 7,
                41996: 3,
                42032: 2,
                42033: 2,
                42034: 5,
                42036: 2,
                42037: 2,
                59932: 7
            };
            return {
                basic: {
                    main: K,
                    rest: J
                },
                gps: {
                    main: [1, 2, 5, 2, 5, 1, 5, 5, 0, 9],
                    rest: {
                        18: 2,
                        29: 2
                    }
                }
            }
        }();
        u._readIFD = function (K, J, f, n, S, d) {
            var x = K.readUshort(J, f);
            f += 2;
            var v = {};
            if (d.debug)
                ap("   ".repeat(S), n.length - 1, ">>>----------------");
            for (var q = 0; q < x; q++) {
                var N = K.readUshort(J, f);
                f += 2;
                var D = K.readUshort(J, f);
                f += 2;
                var I = K.readUint(J, f);
                f += 4;
                var s = K.readUint(J, f);
                f += 4;
                var M = [];
                if (D == 1 || D == 7) {
                    M = new Uint8Array(J.buffer, I < 5 ? f - 4 : s, I)
                }
                if (D == 2) {
                    var a = I < 5 ? f - 4 : s
                        , C = J[a]
                        , F = Math.max(0, Math.min(I - 1, J.length - a));
                    if (C < 128 || F == 0)
                        M.push(K.readASCII(J, a, F));
                    else
                        M = new Uint8Array(J.buffer, a, F)
                }
                if (D == 3) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readUshort(J, (I < 3 ? f - 4 : s) + 2 * i))
                }
                if (D == 4 || D == 13) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readUint(J, (I < 2 ? f - 4 : s) + 4 * i))
                }
                if (D == 5 || D == 10) {
                    var _ = D == 5 ? K.readUint : K.readInt;
                    for (var i = 0; i < I; i++)
                        M.push([_(J, s + i * 8), _(J, s + i * 8 + 4)])
                }
                if (D == 8) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readShort(J, (I < 3 ? f - 4 : s) + 2 * i))
                }
                if (D == 9) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readInt(J, (I < 2 ? f - 4 : s) + 4 * i))
                }
                if (D == 11) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readFloat(J, s + i * 4))
                }
                if (D == 12) {
                    for (var i = 0; i < I; i++)
                        M.push(K.readDouble(J, s + i * 8))
                }
                if (I != 0 && M.length == 0) {
                    ap(N, "unknown TIFF tag type: ", D, "num:", I);
                    if (q == 0)
                        return;
                    continue
                }
                if (d.debug)
                    ap("   ".repeat(S), N, D, u.tags[N], M);
                v["t" + N] = M;
                if (N == 330 && v.t272 && v.t272[0] == "DSLR-A100") { } else if (N == 330 || N == 34665 || N == 34853 || N == 50740 && K.readUshort(J, K.readUint(M, 0)) < 300 || N == 61440) {
                    var G = N == 50740 ? [K.readUint(M, 0)] : M
                        , e = [];
                    for (var i = 0; i < G.length; i++)
                        u._readIFD(K, J, G[i], e, S + 1, d);
                    if (N == 330)
                        v.subIFD = e;
                    if (N == 34665)
                        v.exifIFD = e[0];
                    if (N == 34853)
                        v.gpsiIFD = e[0];
                    if (N == 50740)
                        v.dngPrvt = e[0];
                    if (N == 61440)
                        v.fujiIFD = e[0]
                }
                if (N == 37500 && d.parseMN) {
                    var B = M;
                    if (K.readASCII(B, 0, 5) == "Nikon")
                        v.makerNote = u.decode(B.slice(10).buffer)[0];
                    else if (K.readUshort(J, s) < 300 && K.readUshort(J, s + 4) <= 12) {
                        var w = [];
                        u._readIFD(K, J, s, w, S + 1, d);
                        v.makerNote = w[0]
                    }
                }
            }
            n.push(v);
            if (d.debug)
                ap("   ".repeat(S), "<<<---------------");
            return f
        }
            ;
        u._writeIFD = function (K, J, f, n, S) {
            var d = Object.keys(S)
                , x = d.length;
            if (S.exifIFD)
                x--;
            if (S.gpsiIFD)
                x--;
            K.writeUshort(f, n, x);
            n += 2;
            var v = n + x * 12 + 4;
            for (var q = 0; q < d.length; q++) {
                var N = d[q];
                if (N == "t34665" || N == "t34853")
                    continue;
                if (N == "exifIFD")
                    N = "t34665";
                if (N == "gpsiIFD")
                    N = "t34853";
                var D = parseInt(N.slice(1))
                    , I = J.main[D];
                if (I == null)
                    I = J.rest[D];
                if (I == null || I == 0)
                    throw new Error("unknown type of tag: " + D);
                var s = S[N];
                if (D == 34665) {
                    var M = u._writeIFD(K, J, f, v, S.exifIFD);
                    s = [v];
                    v = M[1]
                }
                if (D == 34853) {
                    var M = u._writeIFD(K, u._types.gps, f, v, S.gpsiIFD);
                    s = [v];
                    v = M[1]
                }
                if (I == 2)
                    s = s[0] + "\0";
                var a = s.length;
                K.writeUshort(f, n, D);
                n += 2;
                K.writeUshort(f, n, I);
                n += 2;
                K.writeUint(f, n, a);
                n += 4;
                var C = [-1, 1, 1, 2, 4, 8, 0, 1, 0, 4, 8, 0, 8][I] * a
                    , F = n;
                if (C > 4) {
                    K.writeUint(f, n, v);
                    F = v
                }
                if (I == 1 || I == 7) {
                    for (var i = 0; i < a; i++)
                        f[F + i] = s[i]
                } else if (I == 2) {
                    K.writeASCII(f, F, s)
                } else if (I == 3) {
                    for (var i = 0; i < a; i++)
                        K.writeUshort(f, F + 2 * i, s[i])
                } else if (I == 4) {
                    for (var i = 0; i < a; i++)
                        K.writeUint(f, F + 4 * i, s[i])
                } else if (I == 5 || I == 10) {
                    var _ = I == 5 ? K.writeUint : K.writeInt;
                    for (var i = 0; i < a; i++) {
                        var G = s[i]
                            , e = G[0]
                            , B = G[1];
                        if (e == null)
                            throw "e";
                        _(f, F + 8 * i, e);
                        _(f, F + 8 * i + 4, B)
                    }
                } else if (I == 9) {
                    for (var i = 0; i < a; i++)
                        K.writeInt(f, F + 4 * i, s[i])
                } else if (I == 12) {
                    for (var i = 0; i < a; i++)
                        K.writeDouble(f, F + 8 * i, s[i])
                } else
                    throw I;
                if (C > 4) {
                    C += C & 1;
                    v += C
                }
                n += 4
            }
            return [n, v]
        }
            ;
        u.toRGBA8 = function (K, J) {
            var f = K.width
                , n = K.height
                , d = f * n
                , x = d * 4
                , v = K.data
                , q = new Uint8Array(d * 4)
                , N = K.t262 ? K.t262[0] : 2
                , D = K.t258 ? Math.min(32, K.t258[0]) : 1;
            if (K.t262 == null && D == 1)
                N = 0;
            if (!1) { } else if (N == 0) {
                var I = Math.ceil(D * f / 8);
                for (var s = 0; s < n; s++) {
                    var M = s * I
                        , a = s * f;
                    if (D == 1)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + (C >> 3)] >> 7 - (C & 7) & 1;
                            q[F] = q[F + 1] = q[F + 2] = (1 - i) * 255;
                            q[F + 3] = 255
                        }
                    if (D == 4)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + (C >> 1)] >> 4 - 4 * (C & 1) & 15;
                            q[F] = q[F + 1] = q[F + 2] = (15 - i) * 17;
                            q[F + 3] = 255
                        }
                    if (D == 8)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + C];
                            q[F] = q[F + 1] = q[F + 2] = 255 - i;
                            q[F + 3] = 255
                        }
                }
            } else if (N == 1) {
                var _ = K.t258 ? K.t258.length : 1
                    , I = Math.ceil(_ * D * f / 8);
                if (J == null)
                    J = 1 / 256;
                for (var s = 0; s < n; s++) {
                    var M = s * I
                        , a = s * f;
                    if (D == 1)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + (C >> 3)] >> 7 - (C & 7) & 1;
                            q[F] = q[F + 1] = q[F + 2] = i * 255;
                            q[F + 3] = 255
                        }
                    if (D == 2)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + (C >> 2)] >> 6 - 2 * (C & 3) & 3;
                            q[F] = q[F + 1] = q[F + 2] = i * 85;
                            q[F + 3] = 255
                        }
                    if (D == 8)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , i = v[M + C * _];
                            q[F] = q[F + 1] = q[F + 2] = i;
                            q[F + 3] = 255
                        }
                    if (D == 16)
                        for (var C = 0; C < f; C++) {
                            var F = a + C << 2
                                , e = M + 2 * C
                                , i = v[e + 1] << 8 | v[e];
                            q[F] = q[F + 1] = q[F + 2] = Math.min(255, ~~(i * J));
                            q[F + 3] = 255
                        }
                }
            } else if (N == 2) {
                var _ = K.t258 ? K.t258.length : 3;
                if (D == 8) {
                    if (_ == 4)
                        for (var C = 0; C < x; C++)
                            q[C] = v[C];
                    if (_ == 3)
                        for (var C = 0; C < d; C++) {
                            var F = C << 2
                                , w = C * 3;
                            q[F] = v[w];
                            q[F + 1] = v[w + 1];
                            q[F + 2] = v[w + 2];
                            q[F + 3] = 255
                        }
                } else {
                    if (_ == 4)
                        for (var C = 0; C < d; C++) {
                            var F = C << 2
                                , w = C * 8 + 1;
                            q[F] = v[w];
                            q[F + 1] = v[w + 2];
                            q[F + 2] = v[w + 4];
                            q[F + 3] = v[w + 6]
                        }
                    if (_ == 3)
                        for (var C = 0; C < d; C++) {
                            var F = C << 2
                                , w = C * 6 + 1;
                            q[F] = v[w];
                            q[F + 1] = v[w + 2];
                            q[F + 2] = v[w + 4];
                            q[F + 3] = 255
                        }
                }
            } else if (N == 3) {
                var l = K.t320
                    , _ = K.t258 ? K.t258.length : 1
                    , I = Math.ceil(_ * D * f / 8)
                    , aM = 1 << D;
                for (var s = 0; s < n; s++)
                    for (var L = 0; L < f; L++) {
                        var C = s * f + L
                            , F = C << 2
                            , aK = 0
                            , b = s * I;
                        if (!1) { } else if (D == 1)
                            aK = v[b + (L >>> 3)] >>> 7 - (L & 7) & 1;
                        else if (D == 4)
                            aK = v[b + (L >>> 1)] >>> 4 - 4 * (L & 1) & 15;
                        else if (D == 8)
                            aK = v[b + L * _];
                        else
                            throw D;
                        q[F] = l[aK] >> 8;
                        q[F + 1] = l[aM + aK] >> 8;
                        q[F + 2] = l[aM + aM + aK] >> 8;
                        q[F + 3] = 255
                    }
            } else if (N == 5) {
                var _ = K.t258 ? K.t258.length : 4
                    , m = _ > 4 ? 1 : 0;
                for (var C = 0; C < d; C++) {
                    var F = C << 2
                        , t = C * _
                        , R = 255 - v[t]
                        , H = 255 - v[t + 1]
                        , h = 255 - v[t + 2]
                        , U = (255 - v[t + 3]) * (1 / 255);
                    q[F] = ~~(R * U + .5);
                    q[F + 1] = ~~(H * U + .5);
                    q[F + 2] = ~~(h * U + .5);
                    q[F + 3] = 255 * (1 - m) + v[t + 4] * m
                }
            } else if (N == 6 && K.t278) {
                var T = K.t278[0];
                for (var s = 0; s < n; s += T) {
                    var C = s * f
                        , W = T * f;
                    for (var E = 0; E < W; E++) {
                        var F = 4 * (C + E)
                            , t = 3 * C + 4 * (E >>> 1)
                            , h = v[t + (E & 1)]
                            , y = v[t + 2] - 128
                            , V = v[t + 3] - 128
                            , A = h + ((V >> 2) + (V >> 3) + (V >> 5))
                            , r = h - ((y >> 2) + (y >> 4) + (y >> 5)) - ((V >> 1) + (V >> 3) + (V >> 4) + (V >> 5))
                            , $ = h + (y + (y >> 1) + (y >> 2) + (y >> 6));
                        q[F] = Math.max(0, Math.min(255, A));
                        q[F + 1] = Math.max(0, Math.min(255, r));
                        q[F + 2] = Math.max(0, Math.min(255, $));
                        q[F + 3] = 255
                    }
                }
            } else
                ap("Unknown Photometric interpretation: " + N);
            return q
        }
            ;
        u.replaceIMG = function (K) {
            if (K == null)
                K = document.getElementsByTagName("img");
            var J = ["tif", "tiff", "dng", "cr2", "nef"];
            for (var f = 0; f < K.length; f++) {
                var n = K[f]
                    , S = n.getAttribute("src");
                if (S == null)
                    continue;
                var x = S.split(".").pop().toLowerCase();
                if (J.indexOf(x) == -1)
                    continue;
                var v = new XMLHttpRequest;
                u._xhrs.push(v);
                u._imgs.push(n);
                v.open("GET", S);
                v.responseType = "arraybuffer";
                v.onload = u._imgLoaded;
                v.send()
            }
        }
            ;
        u._xhrs = [];
        u._imgs = [];
        u._imgLoaded = function (K) {
            var f = K.target.response
                , n = u.decode(f)
                , S = n
                , d = 0
                , x = S[0];
            if (n[0].subIFD)
                S = S.concat(n[0].subIFD);
            for (var v = 0; v < S.length; v++) {
                var q = S[v];
                if (q.t258 == null || q.t258.length < 3)
                    continue;
                var N = q.t256 * q.t257;
                if (N > d) {
                    d = N;
                    x = q
                }
            }
            u.decodeImage(f, x, n);
            var D = u.toRGBA8(x)
                , I = x.width
                , s = x.height
                , M = u._xhrs.indexOf(K.target)
                , q = u._imgs[M];
            u._xhrs.splice(M, 1);
            u._imgs.splice(M, 1);
            var a = document.createElement("canvas");
            a.width = I;
            a.height = s;
            var C = a.getContext("2d")
                , F = new ImageData(new Uint8ClampedArray(D.buffer), I, s);
            C.putImageData(F, 0, 0);
            q.setAttribute("src", a.toDataURL())
        }
            ;
        u._binBE = {
            nextZero: function (K, J) {
                while (K[J] != 0)
                    J++;
                return J
            },
            readUshort: function (K, J) {
                return K[J] << 8 | K[J + 1]
            },
            readShort: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 1];
                f[1] = K[J + 0];
                return u._binBE.i16[0]
            },
            readInt: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 3];
                f[1] = K[J + 2];
                f[2] = K[J + 1];
                f[3] = K[J + 0];
                return u._binBE.i32[0]
            },
            readUint: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 3];
                f[1] = K[J + 2];
                f[2] = K[J + 1];
                f[3] = K[J + 0];
                return u._binBE.ui32[0]
            },
            readASCII: function (K, J, f) {
                var n = "";
                for (var S = 0; S < f; S++)
                    n += String.fromCharCode(K[J + S]);
                return n
            },
            readFloat: function (K, J) {
                var f = u._binBE.ui8;
                for (var n = 0; n < 4; n++)
                    f[n] = K[J + 3 - n];
                return u._binBE.fl32[0]
            },
            readDouble: function (K, J) {
                var f = u._binBE.ui8;
                for (var n = 0; n < 8; n++)
                    f[n] = K[J + 7 - n];
                return u._binBE.fl64[0]
            },
            writeUshort: function (K, J, f) {
                K[J] = f >> 8 & 255;
                K[J + 1] = f & 255
            },
            writeInt: function (K, J, f) {
                var n = u._binBE.ui8;
                u._binBE.i32[0] = f;
                K[J + 3] = n[0];
                K[J + 2] = n[1];
                K[J + 1] = n[2];
                K[J + 0] = n[3]
            },
            writeUint: function (K, J, f) {
                K[J] = f >> 24 & 255;
                K[J + 1] = f >> 16 & 255;
                K[J + 2] = f >> 8 & 255;
                K[J + 3] = f >> 0 & 255
            },
            writeASCII: function (K, J, f) {
                for (var n = 0; n < f.length; n++)
                    K[J + n] = f.charCodeAt(n)
            },
            writeDouble: function (K, J, f) {
                u._binBE.fl64[0] = f;
                for (var n = 0; n < 8; n++)
                    K[J + n] = u._binBE.ui8[7 - n]
            }
        };
        u._binBE.ui8 = new Uint8Array(8);
        u._binBE.i16 = new Int16Array(u._binBE.ui8.buffer);
        u._binBE.i32 = new Int32Array(u._binBE.ui8.buffer);
        u._binBE.ui32 = new Uint32Array(u._binBE.ui8.buffer);
        u._binBE.fl32 = new Float32Array(u._binBE.ui8.buffer);
        u._binBE.fl64 = new Float64Array(u._binBE.ui8.buffer);
        u._binLE = {
            nextZero: u._binBE.nextZero,
            readUshort: function (K, J) {
                return K[J + 1] << 8 | K[J]
            },
            readShort: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 0];
                f[1] = K[J + 1];
                return u._binBE.i16[0]
            },
            readInt: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 0];
                f[1] = K[J + 1];
                f[2] = K[J + 2];
                f[3] = K[J + 3];
                return u._binBE.i32[0]
            },
            readUint: function (K, J) {
                var f = u._binBE.ui8;
                f[0] = K[J + 0];
                f[1] = K[J + 1];
                f[2] = K[J + 2];
                f[3] = K[J + 3];
                return u._binBE.ui32[0]
            },
            readASCII: u._binBE.readASCII,
            readFloat: function (K, J) {
                var f = u._binBE.ui8;
                for (var n = 0; n < 4; n++)
                    f[n] = K[J + n];
                return u._binBE.fl32[0]
            },
            readDouble: function (K, J) {
                var f = u._binBE.ui8;
                for (var n = 0; n < 8; n++)
                    f[n] = K[J + n];
                return u._binBE.fl64[0]
            },
            writeUshort: function (K, J, f) {
                K[J] = f & 255;
                K[J + 1] = f >> 8 & 255
            },
            writeInt: function (K, J, f) {
                var n = u._binBE.ui8;
                u._binBE.i32[0] = f;
                K[J + 0] = n[0];
                K[J + 1] = n[1];
                K[J + 2] = n[2];
                K[J + 3] = n[3]
            },
            writeUint: function (K, J, f) {
                K[J] = f >>> 0 & 255;
                K[J + 1] = f >>> 8 & 255;
                K[J + 2] = f >>> 16 & 255;
                K[J + 3] = f >>> 24 & 255
            },
            writeASCII: u._binBE.writeASCII
        };
        u._copyTile = function (K, J, f, n, S, d, x, v) {
            var q = Math.min(J, S - x)
                , N = Math.min(f, d - v);
            for (var D = 0; D < N; D++) {
                var I = (v + D) * S + x
                    , s = D * J;
                for (var M = 0; M < q; M++)
                    n[I + M] = K[s + M]
            }
        }
            ;
        u.LosslessJpegDecode = function () {
            var K, J, f, n, S, d, x, v, q, D;
            function s() {
                return K[J++]
            }
            function M() {
                return K[J++] << 8 | K[J++]
            }
            function a() {
                var c = s()
                    , W = [0, 0, 0, 255]
                    , E = []
                    , y = 8;
                for (var V = 0; V < 16; V++)
                    E[V] = s();
                for (var V = 0; V < 16; V++) {
                    for (var A = 0; A < E[V]; A++) {
                        var r = F(W, 0, V + 1, 1);
                        W[r + 3] = s()
                    }
                }
                var $ = new Uint8Array(1 << y);
                q[c] = [new Uint8Array(W), $];
                for (var V = 0; V < 1 << y; V++) {
                    var a$ = y
                        , p = V
                        , a2 = 0
                        , Z = 0;
                    while (W[a2 + 3] == 255 && a$ != 0) {
                        Z = p >> --a$ & 1;
                        a2 = W[a2 + Z]
                    }
                    $[V] = a2
                }
            }
            function F(c, W, E, y) {
                if (c[W + 3] != 255)
                    return 0;
                if (E == 0)
                    return W;
                for (var V = 0; V < 2; V++) {
                    if (c[W + V] == 0) {
                        c[W + V] = c.length;
                        c.push(0, 0, y, 255)
                    }
                    var A = F(c, c[W + V], E - 1, y + 1);
                    if (A != 0)
                        return A
                }
                return 0
            }
            function G(c) {
                var W = c.a
                    , E = c.d;
                while (W < 25 && c.c < c.e) {
                    var y = c.data[c.c++];
                    if (!c.b)
                        c.c += y + 1 >>> 8;
                    E = E << 8 | y;
                    W += 8
                }
                c.a = W;
                c.d = E
            }
            function e(c, W) {
                if (W.a < c)
                    G(W);
                return W.d >> (W.a -= c) & 65535 >> 16 - c
            }
            function B(c, W) {
                var E = c[0]
                    , y = 0
                    , V = 255
                    , A = 0;
                if (W.a < 16)
                    G(W);
                var r = W.d >> W.a - 8 & 255;
                y = c[1][r];
                V = E[y + 3];
                W.a -= E[y + 2];
                while (V == 255) {
                    A = W.d >> --W.a & 1;
                    y = E[y + A];
                    V = E[y + 3]
                }
                return V
            }
            function aM(c, W) {
                if (c < 32768 >> 16 - W)
                    c += -(1 << W) + 1;
                return c
            }
            function aK(c, W) {
                var E = B(c, W);
                if (E == 0)
                    return 0;
                var y = e(E, W);
                return aM(y, E)
            }
            function m(c, W, E) {
                var y = d
                    , V = n
                    , A = x
                    , r = D;
                for (var $ = 0; $ < y; $++) {
                    c[$] = aK(r[$], E) + (1 << f - 1)
                }
                for (var a$ = y; a$ < W; a$ += y) {
                    for (var $ = 0; $ < y; $++)
                        c[a$ + $] = aK(r[$], E) + c[a$ + $ - y]
                }
                var p = W;
                for (var a2 = 1; a2 < V; a2++) {
                    for (var $ = 0; $ < y; $++) {
                        c[p + $] = aK(r[$], E) + c[p + $ - W]
                    }
                    for (var a$ = y; a$ < W; a$ += y) {
                        for (var $ = 0; $ < y; $++) {
                            var Z = p + a$ + $
                                , P = c[Z - y];
                            if (A == 1) { } else if (A == 6)
                                P = c[Z - W] + (P - c[Z - y - W] >>> 1);
                            else if (A == 7)
                                P = P + c[Z - W] >>> 1;
                            else
                                throw A;
                            c[Z] = P + aK(r[$], E)
                        }
                    }
                    p += W
                }
            }
            function t(c, W) {
                var E = e(c, W);
                return c == 16 ? -32768 : aM(E, c)
            }
            function U(c, W, E) {
                var y = K.length - J;
                for (var V = 0; V < y; V += 4) {
                    var A = K[J + V];
                    K[J + V] = K[J + V + 3];
                    K[J + V + 3] = A;
                    var A = K[J + V + 1];
                    K[J + V + 1] = K[J + V + 2];
                    K[J + V + 2] = A
                }
                var r = D[0];
                for (var $ = 0; $ < n; $++) {
                    var a$ = 32768
                        , p = 32768;
                    for (var a2 = 0; a2 < W; a2 += 2) {
                        var Z = B(r, E)
                            , P = B(r, E);
                        if (Z != 0)
                            a$ += t(Z, E);
                        if (P != 0)
                            p += t(P, E);
                        c[$ * W + a2] = a$ & 65535;
                        c[$ * W + a2 + 1] = p & 65535
                    }
                }
            }
            function T(c) {
                K = c;
                J = 0;
                q = [],
                    D = [];
                if (M() != 65496)
                    throw "e";
                while (!0) {
                    var W = M();
                    if (W == 65535) {
                        J--;
                        continue
                    }
                    var E = M();
                    if (W == 65475) {
                        f = s();
                        n = M();
                        S = M();
                        d = s();
                        v = [];
                        for (var y = 0; y < d; y++) {
                            var V = s()
                                , A = s();
                            if (A != 17)
                                throw "e";
                            var r = s();
                            if (r != 0)
                                throw "e";
                            v[V] = y
                        }
                    } else if (W == 65476) {
                        var $ = J + E - 2;
                        while (J < $)
                            a()
                    } else if (W == 65498) {
                        J++;
                        for (var y = 0; y < d; y++) {
                            var a$ = s();
                            D[v[a$]] = q[s() >>> 4]
                        }
                        x = s();
                        J += 2;
                        break
                    } else {
                        J += E - 2
                    }
                }
                var p = f > 8 ? Uint16Array : Uint8Array
                    , a2 = S * d
                    , Z = new p(n * a2)
                    , P = {
                        a: 0,
                        d: 0,
                        b: x == 8,
                        c: J,
                        data: K,
                        e: K.length
                    };
                if (P.b)
                    U(Z, a2, P);
                else
                    m(Z, a2, P);
                return Z
            }
            return T
        }()
    }(u, ay))
}())
// (c) Dean McNamee <dean@gmail.com>, 2013.
//
// https://github.com/deanm/omggif
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
// including animation and compression.  It does not rely on any specific
// underlying system, so should run in the browser, Node, or Plask.

"use strict";

function GifWriter(buf, width, height, gopts) {
    var p = 0;

    var gopts = gopts === undefined ? {} : gopts;
    var loop_count = gopts.loop === undefined ? null : gopts.loop;
    var global_palette = gopts.palette === undefined ? null : gopts.palette;

    if (width <= 0 || height <= 0 || width > 65535 || height > 65535)
        throw new Error("Width/Height invalid.");

    function check_palette_and_num_colors(palette) {
        var num_colors = palette.length;
        if (num_colors < 2 || num_colors > 256 || num_colors & (num_colors - 1)) {
            throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
        }
        return num_colors;
    }

    // - Header.
    buf[p++] = 0x47;
    buf[p++] = 0x49;
    buf[p++] = 0x46;
    // GIF
    buf[p++] = 0x38;
    buf[p++] = 0x39;
    buf[p++] = 0x61;
    // 89a

    // Handling of Global Color Table (palette) and background index.
    var gp_num_colors_pow2 = 0;
    var background = 0;
    if (global_palette !== null) {
        var gp_num_colors = check_palette_and_num_colors(global_palette);
        while (gp_num_colors >>= 1)
            ++gp_num_colors_pow2;
        gp_num_colors = 1 << gp_num_colors_pow2;
        --gp_num_colors_pow2;
        if (gopts.background !== undefined) {
            background = gopts.background;
            if (background >= gp_num_colors)
                throw new Error("Background index out of range.");
            // The GIF spec states that a background index of 0 should be ignored, so
            // this is probably a mistake and you really want to set it to another
            // slot in the palette.  But actually in the end most browsers, etc end
            // up ignoring this almost completely (including for dispose background).
            if (background === 0)
                throw new Error("Background index explicitly passed as 0.");
        }
    }

    // - Logical Screen Descriptor.
    // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.
    buf[p++] = width & 0xff;
    buf[p++] = width >> 8 & 0xff;
    buf[p++] = height & 0xff;
    buf[p++] = height >> 8 & 0xff;
    // NOTE: Indicates 0-bpp original color resolution (unused?).
    buf[p++] = (global_palette !== null ? 0x80 : 0) | // Global Color Table Flag.
        gp_num_colors_pow2;
    // NOTE: No sort flag (unused?).
    buf[p++] = background;
    // Background Color Index.
    buf[p++] = 0;
    // Pixel aspect ratio (unused?).

    // - Global Color Table
    if (global_palette !== null) {
        for (var i = 0, il = global_palette.length; i < il; ++i) {
            var rgb = global_palette[i];
            buf[p++] = rgb >> 16 & 0xff;
            buf[p++] = rgb >> 8 & 0xff;
            buf[p++] = rgb & 0xff;
        }
    }

    if (loop_count !== null) {
        // Netscape block for looping.
        if (loop_count < 0 || loop_count > 65535)
            throw new Error("Loop count invalid.");
        // Extension code, label, and length.
        buf[p++] = 0x21;
        buf[p++] = 0xff;
        buf[p++] = 0x0b;
        // NETSCAPE2.0
        buf[p++] = 0x4e;
        buf[p++] = 0x45;
        buf[p++] = 0x54;
        buf[p++] = 0x53;
        buf[p++] = 0x43;
        buf[p++] = 0x41;
        buf[p++] = 0x50;
        buf[p++] = 0x45;
        buf[p++] = 0x32;
        buf[p++] = 0x2e;
        buf[p++] = 0x30;
        // Sub-block
        buf[p++] = 0x03;
        buf[p++] = 0x01;
        buf[p++] = loop_count & 0xff;
        buf[p++] = loop_count >> 8 & 0xff;
        buf[p++] = 0x00;
        // Terminator.
    }

    var ended = false;

    this.addFrame = function (x, y, w, h, indexed_pixels, opts) {
        if (ended === true) {
            --p;
            ended = false;
        }
        // Un-end.

        opts = opts === undefined ? {} : opts;

        // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual
        // canvas width/height, I imagine?
        if (x < 0 || y < 0 || x > 65535 || y > 65535)
            throw new Error("x/y invalid.");

        if (w <= 0 || h <= 0 || w > 65535 || h > 65535)
            throw new Error("Width/Height invalid.");

        if (indexed_pixels.length < w * h)
            throw new Error("Not enough pixels for the frame size.");

        var using_local_palette = true;
        var palette = opts.palette;
        if (palette === undefined || palette === null) {
            using_local_palette = false;
            palette = global_palette;
        }

        if (palette === undefined || palette === null)
            throw new Error("Must supply either a local or global palette.");

        var num_colors = check_palette_and_num_colors(palette);

        // Compute the min_code_size (power of 2), destroying num_colors.
        var min_code_size = 0;
        while (num_colors >>= 1)
            ++min_code_size;
        num_colors = 1 << min_code_size;
        // Now we can easily get it back.

        var delay = opts.delay === undefined ? 0 : opts.delay;

        // From the spec:
        //     0 -   No disposal specified. The decoder is
        //           not required to take any action.
        //     1 -   Do not dispose. The graphic is to be left
        //           in place.
        //     2 -   Restore to background color. The area used by the
        //           graphic must be restored to the background color.
        //     3 -   Restore to previous. The decoder is required to
        //           restore the area overwritten by the graphic with
        //           what was there prior to rendering the graphic.
        //  4-7 -    To be defined.
        // NOTE(deanm): Dispose background doesn't really work, apparently most
        // browsers ignore the background palette index and clear to transparency.
        var disposal = opts.disposal === undefined ? 0 : opts.disposal;
        if (disposal < 0 || disposal > 3)
            // 4-7 is reserved.
            throw new Error("Disposal out of range.");

        var use_transparency = false;
        var transparent_index = 0;
        if (opts.transparent !== undefined && opts.transparent !== null) {
            use_transparency = true;
            transparent_index = opts.transparent;
            if (transparent_index < 0 || transparent_index >= num_colors)
                throw new Error("Transparent color index.");
        }

        if (disposal !== 0 || use_transparency || delay !== 0) {
            // - Graphics Control Extension
            buf[p++] = 0x21;
            buf[p++] = 0xf9;
            // Extension / Label.
            buf[p++] = 4;
            // Byte size.

            buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);
            buf[p++] = delay & 0xff;
            buf[p++] = delay >> 8 & 0xff;
            buf[p++] = transparent_index;
            // Transparent color index.
            buf[p++] = 0;
            // Block Terminator.
        }

        // - Image Descriptor
        buf[p++] = 0x2c;
        // Image Seperator.
        buf[p++] = x & 0xff;
        buf[p++] = x >> 8 & 0xff;
        // Left.
        buf[p++] = y & 0xff;
        buf[p++] = y >> 8 & 0xff;
        // Top.
        buf[p++] = w & 0xff;
        buf[p++] = w >> 8 & 0xff;
        buf[p++] = h & 0xff;
        buf[p++] = h >> 8 & 0xff;
        // NOTE: No sort flag (unused?).
        // TODO(deanm): Support interlace.
        buf[p++] = using_local_palette === true ? (0x80 | (min_code_size - 1)) : 0;

        // - Local Color Table
        if (using_local_palette === true) {
            for (var i = 0, il = palette.length; i < il; ++i) {
                var rgb = palette[i];
                buf[p++] = rgb >> 16 & 0xff;
                buf[p++] = rgb >> 8 & 0xff;
                buf[p++] = rgb & 0xff;
            }
        }

        p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);

        return p;
    }
        ;

    this.end = function () {
        if (ended === false) {
            buf[p++] = 0x3b;
            // Trailer.
            ended = true;
        }
        return p;
    }
        ;

    this.getOutputBuffer = function () {
        return buf;
    }
        ;
    this.setOutputBuffer = function (v) {
        buf = v;
    }
        ;
    this.getOutputBufferPosition = function () {
        return p;
    }
        ;
    this.setOutputBufferPosition = function (v) {
        p = v;
    }
        ;
}

// Main compression routine, palette indexes -> LZW code stream.
// |index_stream| must have at least one entry.
function GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {
    buf[p++] = min_code_size;
    var cur_subblock = p++;
    // Pointing at the length field.

    var clear_code = 1 << min_code_size;
    var code_mask = clear_code - 1;
    var eoi_code = clear_code + 1;
    var next_code = eoi_code + 1;

    var cur_code_size = min_code_size + 1;
    // Number of bits per code.
    var cur_shift = 0;
    // We have at most 12-bit codes, so we should have to hold a max of 19
    // bits here (and then we would write out).
    var cur = 0;

    function emit_bytes_to_buffer(bit_block_size) {
        while (cur_shift >= bit_block_size) {
            buf[p++] = cur & 0xff;
            cur >>= 8;
            cur_shift -= 8;
            if (p === cur_subblock + 256) {
                // Finished a subblock.
                buf[cur_subblock] = 255;
                cur_subblock = p++;
            }
        }
    }

    function emit_code(c) {
        cur |= c << cur_shift;
        cur_shift += cur_code_size;
        emit_bytes_to_buffer(8);
    }

    // I am not an expert on the topic, and I don't want to write a thesis.
    // However, it is good to outline here the basic algorithm and the few data
    // structures and optimizations here that make this implementation fast.
    // The basic idea behind LZW is to build a table of previously seen runs
    // addressed by a short id (herein called output code).  All data is
    // referenced by a code, which represents one or more values from the
    // original input stream.  All input bytes can be referenced as the same
    // value as an output code.  So if you didn't want any compression, you
    // could more or less just output the original bytes as codes (there are
    // some details to this, but it is the idea).  In order to achieve
    // compression, values greater then the input range (codes can be up to
    // 12-bit while input only 8-bit) represent a sequence of previously seen
    // inputs.  The decompressor is able to build the same mapping while
    // decoding, so there is always a shared common knowledge between the
    // encoding and decoder, which is also important for "timing" aspects like
    // how to handle variable bit width code encoding.
    //
    // One obvious but very important consequence of the table system is there
    // is always a unique id (at most 12-bits) to map the runs.  'A' might be
    // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship
    // can be used for an effecient lookup strategy for the code mapping.  We
    // need to know if a run has been seen before, and be able to map that run
    // to the output code.  Since we start with known unique ids (input bytes),
    // and then from those build more unique ids (table entries), we can
    // continue this chain (almost like a linked list) to always have small
    // integer values that represent the current byte chains in the encoder.
    // This means instead of tracking the input bytes (AAAABCD) to know our
    // current state, we can track the table entry for AAAABC (it is guaranteed
    // to exist by the nature of the algorithm) and the next character D.
    // Therefor the tuple of (table_entry, byte) is guaranteed to also be
    // unique.  This allows us to create a simple lookup key for mapping input
    // sequences to codes (table indices) without having to store or search
    // any of the code sequences.  So if 'AAAA' has a table entry of 12, the
    // tuple of ('AAAA', K) for any input byte K will be unique, and can be our
    // key.  This leads to a integer value at most 20-bits, which can always
    // fit in an SMI value and be used as a fast sparse array / object key.

    // Output code for the current contents of the index buffer.
    var ib_code = index_stream[0] & code_mask;
    // Load first input index.
    var code_table = {};
    // Key'd on our 20-bit "tuple".

    emit_code(clear_code);
    // Spec says first code should be a clear code.

    // First index already loaded, process the rest of the stream.
    for (var i = 1, il = index_stream.length; i < il; ++i) {
        var k = index_stream[i] & code_mask;
        var cur_key = ib_code << 8 | k;
        // (prev, k) unique tuple.
        var cur_code = code_table[cur_key];
        // buffer + k.

        // Check if we have to create a new code table entry.
        if (cur_code === undefined) {
            // We don't have buffer + k.
            // Emit index buffer (without k).
            // This is an inline version of emit_code, because this is the core
            // writing routine of the compressor (and V8 cannot inline emit_code
            // because it is a closure here in a different context).  Additionally
            // we can call emit_byte_to_buffer less often, because we can have
            // 30-bits (from our 31-bit signed SMI), and we know our codes will only
            // be 12-bits, so can safely have 18-bits there without overflow.
            // emit_code(ib_code);
            cur |= ib_code << cur_shift;
            cur_shift += cur_code_size;
            while (cur_shift >= 8) {
                buf[p++] = cur & 0xff;
                cur >>= 8;
                cur_shift -= 8;
                if (p === cur_subblock + 256) {
                    // Finished a subblock.
                    buf[cur_subblock] = 255;
                    cur_subblock = p++;
                }
            }

            if (next_code === 4096) {
                // Table full, need a clear.
                emit_code(clear_code);
                next_code = eoi_code + 1;
                cur_code_size = min_code_size + 1;
                code_table = {};
            } else {
                // Table not full, insert a new entry.
                // Increase our variable bit code sizes if necessary.  This is a bit
                // tricky as it is based on "timing" between the encoding and
                // decoder.  From the encoders perspective this should happen after
                // we've already emitted the index buffer and are about to create the
                // first table entry that would overflow our current code bit size.
                if (next_code >= (1 << cur_code_size))
                    ++cur_code_size;
                code_table[cur_key] = next_code++;
                // Insert into code table.
            }

            ib_code = k;
            // Index buffer to single input k.
        } else {
            ib_code = cur_code;
            // Index buffer to sequence in code table.
        }
    }

    emit_code(ib_code);
    // There will still be something in the index buffer.
    emit_code(eoi_code);
    // End Of Information.

    // Flush / finalize the sub-blocks stream to the buffer.
    emit_bytes_to_buffer(1);

    // Finish the sub-blocks, writing out any unfinished lengths and
    // terminating with a sub-block of length 0.  If we have already started
    // but not yet used a sub-block it can just become the terminator.
    if (cur_subblock + 1 === p) {
        // Started but unused.
        buf[cur_subblock] = 0;
    } else {
        // Started and used, write length and additional terminator block.
        buf[cur_subblock] = p - cur_subblock - 1;
        buf[p++] = 0;
    }
    return p;
}
;
var UGIF = function () {
    var a = function () {
        var j, F, c, b, H = 0, k = 0, Z = 0, P = 0, l = function () {
            var R = j >>> 3
                , i = F[R + 2] << 16 | F[R + 1] << 8 | F[R]
                , M = i >>> (j & 7) & (1 << k) - 1;
            j += k;
            return M
        }, e = new Uint32Array(4096 * 4), V = 0, W = function (R) {
            if (R == V)
                return;
            V = R;
            Z = 1 << R;
            P = Z + 1;
            for (var i = 0; i < P + 1; i++) {
                e[4 * i] = e[4 * i + 3] = i;
                e[4 * i + 1] = 65535;
                e[4 * i + 2] = 1
            }
        }, G = function (R) {
            k = R + 1;
            H = P + 1
        }, Q = function (R) {
            var i = R << 2
                , M = e[i + 2]
                , v = b + M - 1;
            while (i != 65535) {
                c[v--] = e[i];
                i = e[i + 1]
            }
            b += M
        }, L = function (R, i) {
            var M = H << 2
                , v = R << 2;
            e[M] = e[(i << 2) + 3];
            e[M + 1] = v;
            e[M + 2] = e[v + 2] + 1;
            e[M + 3] = e[v + 3];
            H++;
            if (H == 1 << k && k != 12)
                k++
        }, s = function (R, i, M, v, t, q) {
            j = i << 3;
            F = R;
            c = v;
            b = t;
            var g = i + M << 3
                , r = 0
                , p = 0;
            W(q);
            G(q);
            while (j < g && (r = l()) != P) {
                if (r == Z) {
                    G(q);
                    r = l();
                    if (r == P)
                        break;
                    Q(r)
                } else {
                    if (r < H) {
                        Q(r);
                        L(p, r)
                    } else {
                        L(p, p);
                        Q(H - 1)
                    }
                }
                p = r
            }
            return b
        };
        return s
    }(), O, f, E = new Uint8Array(128), B = function () {
        return O[f++]
    }, A = function () {
        var j = O[f + 1] << 8 | O[f];
        f += 2;
        return j
    }, U = function () {
        while (O[f] != 0)
            f += 1 + O[f];
        f++
    }, d = function (j) {
        O = new Uint8Array(j);
        f = 6;
        var F = A(), c = A(), b = B(), H = B(), k = B(), Z = b >>> 7, P = b >>> 4 & 7, X = b >>> 3 & 1, l = b >>> 0 & 7, m = f, e = 0, V, W = 0, G = 0, C = 0, z = 260;
        if (Z == 1)
            f += 3 * (1 << l + 1);
        var T = [];
        while (f + 1 < O.length) {
            var Q = B();
            if (Q == 33) {
                var L = B();
                if (L == 249) {
                    var s = B()
                        , b = B();
                    W = b >>> 2 & 7;
                    G = A();
                    z = B();
                    if ((b & 1) == 0)
                        z = 260;
                    B()
                } else if (L == 254) {
                    U()
                } else if (L == 255) {
                    U()
                } else
                    throw L
            } else if (Q == 44) {
                var R = A()
                    , i = A()
                    , M = A()
                    , v = A()
                    , t = B()
                    , q = t >>> 7;
                C = t >>> 6 & 1;
                if (q == 1) {
                    var l = t >>> 0 & 7;
                    e = f;
                    f += 3 * (1 << l + 1)
                }
                V = {
                    x: R,
                    y: i,
                    a: M,
                    O: v,
                    f: W,
                    delay: G,
                    B: z,
                    A: e == 0 ? m : e,
                    U: C
                };
                T.push(V);
                e = 0
            } else if (Q <= 8) {
                var M = V.a
                    , v = V.O
                    , S = M * v
                    , Y = 0;
                if (E.length < S * 1.2)
                    E = new Uint8Array(~~(S * 1.3));
                while (f < O.length && O[f] != 0) {
                    var J = B();
                    for (var g = 0; g < J; g++)
                        E[Y + g] = O[f + g];
                    Y += J;
                    f += J
                }
                if (f >= O.length) {
                    alert("Some frames are damaged.");
                    T.pop();
                    break
                }
                B();
                V.d = new Uint8Array(S);
                var r = a(E, 0, Y, V.d, 0, Q)
            } else if (Q == 59)
                break;
            else
                throw Q
        }
        return {
            width: F,
            height: c,
            data: O,
            frames: T
        }
    };
    function D(j, F, O, c, b, H, k, Z) {
        for (var P = 0; P < k; P++) {
            var X = b[H + P];
            if (X != Z) {
                var l = F + P << 2
                    , m = c + X * 3;
                j[l] = O[m];
                j[l + 1] = O[m + 1];
                j[l + 2] = O[m + 2];
                j[l + 3] = 255
            }
        }
    }
    var w = function (j) {
        var F = j.frames, c = j.width, b = j.height, H = new Uint8Array(c * b * 4), k, Z = [], O = j.data;
        for (var P = 0; P < F.length; P++) {
            var X = F[P]
                , l = X.x
                , m = X.y
                , e = X.a
                , T = X.O
                , V = X.f;
            if (V == 3) {
                if (k == null)
                    k = H.slice(0);
                else
                    k.set(H)
            }
            var W = [];
            if (X.U == 1) {
                for (var G = 0; G < T; G += 8)
                    W.push(G);
                for (var G = 4; G < T; G += 8)
                    W.push(G);
                for (var G = 2; G < T; G += 4)
                    W.push(G);
                for (var G = 1; G < T; G += 2)
                    W.push(G)
            }
            var C = X.d
                , z = X.A
                , Q = X.B
                , L = X.U;
            for (var G = 0; G < T; G++) {
                var s = L == 0 ? G : W[G];
                D(H, (s + m) * c + l, O, z, C, G * e, e, Q)
            }
            Z.push(H.slice(0).buffer);
            if (V < 2) { } else if (V == 2) {
                for (var G = 0; G < T; G++) {
                    var R = ((m + G) * c + l) * 4;
                    H.fill(0, R, R + e * 4)
                }
            } else if (V == 3)
                H.set(k)
        }
        return Z
    };
    return {
        decode: d,
        toRGBA8: w
    }
}()
/**
 * Gauss-Jordan elimination
 */

var linear = (function () {
    /**
  * Used internally to solve systems
  * If you want to solve A.x = B,
  * choose data=A and mirror=B.
  * mirror can be either an array representing a vector
  * or an array of arrays representing a matrix.
  */
    function Mat(data, mirror) {
        // Clone the original matrix
        this.data = new Array(data.length);
        for (var i = 0, cols = data[0].length; i < data.length; i++) {
            this.data[i] = new Array(cols);
            for (var j = 0; j < cols; j++) {
                this.data[i][j] = data[i][j];
            }
        }

        if (mirror) {
            if (typeof mirror[0] !== "object") {
                for (var i = 0; i < mirror.length; i++) {
                    mirror[i] = [mirror[i]];
                }
            }
            this.mirror = new Mat(mirror);
        }
    }

    /**
  * Swap lines i and j in the matrix
  */
    Mat.prototype.swap = function (i, j) {
        if (this.mirror)
            this.mirror.swap(i, j);
        var tmp = this.data[i];
        this.data[i] = this.data[j];
        this.data[j] = tmp;
    }

    /**
  * Multiply line number i by l
  */
    Mat.prototype.multline = function (i, l) {
        if (this.mirror)
            this.mirror.multline(i, l);
        var line = this.data[i];
        for (var k = line.length - 1; k >= 0; k--) {
            line[k] *= l;
        }
    }

    /**
  * Add line number j multiplied by l to line number i
  */
    Mat.prototype.addmul = function (i, j, l) {
        if (this.mirror)
            this.mirror.addmul(i, j, l);
        var lineI = this.data[i]
            , lineJ = this.data[j];
        for (var k = lineI.length - 1; k >= 0; k--) {
            lineI[k] = lineI[k] + l * lineJ[k];
        }
    }

    /**
  * Tests if line number i is composed only of zeroes
  */
    Mat.prototype.hasNullLine = function (i) {
        for (var j = 0; j < this.data[i].length; j++) {
            if (this.data[i][j] !== 0) {
                return false;
            }
        }
        return true;
    }

    Mat.prototype.gauss = function () {
        var pivot = 0
            , lines = this.data.length
            , columns = this.data[0].length
            , nullLines = [];

        for (var j = 0; j < columns; j++) {
            // Find the line on which there is the maximum value of column j
            var maxValue = 0
                , maxLine = 0;
            for (var k = pivot; k < lines; k++) {
                var val = this.data[k][j];
                if (Math.abs(val) > Math.abs(maxValue)) {
                    maxLine = k;
                    maxValue = val;
                }
            }
            if (maxValue === 0) {
                // The matrix is not invertible. The system may still have solutions.
                nullLines.push(pivot);
            } else {
                // The value of the pivot is maxValue
                this.multline(maxLine, 1 / maxValue);
                this.swap(maxLine, pivot);
                for (var i = 0; i < lines; i++) {
                    if (i !== pivot) {
                        this.addmul(i, pivot, -this.data[i][j]);
                    }
                }
            }
            pivot++;
        }

        // Check that the system has null lines where it should
        for (var i = 0; i < nullLines.length; i++) {
            if (!this.mirror.hasNullLine(nullLines[i])) {
                throw new Error("singular matrix");
            }
        }
        return this.mirror.data;
    }

    /**
  * Solves A.x = b
  * @param A
  * @param b
  * @return x
  */
    var exports = {};
    exports.solve = function solve(A, b) {
        var result = new Mat(A, b).gauss();
        if (result.length > 0 && result[0].length === 1) {
            // Convert Nx1 matrices to simple javascript arrays
            for (var i = 0; i < result.length; i++)
                result[i] = result[i][0];
        }
        return result;
    }

    function identity(n) {
        var id = new Array(n);
        for (var i = 0; i < n; i++) {
            id[i] = new Array(n);
            for (var j = 0; j < n; j++) {
                id[i][j] = (i === j) ? 1 : 0;
            }
        }
        return id;
    }

    /**
  * invert a matrix
  */
    exports.invert = function invert(A) {
        return new Mat(A, identity(A.length)).gauss();
    }

    return exports;
}
)();

var Typr = function () {
    var C = {};
    C.parse = function (M) {
        var Y = function (g, E, Z, A) {
            var S = C.B
                , f = C.T
                , z = {
                    cmap: f.r,
                    head: f.head,
                    hhea: f.b6,
                    maxp: f.an,
                    hmtx: f.b7,
                    name: f.name,
                    "OS/2": f.f,
                    post: f.aG,
                    loca: f.ac,
                    kern: f.R,
                    glyf: f.Y,
                    "CFF ": f.h,
                    "SVG ": f.a5,
                    COLR: f.am,
                    CPAL: f.a9
                }
                , N = {
                    _data: g,
                    _index: E,
                    _offset: Z
                };
            for (var e in z) {
                var h = C.findTable(g, e, Z);
                if (h) {
                    var B = h[0]
                        , p = A[B];
                    if (p == null)
                        p = z[e].d(g, B, h[1], N);
                    N[e] = A[B] = p
                }
            }
            return N
        }
            , S = C.B
            , g = new Uint8Array(M)
            , A = {}
            , y = S.p(g, 0, 4);
        if (y == "ttcf") {
            var Z = 4
                , x = S.V(g, Z);
            Z += 2;
            var H = S.V(g, Z);
            Z += 2;
            var X = S.m(g, Z);
            Z += 4;
            var u = [];
            for (var P = 0; P < X; P++) {
                var r = S.m(g, Z);
                Z += 4;
                u.push(Y(g, P, r, A))
            }
            return u
        } else
            return [Y(g, 0, 0, A)]
    }
        ;
    C.findTable = function (M, Y, S) {
        var g = C.B
            , A = g.V(M, S + 4)
            , y = S + 12;
        for (var Z = 0; Z < A; Z++) {
            var H = g.p(M, y, 4)
                , X = g.m(M, y + 4)
                , u = g.m(M, y + 8)
                , P = g.m(M, y + 12);
            if (H == Y)
                return [u, P];
            y += 16
        }
        return null
    }
        ;
    C.T = {};
    C.B = {
        C: function (M, Y) {
            return (M[Y] << 8 | M[Y + 1]) + (M[Y + 2] << 8 | M[Y + 3]) / (256 * 256 + 4)
        },
        s: function (M, Y) {
            var S = C.B.e(M, Y);
            return S / 16384
        },
        P: function (M, Y) {
            var S = C.B.U.B;
            S[0] = M[Y + 3];
            S[1] = M[Y + 2];
            S[2] = M[Y + 1];
            S[3] = M[Y];
            return C.B.U.a_[0]
        },
        _: function (M, Y) {
            var S = C.B.U.B;
            S[0] = M[Y];
            return C.B.U.aF[0]
        },
        e: function (M, Y) {
            var S = C.B.U.B;
            S[1] = M[Y];
            S[0] = M[Y + 1];
            return C.B.U.a2[0]
        },
        V: function (M, Y) {
            return M[Y] << 8 | M[Y + 1]
        },
        aV: function (M, Y, S) {
            M[Y] = S >> 8 & 255;
            M[Y + 1] = S & 255
        },
        aI: function (M, Y, S) {
            var g = [];
            for (var A = 0; A < S; A++) {
                var y = C.B.V(M, Y + A * 2);
                g.push(y)
            }
            return g
        },
        m: function (M, Y) {
            var S = C.B.U.B;
            S[3] = M[Y];
            S[2] = M[Y + 1];
            S[1] = M[Y + 2];
            S[0] = M[Y + 3];
            return C.B.U.az[0]
        },
        aT: function (M, Y, S) {
            M[Y] = S >> 24 & 255;
            M[Y + 1] = S >> 16 & 255;
            M[Y + 2] = S >> 8 & 255;
            M[Y + 3] = S >> 0 & 255
        },
        Q: function (M, Y) {
            return C.B.m(M, Y) * (4294967295 + 1) + C.B.m(M, Y + 4)
        },
        p: function (M, Y, S) {
            var g = "";
            for (var A = 0; A < S; A++)
                g += String.fromCharCode(M[Y + A]);
            return g
        },
        aS: function (M, Y, S) {
            for (var g = 0; g < S.length; g++)
                M[Y + g] = S.charCodeAt(g)
        },
        S: function (M, Y, S) {
            var g = "";
            for (var A = 0; A < S; A++) {
                var y = M[Y++] << 8 | M[Y++];
                g += String.fromCharCode(y)
            }
            return g
        },
        aB: window.TextDecoder ? new window.TextDecoder : null,
        a6: function (M, Y, S) {
            var g = C.B.aB;
            if (g && Y == 0 && S == M.length)
                return g.decode(M);
            return C.B.p(M, Y, S)
        },
        i: function (M, Y, S) {
            var g = [];
            for (var A = 0; A < S; A++)
                g.push(M[Y + A]);
            return g
        },
        ai: function (M, Y, S) {
            var g = [];
            for (var A = 0; A < S; A++)
                g.push(String.fromCharCode(M[Y + A]));
            return g
        },
        U: function () {
            var M = new ArrayBuffer(8);
            return {
                ax: M,
                aF: new Int8Array(M),
                B: new Uint8Array(M),
                a2: new Int16Array(M),
                aK: new Uint16Array(M),
                a_: new Int32Array(M),
                az: new Uint32Array(M)
            }
        }()
    };
    C.T.h = {
        d: function (M, Y, S) {
            var g = C.B
                , A = C.T.h;
            M = new Uint8Array(M.buffer, Y, S);
            Y = 0;
            var y = M[Y];
            Y++;
            var Z = M[Y];
            Y++;
            var x = M[Y];
            Y++;
            var H = M[Y];
            Y++;
            var X = [];
            Y = A.z(M, Y, X);
            var u = [];
            for (var P = 0; P < X.length - 1; P++)
                u.push(g.p(M, Y + X[P], X[P + 1] - X[P]));
            Y += X[X.length - 1];
            var r = [];
            Y = A.z(M, Y, r);
            var E = [];
            for (var P = 0; P < r.length - 1; P++)
                E.push(A.X(M, Y + r[P], Y + r[P + 1]));
            Y += r[r.length - 1];
            var f = E[0]
                , z = [];
            Y = A.z(M, Y, z);
            var N = [];
            for (var P = 0; P < z.length - 1; P++)
                N.push(g.p(M, Y + z[P], z[P + 1] - z[P]));
            Y += z[z.length - 1];
            A.u(M, Y, f);
            if (f.CharStrings)
                f.CharStrings = A.i(M, f.CharStrings);
            if (f.ROS) {
                Y = f.FDArray;
                var e = [];
                Y = A.z(M, Y, e);
                f.FDArray = [];
                for (var P = 0; P < e.length - 1; P++) {
                    var V = A.X(M, Y + e[P], Y + e[P + 1]);
                    A.H(M, V, N);
                    f.FDArray.push(V)
                }
                Y += e[e.length - 1];
                Y = f.FDSelect;
                f.FDSelect = [];
                var h = M[Y];
                Y++;
                if (h == 3) {
                    var B = g.V(M, Y);
                    Y += 2;
                    for (var P = 0; P < B + 1; P++) {
                        f.FDSelect.push(g.V(M, Y), M[Y + 2]);
                        Y += 3
                    }
                } else
                    throw h
            }
            if (f.charset)
                f.charset = A.aH(M, f.charset, f.CharStrings.length);
            A.H(M, f, N);
            return f
        },
        H: function (M, Y, S) {
            var g = C.T.h, A;
            if (Y.Private) {
                A = Y.Private[1];
                Y.Private = g.X(M, A, A + Y.Private[0]);
                if (Y.Private.Subrs)
                    g.u(M, A + Y.Private.Subrs, Y.Private)
            }
            for (var y in Y)
                if ("FamilyName FontName FullName Notice version Copyright".split(" ").indexOf(y) != -1)
                    Y[y] = S[Y[y] - 426 + 35]
        },
        u: function (M, Y, S) {
            S.Subrs = C.T.h.i(M, Y);
            var g, A = S.Subrs.length + 1;
            if (!1)
                g = 0;
            else if (A < 1240)
                g = 107;
            else if (A < 33900)
                g = 1131;
            else
                g = 32768;
            S.Bias = g
        },
        i: function (M, Y) {
            var S = C.B
                , g = [];
            Y = C.T.h.z(M, Y, g);
            var A = []
                , y = g.length - 1
                , Z = M.byteOffset + Y;
            for (var x = 0; x < y; x++) {
                var H = g[x];
                A.push(new Uint8Array(M.buffer, Z + H, g[x + 1] - H))
            }
            return A
        },
        aZ: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0],
        b4: function (M, Y) {
            for (var S = 0; S < M.charset.length; S++)
                if (M.charset[S] == Y)
                    return S;
            return -1
        },
        c: function (M, Y) {
            if (Y < 0 || Y > 255)
                return -1;
            return C.T.h.b4(M, C.T.h.aZ[Y])
        },
        aH: function (M, Y, S) {
            var g = C.B
                , A = [".notdef"]
                , y = M[Y];
            Y++;
            if (y == 0) {
                for (var Z = 0; Z < S; Z++) {
                    var H = g.V(M, Y);
                    Y += 2;
                    A.push(H)
                }
            } else if (y == 1 || y == 2) {
                while (A.length < S) {
                    var H = g.V(M, Y)
                        , X = 0;
                    Y += 2;
                    if (y == 1) {
                        X = M[Y];
                        Y++
                    } else {
                        X = g.V(M, Y);
                        Y += 2
                    }
                    for (var Z = 0; Z <= X; Z++) {
                        A.push(H);
                        H++
                    }
                }
            } else
                throw "error: format: " + y;
            return A
        },
        z: function (M, Y, S) {
            var g = C.B
                , A = g.V(M, Y) + 1;
            Y += 2;
            var y = M[Y];
            Y++;
            if (y == 1)
                for (var Z = 0; Z < A; Z++)
                    S.push(M[Y + Z]);
            else if (y == 2)
                for (var Z = 0; Z < A; Z++)
                    S.push(g.V(M, Y + Z * 2));
            else if (y == 3)
                for (var Z = 0; Z < A; Z++)
                    S.push(g.m(M, Y + Z * 3 - 1) & 16777215);
            else if (y == 4)
                for (var Z = 0; Z < A; Z++)
                    S.push(g.m(M, Y + Z * 4));
            else if (A != 1)
                throw "unsupported offset size: " + y + ", count: " + A;
            Y += A * y;
            return Y - 1
        },
        ap: function (M, Y, S) {
            var g = C.B
                , A = M[Y]
                , y = M[Y + 1]
                , Z = M[Y + 2]
                , x = M[Y + 3]
                , H = M[Y + 4]
                , X = 1
                , u = null
                , P = null;
            if (A <= 20) {
                u = A;
                X = 1
            }
            if (A == 12) {
                u = A * 100 + y;
                X = 2
            }
            if (21 <= A && A <= 27) {
                u = A;
                X = 1
            }
            if (A == 28) {
                P = g.e(M, Y + 1);
                X = 3
            }
            if (29 <= A && A <= 31) {
                u = A;
                X = 1
            }
            if (32 <= A && A <= 246) {
                P = A - 139;
                X = 1
            }
            if (247 <= A && A <= 250) {
                P = (A - 247) * 256 + y + 108;
                X = 2
            }
            if (251 <= A && A <= 254) {
                P = -(A - 251) * 256 - y - 108;
                X = 2
            }
            if (A == 255) {
                P = g.P(M, Y + 1) / 65535;
                X = 5
            }
            S.af = P != null ? P : "o" + u;
            S.size = X
        },
        aN: function (M, Y, S) {
            var g = Y + S
                , A = C.B
                , y = [];
            while (Y < g) {
                var Z = M[Y]
                    , x = M[Y + 1]
                    , H = M[Y + 2]
                    , X = M[Y + 3]
                    , u = M[Y + 4]
                    , P = 1
                    , r = null
                    , E = null;
                if (Z <= 20) {
                    r = Z;
                    P = 1
                }
                if (Z == 12) {
                    r = Z * 100 + x;
                    P = 2
                }
                if (Z == 19 || Z == 20) {
                    r = Z;
                    P = 2
                }
                if (21 <= Z && Z <= 27) {
                    r = Z;
                    P = 1
                }
                if (Z == 28) {
                    E = A.e(M, Y + 1);
                    P = 3
                }
                if (29 <= Z && Z <= 31) {
                    r = Z;
                    P = 1
                }
                if (32 <= Z && Z <= 246) {
                    E = Z - 139;
                    P = 1
                }
                if (247 <= Z && Z <= 250) {
                    E = (Z - 247) * 256 + x + 108;
                    P = 2
                }
                if (251 <= Z && Z <= 254) {
                    E = -(Z - 251) * 256 - x - 108;
                    P = 2
                }
                if (Z == 255) {
                    E = A.P(M, Y + 1) / 65535;
                    P = 5
                }
                y.push(E != null ? E : "o" + r);
                Y += P
            }
            return y
        },
        X: function (M, Y, S) {
            var g = C.B
                , A = {}
                , y = [];
            while (Y < S) {
                var Z = M[Y]
                    , x = M[Y + 1]
                    , H = M[Y + 2]
                    , X = M[Y + 3]
                    , u = M[Y + 4]
                    , P = 1
                    , r = null
                    , E = null;
                if (Z == 28) {
                    E = g.e(M, Y + 1);
                    P = 3
                }
                if (Z == 29) {
                    E = g.P(M, Y + 1);
                    P = 5
                }
                if (32 <= Z && Z <= 246) {
                    E = Z - 139;
                    P = 1
                }
                if (247 <= Z && Z <= 250) {
                    E = (Z - 247) * 256 + x + 108;
                    P = 2
                }
                if (251 <= Z && Z <= 254) {
                    E = -(Z - 251) * 256 - x - 108;
                    P = 2
                }
                if (Z == 255) {
                    E = g.P(M, Y + 1) / 65535;
                    P = 5;
                    throw "unknown number"
                }
                if (Z == 30) {
                    var f = []
                        , V = "";
                    P = 1;
                    while (!0) {
                        var z = M[Y + P];
                        P++;
                        var N = z >> 4
                            , e = z & 15;
                        if (N != 15)
                            f.push(N);
                        if (e != 15)
                            f.push(e);
                        if (e == 15)
                            break
                    }
                    var h = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"];
                    for (var B = 0; B < f.length; B++)
                        V += h[f[B]];
                    E = parseFloat(V)
                }
                if (Z <= 21) {
                    var p = "version Notice FullName FamilyName Weight FontBBox BlueValues OtherBlues FamilyBlues FamilyOtherBlues StdHW StdVW escape UniqueID XUID charset Encoding CharStrings Private Subrs defaultWidthX nominalWidthX".split(" ");
                    r = p[Z];
                    P = 1;
                    if (Z == 12) {
                        var p = "Copyright isFixedPitch ItalicAngle UnderlinePosition UnderlineThickness PaintType CharstringType FontMatrix StrokeWidth BlueScale BlueShift BlueFuzz StemSnapH StemSnapV ForceBold   LanguageGroup ExpansionFactor initialRandomSeed SyntheticBase PostScript BaseFontName BaseFontBlend       ROS CIDFontVersion CIDFontRevision CIDFontType CIDCount UIDBase FDArray FDSelect FontName".split(" ");
                        r = p[x];
                        P = 2
                    }
                }
                if (r != null) {
                    A[r] = y.length == 1 ? y[0] : y;
                    y = []
                } else
                    y.push(E);
                Y += P
            }
            return A
        }
    };
    C.T.r = {
        d: function (M, Y, S) {
            var g = {
                $: [],
                o: {},
                aQ: Y
            };
            M = new Uint8Array(M.buffer, Y, S);
            Y = 0;
            var A = Y
                , y = C.B
                , Z = y.V
                , x = C.T.r
                , H = Z(M, Y);
            Y += 2;
            var X = Z(M, Y);
            Y += 2;
            var u = [];
            for (var P = 0; P < X; P++) {
                var r = Z(M, Y);
                Y += 2;
                var E = Z(M, Y);
                Y += 2;
                var f = y.m(M, Y);
                Y += 4;
                var z = "p" + r + "e" + E
                    , N = u.indexOf(f);
                if (N == -1) {
                    N = g.$.length;
                    var e = {};
                    u.push(f);
                    var V = e.ab = Z(M, f);
                    if (V == 0)
                        e = x.aL(M, f, e);
                    else if (V == 4)
                        e = x.ak(M, f, e);
                    else if (V == 6)
                        e = x.aW(M, f, e);
                    else if (V == 12)
                        e = x.aP(M, f, e);
                    g.$.push(e)
                }
                if (g.o[z] != null)
                    throw "multiple tables for one platform+encoding";
                g.o[z] = N
            }
            return g
        },
        aL: function (M, Y, S) {
            var g = C.B;
            Y += 2;
            var A = g.V(M, Y);
            Y += 2;
            var y = g.V(M, Y);
            Y += 2;
            S.map = [];
            for (var Z = 0; Z < A - 6; Z++)
                S.map.push(M[Y + Z]);
            return S
        },
        ak: function (M, Y, S) {
            var g = C.B
                , A = g.V
                , y = g.aI
                , Z = Y;
            Y += 2;
            var x = A(M, Y);
            Y += 2;
            var H = A(M, Y);
            Y += 2;
            var X = A(M, Y);
            Y += 2;
            var u = X >>> 1;
            S.aa = A(M, Y);
            Y += 2;
            S.aC = A(M, Y);
            Y += 2;
            S.at = A(M, Y);
            Y += 2;
            S.a3 = y(M, Y, u);
            Y += u * 2;
            Y += 2;
            S.aq = y(M, Y, u);
            Y += u * 2;
            S.aE = [];
            for (var P = 0; P < u; P++) {
                S.aE.push(g.e(M, Y));
                Y += 2
            }
            S.F = y(M, Y, u);
            Y += u * 2;
            S.K = y(M, Y, Z + x - Y >>> 1);
            return S
        },
        aW: function (M, Y, S) {
            var g = C.B
                , A = Y;
            Y += 2;
            var y = g.V(M, Y);
            Y += 2;
            var Z = g.V(M, Y);
            Y += 2;
            S.aD = g.V(M, Y);
            Y += 2;
            var x = g.V(M, Y);
            Y += 2;
            S.K = [];
            for (var H = 0; H < x; H++) {
                S.K.push(g.V(M, Y));
                Y += 2
            }
            return S
        },
        aP: function (M, Y, S) {
            var g = C.B
                , A = g.m
                , y = Y;
            Y += 4;
            var Z = A(M, Y);
            Y += 4;
            var x = A(M, Y);
            Y += 4;
            var H = A(M, Y) * 3;
            Y += 4;
            var X = S.a8 = new Uint32Array(H);
            for (var u = 0; u < H; u += 3) {
                X[u] = A(M, Y + (u << 2));
                X[u + 1] = A(M, Y + (u << 2) + 4);
                X[u + 2] = A(M, Y + (u << 2) + 8)
            }
            return S
        }
    };
    C.T.Y = {
        d: function (M, Y, S, g) {
            var A = []
                , y = g.maxp.numGlyphs;
            for (var Z = 0; Z < y; Z++)
                A.push(null);
            return A
        },
        b0: function (M, Y) {
            var S = C.B
                , g = M._data
                , A = M.loca;
            if (A[Y] == A[Y + 1])
                return null;
            var Z = C.findTable(g, "glyf", M._offset)[0] + A[Y]
                , x = {};
            x.v = S.e(g, Z);
            Z += 2;
            x.a4 = S.e(g, Z);
            Z += 2;
            x.a1 = S.e(g, Z);
            Z += 2;
            x.ar = S.e(g, Z);
            Z += 2;
            x.aJ = S.e(g, Z);
            Z += 2;
            if (x.a4 >= x.ar || x.a1 >= x.aJ)
                return null;
            if (x.v > 0) {
                x.a = [];
                for (var H = 0; H < x.v; H++) {
                    x.a.push(S.V(g, Z));
                    Z += 2
                }
                var X = S.V(g, Z)
                    , N = 0
                    , e = 0;
                Z += 2;
                if (g.length - Z < X)
                    return null;
                x.aw = S.i(g, Z, X);
                Z += X;
                var u = x.a[x.v - 1] + 1;
                x.w = [];
                for (var H = 0; H < u; H++) {
                    var P = g[Z];
                    Z++;
                    x.w.push(P);
                    if ((P & 8) != 0) {
                        var r = g[Z];
                        Z++;
                        for (var E = 0; E < r; E++) {
                            x.w.push(P);
                            H++
                        }
                    }
                }
                x.N = [];
                for (var H = 0; H < u; H++) {
                    var f = (x.w[H] & 2) != 0
                        , z = (x.w[H] & 16) != 0;
                    if (f) {
                        x.N.push(z ? g[Z] : -g[Z]);
                        Z++
                    } else {
                        if (z)
                            x.N.push(0);
                        else {
                            x.N.push(S.e(g, Z));
                            Z += 2
                        }
                    }
                }
                x.I = [];
                for (var H = 0; H < u; H++) {
                    var f = (x.w[H] & 4) != 0
                        , z = (x.w[H] & 32) != 0;
                    if (f) {
                        x.I.push(z ? g[Z] : -g[Z]);
                        Z++
                    } else {
                        if (z)
                            x.I.push(0);
                        else {
                            x.I.push(S.e(g, Z));
                            Z += 2
                        }
                    }
                }
                for (var H = 0; H < u; H++) {
                    N += x.N[H];
                    e += x.I[H];
                    x.N[H] = N;
                    x.I[H] = e
                }
            } else {
                var V = 1 << 0, h = 1 << 1, B = 1 << 2, p = 1 << 3, U = 1 << 4, L = 1 << 5, K = 1 << 6, J = 1 << 7, $ = 1 << 8, v = 1 << 9, b = 1 << 10, Q = 1 << 11, c = 1 << 12, D;
                x.l = [];
                do {
                    D = S.V(g, Z);
                    Z += 2;
                    var l = {
                        n: {
                            k: 1,
                            b2: 0,
                            a0: 0,
                            O: 1,
                            ah: 0,
                            au: 0
                        },
                        aU: -1,
                        b3: -1
                    };
                    x.l.push(l);
                    l.b1 = S.V(g, Z);
                    Z += 2;
                    if (D & V) {
                        var m = S.e(g, Z);
                        Z += 2;
                        var W = S.e(g, Z);
                        Z += 2
                    } else {
                        var m = S._(g, Z);
                        Z++;
                        var W = S._(g, Z);
                        Z++
                    }
                    if (D & h) {
                        l.n.ah = m;
                        l.n.au = W
                    } else {
                        l.aU = m;
                        l.b3 = W
                    }
                    if (D & p) {
                        l.n.k = l.n.O = S.s(g, Z);
                        Z += 2
                    } else if (D & K) {
                        l.n.k = S.s(g, Z);
                        Z += 2;
                        l.n.O = S.s(g, Z);
                        Z += 2
                    } else if (D & J) {
                        l.n.k = S.s(g, Z);
                        Z += 2;
                        l.n.b2 = S.s(g, Z);
                        Z += 2;
                        l.n.a0 = S.s(g, Z);
                        Z += 2;
                        l.n.O = S.s(g, Z);
                        Z += 2
                    }
                } while (D & L); if (D & $) {
                    var a2 = S.V(g, Z);
                    Z += 2;
                    x.aj = [];
                    for (var H = 0; H < a2; H++) {
                        x.aj.push(g[Z]);
                        Z++
                    }
                }
            }
            return x
        }
    };
    C.T.head = {
        d: function (M, Y, S) {
            var g = C.B
                , A = {}
                , y = g.C(M, Y);
            Y += 4;
            A.fontRevision = g.C(M, Y);
            Y += 4;
            var Z = g.m(M, Y);
            Y += 4;
            var x = g.m(M, Y);
            Y += 4;
            A.flags = g.V(M, Y);
            Y += 2;
            A.unitsPerEm = g.V(M, Y);
            Y += 2;
            A.created = g.Q(M, Y);
            Y += 8;
            A.modified = g.Q(M, Y);
            Y += 8;
            A.xMin = g.e(M, Y);
            Y += 2;
            A.yMin = g.e(M, Y);
            Y += 2;
            A.xMax = g.e(M, Y);
            Y += 2;
            A.yMax = g.e(M, Y);
            Y += 2;
            A.macStyle = g.V(M, Y);
            Y += 2;
            A.lowestRecPPEM = g.V(M, Y);
            Y += 2;
            A.fontDirectionHint = g.e(M, Y);
            Y += 2;
            A.indexToLocFormat = g.e(M, Y);
            Y += 2;
            A.glyphDataFormat = g.e(M, Y);
            Y += 2;
            return A
        }
    };
    C.T.b6 = {
        d: function (M, Y, S) {
            var g = C.B
                , A = {}
                , y = g.C(M, Y);
            Y += 4;
            var Z = "ascender descender lineGap advanceWidthMax minLeftSideBearing minRightSideBearing xMaxExtent caretSlopeRise caretSlopeRun caretOffset res0 res1 res2 res3 metricDataFormat numberOfHMetrics".split(" ");
            for (var x = 0; x < Z.length; x++) {
                var H = Z[x]
                    , X = H == "advanceWidthMax" || H == "numberOfHMetrics" ? g.V : g.e;
                A[H] = X(M, Y + x * 2)
            }
            return A
        }
    };
    C.T.b7 = {
        d: function (M, Y, S, g) {
            var A = C.B
                , y = []
                , Z = []
                , x = g.maxp.numGlyphs
                , H = g.hhea.numberOfHMetrics
                , X = 0
                , u = 0
                , P = 0;
            while (P < H) {
                X = A.V(M, Y + (P << 2));
                u = A.e(M, Y + (P << 2) + 2);
                y.push(X);
                Z.push(u);
                P++
            }
            while (P < x) {
                y.push(X);
                Z.push(u);
                P++
            }
            return {
                aX: y,
                b5: Z
            }
        }
    };
    C.T.R = {
        d: function (M, Y, S, g) {
            var A = C.B
                , y = C.T.R
                , Z = A.V(M, Y);
            if (Z == 1)
                return y.ae(M, Y, S, g);
            var x = A.V(M, Y + 2);
            Y += 4;
            var H = {
                M: [],
                A: []
            };
            for (var X = 0; X < x; X++) {
                Y += 2;
                var S = A.V(M, Y);
                Y += 2;
                var u = A.V(M, Y);
                Y += 2;
                var P = u >>> 8;
                P &= 15;
                if (P == 0)
                    Y = y.Z(M, Y, H)
            }
            return H
        },
        ae: function (M, Y, S, g) {
            var A = C.B
                , y = C.T.R
                , Z = A.C(M, Y)
                , x = A.m(M, Y + 4);
            Y += 8;
            var H = {
                M: [],
                A: []
            };
            for (var X = 0; X < x; X++) {
                var S = A.m(M, Y);
                Y += 4;
                var u = A.V(M, Y);
                Y += 2;
                var P = A.V(M, Y);
                Y += 2;
                var r = u & 255;
                if (r == 0)
                    Y = y.Z(M, Y, H)
            }
            return H
        },
        Z: function (M, Y, S) {
            var g = C.B
                , A = g.V
                , y = -1
                , Z = A(M, Y)
                , x = A(M, Y + 2)
                , H = A(M, Y + 4)
                , X = A(M, Y + 6);
            Y += 8;
            for (var u = 0; u < Z; u++) {
                var P = A(M, Y);
                Y += 2;
                var r = A(M, Y);
                Y += 2;
                var E = g.e(M, Y);
                Y += 2;
                if (P != y) {
                    S.M.push(P);
                    S.A.push({
                        a7: [],
                        as: []
                    })
                }
                var f = S.A[S.A.length - 1];
                f.a7.push(r);
                f.as.push(E);
                y = P
            }
            return Y
        }
    };
    C.T.ac = {
        d: function (M, Y, S, g) {
            var A = C.B
                , y = []
                , Z = g.head.indexToLocFormat
                , x = g.maxp.numGlyphs + 1;
            if (Z == 0)
                for (var H = 0; H < x; H++)
                    y.push(A.V(M, Y + (H << 1)) << 1);
            if (Z == 1)
                for (var H = 0; H < x; H++)
                    y.push(A.m(M, Y + (H << 2)));
            return y
        }
    };
    C.T.an = {
        d: function (M, Y, S) {
            var g = C.B
                , A = g.V
                , y = {}
                , Z = g.m(M, Y);
            Y += 4;
            y.numGlyphs = A(M, Y);
            Y += 2;
            return y
        }
    };
    C.T.name = {
        d: function (M, Y, S) {
            var g = C.B, A = {}, y = g.V(M, Y), p = "postScriptName", R;
            Y += 2;
            var Z = g.V(M, Y);
            Y += 2;
            var x = g.V(M, Y);
            Y += 2;
            var H = "copyright fontFamily fontSubfamily ID fullName version postScriptName trademark manufacturer designer description urlVendor urlDesigner licence licenceURL --- typoFamilyName typoSubfamilyName compatibleFull sampleText postScriptCID wwsFamilyName wwsSubfamilyName lightPalette darkPalette".split(" ")
                , X = Y
                , u = g.V;
            for (var P = 0; P < Z; P++) {
                var r = u(M, Y), h;
                Y += 2;
                var E = u(M, Y);
                Y += 2;
                var f = u(M, Y);
                Y += 2;
                var z = u(M, Y);
                Y += 2;
                var N = u(M, Y);
                Y += 2;
                var e = u(M, Y);
                Y += 2;
                var V = X + Z * 12 + e;
                if (!1) { } else if (r == 0)
                    h = g.S(M, V, N / 2);
                else if (r == 3 && E == 0)
                    h = g.S(M, V, N / 2);
                else if (E == 0)
                    h = g.p(M, V, N);
                else if (E == 1)
                    h = g.S(M, V, N / 2);
                else if (E == 3)
                    h = g.S(M, V, N / 2);
                else if (E == 4)
                    h = g.S(M, V, N / 2);
                else if (E == 5)
                    h = g.S(M, V, N / 2);
                else if (E == 10)
                    h = g.S(M, V, N / 2);
                else if (r == 1) {
                    h = g.p(M, V, N);
                    console.log("reading unknown MAC encoding " + E + " as ASCII")
                } else {
                    console.log("unknown encoding " + E + ", platformID: " + r);
                    h = g.p(M, V, N)
                }
                var B = "p" + r + "," + f.toString(16);
                if (A[B] == null)
                    A[B] = {};
                A[B][H[z]] = h;
                A[B]._lang = f
            }
            for (var a in A)
                if (A[a][p] != null && A[a]._lang == 1033)
                    return A[a];
            for (var a in A)
                if (A[a][p] != null && A[a]._lang == 0)
                    return A[a];
            for (var a in A)
                if (A[a][p] != null && A[a]._lang == 3084)
                    return A[a];
            for (var a in A)
                if (A[a][p] != null)
                    return A[a];
            for (var a in A) {
                R = A[a];
                break
            }
            console.log("returning name table with languageID " + R.ad);
            if (R[p] == null && R.ID != null)
                R[p] = R.ID;
            return R
        }
    };
    C.T.f = {
        d: function (M, Y, S) {
            var g = C.B
                , A = g.V(M, Y);
            Y += 2;
            var y = C.T.f
                , Z = {};
            if (A == 0)
                y.T(M, Y, Z);
            else if (A == 1)
                y.G(M, Y, Z);
            else if (A == 2 || A == 3 || A == 4)
                y.av(M, Y, Z);
            else if (A == 5)
                y.ay(M, Y, Z);
            else
                throw "unknown OS/2 table version: " + A;
            return Z
        },
        T: function (M, Y, S) {
            var g = C.B;
            S.xAvgCharWidth = g.e(M, Y);
            Y += 2;
            S.usWeightClass = g.V(M, Y);
            Y += 2;
            S.usWidthClass = g.V(M, Y);
            Y += 2;
            S.fsType = g.V(M, Y);
            Y += 2;
            S.ySubscriptXSize = g.e(M, Y);
            Y += 2;
            S.ySubscriptYSize = g.e(M, Y);
            Y += 2;
            S.ySubscriptXOffset = g.e(M, Y);
            Y += 2;
            S.ySubscriptYOffset = g.e(M, Y);
            Y += 2;
            S.ySuperscriptXSize = g.e(M, Y);
            Y += 2;
            S.ySuperscriptYSize = g.e(M, Y);
            Y += 2;
            S.ySuperscriptXOffset = g.e(M, Y);
            Y += 2;
            S.ySuperscriptYOffset = g.e(M, Y);
            Y += 2;
            S.yStrikeoutSize = g.e(M, Y);
            Y += 2;
            S.yStrikeoutPosition = g.e(M, Y);
            Y += 2;
            S.sFamilyClass = g.e(M, Y);
            Y += 2;
            S.panose = g.i(M, Y, 10);
            Y += 10;
            S.ulUnicodeRange1 = g.m(M, Y);
            Y += 4;
            S.ulUnicodeRange2 = g.m(M, Y);
            Y += 4;
            S.ulUnicodeRange3 = g.m(M, Y);
            Y += 4;
            S.ulUnicodeRange4 = g.m(M, Y);
            Y += 4;
            S.achVendID = g.p(M, Y, 4);
            Y += 4;
            S.fsSelection = g.V(M, Y);
            Y += 2;
            S.usFirstCharIndex = g.V(M, Y);
            Y += 2;
            S.usLastCharIndex = g.V(M, Y);
            Y += 2;
            S.sTypoAscender = g.e(M, Y);
            Y += 2;
            S.sTypoDescender = g.e(M, Y);
            Y += 2;
            S.sTypoLineGap = g.e(M, Y);
            Y += 2;
            S.usWinAscent = g.V(M, Y);
            Y += 2;
            S.usWinDescent = g.V(M, Y);
            Y += 2;
            return Y
        },
        G: function (M, Y, S) {
            var g = C.B;
            Y = C.T.f.T(M, Y, S);
            S.ulCodePageRange1 = g.m(M, Y);
            Y += 4;
            S.ulCodePageRange2 = g.m(M, Y);
            Y += 4;
            return Y
        },
        av: function (M, Y, S) {
            var g = C.B
                , A = g.V;
            Y = C.T.f.G(M, Y, S);
            S.sxHeight = g.e(M, Y);
            Y += 2;
            S.sCapHeight = g.e(M, Y);
            Y += 2;
            S.usDefault = A(M, Y);
            Y += 2;
            S.usBreak = A(M, Y);
            Y += 2;
            S.usMaxContext = A(M, Y);
            Y += 2;
            return Y
        },
        ay: function (M, Y, S) {
            var g = C.B.V;
            Y = C.T.f.av(M, Y, S);
            S.usLowerOpticalPointSize = g(M, Y);
            Y += 2;
            S.usUpperOpticalPointSize = g(M, Y);
            Y += 2;
            return Y
        }
    };
    C.T.aG = {
        d: function (M, Y, S) {
            var g = C.B
                , A = {};
            A.version = g.C(M, Y);
            Y += 4;
            A.italicAngle = g.C(M, Y);
            Y += 4;
            A.underlinePosition = g.e(M, Y);
            Y += 2;
            A.underlineThickness = g.e(M, Y);
            Y += 2;
            return A
        }
    };
    C.T.a5 = {
        d: function (M, Y, S) {
            var g = C.B
                , A = {
                    entries: []
                }
                , y = Y
                , Z = g.V(M, Y);
            Y += 2;
            var x = g.m(M, Y);
            Y += 4;
            var H = g.m(M, Y);
            Y += 4;
            Y = x + y;
            var X = g.V(M, Y);
            Y += 2;
            for (var u = 0; u < X; u++) {
                var P = g.V(M, Y);
                Y += 2;
                var r = g.V(M, Y);
                Y += 2;
                var E = g.m(M, Y);
                Y += 4;
                var f = g.m(M, Y);
                Y += 4;
                var z = new Uint8Array(M.buffer, y + E + x, f)
                    , N = g.a6(z, 0, z.length);
                for (var e = P; e <= r; e++) {
                    A.entries[e] = N
                }
            }
            return A
        }
    };
    C.T.am = {
        d: function (M, Y, S) {
            var g = C.B
                , A = Y;
            Y += 2;
            var y = g.V(M, Y);
            Y += 2;
            var Z = g.m(M, Y);
            Y += 4;
            var x = g.m(M, Y);
            Y += 4;
            var H = g.V(M, Y);
            Y += 2;
            var X = {}
                , u = A + Z;
            for (var P = 0; P < y; P++) {
                X["g" + g.V(M, u)] = [g.V(M, u + 2), g.V(M, u + 4)];
                u += 6
            }
            var r = [];
            u = A + x;
            for (var P = 0; P < H; P++) {
                r.push(g.V(M, u), g.V(M, u + 2));
                u += 4
            }
            return [X, r]
        }
    };
    C.T.a9 = {
        d: function (M, Y, S) {
            var g = C.B
                , A = Y
                , y = g.V(M, Y);
            Y += 2;
            if (y == 0) {
                var Z = g.V(M, Y);
                Y += 2;
                var x = g.V(M, Y);
                Y += 2;
                var H = g.V(M, Y);
                Y += 2;
                var X = g.m(M, Y);
                Y += 4;
                return new Uint8Array(M.buffer, A + X, H * 4)
            } else
                throw y
        }
    };
    C.U = {
        shape: function (M, Y, S) {
            var g = function (M, A, f, S) {
                var z = A[f]
                    , N = A[f + 1]
                    , e = M.kern;
                if (e) {
                    var V = e.M.indexOf(z);
                    if (V != -1) {
                        var h = e.A[V].a7.indexOf(N);
                        if (h != -1)
                            return [0, 0, e.A[V].as[h], 0]
                    }
                }
                return [0, 0, 0, 0]
            }
                , A = []
                , X = 0
                , u = 0;
            for (var y = 0; y < Y.length; y++) {
                var Z = Y.codePointAt(y);
                if (Z > 65535)
                    y++;
                A.push(C.U.codeToGlyph(M, Z))
            }
            var H = [];
            for (var y = 0; y < A.length; y++) {
                var P = g(M, A, y, S)
                    , r = A[y]
                    , E = M.hmtx.aX[r] + P[2];
                H.push({
                    g: r,
                    cl: y,
                    dx: 0,
                    dy: 0,
                    ax: E,
                    ay: 0
                });
                X += E
            }
            return H
        },
        shapeToPath: function (M, Y, S) {
            var g = {
                q: [],
                L: []
            }
                , A = 0
                , y = 0;
            for (var Z = 0; Z < Y.length; Z++) {
                var H = Y[Z]
                    , X = C.U.glyphToPath(M, H.g)
                    , u = X.crds;
                for (var P = 0; P < u.length; P += 2) {
                    g.L.push(u[P] + A + H.dx);
                    g.L.push(u[P + 1] + y + H.dy)
                }
                if (S)
                    g.q.push(S);
                for (var P = 0; P < X.cmds.length; P++)
                    g.q.push(X.cmds[P]);
                var r = g.q.length;
                if (S)
                    if (r != 0 && g.q[r - 1] != "X")
                        g.q.push("X");
                A += H.ax;
                y += H.ay
            }
            return {
                cmds: g.q,
                crds: g.L
            }
        },
        codeToGlyph: function () {
            function M(y, Z, H) {
                var u = 0
                    , P = ~~(y.length / Z);
                while (u + 1 != P) {
                    var r = u + (P - u >>> 1);
                    if (y[r * Z] <= H)
                        u = r;
                    else
                        P = r
                }
                return u * Z
            }
            var Y = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 6158, 8232, 8233, 8239, 8288, 12288, 65279]
                , S = {};
            for (var g = 0; g < Y.length; g++)
                S[Y[g]] = 1;
            for (var g = 8192; g <= 8205; g++)
                S[g] = 1;
            function A(y, Z) {
                if (y._ctab == null) {
                    var H = y.cmap
                        , X = -1
                        , u = "p3e10 p0e4 p3e1 p1e0 p0e3 p0e1 p3e0 p3e5".split(" ");
                    for (var g = 0; g < u.length; g++)
                        if (H.o[u[g]] != null) {
                            X = H.o[u[g]];
                            break
                        }
                    if (X == -1)
                        throw "no familiar platform and encoding!";
                    y._ctab = H.$[X]
                }
                var P = y._ctab
                    , r = P.ab
                    , E = -1;
                if (r == 0) {
                    if (Z >= P.map.length)
                        E = 0;
                    else
                        E = P.map[Z]
                } else if (r == 4) {
                    var f = P.a3;
                    E = 0;
                    if (Z <= f[f.length - 1]) {
                        var z = M(f, 1, Z);
                        if (f[z] < Z)
                            z++;
                        if (Z >= P.aq[z]) {
                            var N = 0;
                            if (P.F[z] != 0)
                                N = P.K[Z - P.aq[z] + (P.F[z] >> 1) - (P.F.length - z)];
                            else
                                N = Z + P.aE[z];
                            E = N & 65535
                        }
                    }
                } else if (r == 6) {
                    var e = Z - P.aD
                        , V = P.K;
                    if (e < 0 || e >= V.length)
                        E = 0;
                    else
                        E = V[e]
                } else if (r == 12) {
                    var h = P.a8;
                    E = 0;
                    if (Z <= h[h.length - 2]) {
                        var g = M(h, 3, Z);
                        if (h[g] <= Z && Z <= h[g + 1]) {
                            E = h[g + 2] + (Z - h[g])
                        }
                    }
                } else
                    throw "unknown cmap table format " + P.ab;
                var B = y["SVG "]
                    , p = y.loca;
                if (E != 0 && y["CFF "] == null && (B == null || B.entries[E] == null) && p[E] == p[E + 1] && S[Z] == null)
                    E = 0;
                return E
            }
            return A
        }(),
        glyphToPath: function (M, Y) {
            var S = {
                q: [],
                L: []
            }
                , g = M["SVG "]
                , A = M["CFF "]
                , y = M.COLR
                , Z = C.U;
            if (g && g.entries[Y]) {
                var x = g.entries[Y];
                if (x != null) {
                    if (typeof x == "string") {
                        x = Z.SVG.aA(x);
                        g.entries[Y] = x
                    }
                    S = x
                }
            } else if (y && y[0]["g" + Y] && y[0]["g" + Y][1] > 1) {
                function H(p) {
                    var a = p.toString(16);
                    return (a.length == 1 ? "0" : "") + a
                }
                var X = M.CPAL
                    , u = y[0]["g" + Y];
                for (var P = 0; P < u[1]; P++) {
                    var r = u[0] + P
                        , E = y[1][2 * r]
                        , z = y[1][2 * r + 1] * 4
                        , N = C.U.glyphToPath(M, E)
                        , e = "#" + H(X[z + 2]) + H(X[z + 1]) + H(X[z + 0]);
                    S.q.push(e);
                    S.q = S.q.concat(N.cmds);
                    S.L = S.L.concat(N.crds);
                    S.q.push("X")
                }
            } else if (A) {
                var V = A.Private
                    , h = {
                        x: 0,
                        y: 0,
                        stack: [],
                        g: 0,
                        W: !1,
                        width: V ? V.defaultWidthX : 0,
                        open: !1
                    };
                if (A.ROS) {
                    var B = 0;
                    while (A.FDSelect[B + 2] <= Y)
                        B += 2;
                    V = A.FDArray[A.FDSelect[B + 1]].Private
                }
                Z._drawCFF(A.CharStrings[Y], h, A, V, S)
            } else if (M.glyf) {
                Z._drawGlyf(Y, M, S)
            }
            return {
                cmds: S.q,
                crds: S.L
            }
        },
        _drawGlyf: function (M, Y, S) {
            var g = Y.glyf[M];
            if (g == null)
                g = Y.glyf[M] = C.T.Y.b0(Y, M);
            if (g != null) {
                if (g.v > -1)
                    C.U._simpleGlyph(g, S);
                else
                    C.U._compoGlyph(g, Y, S)
            }
        },
        _simpleGlyph: function (M, Y) {
            var S = C.U.P;
            for (var g = 0; g < M.v; g++) {
                var A = g == 0 ? 0 : M.a[g - 1] + 1
                    , y = M.a[g];
                for (var Z = A; Z <= y; Z++) {
                    var H = Z == A ? y : Z - 1
                        , X = Z == y ? A : Z + 1
                        , u = M.w[Z] & 1
                        , P = M.w[H] & 1
                        , r = M.w[X] & 1
                        , E = M.N[Z]
                        , z = M.I[Z];
                    if (Z == A) {
                        if (u) {
                            if (P)
                                S.b(Y, M.N[H], M.I[H]);
                            else {
                                S.b(Y, E, z);
                                continue
                            }
                        } else {
                            if (P)
                                S.b(Y, M.N[H], M.I[H]);
                            else
                                S.b(Y, Math.floor((M.N[H] + E) * .5), Math.floor((M.I[H] + z) * .5))
                        }
                    }
                    if (u) {
                        if (P)
                            S.D(Y, E, z)
                    } else {
                        if (r)
                            S.aY(Y, E, z, M.N[X], M.I[X]);
                        else
                            S.aY(Y, E, z, Math.floor((E + M.N[X]) * .5), Math.floor((z + M.I[X]) * .5))
                    }
                }
                S.J(Y)
            }
        },
        _compoGlyph: function (M, Y, S) {
            for (var g = 0; g < M.l.length; g++) {
                var A = {
                    q: [],
                    L: []
                }
                    , y = M.l[g];
                C.U._drawGlyf(y.b1, Y, A);
                var Z = y.n;
                for (var x = 0; x < A.L.length; x += 2) {
                    var X = A.L[x]
                        , u = A.L[x + 1];
                    S.L.push(X * Z.k + u * Z.b2 + Z.ah);
                    S.L.push(X * Z.a0 + u * Z.O + Z.au)
                }
                for (var x = 0; x < A.q.length; x++)
                    S.q.push(A.q[x])
            }
        },
        pathToSVG: function (M, Y) {
            var S = M.cmds
                , g = M.crds
                , y = 0;
            if (Y == null)
                Y = 5;
            var A = []
                , Z = {
                    M: 2,
                    L: 2,
                    Q: 4,
                    C: 6
                };
            for (var x = 0; x < S.length; x++) {
                var H = S[x]
                    , X = y + (Z[H] ? Z[H] : 0);
                A.push(H);
                while (y < X) {
                    var u = g[y++];
                    A.push(parseFloat(u.toFixed(Y)) + (y == X ? "" : " "))
                }
            }
            return A.join("")
        },
        SVGToPath: function (M) {
            var Y = {
                q: [],
                L: []
            };
            C.U.SVG.a$(M, Y);
            return {
                cmds: Y.q,
                crds: Y.L
            }
        },
        pathToContext: function (M, Y) {
            var S = 0
                , g = M.cmds
                , A = M.crds;
            for (var y = 0; y < g.length; y++) {
                var Z = g[y];
                if (Z == "M") {
                    Y.moveTo(A[S], A[S + 1]);
                    S += 2
                } else if (Z == "L") {
                    Y.lineTo(A[S], A[S + 1]);
                    S += 2
                } else if (Z == "C") {
                    Y.bezierCurveTo(A[S], A[S + 1], A[S + 2], A[S + 3], A[S + 4], A[S + 5]);
                    S += 6
                } else if (Z == "Q") {
                    Y.quadraticCurveTo(A[S], A[S + 1], A[S + 2], A[S + 3]);
                    S += 4
                } else if (Z.charAt(0) == "#") {
                    Y.beginPath();
                    Y.fillStyle = Z
                } else if (Z == "Z") {
                    Y.closePath()
                } else if (Z == "X") {
                    Y.fill()
                }
            }
        },
        P: {
            b: function (M, Y, S) {
                M.q.push("M");
                M.L.push(Y, S)
            },
            D: function (M, Y, S) {
                M.q.push("L");
                M.L.push(Y, S)
            },
            j: function (M, Y, S, g, A, y, Z) {
                M.q.push("C");
                M.L.push(Y, S, g, A, y, Z)
            },
            aY: function (M, Y, S, g, A) {
                M.q.push("Q");
                M.L.push(Y, S, g, A)
            },
            J: function (M) {
                M.q.push("Z")
            }
        },
        _drawCFF: function (M, Y, S, g, A) {
            var y = Y.stack
                , Z = Y.g
                , x = Y.W
                , H = Y.width
                , X = Y.open
                , u = 0
                , P = Y.x
                , r = Y.y
                , E = 0
                , z = 0
                , N = 0
                , e = 0
                , V = 0
                , h = 0
                , B = 0
                , p = 0
                , U = 0
                , L = 0
                , K = C.T.h
                , J = C.U.P
                , $ = g.nominalWidthX
                , v = {
                    af: 0,
                    size: 0
                };
            while (u < M.length) {
                K.ap(M, u, v);
                var b = v.af;
                u += v.size;
                if (!1) { } else if (b == "o1" || b == "o18") {
                    var Q;
                    Q = y.length % 2 !== 0;
                    if (Q && !x) {
                        H = y.shift() + $
                    }
                    Z += y.length >> 1;
                    y.length = 0;
                    x = !0
                } else if (b == "o3" || b == "o23") {
                    var Q;
                    Q = y.length % 2 !== 0;
                    if (Q && !x) {
                        H = y.shift() + $
                    }
                    Z += y.length >> 1;
                    y.length = 0;
                    x = !0
                } else if (b == "o4") {
                    if (y.length > 1 && !x) {
                        H = y.shift() + $;
                        x = !0
                    }
                    if (X)
                        J.J(A);
                    r += y.pop();
                    J.b(A, P, r);
                    X = !0
                } else if (b == "o5") {
                    while (y.length > 0) {
                        P += y.shift();
                        r += y.shift();
                        J.D(A, P, r)
                    }
                } else if (b == "o6" || b == "o7") {
                    var c = y.length
                        , D = b == "o6";
                    for (var l = 0; l < c; l++) {
                        var m = y.shift();
                        if (D)
                            P += m;
                        else
                            r += m;
                        D = !D;
                        J.D(A, P, r)
                    }
                } else if (b == "o8" || b == "o24") {
                    var c = y.length
                        , W = 0;
                    while (W + 6 <= c) {
                        E = P + y.shift();
                        z = r + y.shift();
                        N = E + y.shift();
                        e = z + y.shift();
                        P = N + y.shift();
                        r = e + y.shift();
                        J.j(A, E, z, N, e, P, r);
                        W += 6
                    }
                    if (b == "o24") {
                        P += y.shift();
                        r += y.shift();
                        J.D(A, P, r)
                    }
                } else if (b == "o11")
                    break;
                else if (b == "o1234" || b == "o1235" || b == "o1236" || b == "o1237") {
                    if (b == "o1234") {
                        E = P + y.shift();
                        z = r;
                        N = E + y.shift();
                        e = z + y.shift();
                        U = N + y.shift();
                        L = e;
                        V = U + y.shift();
                        h = e;
                        B = V + y.shift();
                        p = r;
                        P = B + y.shift();
                        J.j(A, E, z, N, e, U, L);
                        J.j(A, V, h, B, p, P, r)
                    }
                    if (b == "o1235") {
                        E = P + y.shift();
                        z = r + y.shift();
                        N = E + y.shift();
                        e = z + y.shift();
                        U = N + y.shift();
                        L = e + y.shift();
                        V = U + y.shift();
                        h = L + y.shift();
                        B = V + y.shift();
                        p = h + y.shift();
                        P = B + y.shift();
                        r = p + y.shift();
                        y.shift();
                        J.j(A, E, z, N, e, U, L);
                        J.j(A, V, h, B, p, P, r)
                    }
                    if (b == "o1236") {
                        E = P + y.shift();
                        z = r + y.shift();
                        N = E + y.shift();
                        e = z + y.shift();
                        U = N + y.shift();
                        L = e;
                        V = U + y.shift();
                        h = e;
                        B = V + y.shift();
                        p = h + y.shift();
                        P = B + y.shift();
                        J.j(A, E, z, N, e, U, L);
                        J.j(A, V, h, B, p, P, r)
                    }
                    if (b == "o1237") {
                        E = P + y.shift();
                        z = r + y.shift();
                        N = E + y.shift();
                        e = z + y.shift();
                        U = N + y.shift();
                        L = e + y.shift();
                        V = U + y.shift();
                        h = L + y.shift();
                        B = V + y.shift();
                        p = h + y.shift();
                        if (Math.abs(B - P) > Math.abs(p - r)) {
                            P = B + y.shift()
                        } else {
                            r = p + y.shift()
                        }
                        J.j(A, E, z, N, e, U, L);
                        J.j(A, V, h, B, p, P, r)
                    }
                } else if (b == "o14") {
                    if (y.length > 0 && y.length != 4 && !x) {
                        H = y.shift() + S.nominalWidthX;
                        x = !0
                    }
                    if (y.length == 4) {
                        var a2 = 0
                            , o = y.shift()
                            , n = y.shift()
                            , as = y.shift()
                            , ag = y.shift()
                            , an = K.c(S, as)
                            , ao = K.c(S, ag);
                        C.U._drawCFF(S.CharStrings[an], Y, S, g, A);
                        Y.x = o;
                        Y.y = n;
                        C.U._drawCFF(S.CharStrings[ao], Y, S, g, A)
                    }
                    if (X) {
                        J.J(A);
                        X = !1
                    }
                } else if (b == "o19" || b == "o20") {
                    var Q;
                    Q = y.length % 2 !== 0;
                    if (Q && !x) {
                        H = y.shift() + $
                    }
                    Z += y.length >> 1;
                    y.length = 0;
                    x = !0;
                    u += Z + 7 >> 3
                } else if (b == "o21") {
                    if (y.length > 2 && !x) {
                        H = y.shift() + $;
                        x = !0
                    }
                    r += y.pop();
                    P += y.pop();
                    if (X)
                        J.J(A);
                    J.b(A, P, r);
                    X = !0
                } else if (b == "o22") {
                    if (y.length > 1 && !x) {
                        H = y.shift() + $;
                        x = !0
                    }
                    P += y.pop();
                    if (X)
                        J.J(A);
                    J.b(A, P, r);
                    X = !0
                } else if (b == "o25") {
                    while (y.length > 6) {
                        P += y.shift();
                        r += y.shift();
                        J.D(A, P, r)
                    }
                    E = P + y.shift();
                    z = r + y.shift();
                    N = E + y.shift();
                    e = z + y.shift();
                    P = N + y.shift();
                    r = e + y.shift();
                    J.j(A, E, z, N, e, P, r)
                } else if (b == "o26") {
                    if (y.length % 2) {
                        P += y.shift()
                    }
                    while (y.length > 0) {
                        E = P;
                        z = r + y.shift();
                        N = E + y.shift();
                        e = z + y.shift();
                        P = N;
                        r = e + y.shift();
                        J.j(A, E, z, N, e, P, r)
                    }
                } else if (b == "o27") {
                    if (y.length % 2) {
                        r += y.shift()
                    }
                    while (y.length > 0) {
                        E = P + y.shift();
                        z = r;
                        N = E + y.shift();
                        e = z + y.shift();
                        P = N + y.shift();
                        r = e;
                        J.j(A, E, z, N, e, P, r)
                    }
                } else if (b == "o10" || b == "o29") {
                    var t = b == "o10" ? g : S;
                    if (y.length == 0) {
                        console.log("error: empty stack")
                    } else {
                        var k = y.pop()
                            , w = t.Subrs[k + t.Bias];
                        Y.x = P;
                        Y.y = r;
                        Y.g = Z;
                        Y.W = x;
                        Y.width = H;
                        Y.open = X;
                        C.U._drawCFF(w, Y, S, g, A);
                        P = Y.x;
                        r = Y.y;
                        Z = Y.g;
                        x = Y.W;
                        H = Y.width;
                        X = Y.open
                    }
                } else if (b == "o30" || b == "o31") {
                    var c, G = y.length, W = 0, d = b == "o31";
                    c = G & ~2;
                    W += G - c;
                    while (W < c) {
                        if (d) {
                            E = P + y.shift();
                            z = r;
                            N = E + y.shift();
                            e = z + y.shift();
                            r = e + y.shift();
                            if (c - W == 5) {
                                P = N + y.shift();
                                W++
                            } else
                                P = N;
                            d = !1
                        } else {
                            E = P;
                            z = r + y.shift();
                            N = E + y.shift();
                            e = z + y.shift();
                            P = N + y.shift();
                            if (c - W == 5) {
                                r = e + y.shift();
                                W++
                            } else
                                r = e;
                            d = !0
                        }
                        J.j(A, E, z, N, e, P, r);
                        W += 4
                    }
                } else if ((b + "").charAt(0) == "o") {
                    console.log("Unknown operation: " + b, M);
                    throw b
                } else
                    y.push(b)
            }
            Y.x = P;
            Y.y = r;
            Y.g = Z;
            Y.W = x;
            Y.width = H;
            Y.open = X
        },
        SVG: function () {
            var M = {
                ag: function (u) {
                    return Math.sqrt(Math.abs(u[0] * u[3] - u[1] * u[2]))
                },
                translate: function (u, r, E) {
                    M.concat(u, [1, 0, 0, 1, r, E])
                },
                rotate: function (u, r) {
                    M.concat(u, [Math.cos(r), -Math.sin(r), Math.sin(r), Math.cos(r), 0, 0])
                },
                scale: function (u, r, E) {
                    M.concat(u, [r, 0, 0, E, 0, 0])
                },
                concat: function (u, r) {
                    var E = u[0]
                        , f = u[1]
                        , z = u[2]
                        , N = u[3]
                        , e = u[4]
                        , V = u[5];
                    u[0] = E * r[0] + f * r[2];
                    u[1] = E * r[1] + f * r[3];
                    u[2] = z * r[0] + N * r[2];
                    u[3] = z * r[1] + N * r[3];
                    u[4] = e * r[0] + V * r[2] + r[4];
                    u[5] = e * r[1] + V * r[3] + r[5]
                },
                al: function (u) {
                    var r = u[0]
                        , E = u[1]
                        , f = u[2]
                        , z = u[3]
                        , N = u[4]
                        , e = u[5]
                        , V = r * z - E * f;
                    u[0] = z / V;
                    u[1] = -E / V;
                    u[2] = -f / V;
                    u[3] = r / V;
                    u[4] = (f * e - z * N) / V;
                    u[5] = (E * N - r * e) / V
                },
                ao: function (u, r) {
                    var E = r[0]
                        , z = r[1];
                    return [E * u[0] + z * u[2] + u[4], E * u[1] + z * u[3] + u[5]]
                },
                aO: function (u, r) {
                    for (var E = 0; E < r.length; E += 2) {
                        var f = r[E]
                            , z = r[E + 1];
                        r[E] = f * u[0] + z * u[2] + u[4];
                        r[E + 1] = f * u[1] + z * u[3] + u[5]
                    }
                }
            };
            function Y(u, P, r) {
                var E = []
                    , f = 0
                    , z = 0
                    , N = 0;
                while (!0) {
                    var e = u.indexOf(P, z)
                        , V = u.indexOf(r, z);
                    if (e == -1 && V == -1)
                        break;
                    if (V == -1 || e != -1 && e < V) {
                        if (N == 0) {
                            E.push(u.slice(f, e).trim());
                            f = e + 1
                        }
                        N++;
                        z = e + 1
                    } else if (e == -1 || V != -1 && V < e) {
                        N--;
                        if (N == 0) {
                            E.push(u.slice(f, V).trim());
                            f = V + 1
                        }
                        z = V + 1
                    }
                }
                return E
            }
            function S(u) {
                var P = Y(u, "{", "}")
                    , r = {};
                for (var E = 0; E < P.length; E += 2) {
                    var f = P[E].split(",");
                    for (var z = 0; z < f.length; z++) {
                        var N = f[z].trim();
                        if (r[N] == null)
                            r[N] = "";
                        r[N] += P[E + 1]
                    }
                }
                return r
            }
            function g(u) {
                var P = Y(u, "(", ")")
                    , r = [1, 0, 0, 1, 0, 0];
                for (var E = 0; E < P.length; E += 2) {
                    var f = r;
                    r = A(P[E], P[E + 1]);
                    M.concat(r, f)
                }
                return r
            }
            function A(u, P) {
                var r = [1, 0, 0, 1, 0, 0]
                    , E = !0;
                for (var f = 0; f < P.length; f++) {
                    var z = P.charAt(f);
                    if (z == "," || z == " ")
                        E = !0;
                    else if (z == ".") {
                        if (!E) {
                            P = P.slice(0, f) + "," + P.slice(f);
                            f++
                        }
                        E = !1
                    } else if (z == "-" && f > 0 && P[f - 1] != "e") {
                        P = P.slice(0, f) + " " + P.slice(f);
                        f++;
                        E = !0
                    }
                }
                P = P.split(/\s*[\s,]\s*/).map(parseFloat);
                if (!1) { } else if (u == "translate") {
                    if (P.length == 1)
                        M.translate(r, P[0], 0);
                    else
                        M.translate(r, P[0], P[1])
                } else if (u == "scale") {
                    if (P.length == 1)
                        M.scale(r, P[0], P[0]);
                    else
                        M.scale(r, P[0], P[1])
                } else if (u == "rotate") {
                    var N = 0
                        , e = 0;
                    if (P.length != 1) {
                        N = P[1];
                        e = P[2]
                    }
                    M.translate(r, -N, -e);
                    M.rotate(r, -Math.PI * P[0] / 180);
                    M.translate(r, N, e)
                } else if (u == "matrix")
                    r = P;
                else
                    console.log("unknown transform: ", u);
                return r
            }
            function y(u) {
                var P = {
                    q: [],
                    L: []
                };
                if (u == null)
                    return P;
                var r = new DOMParser
                    , E = r.parseFromString(u, "image/svg+xml")
                    , f = E.getElementsByTagName("svg")[0]
                    , z = f.getAttribute("viewBox");
                if (z)
                    z = z.trim().split(" ").map(parseFloat);
                else
                    z = [0, 0, 1e3, 1e3];
                Z(f.children, P);
                for (var N = 0; N < P.L.length; N += 2) {
                    var e = P.L[N]
                        , V = P.L[N + 1];
                    e -= z[0];
                    V -= z[1];
                    V = -V;
                    P.L[N] = e;
                    P.L[N + 1] = V
                }
                return P
            }
            function Z(u, P, r) {
                for (var E = 0; E < u.length; E++) {
                    var f = u[E]
                        , z = f.tagName
                        , N = f.getAttribute("fill");
                    if (N == null)
                        N = r;
                    if (z == "g") {
                        var e = {
                            L: [],
                            q: []
                        };
                        Z(f.children, e, N);
                        var V = f.getAttribute("transform");
                        if (V) {
                            var h = g(V);
                            M.aO(h, e.L)
                        }
                        P.L = P.L.concat(e.L);
                        P.q = P.q.concat(e.q)
                    } else if (z == "path" || z == "circle" || z == "ellipse") {
                        P.q.push(N ? N : "#000000");
                        var B;
                        if (z == "path")
                            B = f.getAttribute("d");
                        if (z == "circle" || z == "ellipse") {
                            var p = [0, 0, 0, 0]
                                , a = ["cx", "cy", "rx", "ry", "r"];
                            for (var R = 0; R < 5; R++) {
                                var U = f.getAttribute(a[R]);
                                if (U) {
                                    U = parseFloat(U);
                                    if (R < 4)
                                        p[R] = U;
                                    else
                                        p[2] = p[3] = U
                                }
                            }
                            var L = p[0]
                                , K = p[1]
                                , J = p[2]
                                , $ = p[3];
                            B = ["M", L - J, K, "a", J, $, 0, 1, 0, J * 2, 0, "a", J, $, 0, 1, 0, -J * 2, 0].join(" ")
                        }
                        X(B, P);
                        P.q.push("X")
                    } else if (z == "defs") { } else
                        console.log(z, f)
                }
            }
            function x(u) {
                var P = []
                    , r = 0
                    , E = !1
                    , f = ""
                    , z = ""
                    , N = ""
                    , e = 0;
                while (r < u.length) {
                    var V = u.charCodeAt(r)
                        , h = u.charAt(r);
                    r++;
                    var B = 48 <= V && V <= 57 || h == "." || h == "-" || h == "e" || h == "E";
                    if (E) {
                        if (h == "-" && z != "e" || h == "." && f.indexOf(".") != -1 || B && (N == "a" || N == "A") && (e % 7 == 3 || e % 7 == 4)) {
                            P.push(parseFloat(f));
                            e++;
                            f = h
                        } else if (B)
                            f += h;
                        else {
                            P.push(parseFloat(f));
                            e++;
                            if (h != "," && h != " ") {
                                P.push(h);
                                N = h;
                                e = 0
                            }
                            E = !1
                        }
                    } else {
                        if (B) {
                            f = h;
                            E = !0
                        } else if (h != "," && h != " ") {
                            P.push(h);
                            N = h;
                            e = 0
                        }
                    }
                    z = h
                }
                if (E)
                    P.push(parseFloat(f));
                return P
            }
            function H(u, P, r) {
                var E = P;
                while (E < u.length) {
                    if (typeof u[E] == "string")
                        break;
                    E += r
                }
                return (E - P) / r
            }
            function X(u, P) {
                var r = x(u)
                    , E = 0
                    , f = 0
                    , z = 0
                    , N = 0
                    , e = 0
                    , V = P.L.length
                    , h = {
                        M: 2,
                        L: 2,
                        H: 1,
                        V: 1,
                        T: 2,
                        S: 4,
                        A: 7,
                        Q: 4,
                        C: 6
                    }
                    , B = P.q
                    , p = P.L;
                while (E < r.length) {
                    var U = r[E];
                    E++;
                    var L = U.toUpperCase();
                    if (L == "Z") {
                        B.push("Z");
                        f = N;
                        z = e
                    } else {
                        var K = h[L]
                            , J = H(r, E, K);
                        for (var $ = 0; $ < J; $++) {
                            if ($ == 1 && L == "M") {
                                U = U == L ? "L" : "l";
                                L = "L"
                            }
                            var v = 0
                                , b = 0;
                            if (U != L) {
                                v = f;
                                b = z
                            }
                            if (!1) { } else if (L == "M") {
                                f = v + r[E++];
                                z = b + r[E++];
                                B.push("M");
                                p.push(f, z);
                                N = f;
                                e = z
                            } else if (L == "L") {
                                f = v + r[E++];
                                z = b + r[E++];
                                B.push("L");
                                p.push(f, z)
                            } else if (L == "H") {
                                f = v + r[E++];
                                B.push("L");
                                p.push(f, z)
                            } else if (L == "V") {
                                z = b + r[E++];
                                B.push("L");
                                p.push(f, z)
                            } else if (L == "Q") {
                                var Q = v + r[E++]
                                    , c = b + r[E++]
                                    , D = v + r[E++]
                                    , l = b + r[E++];
                                B.push("Q");
                                p.push(Q, c, D, l);
                                f = D;
                                z = l
                            } else if (L == "T") {
                                var m = Math.max(p.length - (B[B.length - 1] == "Q" ? 4 : 2), V)
                                    , Q = f + f - p[m]
                                    , c = z + z - p[m + 1]
                                    , D = v + r[E++]
                                    , l = b + r[E++];
                                B.push("Q");
                                p.push(Q, c, D, l);
                                f = D;
                                z = l
                            } else if (L == "C") {
                                var Q = v + r[E++]
                                    , c = b + r[E++]
                                    , D = v + r[E++]
                                    , l = b + r[E++]
                                    , W = v + r[E++]
                                    , o = b + r[E++];
                                B.push("C");
                                p.push(Q, c, D, l, W, o);
                                f = W;
                                z = o
                            } else if (L == "S") {
                                var m = Math.max(p.length - (B[B.length - 1] == "C" ? 4 : 2), V)
                                    , Q = f + f - p[m]
                                    , c = z + z - p[m + 1]
                                    , D = v + r[E++]
                                    , l = b + r[E++]
                                    , W = v + r[E++]
                                    , o = b + r[E++];
                                B.push("C");
                                p.push(Q, c, D, l, W, o);
                                f = W;
                                z = o
                            } else if (L == "A") {
                                var Q = f
                                    , c = z
                                    , n = r[E++]
                                    , T = r[E++]
                                    , as = r[E++] * (Math.PI / 180)
                                    , ag = r[E++]
                                    , an = r[E++]
                                    , D = v + r[E++]
                                    , l = b + r[E++];
                                if (D == f && l == z && n == 0 && T == 0)
                                    continue;
                                var ao = (Q - D) / 2
                                    , t = (c - l) / 2
                                    , k = Math.cos(as)
                                    , w = Math.sin(as)
                                    , G = k * ao + w * t
                                    , d = -w * ao + k * t
                                    , a6 = n * n
                                    , au = T * T
                                    , aa = G * G
                                    , ap = d * d
                                    , al = (a6 * au - a6 * ap - au * aa) / (a6 * ap + au * aa)
                                    , a0 = (ag != an ? 1 : -1) * Math.sqrt(Math.max(al, 0))
                                    , a4 = a0 * (n * d) / T
                                    , a3 = -a0 * (T * G) / n
                                    , ar = k * a4 - w * a3 + (Q + D) / 2
                                    , ac = w * a4 + k * a3 + (c + l) / 2
                                    , ak = function (j, q, O, s) {
                                        var ae = Math.sqrt(j * j + q * q)
                                            , i = Math.sqrt(O * O + s * s)
                                            , a7 = (j * O + q * s) / (ae * i);
                                        return (j * s - q * O >= 0 ? 1 : -1) * Math.acos(Math.max(-1, Math.min(1, a7)))
                                    }
                                    , a5 = (G - a4) / n
                                    , ai = (d - a3) / T
                                    , a1 = ak(1, 0, a5, ai)
                                    , aj = ak(a5, ai, (-G - a4) / n, (-d - a3) / T);
                                aj = aj % (2 * Math.PI);
                                var a9 = function (a8, f, z, j, q, O, s) {
                                    var ae = function (F, I) {
                                        var am = Math.sin(I)
                                            , m = Math.cos(I)
                                            , I = F[0]
                                            , at = F[1]
                                            , ab = F[2]
                                            , u = F[3];
                                        F[0] = I * m + at * am;
                                        F[1] = -I * am + at * m;
                                        F[2] = ab * m + u * am;
                                        F[3] = -ab * am + u * m
                                    }
                                        , i = function (F, I) {
                                            for (var $ = 0; $ < I.length; $ += 2) {
                                                var f = I[$]
                                                    , z = I[$ + 1];
                                                I[$] = F[0] * f + F[2] * z + F[4];
                                                I[$ + 1] = F[1] * f + F[3] * z + F[5]
                                            }
                                        }
                                        , a7 = function (F, I) {
                                            for (var $ = 0; $ < I.length; $++)
                                                F.push(I[$])
                                        }
                                        , aq = function (F, j) {
                                            a7(F.q, j.q);
                                            a7(F.L, j.L)
                                        };
                                    if (s)
                                        while (O > q)
                                            O -= 2 * Math.PI;
                                    else
                                        while (O < q)
                                            O += 2 * Math.PI;
                                    var ad = (O - q) / 4
                                        , ah = Math.cos(ad / 2)
                                        , af = -Math.sin(ad / 2)
                                        , Q = (4 - ah) / 3
                                        , c = af == 0 ? af : (1 - ah) * (3 - ah) / (3 * af)
                                        , D = Q
                                        , l = -c
                                        , W = ah
                                        , o = -af
                                        , K = [Q, c, D, l, W, o]
                                        , P = {
                                            q: ["C", "C", "C", "C"],
                                            L: K.slice(0)
                                        }
                                        , _ = [1, 0, 0, 1, 0, 0];
                                    ae(_, -ad);
                                    for (var $ = 0; $ < 3; $++) {
                                        i(_, K);
                                        a7(P.L, K)
                                    }
                                    ae(_, -q + ad / 2);
                                    _[0] *= j;
                                    _[1] *= j;
                                    _[2] *= j;
                                    _[3] *= j;
                                    _[4] = f;
                                    _[5] = z;
                                    i(_, P.L);
                                    i(a8.aM, P.L);
                                    aq(a8.aR, P)
                                }
                                    , a8 = {
                                        aR: P,
                                        aM: [n * k, n * w, -T * w, T * k, ar, ac]
                                    };
                                a9(a8, 0, 0, 1, a1, a1 + aj, an == 0);
                                f = D;
                                z = l
                            } else
                                console.log("Unknown SVG command " + U)
                        }
                    }
                }
            }
            return {
                cssMap: S,
                readTrnf: g,
                a$: X,
                aA: y
            }
        }(),
        initHB: function (M, Y) {
            var S = function (g) {
                var A = 0;
                if ((g & 4294967295 - (1 << 7) + 1) == 0) {
                    A = 1
                } else if ((g & 4294967295 - (1 << 11) + 1) == 0) {
                    A = 2
                } else if ((g & 4294967295 - (1 << 16) + 1) == 0) {
                    A = 3
                } else if ((g & 4294967295 - (1 << 21) + 1) == 0) {
                    A = 4
                }
                return A
            };
            fetch(M).then(function (g) {
                return g.arrayBuffer()
            }).then(function (g) {
                return WebAssembly.instantiate(g)
            }).then(function (g) {
                console.log("HB ready");
                var A = g.instance.exports, y = A.memory, Z, x, H, X, u, P, r, E;
                C.U.shapeHB = function () {
                    var f = function (N) {
                        var e = A.hb_buffer_get_length(N)
                            , V = []
                            , h = A.hb_buffer_get_glyph_infos(N, 0) >>> 2
                            , B = A.hb_buffer_get_glyph_positions(N, 0) >>> 2;
                        for (var p = 0; p < e; ++p) {
                            var a = h + p * 5
                                , R = B + p * 5;
                            V.push({
                                g: x[a + 0],
                                cl: x[a + 2],
                                ax: H[R + 0],
                                ay: H[R + 1],
                                dx: H[R + 2],
                                dy: H[R + 3]
                            })
                        }
                        return V
                    }, z;
                    return function (N, e, V) {
                        var h = N._data
                            , B = N.name.postScriptName
                            , p = y.buffer.byteLength
                            , a = 2 * h.length + e.length * 16 + 4e6
                            , v = 0
                            , b = 0;
                        if (p < a) {
                            y.grow((a - p >>> 16) + 4)
                        }
                        Z = new Uint8Array(y.buffer);
                        x = new Uint32Array(y.buffer);
                        H = new Int32Array(y.buffer);
                        if (X != B) {
                            if (u != null) {
                                A.hb_blob_destroy(u);
                                A.free(P);
                                A.hb_face_destroy(r);
                                A.hb_font_destroy(E)
                            }
                            P = A.malloc(h.byteLength);
                            Z.set(h, P);
                            u = A.hb_blob_create(P, h.byteLength, 2, 0, 0);
                            r = A.hb_face_create(u, 0);
                            E = A.hb_font_create(r);
                            X = B
                        }
                        if (window.TextEncoder == null) {
                            alert("Your browser is too old. Please, update it.");
                            return
                        }
                        if (z == null)
                            z = new window.TextEncoder("utf8");
                        var R = A.hb_buffer_create()
                            , U = z.encode(e)
                            , L = U.length
                            , K = A.malloc(L);
                        Z.set(U, K);
                        A.hb_buffer_add_utf8(R, K, L, 0, L);
                        A.free(K);
                        A.hb_buffer_set_direction(R, V ? 4 : 5);
                        A.hb_buffer_guess_segment_properties(R);
                        A.hb_shape(E, R, 0, 0);
                        var J = f(R);
                        A.hb_buffer_destroy(R);
                        var $ = J.slice(0);
                        if (!V)
                            $.reverse();
                        for (var Q = 1; Q < $.length; Q++) {
                            var c = $[Q]
                                , D = c.cl;
                            while (!0) {
                                var l = e.codePointAt(v)
                                    , m = S(l);
                                if (b + m <= D) {
                                    b += m;
                                    v += l <= 65535 ? 1 : 2
                                } else
                                    break
                            }
                            c.cl = v
                        }
                        return J
                    }
                }();
                Y()
            })
        }
    };
    return C
}()

var UZIP = {};
if (typeof module == "object")
    module.exports = UZIP;

UZIP["parse"] = function (buf, onlyNames) // ArrayBuffer
{
    var rUs = UZIP.bin.readUshort
        , rUi = UZIP.bin.readUint
        , o = 0
        , out = {};
    var data = new Uint8Array(buf);
    var eocd = data.length - 4;

    while (rUi(data, eocd) != 0x06054b50)
        eocd--;

    var o = eocd;
    o += 4;
    // sign  = 0x06054b50
    o += 4;
    // disks = 0;
    var cnu = rUs(data, o);
    o += 2;
    var cnt = rUs(data, o);
    o += 2;

    var csize = rUi(data, o);
    o += 4;
    var coffs = rUi(data, o);
    o += 4;

    o = coffs;
    for (var i = 0; i < cnu; i++) {
        var sign = rUi(data, o);
        o += 4;
        o += 4;
        // versions;
        o += 4;
        // flag + compr
        o += 4;
        // time

        var crc32 = rUi(data, o);
        o += 4;
        var csize = rUi(data, o);
        o += 4;
        var usize = rUi(data, o);
        o += 4;

        var nl = rUs(data, o)
            , el = rUs(data, o + 2)
            , cl = rUs(data, o + 4);
        o += 6;
        // name, extra, comment
        o += 8;
        // disk, attribs

        var roff = rUi(data, o);
        o += 4;
        o += nl + el + cl;

        UZIP._readLocal(data, roff, out, csize, usize, onlyNames);
    }
    //console.log(out);
    return out;
}

UZIP._readLocal = function (data, o, out, csize, usize, onlyNames) {
    var rUs = UZIP.bin.readUshort
        , rUi = UZIP.bin.readUint;
    var sign = rUi(data, o);
    o += 4;
    var ver = rUs(data, o);
    o += 2;
    var gpflg = rUs(data, o);
    o += 2;
    //if((gpflg&8)!=0) throw "unknown sizes";
    var cmpr = rUs(data, o);
    o += 2;

    var time = rUi(data, o);
    o += 4;

    var crc32 = rUi(data, o);
    o += 4;
    //var csize = rUi(data, o);  o+=4;
    //var usize = rUi(data, o);  o+=4;
    o += 8;

    var nlen = rUs(data, o);
    o += 2;
    var elen = rUs(data, o);
    o += 2;

    var name = (gpflg & 2048) == 0 ? UZIP.bin.readIBM(data, o, nlen) : UZIP.bin.readUTF8(data, o, nlen);
    o += nlen;
    //console.log(name);
    o += elen;

    //console.log(sign.toString(16), ver, gpflg, cmpr, crc32.toString(16), "csize, usize", csize, usize, nlen, elen, name, o);
    if (onlyNames) {
        out[name] = {
            size: usize,
            csize: csize
        };
        return;
    }
    var file = new Uint8Array(data.buffer, o);
    if (false) { } else if (cmpr == 0)
        out[name] = new Uint8Array(file.buffer.slice(o, o + csize));
    else if (cmpr == 8) {
        var buf = new Uint8Array(usize);
        UZIP.inflateRaw(file, buf);
        /*var nbuf = pako["inflateRaw"](file);
    if(usize>8514000) {
      //console.log(PUtils.readASCII(buf , 8514500, 500));
      //console.log(PUtils.readASCII(nbuf, 8514500, 500));
    }
    for(var i=0; i<buf.length; i++) if(buf[i]!=nbuf[i]) {  console.log(buf.length, nbuf.length, usize, i);  throw "e";  }
    */
        out[name] = buf;
    } else
        throw "unknown compression method: " + cmpr;
}

UZIP.inflateRaw = function (file, buf) {
    return UZIP.F.inflate(file, buf);
}
UZIP.inflate = function (file, buf) {
    var CMF = file[0]
        , FLG = file[1];
    var CM = (CMF & 15)
        , CINFO = (CMF >>> 4);
    //console.log(CM, CINFO,CMF,FLG);
    return UZIP.inflateRaw(new Uint8Array(file.buffer, file.byteOffset + 2, file.length - 6), buf);
}
UZIP.deflate = function (data, opts /*, buf, off*/
) {
    if (opts == null)
        opts = {
            level: 6
        };
    var off = 0
        , buf = new Uint8Array(50 + Math.floor(data.length * 1.1));
    buf[off] = 120;
    buf[off + 1] = 156;
    off += 2;
    off = UZIP.F.deflateRaw(data, buf, off, opts.level);
    var crc = UZIP.adler(data, 0, data.length);
    buf[off + 0] = ((crc >>> 24) & 255);
    buf[off + 1] = ((crc >>> 16) & 255);
    buf[off + 2] = ((crc >>> 8) & 255);
    buf[off + 3] = ((crc >>> 0) & 255);
    return new Uint8Array(buf.buffer, 0, off + 4);
}
UZIP.deflateRaw = function (data, opts) {
    if (opts == null)
        opts = {
            level: 6
        };
    var buf = new Uint8Array(50 + Math.floor(data.length * 1.1));
    var off = UZIP.F.deflateRaw(data, buf, off, opts.level);
    return new Uint8Array(buf.buffer, 0, off);
}

UZIP.encode = function (obj, noCmpr) {
    if (noCmpr == null)
        noCmpr = false;
    var tot = 0
        , wUi = UZIP.bin.writeUint
        , wUs = UZIP.bin.writeUshort;
    var zpd = {};
    for (var p in obj) {
        var cpr = !UZIP._noNeed(p) && !noCmpr
            , buf = obj[p]
            , crc = UZIP.crc.crc(buf, 0, buf.length);
        zpd[p] = {
            cpr: cpr,
            usize: buf.length,
            crc: crc,
            file: (cpr ? UZIP.deflateRaw(buf) : buf)
        };
    }

    for (var p in zpd)
        tot += zpd[p].file.length + 30 + 46 + 2 * UZIP.bin.sizeUTF8(p);
    tot += 22;

    var data = new Uint8Array(tot)
        , o = 0;
    var fof = []

    for (var p in zpd) {
        var file = zpd[p];
        fof.push(o);
        o = UZIP._writeHeader(data, o, p, file, 0);
    }
    var i = 0
        , ioff = o;
    for (var p in zpd) {
        var file = zpd[p];
        fof.push(o);
        o = UZIP._writeHeader(data, o, p, file, 1, fof[i++]);
    }
    var csize = o - ioff;

    wUi(data, o, 0x06054b50);
    o += 4;
    o += 4;
    // disks
    wUs(data, o, i);
    o += 2;
    wUs(data, o, i);
    o += 2;
    // number of c d records
    wUi(data, o, csize);
    o += 4;
    wUi(data, o, ioff);
    o += 4;
    o += 2;
    return data.buffer;
}
// no need to compress .PNG, .ZIP, .JPEG ....
UZIP._noNeed = function (fn) {
    var ext = fn.split(".").pop().toLowerCase();
    return "png,jpg,jpeg,zip".indexOf(ext) != -1;
}

UZIP._writeHeader = function (data, o, p, obj, t, roff) {
    var wUi = UZIP.bin.writeUint
        , wUs = UZIP.bin.writeUshort;
    var file = obj.file;

    wUi(data, o, t == 0 ? 0x04034b50 : 0x02014b50);
    o += 4;
    // sign
    if (t == 1)
        o += 2;
    // ver made by
    wUs(data, o, 20);
    o += 2;
    // ver
    wUs(data, o, 2048);
    o += 2;
    // gflip
    wUs(data, o, obj.cpr ? 8 : 0);
    o += 2;
    // cmpr

    wUi(data, o, 0);
    o += 4;
    // time		
    wUi(data, o, obj.crc);
    o += 4;
    // crc32
    wUi(data, o, file.length);
    o += 4;
    // csize
    wUi(data, o, obj.usize);
    o += 4;
    // usize

    wUs(data, o, UZIP.bin.sizeUTF8(p));
    o += 2;
    // nlen
    wUs(data, o, 0);
    o += 2;
    // elen

    if (t == 1) {
        o += 2;
        // comment length
        o += 2;
        // disk number
        o += 6;
        // attributes
        wUi(data, o, roff);
        o += 4;
        // usize
    }
    var nlen = UZIP.bin.writeUTF8(data, o, p);
    o += nlen;
    if (t == 0) {
        data.set(file, o);
        o += file.length;
    }
    return o;
}

UZIP.crc = {
    table: (function () {
        var tab = new Uint32Array(256);
        for (var n = 0; n < 256; n++) {
            var c = n;
            for (var k = 0; k < 8; k++) {
                if (c & 1)
                    c = 0xedb88320 ^ (c >>> 1);
                else
                    c = c >>> 1;
            }
            tab[n] = c;
        }
        return tab;
    }
    )(),
    update: function (c, buf, off, len) {
        for (var i = 0; i < len; i++)
            c = UZIP.crc.table[(c ^ buf[off + i]) & 0xff] ^ (c >>> 8);
        return c;
    },
    crc: function (b, o, l) {
        return UZIP.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;
    }
}
UZIP.adler = function (data, o, len) {
    var a = 1
        , b = 0;
    var off = o
        , end = o + len;
    while (off < end) {
        var eend = Math.min(off + 5552, end);
        while (off < eend) {
            a += data[off++];
            b += a;
        }
        a = a % 65521;
        b = b % 65521;
    }
    return (b << 16) | a;
}

UZIP.bin = {
    readUshort: function (buff, p) {
        return (buff[p]) | (buff[p + 1] << 8);
    },
    writeUshort: function (buff, p, n) {
        buff[p] = (n) & 255;
        buff[p + 1] = (n >> 8) & 255;
    },
    readUint: function (buff, p) {
        return (buff[p + 3] * (256 * 256 * 256)) + ((buff[p + 2] << 16) | (buff[p + 1] << 8) | buff[p]);
    },
    writeUint: function (buff, p, n) {
        buff[p] = n & 255;
        buff[p + 1] = (n >> 8) & 255;
        buff[p + 2] = (n >> 16) & 255;
        buff[p + 3] = (n >> 24) & 255;
    },
    readASCII: function (buff, p, l) {
        var s = "";
        for (var i = 0; i < l; i++)
            s += String.fromCharCode(buff[p + i]);
        return s;
    },
    writeASCII: function (data, p, s) {
        for (var i = 0; i < s.length; i++)
            data[p + i] = s.charCodeAt(i);
    },
    pad: function (n) {
        return n.length < 2 ? "0" + n : n;
    },
    readIBM: function (buff, p, l) {
        var codes = [0xc7, 0xfc, 0xe9, 0xe2, 0xe4, 0xe0, 0xe5, 0xe7, 0xea, 0xeb, 0xe8, 0xef, 0xee, 0xec, 0xc4, 0xc5, 0xc9, 0xe6, 0xc6, 0xf4, 0xf6, 0xf2, 0xfb, 0xf9, 0xff, 0xd6, 0xdc, 0xa2, 0xa3, 0xa5, 0xa7, 0x192, 0xe1, 0xed, 0xf3, 0xfa, 0xf1, 0xd1, 0xaa, 0xba, 0xbf, 0x2310, 0xac, 0xbd, 0xbc, 0xa1, 0xab, 0xbb]
        var out = "";
        for (var i = 0; i < l; i++) {
            var cc = buff[p + i];
            if (cc < 0x80)
                cc = cc;
            else if (cc < 0xb0)
                cc = codes[cc - 0x80];
            else
                cc = 32;
            out += String.fromCharCode(cc);
        }
        return out;
    },
    readUTF8: function (buff, p, l) {
        var s = "", ns;
        for (var i = 0; i < l; i++)
            s += "%" + UZIP.bin.pad(buff[p + i].toString(16));
        try {
            ns = decodeURIComponent(s);
        } catch (e) {
            return UZIP.bin.readASCII(buff, p, l);
        }
        return ns;
    },
    writeUTF8: function (buff, p, str) {
        var strl = str.length
            , i = 0;
        for (var ci = 0; ci < strl; ci++) {
            var code = str.charCodeAt(ci);
            if ((code & (0xffffffff - (1 << 7) + 1)) == 0) {
                buff[p + i] = (code);
                i++;
            } else if ((code & (0xffffffff - (1 << 11) + 1)) == 0) {
                buff[p + i] = (192 | (code >> 6));
                buff[p + i + 1] = (128 | ((code >> 0) & 63));
                i += 2;
            } else if ((code & (0xffffffff - (1 << 16) + 1)) == 0) {
                buff[p + i] = (224 | (code >> 12));
                buff[p + i + 1] = (128 | ((code >> 6) & 63));
                buff[p + i + 2] = (128 | ((code >> 0) & 63));
                i += 3;
            } else if ((code & (0xffffffff - (1 << 21) + 1)) == 0) {
                buff[p + i] = (240 | (code >> 18));
                buff[p + i + 1] = (128 | ((code >> 12) & 63));
                buff[p + i + 2] = (128 | ((code >> 6) & 63));
                buff[p + i + 3] = (128 | ((code >> 0) & 63));
                i += 4;
            } else
                throw "e";
        }
        return i;
    },
    sizeUTF8: function (str) {
        var strl = str.length
            , i = 0;
        for (var ci = 0; ci < strl; ci++) {
            var code = str.charCodeAt(ci);
            if ((code & (0xffffffff - (1 << 7) + 1)) == 0) {
                i++;
            } else if ((code & (0xffffffff - (1 << 11) + 1)) == 0) {
                i += 2;
            } else if ((code & (0xffffffff - (1 << 16) + 1)) == 0) {
                i += 3;
            } else if ((code & (0xffffffff - (1 << 21) + 1)) == 0) {
                i += 4;
            } else
                throw "e";
        }
        return i;
    }
}

UZIP.F = {};

UZIP.F.deflateRaw = function (data, out, opos, lvl) {
    var opts = [/*
		 ush good_length; /* reduce lazy search above this match length 
		 ush max_lazy;    /* do not perform lazy search above this match length 
         ush nice_length; /* quit search above this match length 
	*/
        /*      good lazy nice chain */
        /* 0 */
        [0, 0, 0, 0, 0], /* store only */
        /* 1 */
        [4, 4, 8, 4, 0], /* max speed, no lazy matches */
        /* 2 */
        [4, 5, 16, 8, 0], /* 3 */
        [4, 6, 16, 16, 0],
        /* 4 */
        [4, 10, 16, 32, 0], /* lazy matches */
        /* 5 */
        [8, 16, 32, 32, 0], /* 6 */
        [8, 16, 128, 128, 0], /* 7 */
        [8, 32, 128, 256, 0], /* 8 */
        [32, 128, 258, 1024, 1], /* 9 */
        [32, 258, 258, 4096, 1]];
    /* max compression */

    var opt = opts[lvl];

    var U = UZIP.F.U
        , goodIndex = UZIP.F._goodIndex
        , hash = UZIP.F._hash
        , putsE = UZIP.F._putsE;
    var i = 0
        , pos = opos << 3
        , cvrd = 0
        , dlen = data.length;

    if (lvl == 0) {
        while (i < dlen) {
            var len = Math.min(0xffff, dlen - i);
            putsE(out, pos, (i + len == dlen ? 1 : 0));
            pos = UZIP.F._copyExact(data, i, len, out, pos + 8);
            i += len;
        }
        return pos >>> 3;
    }

    var lits = U.lits
        , strt = U.strt
        , prev = U.prev
        , li = 0
        , lc = 0
        , bs = 0
        , ebits = 0
        , c = 0
        , nc = 0;
    // last_item, literal_count, block_start
    if (dlen > 2) {
        nc = UZIP.F._hash(data, 0);
        strt[nc] = 0;
    }
    var nmch = 0
        , nmci = 0;

    for (i = 0; i < dlen; i++) {
        c = nc;
        //*
        if (i + 1 < dlen - 2) {
            nc = UZIP.F._hash(data, i + 1);
            var ii = ((i + 1) & 0x7fff);
            prev[ii] = strt[nc];
            strt[nc] = ii;
        }
        //*/
        if (cvrd <= i) {
            if ((li > 14000 || lc > 26697) && (dlen - i) > 100) {
                if (cvrd < i) {
                    lits[li] = i - cvrd;
                    li += 2;
                    cvrd = i;
                }
                pos = UZIP.F._writeBlock(((i == dlen - 1) || (cvrd == dlen)) ? 1 : 0, lits, li, ebits, data, bs, i - bs, out, pos);
                li = lc = ebits = 0;
                bs = i;
            }

            var mch = 0;
            //if(nmci==i) mch= nmch;  else 
            if (i < dlen - 2)
                mch = UZIP.F._bestMatch(data, i, prev, c, Math.min(opt[2], dlen - i), opt[3]);
            /*
      if(mch!=0 && opt[4]==1 && (mch>>>16)<opt[1] && i+1<dlen-2) {
        nmch = UZIP.F._bestMatch(data, i+1, prev, nc, opt[2], opt[3]);  nmci=i+1;
        //var mch2 = UZIP.F._bestMatch(data, i+2, prev, nnc);  //nmci=i+1;
        if((nmch>>>16)>(mch>>>16)) mch=0;
      }//*/
            var len = mch >>> 16
                , dst = mch & 0xffff;
            //if(i-dst<0) throw "e";
            if (mch != 0) {
                var len = mch >>> 16
                    , dst = mch & 0xffff;
                //if(i-dst<0) throw "e";
                var lgi = goodIndex(len, U.of0);
                U.lhst[257 + lgi]++;
                var dgi = goodIndex(dst, U.df0);
                U.dhst[dgi]++;
                ebits += U.exb[lgi] + U.dxb[dgi];
                lits[li] = (len << 23) | (i - cvrd);
                lits[li + 1] = (dst << 16) | (lgi << 8) | dgi;
                li += 2;
                cvrd = i + len;
            } else {
                U.lhst[data[i]]++;
            }
            lc++;
        }
    }
    if (bs != i || data.length == 0) {
        if (cvrd < i) {
            lits[li] = i - cvrd;
            li += 2;
            cvrd = i;
        }
        pos = UZIP.F._writeBlock(1, lits, li, ebits, data, bs, i - bs, out, pos);
        li = 0;
        lc = 0;
        li = lc = ebits = 0;
        bs = i;
    }
    while ((pos & 7) != 0)
        pos++;
    return pos >>> 3;
}
UZIP.F._bestMatch = function (data, i, prev, c, nice, chain) {
    var ci = (i & 0x7fff)
        , pi = prev[ci];
    //console.log("----", i);
    var dif = ((ci - pi + (1 << 15)) & 0x7fff);
    if (pi == ci || c != UZIP.F._hash(data, i - dif))
        return 0;
    var tl = 0
        , td = 0;
    // top length, top distance
    var dlim = Math.min(0x7fff, i);
    while (dif <= dlim && --chain != 0 && pi != ci /*&& c==UZIP.F._hash(data,i-dif)*/
    ) {
        if (tl == 0 || (data[i + tl] == data[i + tl - dif])) {
            var cl = UZIP.F._howLong(data, i, dif);
            if (cl > tl) {
                tl = cl;
                td = dif;
                if (tl >= nice)
                    break;
                //* 
                if (dif + 2 < cl)
                    cl = dif + 2;
                var maxd = 0;
                // pi does not point to the start of the word
                for (var j = 0; j < cl - 2; j++) {
                    var ei = (i - dif + j + (1 << 15)) & 0x7fff;
                    var li = prev[ei];
                    var curd = (ei - li + (1 << 15)) & 0x7fff;
                    if (curd > maxd) {
                        maxd = curd;
                        pi = ei;
                    }
                }
                //*/
            }
        }

        ci = pi;
        pi = prev[ci];
        dif += ((ci - pi + (1 << 15)) & 0x7fff);
    }
    return (tl << 16) | td;
}
UZIP.F._howLong = function (data, i, dif) {
    if (data[i] != data[i - dif] || data[i + 1] != data[i + 1 - dif] || data[i + 2] != data[i + 2 - dif])
        return 0;
    var oi = i
        , l = Math.min(data.length, i + 258);
    i += 3;
    //while(i+4<l && data[i]==data[i-dif] && data[i+1]==data[i+1-dif] && data[i+2]==data[i+2-dif] && data[i+3]==data[i+3-dif]) i+=4;
    while (i < l && data[i] == data[i - dif])
        i++;
    return i - oi;
}
UZIP.F._hash = function (data, i) {
    return (((data[i] << 8) | data[i + 1]) + (data[i + 2] << 4)) & 0xffff;
    //var hash_shift = 0, hash_mask = 255;
    //var h = data[i+1] % 251;
    //h = (((h << 8) + data[i+2]) % 251);
    //h = (((h << 8) + data[i+2]) % 251);
    //h = ((h<<hash_shift) ^ (c) ) & hash_mask;
    //return h | (data[i]<<8);
    //return (data[i] | (data[i+1]<<8));
}
//UZIP.___toth = 0;
UZIP.saved = 0;
UZIP.F._writeBlock = function (BFINAL, lits, li, ebits, data, o0, l0, out, pos) {
    var U = UZIP.F.U
        , putsF = UZIP.F._putsF
        , putsE = UZIP.F._putsE;

    //*
    var T, ML, MD, MH, numl, numd, numh, lset, dset;
    U.lhst[256]++;
    T = UZIP.F.getTrees();
    ML = T[0];
    MD = T[1];
    MH = T[2];
    numl = T[3];
    numd = T[4];
    numh = T[5];
    lset = T[6];
    dset = T[7];

    var cstSize = (((pos + 3) & 7) == 0 ? 0 : 8 - ((pos + 3) & 7)) + 32 + (l0 << 3);
    var fxdSize = ebits + UZIP.F.contSize(U.fltree, U.lhst) + UZIP.F.contSize(U.fdtree, U.dhst);
    var dynSize = ebits + UZIP.F.contSize(U.ltree, U.lhst) + UZIP.F.contSize(U.dtree, U.dhst);
    dynSize += 14 + 3 * numh + UZIP.F.contSize(U.itree, U.ihst) + (U.ihst[16] * 2 + U.ihst[17] * 3 + U.ihst[18] * 7);

    for (var j = 0; j < 286; j++)
        U.lhst[j] = 0;
    for (var j = 0; j < 30; j++)
        U.dhst[j] = 0;
    for (var j = 0; j < 19; j++)
        U.ihst[j] = 0;
    //*/
    var BTYPE = (cstSize < fxdSize && cstSize < dynSize) ? 0 : (fxdSize < dynSize ? 1 : 2);
    putsF(out, pos, BFINAL);
    putsF(out, pos + 1, BTYPE);
    pos += 3;

    var opos = pos;
    if (BTYPE == 0) {
        while ((pos & 7) != 0)
            pos++;
        pos = UZIP.F._copyExact(data, o0, l0, out, pos);
    } else {
        var ltree, dtree;
        if (BTYPE == 1) {
            ltree = U.fltree;
            dtree = U.fdtree;
        }
        if (BTYPE == 2) {
            UZIP.F.makeCodes(U.ltree, ML);
            UZIP.F.revCodes(U.ltree, ML);
            UZIP.F.makeCodes(U.dtree, MD);
            UZIP.F.revCodes(U.dtree, MD);
            UZIP.F.makeCodes(U.itree, MH);
            UZIP.F.revCodes(U.itree, MH);

            ltree = U.ltree;
            dtree = U.dtree;

            putsE(out, pos, numl - 257);
            pos += 5;
            // 286
            putsE(out, pos, numd - 1);
            pos += 5;
            // 30
            putsE(out, pos, numh - 4);
            pos += 4;
            // 19

            for (var i = 0; i < numh; i++)
                putsE(out, pos + i * 3, U.itree[(U.ordr[i] << 1) + 1]);
            pos += 3 * numh;
            pos = UZIP.F._codeTiny(lset, U.itree, out, pos);
            pos = UZIP.F._codeTiny(dset, U.itree, out, pos);
        }

        var off = o0;
        for (var si = 0; si < li; si += 2) {
            var qb = lits[si]
                , len = (qb >>> 23)
                , end = off + (qb & ((1 << 23) - 1));
            while (off < end)
                pos = UZIP.F._writeLit(data[off++], ltree, out, pos);

            if (len != 0) {
                var qc = lits[si + 1]
                    , dst = (qc >> 16)
                    , lgi = (qc >> 8) & 255
                    , dgi = (qc & 255);
                pos = UZIP.F._writeLit(257 + lgi, ltree, out, pos);
                putsE(out, pos, len - U.of0[lgi]);
                pos += U.exb[lgi];

                pos = UZIP.F._writeLit(dgi, dtree, out, pos);
                putsF(out, pos, dst - U.df0[dgi]);
                pos += U.dxb[dgi];
                off += len;
            }
        }
        pos = UZIP.F._writeLit(256, ltree, out, pos);
    }
    //console.log(pos-opos, fxdSize, dynSize, cstSize);
    return pos;
}
UZIP.F._copyExact = function (data, off, len, out, pos) {
    var p8 = (pos >>> 3);
    out[p8] = (len);
    out[p8 + 1] = (len >>> 8);
    out[p8 + 2] = 255 - out[p8];
    out[p8 + 3] = 255 - out[p8 + 1];
    p8 += 4;
    out.set(new Uint8Array(data.buffer, off, len), p8);
    //for(var i=0; i<len; i++) out[p8+i]=data[off+i];
    return pos + ((len + 4) << 3);
}
/*
  Interesting facts:
  - decompressed block can have bytes, which do not occur in a Huffman tree (copied from the previous block by reference)
*/

UZIP.F.getTrees = function () {
    var U = UZIP.F.U;
    var ML = UZIP.F._hufTree(U.lhst, U.ltree, 15);
    var MD = UZIP.F._hufTree(U.dhst, U.dtree, 15);
    var lset = []
        , numl = UZIP.F._lenCodes(U.ltree, lset);
    var dset = []
        , numd = UZIP.F._lenCodes(U.dtree, dset);
    for (var i = 0; i < lset.length; i += 2)
        U.ihst[lset[i]]++;
    for (var i = 0; i < dset.length; i += 2)
        U.ihst[dset[i]]++;
    var MH = UZIP.F._hufTree(U.ihst, U.itree, 7);
    var numh = 19;
    while (numh > 4 && U.itree[(U.ordr[numh - 1] << 1) + 1] == 0)
        numh--;
    return [ML, MD, MH, numl, numd, numh, lset, dset];
}
UZIP.F.getSecond = function (a) {
    var b = [];
    for (var i = 0; i < a.length; i += 2)
        b.push(a[i + 1]);
    return b;
}
UZIP.F.nonZero = function (a) {
    var b = "";
    for (var i = 0; i < a.length; i += 2)
        if (a[i + 1] != 0)
            b += (i >> 1) + ",";
    return b;
}
UZIP.F.contSize = function (tree, hst) {
    var s = 0;
    for (var i = 0; i < hst.length; i++)
        s += hst[i] * tree[(i << 1) + 1];
    return s;
}
UZIP.F._codeTiny = function (set, tree, out, pos) {
    for (var i = 0; i < set.length; i += 2) {
        var l = set[i]
            , rst = set[i + 1];
        //console.log(l, pos, tree[(l<<1)+1]);
        pos = UZIP.F._writeLit(l, tree, out, pos);
        var rsl = l == 16 ? 2 : (l == 17 ? 3 : 7);
        if (l > 15) {
            UZIP.F._putsE(out, pos, rst, rsl);
            pos += rsl;
        }
    }
    return pos;
}
UZIP.F._lenCodes = function (tree, set) {
    var len = tree.length;
    while (len != 2 && tree[len - 1] == 0)
        len -= 2;
    // when no distances, keep one code with length 0
    for (var i = 0; i < len; i += 2) {
        var l = tree[i + 1]
            , nxt = (i + 3 < len ? tree[i + 3] : -1)
            , nnxt = (i + 5 < len ? tree[i + 5] : -1)
            , prv = (i == 0 ? -1 : tree[i - 1]);
        if (l == 0 && nxt == l && nnxt == l) {
            var lz = i + 5;
            while (lz + 2 < len && tree[lz + 2] == l)
                lz += 2;
            var zc = Math.min((lz + 1 - i) >>> 1, 138);
            if (zc < 11)
                set.push(17, zc - 3);
            else
                set.push(18, zc - 11);
            i += zc * 2 - 2;
        } else if (l == prv && nxt == l && nnxt == l) {
            var lz = i + 5;
            while (lz + 2 < len && tree[lz + 2] == l)
                lz += 2;
            var zc = Math.min((lz + 1 - i) >>> 1, 6);
            set.push(16, zc - 3);
            i += zc * 2 - 2;
        } else
            set.push(l, 0);
    }
    return len >>> 1;
}
UZIP.F._hufTree = function (hst, tree, MAXL) {
    var list = []
        , hl = hst.length
        , tl = tree.length
        , i = 0;
    for (i = 0; i < tl; i += 2) {
        tree[i] = 0;
        tree[i + 1] = 0;
    }
    for (i = 0; i < hl; i++)
        if (hst[i] != 0)
            list.push({
                lit: i,
                f: hst[i]
            });
    var end = list.length
        , l2 = list.slice(0);
    if (end == 0)
        return 0;
    // empty histogram (usually for dist)
    if (end == 1) {
        var lit = list[0].lit
            , l2 = lit == 0 ? 1 : 0;
        tree[(lit << 1) + 1] = 1;
        tree[(l2 << 1) + 1] = 1;
        return 1;
    }
    list.sort(function (a, b) {
        return a.f - b.f;
    });
    var a = list[0]
        , b = list[1]
        , i0 = 0
        , i1 = 1
        , i2 = 2;
    list[0] = {
        lit: -1,
        f: a.f + b.f,
        l: a,
        r: b,
        d: 0
    };
    while (i1 != end - 1) {
        if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {
            a = list[i0++];
        } else {
            a = list[i2++];
        }
        if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {
            b = list[i0++];
        } else {
            b = list[i2++];
        }
        list[i1++] = {
            lit: -1,
            f: a.f + b.f,
            l: a,
            r: b
        };
    }
    var maxl = UZIP.F.setDepth(list[i1 - 1], 0);
    if (maxl > MAXL) {
        UZIP.F.restrictDepth(l2, MAXL, maxl);
        maxl = MAXL;
    }
    for (i = 0; i < end; i++)
        tree[(l2[i].lit << 1) + 1] = l2[i].d;
    return maxl;
}

UZIP.F.setDepth = function (t, d) {
    if (t.lit != -1) {
        t.d = d;
        return d;
    }
    return Math.max(UZIP.F.setDepth(t.l, d + 1), UZIP.F.setDepth(t.r, d + 1));
}

UZIP.F.restrictDepth = function (dps, MD, maxl) {
    var i = 0
        , bCost = 1 << (maxl - MD)
        , dbt = 0;
    dps.sort(function (a, b) {
        return b.d == a.d ? a.f - b.f : b.d - a.d;
    });

    for (i = 0; i < dps.length; i++)
        if (dps[i].d > MD) {
            var od = dps[i].d;
            dps[i].d = MD;
            dbt += bCost - (1 << (maxl - od));
        } else
            break;
    dbt = dbt >>> (maxl - MD);
    while (dbt > 0) {
        var od = dps[i].d;
        if (od < MD) {
            dps[i].d++;
            dbt -= (1 << (MD - od - 1));
        } else
            i++;
    }
    for (; i >= 0; i--)
        if (dps[i].d == MD && dbt < 0) {
            dps[i].d--;
            dbt++;
        }
    if (dbt != 0)
        console.log("debt left");
}

UZIP.F._goodIndex = function (v, arr) {
    var i = 0;
    if (arr[i | 16] <= v)
        i |= 16;
    if (arr[i | 8] <= v)
        i |= 8;
    if (arr[i | 4] <= v)
        i |= 4;
    if (arr[i | 2] <= v)
        i |= 2;
    if (arr[i | 1] <= v)
        i |= 1;
    return i;
}
UZIP.F._writeLit = function (ch, ltree, out, pos) {
    UZIP.F._putsF(out, pos, ltree[ch << 1]);
    return pos + ltree[(ch << 1) + 1];
}

UZIP.F.inflate = function (data, buf) {
    var u8 = Uint8Array;
    if (data[0] == 3 && data[1] == 0)
        return (buf ? buf : new u8(0));
    var F = UZIP.F
        , bitsF = F._bitsF
        , bitsE = F._bitsE
        , decodeTiny = F._decodeTiny
        , makeCodes = F.makeCodes
        , codes2map = F.codes2map
        , get17 = F._get17;
    var U = F.U;

    var noBuf = (buf == null);
    if (noBuf)
        buf = new u8((data.length >>> 2) << 3);

    var BFINAL = 0
        , BTYPE = 0
        , HLIT = 0
        , HDIST = 0
        , HCLEN = 0
        , ML = 0
        , MD = 0;
    var off = 0
        , pos = 0;
    var lmap, dmap;

    while (BFINAL == 0) {
        BFINAL = bitsF(data, pos, 1);
        BTYPE = bitsF(data, pos + 1, 2);
        pos += 3;
        //console.log(BFINAL, BTYPE);

        if (BTYPE == 0) {
            if ((pos & 7) != 0)
                pos += 8 - (pos & 7);
            var p8 = (pos >>> 3) + 4
                , len = data[p8 - 4] | (data[p8 - 3] << 8);
            //console.log(len);//bitsF(data, pos, 16), 
            if (noBuf)
                buf = UZIP.F._check(buf, off + len);
            buf.set(new u8(data.buffer, data.byteOffset + p8, len), off);
            //for(var i=0; i<len; i++) buf[off+i] = data[p8+i];
            //for(var i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw "e";
            pos = ((p8 + len) << 3);
            off += len;
            continue;
        }
        if (noBuf)
            buf = UZIP.F._check(buf, off + (1 << 17));
        // really not enough in many cases (but PNG and ZIP provide buffer in advance)
        if (BTYPE == 1) {
            lmap = U.flmap;
            dmap = U.fdmap;
            ML = (1 << 9) - 1;
            MD = (1 << 5) - 1;
        }
        if (BTYPE == 2) {
            HLIT = bitsE(data, pos, 5) + 257;
            HDIST = bitsE(data, pos + 5, 5) + 1;
            HCLEN = bitsE(data, pos + 10, 4) + 4;
            pos += 14;

            var ppos = pos;
            for (var i = 0; i < 38; i += 2) {
                U.itree[i] = 0;
                U.itree[i + 1] = 0;
            }
            var tl = 1;
            for (var i = 0; i < HCLEN; i++) {
                var l = bitsE(data, pos + i * 3, 3);
                U.itree[(U.ordr[i] << 1) + 1] = l;
                if (l > tl)
                    tl = l;
            }
            pos += 3 * HCLEN;
            //console.log(itree);
            makeCodes(U.itree, tl);
            codes2map(U.itree, tl, U.imap);

            lmap = U.lmap;
            dmap = U.dmap;

            pos = decodeTiny(U.imap, (1 << tl) - 1, HLIT + HDIST, data, pos, U.ttree);
            var mx0 = F._copyOut(U.ttree, 0, HLIT, U.ltree);
            ML = (1 << mx0) - 1;
            var mx1 = F._copyOut(U.ttree, HLIT, HDIST, U.dtree);
            MD = (1 << mx1) - 1;

            //var ml = decodeTiny(U.imap, (1<<tl)-1, HLIT , data, pos, U.ltree); ML = (1<<(ml>>>24))-1;  pos+=(ml&0xffffff);
            makeCodes(U.ltree, mx0);
            codes2map(U.ltree, mx0, lmap);

            //var md = decodeTiny(U.imap, (1<<tl)-1, HDIST, data, pos, U.dtree); MD = (1<<(md>>>24))-1;  pos+=(md&0xffffff);
            makeCodes(U.dtree, mx1);
            codes2map(U.dtree, mx1, dmap);
        }
        //var ooff=off, opos=pos;
        while (true) {
            var code = lmap[get17(data, pos) & ML];
            pos += code & 15;
            var lit = code >>> 4;
            //U.lhst[lit]++;  
            if ((lit >>> 8) == 0) {
                buf[off++] = lit;
            } else if (lit == 256) {
                break;
            } else {
                var end = off + lit - 254;
                if (lit > 264) {
                    var ebs = U.ldef[lit - 257];
                    end = off + (ebs >>> 3) + bitsE(data, pos, ebs & 7);
                    pos += ebs & 7;
                }
                //UZIP.F.dst[end-off]++;

                var dcode = dmap[get17(data, pos) & MD];
                pos += dcode & 15;
                var dlit = dcode >>> 4;
                var dbs = U.ddef[dlit]
                    , dst = (dbs >>> 4) + bitsF(data, pos, dbs & 15);
                pos += dbs & 15;

                //var o0 = off-dst, stp = Math.min(end-off, dst);
                //if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else
                //if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else
                //if(dst==1) buf.fill(buf[off-1], off, end);  else
                if (noBuf)
                    buf = UZIP.F._check(buf, off + (1 << 17));
                while (off < end) {
                    buf[off] = buf[off++ - dst];
                    buf[off] = buf[off++ - dst];
                    buf[off] = buf[off++ - dst];
                    buf[off] = buf[off++ - dst];
                }
                off = end;
                //while(off!=end) {  buf[off]=buf[off++-dst];  }
            }
        }
        //console.log(off-ooff, (pos-opos)>>>3);
    }
    //console.log(UZIP.F.dst);
    //console.log(tlen, dlen, off-tlen+tcnt);
    return buf.length == off ? buf : buf.slice(0, off);
}
UZIP.F._check = function (buf, len) {
    var bl = buf.length;
    if (len <= bl)
        return buf;
    var nbuf = new Uint8Array(Math.max(bl << 1, len));
    nbuf.set(buf, 0);
    //for(var i=0; i<bl; i+=4) {  nbuf[i]=buf[i];  nbuf[i+1]=buf[i+1];  nbuf[i+2]=buf[i+2];  nbuf[i+3]=buf[i+3];  }
    return nbuf;
}

UZIP.F._decodeTiny = function (lmap, LL, len, data, pos, tree) {
    var bitsE = UZIP.F._bitsE
        , get17 = UZIP.F._get17;
    var i = 0;
    while (i < len) {
        var code = lmap[get17(data, pos) & LL];
        pos += code & 15;
        var lit = code >>> 4;
        if (lit <= 15) {
            tree[i] = lit;
            i++;
        } else {
            var ll = 0
                , n = 0;
            if (lit == 16) {
                n = (3 + bitsE(data, pos, 2));
                pos += 2;
                ll = tree[i - 1];
            } else if (lit == 17) {
                n = (3 + bitsE(data, pos, 3));
                pos += 3;
            } else if (lit == 18) {
                n = (11 + bitsE(data, pos, 7));
                pos += 7;
            }
            var ni = i + n;
            while (i < ni) {
                tree[i] = ll;
                i++;
            }
        }
    }
    return pos;
}
UZIP.F._copyOut = function (src, off, len, tree) {
    var mx = 0
        , i = 0
        , tl = tree.length >>> 1;
    while (i < len) {
        var v = src[i + off];
        tree[(i << 1)] = 0;
        tree[(i << 1) + 1] = v;
        if (v > mx)
            mx = v;
        i++;
    }
    while (i < tl) {
        tree[(i << 1)] = 0;
        tree[(i << 1) + 1] = 0;
        i++;
    }
    return mx;
}

UZIP.F.makeCodes = function (tree, MAX_BITS) {
    // code, length
    var U = UZIP.F.U;
    var max_code = tree.length;
    var code, bits, n, i, len;

    var bl_count = U.bl_count;
    for (var i = 0; i <= MAX_BITS; i++)
        bl_count[i] = 0;
    for (i = 1; i < max_code; i += 2)
        bl_count[tree[i]]++;

    var next_code = U.next_code;
    // smallest code for each length

    code = 0;
    bl_count[0] = 0;
    for (bits = 1; bits <= MAX_BITS; bits++) {
        code = (code + bl_count[bits - 1]) << 1;
        next_code[bits] = code;
    }

    for (n = 0; n < max_code; n += 2) {
        len = tree[n + 1];
        if (len != 0) {
            tree[n] = next_code[len];
            next_code[len]++;
        }
    }
}
UZIP.F.codes2map = function (tree, MAX_BITS, map) {
    var max_code = tree.length;
    var U = UZIP.F.U
        , r15 = U.rev15;
    for (var i = 0; i < max_code; i += 2)
        if (tree[i + 1] != 0) {
            var lit = i >> 1;
            var cl = tree[i + 1]
                , val = (lit << 4) | cl;
            // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);
            var rest = (MAX_BITS - cl)
                , i0 = tree[i] << rest
                , i1 = i0 + (1 << rest);
            //tree[i]=r15[i0]>>>(15-MAX_BITS);
            while (i0 != i1) {
                var p0 = r15[i0] >>> (15 - MAX_BITS);
                map[p0] = val;
                i0++;
            }
        }
}
UZIP.F.revCodes = function (tree, MAX_BITS) {
    var r15 = UZIP.F.U.rev15
        , imb = 15 - MAX_BITS;
    for (var i = 0; i < tree.length; i += 2) {
        var i0 = (tree[i] << (MAX_BITS - tree[i + 1]));
        tree[i] = r15[i0] >>> imb;
    }
}

// used only in deflate
UZIP.F._putsE = function (dt, pos, val) {
    val = val << (pos & 7);
    var o = (pos >>> 3);
    dt[o] |= val;
    dt[o + 1] |= (val >>> 8);
}
UZIP.F._putsF = function (dt, pos, val) {
    val = val << (pos & 7);
    var o = (pos >>> 3);
    dt[o] |= val;
    dt[o + 1] |= (val >>> 8);
    dt[o + 2] |= (val >>> 16);
}

UZIP.F._bitsE = function (dt, pos, length) {
    return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8)) >>> (pos & 7)) & ((1 << length) - 1);
}
UZIP.F._bitsF = function (dt, pos, length) {
    return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7)) & ((1 << length) - 1);
}
/*
UZIP.F._get9 = function(dt, pos) {
  return ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;
} */
UZIP.F._get17 = function (dt, pos) {
    // return at least 17 meaningful bytes
    return (dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7);
}
UZIP.F._get25 = function (dt, pos) {
    // return at least 17 meaningful bytes
    return (dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16) | (dt[(pos >>> 3) + 3] << 24)) >>> (pos & 7);
}
UZIP.F.U = function () {
    var u16 = Uint16Array
        , u32 = Uint32Array;
    return {
        next_code: new u16(16),
        bl_count: new u16(16),
        ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
        of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],
        exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],
        ldef: new u16(32),
        df0: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],
        dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],
        ddef: new u32(32),
        flmap: new u16(512),
        fltree: [],
        fdmap: new u16(32),
        fdtree: [],
        lmap: new u16(32768),
        ltree: [],
        ttree: [],
        dmap: new u16(32768),
        dtree: [],
        imap: new u16(512),
        itree: [],
        //rev9 : new u16(  512)
        rev15: new u16(1 << 15),
        lhst: new u32(286),
        dhst: new u32(30),
        ihst: new u32(19),
        lits: new u32(15000),
        strt: new u16(1 << 16),
        prev: new u16(1 << 15)
    };
}();

(function () {
    var U = UZIP.F.U;
    var len = 1 << 15;
    for (var i = 0; i < len; i++) {
        var x = i;
        x = (((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1));
        x = (((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) << 2));
        x = (((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) << 4));
        x = (((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8));
        U.rev15[i] = (((x >>> 16) | (x << 16))) >>> 17;
    }

    function pushV(tgt, n, sv) {
        while (n-- != 0)
            tgt.push(0, sv);
    }

    for (var i = 0; i < 32; i++) {
        U.ldef[i] = (U.of0[i] << 3) | U.exb[i];
        U.ddef[i] = (U.df0[i] << 4) | U.dxb[i];
    }

    pushV(U.fltree, 144, 8);
    pushV(U.fltree, 255 - 143, 9);
    pushV(U.fltree, 279 - 255, 7);
    pushV(U.fltree, 287 - 279, 8);
    /*
  var i = 0;
  for(; i<=143; i++) U.fltree.push(0,8);
  for(; i<=255; i++) U.fltree.push(0,9);
  for(; i<=279; i++) U.fltree.push(0,7);
  for(; i<=287; i++) U.fltree.push(0,8);
  */
    UZIP.F.makeCodes(U.fltree, 9);
    UZIP.F.codes2map(U.fltree, 9, U.flmap);
    UZIP.F.revCodes(U.fltree, 9)

    pushV(U.fdtree, 32, 5);
    //for(i=0;i<32; i++) U.fdtree.push(0,5);
    UZIP.F.makeCodes(U.fdtree, 5);
    UZIP.F.codes2map(U.fdtree, 5, U.fdmap);
    UZIP.F.revCodes(U.fdtree, 5)

    pushV(U.itree, 19, 0);
    pushV(U.ltree, 286, 0);
    pushV(U.dtree, 30, 0);
    pushV(U.ttree, 320, 0);
    /*
  for(var i=0; i< 19; i++) U.itree.push(0,0);
  for(var i=0; i<286; i++) U.ltree.push(0,0);
  for(var i=0; i< 30; i++) U.dtree.push(0,0);
  for(var i=0; i<320; i++) U.ttree.push(0,0);
  */
}
)()

var paper = function (t, e) {
    var i = (t = t || require("./node/self.js")).window
        , n = t.document
        , r = new function () {
            function t(t, e, r, s, a) {
                function u(n, u) {
                    "string" == typeof (u = u || (u = o(e, n)) && (u.get ? u : u.value)) && "#" === u[0] && (u = t[u.substring(1)] || u);
                    var c, f = "function" == typeof u, d = u, _ = a || f && !u.base ? u && u.get ? n in t : t[n] : null;
                    a && _ || (f && _ && (u.base = _),
                        f && !1 !== s && (c = n.match(/^([gs]et|is)(([A-Z])(.*))$/)) && (l[c[3].toLowerCase() + c[4]] = c[2]),
                        d && !f && d.get && "function" == typeof d.get && i.isPlainObject(d) || (d = {
                            value: d,
                            writable: !0
                        }),
                        (o(t, n) || {
                            configurable: !0
                        }).configurable && (d.configurable = !0,
                            d.enumerable = null != r ? r : !c),
                        h(t, n, d))
                }
                var l = {};
                if (e) {
                    for (var c in e)
                        e.hasOwnProperty(c) && !n.test(c) && u(c);
                    for (var c in l) {
                        var f = l[c]
                            , d = t["set" + f]
                            , _ = t["get" + f] || d && t["is" + f];
                        !_ || !0 !== s && 0 !== _.length || u(c, {
                            get: _,
                            set: d
                        })
                    }
                }
                return t
            }
            function i() {
                for (var t = 0, e = arguments.length; t < e; t++) {
                    var i = arguments[t];
                    i && c(this, i)
                }
                return this
            }
            var n = /^(statics|enumerable|beans|preserve)$/
                , r = []
                , s = r.slice
                , a = Object.create
                , o = Object.getOwnPropertyDescriptor
                , h = Object.defineProperty
                , u = r.forEach || function (t, e) {
                    for (var i = 0, n = this.length; i < n; i++)
                        t.call(e, this[i], i, this)
                }
                , l = function (t, e) {
                    for (var i in this)
                        this.hasOwnProperty(i) && t.call(e, this[i], i, this)
                }
                , c = Object.assign || function (t) {
                    for (var e = 1, i = arguments.length; e < i; e++) {
                        var n = arguments[e];
                        for (var r in n)
                            n.hasOwnProperty(r) && (t[r] = n[r])
                    }
                    return t
                }
                , f = function (t, e, i) {
                    if (t) {
                        var n = o(t, "length");
                        (n && "number" == typeof n.value ? u : l).call(t, e, i = i || t)
                    }
                    return i
                };
            return t(i, {
                inject: function (e) {
                    if (e) {
                        var i = !0 === e.statics ? e : e.statics
                            , n = e.beans
                            , r = e.preserve;
                        i !== e && t(this.prototype, e, e.enumerable, n, r),
                            t(this, i, null, n, r)
                    }
                    for (var s = 1, a = arguments.length; s < a; s++)
                        this.inject(arguments[s]);
                    return this
                },
                extend: function () {
                    for (var e, i, n, r = this, s = 0, o = arguments.length; s < o && (!e || !i); s++)
                        n = arguments[s],
                            e = e || n.initialize,
                            i = i || n.prototype;
                    return e = e || function () {
                        r.apply(this, arguments)
                    }
                        ,
                        i = e.prototype = i || a(this.prototype),
                        h(i, "constructor", {
                            value: e,
                            writable: !0,
                            configurable: !0
                        }),
                        t(e, this),
                        arguments.length && this.inject.apply(e, arguments),
                        e.base = r,
                        e
                }
            }).inject({
                enumerable: !1,
                initialize: i,
                set: i,
                inject: function () {
                    for (var e = 0, i = arguments.length; e < i; e++) {
                        var n = arguments[e];
                        n && t(this, n, n.enumerable, n.beans, n.preserve)
                    }
                    return this
                },
                extend: function () {
                    var t = a(this);
                    return t.inject.apply(t, arguments)
                },
                each: function (t, e) {
                    return f(this, t, e)
                },
                clone: function () {
                    return new this.constructor(this)
                },
                statics: {
                    set: c,
                    each: f,
                    create: a,
                    define: h,
                    describe: o,
                    clone: function (t) {
                        return c(new t.constructor, t)
                    },
                    isPlainObject: function (t) {
                        var e = null != t && t.constructor;
                        return e && (e === Object || e === i || "Object" === e.name)
                    },
                    pick: function (t, i) {
                        return t !== e ? t : i
                    },
                    slice: function (t, e, i) {
                        return s.call(t, e, i)
                    }
                }
            })
        }
        ;
    "undefined" != typeof module && (module.exports = r),
        r.inject({
            enumerable: !1,
            toString: function () {
                return null != this._id ? (this._class || "Object") + (this._name ? " '" + this._name + "'" : " @" + this._id) : "{ " + r.each(this, function (t, e) {
                    if (!/^_/.test(e)) {
                        var i = typeof t;
                        this.push(e + ": " + ("number" === i ? h.instance.number(t) : "string" === i ? "'" + t + "'" : t))
                    }
                }, []).join(", ") + " }"
            },
            getClassName: function () {
                return this._class || ""
            },
            importJSON: function (t) {
                return r.importJSON(t, this)
            },
            exportJSON: function (t) {
                return r.exportJSON(this, t)
            },
            toJSON: function () {
                return r.serialize(this)
            },
            set: function (t, e) {
                return t && r.filter(this, t, e, this._prioritize),
                    this
            }
        }, {
            beans: !1,
            statics: {
                exports: {},
                extend: function t() {
                    var e = t.base.apply(this, arguments)
                        , i = e.prototype._class;
                    return i && !r.exports[i] && (r.exports[i] = e),
                        e
                },
                equals: function (t, e) {
                    if (t === e)
                        return !0;
                    if (t && t.equals)
                        return t.equals(e);
                    if (e && e.equals)
                        return e.equals(t);
                    if (t && e && "object" == typeof t && "object" == typeof e) {
                        if (Array.isArray(t) && Array.isArray(e)) {
                            if ((n = t.length) !== e.length)
                                return !1;
                            for (; n--;)
                                if (!r.equals(t[n], e[n]))
                                    return !1
                        } else {
                            var i = Object.keys(t)
                                , n = i.length;
                            if (n !== Object.keys(e).length)
                                return !1;
                            for (; n--;) {
                                var s = i[n];
                                if (!e.hasOwnProperty(s) || !r.equals(t[s], e[s]))
                                    return !1
                            }
                        }
                        return !0
                    }
                    return !1
                },
                read: function (t, i, n, s) {
                    if (this === r) {
                        var a = this.peek(t, i);
                        return t.__index++,
                            a
                    }
                    var o = this.prototype
                        , h = o._readIndex
                        , u = i || h && t.__index || 0
                        , l = t.length
                        , c = t[u];
                    if (s = s || l - u,
                        c instanceof this || n && n.readNull && null == c && s <= 1)
                        return h && (t.__index = u + 1),
                            c && n && n.clone ? c.clone() : c;
                    if (c = r.create(o),
                        h && (c.__read = !0),
                        c = c.initialize.apply(c, u > 0 || u + s < l ? r.slice(t, u, u + s) : t) || c,
                        h) {
                        t.__index = u + c.__read;
                        var f = c.__filtered;
                        f && (t.__filtered = f,
                            c.__filtered = e),
                            c.__read = e
                    }
                    return c
                },
                peek: function (t, e) {
                    return t[t.__index = e || t.__index || 0]
                },
                remain: function (t) {
                    return t.length - (t.__index || 0)
                },
                readList: function (t, e, i, n) {
                    for (var r, s = [], a = e || 0, o = n ? a + n : t.length, h = a; h < o; h++)
                        s.push(Array.isArray(r = t[h]) ? this.read(r, 0, i) : this.read(t, h, i, 1));
                    return s
                },
                readNamed: function (t, i, n, s, a) {
                    var o = this.getNamed(t, i)
                        , h = o !== e;
                    if (h) {
                        var u = t.__filtered;
                        u || ((u = t.__filtered = r.create(t[0])).__unfiltered = t[0]),
                            u[i] = e
                    }
                    var l = h ? [o] : t;
                    return this.read(l, n, s, a)
                },
                getNamed: function (t, i) {
                    var n = t[0];
                    if (t._hasObject === e && (t._hasObject = 1 === t.length && r.isPlainObject(n)),
                        t._hasObject)
                        return i ? n[i] : t.__filtered || n
                },
                hasNamed: function (t, e) {
                    return !!this.getNamed(t, e)
                },
                filter: function (t, i, n, r) {
                    function s(r) {
                        if (!(n && r in n || a && r in a)) {
                            var s = i[r];
                            s !== e && (t[r] = s)
                        }
                    }
                    var a;
                    if (r) {
                        for (var o, h = {}, u = 0, l = r.length; u < l; u++)
                            (o = r[u]) in i && (s(o),
                                h[o] = !0);
                        a = h
                    }
                    return Object.keys(i.__unfiltered || i).forEach(s),
                        t
                },
                isPlainValue: function (t, e) {
                    return r.isPlainObject(t) || Array.isArray(t) || e && "string" == typeof t
                },
                serialize: function (t, e, i, n) {
                    e = e || {};
                    var s, a = !n;
                    if (a && (e.formatter = new h(e.precision),
                        n = {
                            length: 0,
                            definitions: {},
                            references: {},
                            add: function (t, e) {
                                var i = "#" + t._id
                                    , n = this.references[i];
                                if (!n) {
                                    this.length++;
                                    var r = e.call(t)
                                        , s = t._class;
                                    s && r[0] !== s && r.unshift(s),
                                        this.definitions[i] = r,
                                        n = this.references[i] = [i]
                                }
                                return n
                            }
                        }),
                        t && t._serialize) {
                        s = t._serialize(e, n);
                        var o = t._class;
                        !o || t._compactSerialize || !a && i || s[0] === o || s.unshift(o)
                    } else if (Array.isArray(t)) {
                        s = [];
                        for (var u = 0, l = t.length; u < l; u++)
                            s[u] = r.serialize(t[u], e, i, n)
                    } else if (r.isPlainObject(t)) {
                        s = {};
                        for (var c = Object.keys(t), u = 0, l = c.length; u < l; u++) {
                            var f = c[u];
                            s[f] = r.serialize(t[f], e, i, n)
                        }
                    } else
                        s = "number" == typeof t ? e.formatter.number(t, e.precision) : t;
                    return a && n.length > 0 ? [["dictionary", n.definitions], s] : s
                },
                deserialize: function (t, e, i, n, s) {
                    var a = t
                        , o = !i
                        , h = o && t && t.length && "dictionary" === t[0][0];
                    if (i = i || {},
                        Array.isArray(t)) {
                        var u = t[0]
                            , l = "dictionary" === u;
                        if (1 == t.length && /^#/.test(u))
                            return i.dictionary[u];
                        a = [];
                        for (var c = (u = r.exports[u]) ? 1 : 0, f = t.length; c < f; c++)
                            a.push(r.deserialize(t[c], e, i, l, h));
                        if (u) {
                            var d = a;
                            e ? a = e(u, d, o || s) : (a = r.create(u.prototype),
                                u.apply(a, d))
                        }
                    } else if (r.isPlainObject(t)) {
                        a = {},
                            n && (i.dictionary = a);
                        for (var _ in t)
                            a[_] = r.deserialize(t[_], e, i)
                    }
                    return h ? a[1] : a
                },
                exportJSON: function (t, e) {
                    var i = r.serialize(t, e);
                    return e && 0 == e.asString ? i : JSON.stringify(i)
                },
                importJSON: function (t, e) {
                    return r.deserialize("string" == typeof t ? JSON.parse(t) : t, function (t, i, n) {
                        var s = n && e && e.constructor === t
                            , a = s ? e : r.create(t.prototype);
                        if (1 === i.length && a instanceof w && (s || !(a instanceof b))) {
                            var o = i[0];
                            r.isPlainObject(o) && (o.insert = !1)
                        }
                        return (s ? a.set : t).apply(a, i),
                            s && (e = null),
                            a
                    })
                },
                splice: function (t, i, n, r) {
                    var s = i && i.length
                        , a = n === e;
                    (n = a ? t.length : n) > t.length && (n = t.length);
                    for (u = 0; u < s; u++)
                        i[u]._index = n + u;
                    if (a)
                        return t.push.apply(t, i),
                            [];
                    var o = [n, r];
                    i && o.push.apply(o, i);
                    for (var h = t.splice.apply(t, o), u = 0, l = h.length; u < l; u++)
                        h[u]._index = e;
                    for (var u = n + s, l = t.length; u < l; u++)
                        t[u]._index = u;
                    return h
                },
                capitalize: function (t) {
                    return t.replace(/\b[a-z]/g, function (t) {
                        return t.toUpperCase()
                    })
                },
                camelize: function (t) {
                    return t.replace(/-(.)/g, function (t, e) {
                        return e.toUpperCase()
                    })
                },
                hyphenate: function (t) {
                    return t.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()
                }
            }
        });
    var s = {
        on: function (t, e) {
            if ("string" != typeof t)
                r.each(t, function (t, e) {
                    this.on(e, t)
                }, this);
            else {
                var i = this._eventTypes
                    , n = i && i[t]
                    , s = this._callbacks = this._callbacks || {};
                -1 === (s = s[t] = s[t] || []).indexOf(e) && (s.push(e),
                    n && n.install && 1 === s.length && n.install.call(this, t))
            }
            return this
        },
        off: function (t, e) {
            if ("string" == typeof t) {
                var i, n = this._eventTypes, s = n && n[t], a = this._callbacks && this._callbacks[t];
                return a && (!e || -1 !== (i = a.indexOf(e)) && 1 === a.length ? (s && s.uninstall && s.uninstall.call(this, t),
                    delete this._callbacks[t]) : -1 !== i && a.splice(i, 1)),
                    this
            }
            r.each(t, function (t, e) {
                this.off(e, t)
            }, this)
        },
        once: function (t, e) {
            return this.on(t, function () {
                e.apply(this, arguments),
                    this.off(t, e)
            })
        },
        emit: function (t, e) {
            var i = this._callbacks && this._callbacks[t];
            if (!i)
                return !1;
            var n = r.slice(arguments, 1)
                , s = e && e.target && !e.currentTarget;
            i = i.slice(),
                s && (e.currentTarget = this);
            for (var a = 0, o = i.length; a < o; a++)
                if (0 == i[a].apply(this, n)) {
                    e && e.stop && e.stop();
                    break
                }
            return s && delete e.currentTarget,
                !0
        },
        responds: function (t) {
            return !(!this._callbacks || !this._callbacks[t])
        },
        attach: "#on",
        detach: "#off",
        fire: "#emit",
        _installEvents: function (t) {
            var e = this._eventTypes
                , i = this._callbacks
                , n = t ? "install" : "uninstall";
            if (e)
                for (var r in i)
                    if (i[r].length > 0) {
                        var s = e[r]
                            , a = s && s[n];
                        a && a.call(this, r)
                    }
        },
        statics: {
            inject: function t(e) {
                var i = e._events;
                if (i) {
                    var n = {};
                    r.each(i, function (t, i) {
                        var s = "string" == typeof t
                            , a = s ? t : i
                            , o = r.capitalize(a)
                            , h = a.substring(2).toLowerCase();
                        n[h] = s ? {} : t,
                            a = "_" + a,
                            e["get" + o] = function () {
                                return this[a]
                            }
                            ,
                            e["set" + o] = function (t) {
                                var e = this[a];
                                e && this.off(h, e),
                                    t && this.on(h, t),
                                    this[a] = t
                            }
                    }),
                        e._eventTypes = n
                }
                return t.base.apply(this, arguments)
            }
        }
    }
        , a = r.extend({
            _class: "PaperScope",
            initialize: function e() {
                paper = this,
                    this.settings = new r({
                        applyMatrix: !0,
                        insertItems: !0,
                        handleSize: 4,
                        hitTolerance: 0
                    }),
                    this.project = null,
                    this.projects = [],
                    this.tools = [],
                    this._id = e._id++,
                    e._scopes[this._id] = this;
                var i = e.prototype;
                if (!this.support) {
                    var n = Q.getContext(1, 1) || {};
                    i.support = {
                        nativeDash: "setLineDash" in n || "mozDash" in n,
                        nativeBlendModes: tt.nativeModes
                    },
                        Q.release(n)
                }
                if (!this.agent) {
                    var s = t.navigator.userAgent.toLowerCase()
                        , a = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(s) || [])[0]
                        , o = "darwin" === a ? "mac" : a
                        , h = i.agent = i.browser = {
                            platform: o
                        };
                    o && (h[o] = !0),
                        s.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g, function (t, e, i, n, r) {
                            if (!h.chrome) {
                                var s = "opera" === e ? n : /^(node|trident)$/.test(e) ? r : i;
                                h.version = s,
                                    h.versionNumber = parseFloat(s),
                                    e = "trident" === e ? "msie" : e,
                                    h.name = e,
                                    h[e] = !0
                            }
                        }),
                        h.chrome && delete h.webkit,
                        h.atom && delete h.chrome
                }
            },
            version: "0.11.5",
            getView: function () {
                var t = this.project;
                return t && t._view
            },
            getPaper: function () {
                return this
            },
            execute: function (t, e) {
                paper.PaperScript.execute(t, this, e),
                    U.updateFocus()
            },
            install: function (t) {
                var e = this;
                r.each(["project", "view", "tool"], function (i) {
                    r.define(t, i, {
                        configurable: !0,
                        get: function () {
                            return e[i]
                        }
                    })
                });
                for (var i in this)
                    !/^_/.test(i) && this[i] && (t[i] = this[i])
            },
            setup: function (t) {
                return paper = this,
                    this.project = new y(t),
                    this
            },
            createCanvas: function (t, e) {
                return Q.getCanvas(t, e)
            },
            activate: function () {
                paper = this
            },
            clear: function () {
                for (var t = this.projects, e = this.tools, i = t.length - 1; i >= 0; i--)
                    t[i].remove();
                for (i = e.length - 1; i >= 0; i--)
                    e[i].remove()
            },
            remove: function () {
                this.clear(),
                    delete a._scopes[this._id]
            },
            statics: new function () {
                function t(t) {
                    return t += "Attribute",
                        function (e, i) {
                            return e[t](i) || e[t]("data-paper-" + i)
                        }
                }
                return {
                    _scopes: {},
                    _id: 0,
                    get: function (t) {
                        return this._scopes[t] || null
                    },
                    getAttribute: t("get"),
                    hasAttribute: t("has")
                }
            }
        })
        , o = r.extend(s, {
            initialize: function (t) {
                this._scope = paper,
                    this._index = this._scope[this._list].push(this) - 1,
                    !t && this._scope[this._reference] || this.activate()
            },
            activate: function () {
                if (!this._scope)
                    return !1;
                var t = this._scope[this._reference];
                return t && t !== this && t.emit("deactivate"),
                    this._scope[this._reference] = this,
                    this.emit("activate", t),
                    !0
            },
            isActive: function () {
                return this._scope[this._reference] === this
            },
            remove: function () {
                return null != this._index && (r.splice(this._scope[this._list], null, this._index, 1),
                    this._scope[this._reference] == this && (this._scope[this._reference] = null),
                    this._scope = null,
                    !0)
            },
            getView: function () {
                return this._scope.getView()
            }
        })
        , h = r.extend({
            initialize: function (t) {
                this.precision = r.pick(t, 5),
                    this.multiplier = Math.pow(10, this.precision)
            },
            number: function (t) {
                return this.precision < 16 ? Math.round(t * this.multiplier) / this.multiplier : t
            },
            pair: function (t, e, i) {
                return this.number(t) + (i || ",") + this.number(e)
            },
            point: function (t, e) {
                return this.number(t.x) + (e || ",") + this.number(t.y)
            },
            size: function (t, e) {
                return this.number(t.width) + (e || ",") + this.number(t.height)
            },
            rectangle: function (t, e) {
                return this.point(t, e) + (e || ",") + this.size(t, e)
            }
        });
    h.instance = new h;
    var u = new function () {
        function t(t, e, i) {
            return t < e ? e : t > i ? i : t
        }
        function e(t, e, i) {
            function n(t) {
                var e = 134217729 * t
                    , i = t - e + e;
                return [i, t - i]
            }
            var r = e * e - t * i
                , a = e * e + t * i;
            if (3 * s(r) < a) {
                var o = n(t)
                    , h = n(e)
                    , u = n(i)
                    , l = e * e
                    , c = t * i;
                r = l - c + (h[0] * h[0] - l + 2 * h[0] * h[1] + h[1] * h[1] - (o[0] * u[0] - c + o[0] * u[1] + o[1] * u[0] + o[1] * u[1]))
            }
            return r
        }
        function i() {
            var t = Math.max.apply(Math, arguments);
            return t && (t < 1e-8 || t > 1e8) ? o(2, -Math.round(h(t))) : 0
        }
        var n = [[.5773502691896257], [0, .7745966692414834], [.33998104358485626, .8611363115940526], [0, .5384693101056831, .906179845938664], [.2386191860831969, .6612093864662645, .932469514203152], [0, .4058451513773972, .7415311855993945, .9491079123427585], [.1834346424956498, .525532409916329, .7966664774136267, .9602898564975363], [0, .3242534234038089, .6133714327005904, .8360311073266358, .9681602395076261], [.14887433898163122, .4333953941292472, .6794095682990244, .8650633666889845, .9739065285171717], [0, .26954315595234496, .5190961292068118, .7301520055740494, .8870625997680953, .978228658146057], [.1252334085114689, .3678314989981802, .5873179542866175, .7699026741943047, .9041172563704749, .9815606342467192], [0, .2304583159551348, .44849275103644687, .6423493394403402, .8015780907333099, .9175983992229779, .9841830547185881], [.10805494870734367, .31911236892788974, .5152486363581541, .6872929048116855, .827201315069765, .9284348836635735, .9862838086968123], [0, .20119409399743451, .3941513470775634, .5709721726085388, .7244177313601701, .8482065834104272, .937273392400706, .9879925180204854], [.09501250983763744, .2816035507792589, .45801677765722737, .6178762444026438, .755404408355003, .8656312023878318, .9445750230732326, .9894009349916499]]
            , r = [[1], [.8888888888888888, .5555555555555556], [.6521451548625461, .34785484513745385], [.5688888888888889, .47862867049936647, .23692688505618908], [.46791393457269104, .3607615730481386, .17132449237917036], [.4179591836734694, .3818300505051189, .27970539148927664, .1294849661688697], [.362683783378362, .31370664587788727, .22238103445337448, .10122853629037626], [.3302393550012598, .31234707704000286, .26061069640293544, .1806481606948574, .08127438836157441], [.29552422471475287, .26926671930999635, .21908636251598204, .1494513491505806, .06667134430868814], [.2729250867779006, .26280454451024665, .23319376459199048, .18629021092773426, .1255803694649046, .05566856711617366], [.24914704581340277, .2334925365383548, .20316742672306592, .16007832854334622, .10693932599531843, .04717533638651183], [.2325515532308739, .22628318026289723, .2078160475368885, .17814598076194574, .13887351021978725, .09212149983772845, .04048400476531588], [.2152638534631578, .2051984637212956, .18553839747793782, .15720316715819355, .12151857068790319, .08015808715976021, .03511946033175186], [.2025782419255613, .19843148532711158, .1861610000155622, .16626920581699392, .13957067792615432, .10715922046717194, .07036604748810812, .03075324199611727], [.1894506104550685, .18260341504492358, .16915651939500254, .14959598881657674, .12462897125553388, .09515851168249279, .062253523938647894, .027152459411754096]]
            , s = Math.abs
            , a = Math.sqrt
            , o = Math.pow
            , h = Math.log2 || function (t) {
                return Math.log(t) * Math.LOG2E
            }
            ;
        return {
            EPSILON: 1e-12,
            MACHINE_EPSILON: 1.12e-16,
            CURVETIME_EPSILON: 1e-8,
            GEOMETRIC_EPSILON: 1e-7,
            TRIGONOMETRIC_EPSILON: 1e-8,
            KAPPA: 4 * (a(2) - 1) / 3,
            isZero: function (t) {
                return t >= -1e-12 && t <= 1e-12
            },
            clamp: t,
            integrate: function (t, e, i, s) {
                for (var a = n[s - 2], o = r[s - 2], h = .5 * (i - e), u = h + e, l = 0, c = s + 1 >> 1, f = 1 & s ? o[l++] * t(u) : 0; l < c;) {
                    var d = h * a[l];
                    f += o[l++] * (t(u + d) + t(u - d))
                }
                return h * f
            },
            findRoot: function (e, i, n, r, a, o, h) {
                for (var u = 0; u < o; u++) {
                    var l = e(n)
                        , c = l / i(n)
                        , f = n - c;
                    if (s(c) < h) {
                        n = f;
                        break
                    }
                    l > 0 ? (a = n,
                        n = f <= r ? .5 * (r + a) : f) : (r = n,
                            n = f >= a ? .5 * (r + a) : f)
                }
                return t(n, r, a)
            },
            solveQuadratic: function (n, r, o, h, u, l) {
                var c, f = 1 / 0;
                if (s(n) < 1e-12) {
                    if (s(r) < 1e-12)
                        return s(o) < 1e-12 ? -1 : 0;
                    c = -o / r
                } else {
                    var d = e(n, r *= -.5, o);
                    if (d && s(d) < 1.12e-16) {
                        var _ = i(s(n), s(r), s(o));
                        _ && (d = e(n *= _, r *= _, o *= _))
                    }
                    if (d >= -1.12e-16) {
                        var g = d < 0 ? 0 : a(d)
                            , v = r + (r < 0 ? -g : g);
                        0 === v ? f = -(c = o / n) : (c = v / n,
                            f = o / v)
                    }
                }
                var p = 0
                    , m = null == u
                    , y = u - 1e-12
                    , w = l + 1e-12;
                return isFinite(c) && (m || c > y && c < w) && (h[p++] = m ? c : t(c, u, l)),
                    f !== c && isFinite(f) && (m || f > y && f < w) && (h[p++] = m ? f : t(f, u, l)),
                    p
            },
            solveCubic: function (e, n, r, h, l, c, f) {
                function d(t) {
                    var i = e * (_ = t);
                    p = (i + (g = i + n)) * _ + (v = g * _ + r),
                        m = v * _ + h
                }
                var _, g, v, p, m, y = i(s(e), s(n), s(r), s(h));
                if (y && (e *= y,
                    n *= y,
                    r *= y,
                    h *= y),
                    s(e) < 1e-12)
                    e = n,
                        g = r,
                        v = h,
                        _ = 1 / 0;
                else if (s(h) < 1e-12)
                    g = n,
                        v = r,
                        _ = 0;
                else {
                    d(-n / e / 3);
                    var w = m / e
                        , x = o(s(w), 1 / 3)
                        , b = w < 0 ? -1 : 1
                        , C = -p / e
                        , S = C > 0 ? 1.324717957244746 * Math.max(x, a(C)) : x
                        , P = _ - b * S;
                    if (P !== _) {
                        do {
                            d(P),
                                P = 0 === p ? _ : _ - m / p / (1 + 1.12e-16)
                        } while (b * P > b * _); s(e) * _ * _ > s(h / _) && (g = ((v = -h / _) - r) / _)
                    }
                }
                var I = u.solveQuadratic(e, g, v, l, c, f)
                    , M = null == c;
                return isFinite(_) && (0 === I || I > 0 && _ !== l[0] && _ !== l[1]) && (M || _ > c - 1e-12 && _ < f + 1e-12) && (l[I++] = M ? _ : t(_, c, f)),
                    I
            }
        }
    }
        , l = {
            _id: 1,
            _pools: {},
            get: function (t) {
                if (t) {
                    var e = this._pools[t];
                    return e || (e = this._pools[t] = {
                        _id: 1
                    }),
                        e._id++
                }
                return this._id++
            }
        }
        , c = r.extend({
            _class: "Point",
            _readIndex: !0,
            initialize: function (t, e) {
                var i = typeof t
                    , n = this.__read
                    , r = 0;
                if ("number" === i) {
                    var s = "number" == typeof e;
                    this._set(t, s ? e : t),
                        n && (r = s ? 2 : 1)
                } else if ("undefined" === i || null === t)
                    this._set(0, 0),
                        n && (r = null === t ? 1 : 0);
                else {
                    var a = "string" === i ? t.split(/[\s,]+/) || [] : t;
                    r = 1,
                        Array.isArray(a) ? this._set(+a[0], +(a.length > 1 ? a[1] : a[0])) : "x" in a ? this._set(a.x || 0, a.y || 0) : "width" in a ? this._set(a.width || 0, a.height || 0) : "angle" in a ? (this._set(a.length || 0, 0),
                            this.setAngle(a.angle || 0)) : (this._set(0, 0),
                                r = 0)
                }
                return n && (this.__read = r),
                    this
            },
            set: "#initialize",
            _set: function (t, e) {
                return this.x = t,
                    this.y = e,
                    this
            },
            equals: function (t) {
                return this === t || t && (this.x === t.x && this.y === t.y || Array.isArray(t) && this.x === t[0] && this.y === t[1]) || !1
            },
            clone: function () {
                return new c(this.x, this.y)
            },
            toString: function () {
                var t = h.instance;
                return "{ x: " + t.number(this.x) + ", y: " + t.number(this.y) + " }"
            },
            _serialize: function (t) {
                var e = t.formatter;
                return [e.number(this.x), e.number(this.y)]
            },
            getLength: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            },
            setLength: function (t) {
                if (this.isZero()) {
                    var e = this._angle || 0;
                    this._set(Math.cos(e) * t, Math.sin(e) * t)
                } else {
                    var i = t / this.getLength();
                    u.isZero(i) && this.getAngle(),
                        this._set(this.x * i, this.y * i)
                }
            },
            getAngle: function () {
                return 180 * this.getAngleInRadians.apply(this, arguments) / Math.PI
            },
            setAngle: function (t) {
                this.setAngleInRadians.call(this, t * Math.PI / 180)
            },
            getAngleInDegrees: "#getAngle",
            setAngleInDegrees: "#setAngle",
            getAngleInRadians: function () {
                if (arguments.length) {
                    var t = c.read(arguments)
                        , e = this.getLength() * t.getLength();
                    if (u.isZero(e))
                        return NaN;
                    var i = this.dot(t) / e;
                    return Math.acos(i < -1 ? -1 : i > 1 ? 1 : i)
                }
                return this.isZero() ? this._angle || 0 : this._angle = Math.atan2(this.y, this.x)
            },
            setAngleInRadians: function (t) {
                if (this._angle = t,
                    !this.isZero()) {
                    var e = this.getLength();
                    this._set(Math.cos(t) * e, Math.sin(t) * e)
                }
            },
            getQuadrant: function () {
                return this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3
            }
        }, {
            beans: !1,
            getDirectedAngle: function () {
                var t = c.read(arguments);
                return 180 * Math.atan2(this.cross(t), this.dot(t)) / Math.PI
            },
            getDistance: function () {
                var t = c.read(arguments)
                    , e = t.x - this.x
                    , i = t.y - this.y
                    , n = e * e + i * i;
                return r.read(arguments) ? n : Math.sqrt(n)
            },
            normalize: function (t) {
                t === e && (t = 1);
                var i = this.getLength()
                    , n = 0 !== i ? t / i : 0
                    , r = new c(this.x * n, this.y * n);
                return n >= 0 && (r._angle = this._angle),
                    r
            },
            rotate: function (t, e) {
                if (0 === t)
                    return this.clone();
                t = t * Math.PI / 180;
                var i = e ? this.subtract(e) : this
                    , n = Math.sin(t)
                    , r = Math.cos(t);
                return i = new c(i.x * r - i.y * n, i.x * n + i.y * r),
                    e ? i.add(e) : i
            },
            transform: function (t) {
                return t ? t._transformPoint(this) : this
            },
            add: function () {
                var t = c.read(arguments);
                return new c(this.x + t.x, this.y + t.y)
            },
            subtract: function () {
                var t = c.read(arguments);
                return new c(this.x - t.x, this.y - t.y)
            },
            multiply: function () {
                var t = c.read(arguments);
                return new c(this.x * t.x, this.y * t.y)
            },
            divide: function () {
                var t = c.read(arguments);
                return new c(this.x / t.x, this.y / t.y)
            },
            modulo: function () {
                var t = c.read(arguments);
                return new c(this.x % t.x, this.y % t.y)
            },
            negate: function () {
                return new c(-this.x, -this.y)
            },
            isInside: function () {
                return g.read(arguments).contains(this)
            },
            isClose: function () {
                var t = c.read(arguments)
                    , e = r.read(arguments);
                return this.getDistance(t) <= e
            },
            isCollinear: function () {
                var t = c.read(arguments);
                return c.isCollinear(this.x, this.y, t.x, t.y)
            },
            isColinear: "#isCollinear",
            isOrthogonal: function () {
                var t = c.read(arguments);
                return c.isOrthogonal(this.x, this.y, t.x, t.y)
            },
            isZero: function () {
                var t = u.isZero;
                return t(this.x) && t(this.y)
            },
            isNaN: function () {
                return isNaN(this.x) || isNaN(this.y)
            },
            isInQuadrant: function (t) {
                return this.x * (t > 1 && t < 4 ? -1 : 1) >= 0 && this.y * (t > 2 ? -1 : 1) >= 0
            },
            dot: function () {
                var t = c.read(arguments);
                return this.x * t.x + this.y * t.y
            },
            cross: function () {
                var t = c.read(arguments);
                return this.x * t.y - this.y * t.x
            },
            project: function () {
                var t = c.read(arguments)
                    , e = t.isZero() ? 0 : this.dot(t) / t.dot(t);
                return new c(t.x * e, t.y * e)
            },
            statics: {
                min: function () {
                    var t = c.read(arguments)
                        , e = c.read(arguments);
                    return new c(Math.min(t.x, e.x), Math.min(t.y, e.y))
                },
                max: function () {
                    var t = c.read(arguments)
                        , e = c.read(arguments);
                    return new c(Math.max(t.x, e.x), Math.max(t.y, e.y))
                },
                random: function () {
                    return new c(Math.random(), Math.random())
                },
                isCollinear: function (t, e, i, n) {
                    return Math.abs(t * n - e * i) <= 1e-8 * Math.sqrt((t * t + e * e) * (i * i + n * n))
                },
                isOrthogonal: function (t, e, i, n) {
                    return Math.abs(t * i + e * n) <= 1e-8 * Math.sqrt((t * t + e * e) * (i * i + n * n))
                }
            }
        }, r.each(["round", "ceil", "floor", "abs"], function (t) {
            var e = Math[t];
            this[t] = function () {
                return new c(e(this.x), e(this.y))
            }
        }, {}))
        , f = c.extend({
            initialize: function (t, e, i, n) {
                this._x = t,
                    this._y = e,
                    this._owner = i,
                    this._setter = n
            },
            _set: function (t, e, i) {
                return this._x = t,
                    this._y = e,
                    i || this._owner[this._setter](this),
                    this
            },
            getX: function () {
                return this._x
            },
            setX: function (t) {
                this._x = t,
                    this._owner[this._setter](this)
            },
            getY: function () {
                return this._y
            },
            setY: function (t) {
                this._y = t,
                    this._owner[this._setter](this)
            },
            isSelected: function () {
                return !!(this._owner._selection & this._getSelection())
            },
            setSelected: function (t) {
                this._owner._changeSelection(this._getSelection(), t)
            },
            _getSelection: function () {
                return "setPosition" === this._setter ? 4 : 0
            }
        })
        , d = r.extend({
            _class: "Size",
            _readIndex: !0,
            initialize: function (t, e) {
                var i = typeof t
                    , n = this.__read
                    , r = 0;
                if ("number" === i) {
                    var s = "number" == typeof e;
                    this._set(t, s ? e : t),
                        n && (r = s ? 2 : 1)
                } else if ("undefined" === i || null === t)
                    this._set(0, 0),
                        n && (r = null === t ? 1 : 0);
                else {
                    var a = "string" === i ? t.split(/[\s,]+/) || [] : t;
                    r = 1,
                        Array.isArray(a) ? this._set(+a[0], +(a.length > 1 ? a[1] : a[0])) : "width" in a ? this._set(a.width || 0, a.height || 0) : "x" in a ? this._set(a.x || 0, a.y || 0) : (this._set(0, 0),
                            r = 0)
                }
                return n && (this.__read = r),
                    this
            },
            set: "#initialize",
            _set: function (t, e) {
                return this.width = t,
                    this.height = e,
                    this
            },
            equals: function (t) {
                return t === this || t && (this.width === t.width && this.height === t.height || Array.isArray(t) && this.width === t[0] && this.height === t[1]) || !1
            },
            clone: function () {
                return new d(this.width, this.height)
            },
            toString: function () {
                var t = h.instance;
                return "{ width: " + t.number(this.width) + ", height: " + t.number(this.height) + " }"
            },
            _serialize: function (t) {
                var e = t.formatter;
                return [e.number(this.width), e.number(this.height)]
            },
            add: function () {
                var t = d.read(arguments);
                return new d(this.width + t.width, this.height + t.height)
            },
            subtract: function () {
                var t = d.read(arguments);
                return new d(this.width - t.width, this.height - t.height)
            },
            multiply: function () {
                var t = d.read(arguments);
                return new d(this.width * t.width, this.height * t.height)
            },
            divide: function () {
                var t = d.read(arguments);
                return new d(this.width / t.width, this.height / t.height)
            },
            modulo: function () {
                var t = d.read(arguments);
                return new d(this.width % t.width, this.height % t.height)
            },
            negate: function () {
                return new d(-this.width, -this.height)
            },
            isZero: function () {
                var t = u.isZero;
                return t(this.width) && t(this.height)
            },
            isNaN: function () {
                return isNaN(this.width) || isNaN(this.height)
            },
            statics: {
                min: function (t, e) {
                    return new d(Math.min(t.width, e.width), Math.min(t.height, e.height))
                },
                max: function (t, e) {
                    return new d(Math.max(t.width, e.width), Math.max(t.height, e.height))
                },
                random: function () {
                    return new d(Math.random(), Math.random())
                }
            }
        }, r.each(["round", "ceil", "floor", "abs"], function (t) {
            var e = Math[t];
            this[t] = function () {
                return new d(e(this.width), e(this.height))
            }
        }, {}))
        , _ = d.extend({
            initialize: function (t, e, i, n) {
                this._width = t,
                    this._height = e,
                    this._owner = i,
                    this._setter = n
            },
            _set: function (t, e, i) {
                return this._width = t,
                    this._height = e,
                    i || this._owner[this._setter](this),
                    this
            },
            getWidth: function () {
                return this._width
            },
            setWidth: function (t) {
                this._width = t,
                    this._owner[this._setter](this)
            },
            getHeight: function () {
                return this._height
            },
            setHeight: function (t) {
                this._height = t,
                    this._owner[this._setter](this)
            }
        })
        , g = r.extend({
            _class: "Rectangle",
            _readIndex: !0,
            beans: !0,
            initialize: function (t, i, n, s) {
                var a, o = typeof t;
                if ("number" === o ? (this._set(t, i, n, s),
                    a = 4) : "undefined" === o || null === t ? (this._set(0, 0, 0, 0),
                        a = null === t ? 1 : 0) : 1 === arguments.length && (Array.isArray(t) ? (this._set.apply(this, t),
                            a = 1) : t.x !== e || t.width !== e ? (this._set(t.x || 0, t.y || 0, t.width || 0, t.height || 0),
                                a = 1) : t.from === e && t.to === e && (this._set(0, 0, 0, 0),
                                    r.filter(this, t),
                                    a = 1)),
                    a === e) {
                    var h, u, l = c.readNamed(arguments, "from"), f = r.peek(arguments), _ = l.x, g = l.y;
                    if (f && f.x !== e || r.hasNamed(arguments, "to")) {
                        var v = c.readNamed(arguments, "to");
                        h = v.x - _,
                            u = v.y - g,
                            h < 0 && (_ = v.x,
                                h = -h),
                            u < 0 && (g = v.y,
                                u = -u)
                    } else {
                        var p = d.read(arguments);
                        h = p.width,
                            u = p.height
                    }
                    this._set(_, g, h, u),
                        a = arguments.__index;
                    var m = arguments.__filtered;
                    m && (this.__filtered = m)
                }
                return this.__read && (this.__read = a),
                    this
            },
            set: "#initialize",
            _set: function (t, e, i, n) {
                return this.x = t,
                    this.y = e,
                    this.width = i,
                    this.height = n,
                    this
            },
            clone: function () {
                return new g(this.x, this.y, this.width, this.height)
            },
            equals: function (t) {
                var e = r.isPlainValue(t) ? g.read(arguments) : t;
                return e === this || e && this.x === e.x && this.y === e.y && this.width === e.width && this.height === e.height || !1
            },
            toString: function () {
                var t = h.instance;
                return "{ x: " + t.number(this.x) + ", y: " + t.number(this.y) + ", width: " + t.number(this.width) + ", height: " + t.number(this.height) + " }"
            },
            _serialize: function (t) {
                var e = t.formatter;
                return [e.number(this.x), e.number(this.y), e.number(this.width), e.number(this.height)]
            },
            getPoint: function (t) {
                return new (t ? c : f)(this.x, this.y, this, "setPoint")
            },
            setPoint: function () {
                var t = c.read(arguments);
                this.x = t.x,
                    this.y = t.y
            },
            getSize: function (t) {
                return new (t ? d : _)(this.width, this.height, this, "setSize")
            },
            _fw: 1,
            _fh: 1,
            setSize: function () {
                var t = d.read(arguments)
                    , e = this._sx
                    , i = this._sy
                    , n = t.width
                    , r = t.height;
                e && (this.x += (this.width - n) * e),
                    i && (this.y += (this.height - r) * i),
                    this.width = n,
                    this.height = r,
                    this._fw = this._fh = 1
            },
            getLeft: function () {
                return this.x
            },
            setLeft: function (t) {
                if (!this._fw) {
                    var e = t - this.x;
                    this.width -= .5 === this._sx ? 2 * e : e
                }
                this.x = t,
                    this._sx = this._fw = 0
            },
            getTop: function () {
                return this.y
            },
            setTop: function (t) {
                if (!this._fh) {
                    var e = t - this.y;
                    this.height -= .5 === this._sy ? 2 * e : e
                }
                this.y = t,
                    this._sy = this._fh = 0
            },
            getRight: function () {
                return this.x + this.width
            },
            setRight: function (t) {
                if (!this._fw) {
                    var e = t - this.x;
                    this.width = .5 === this._sx ? 2 * e : e
                }
                this.x = t - this.width,
                    this._sx = 1,
                    this._fw = 0
            },
            getBottom: function () {
                return this.y + this.height
            },
            setBottom: function (t) {
                if (!this._fh) {
                    var e = t - this.y;
                    this.height = .5 === this._sy ? 2 * e : e
                }
                this.y = t - this.height,
                    this._sy = 1,
                    this._fh = 0
            },
            getCenterX: function () {
                return this.x + this.width / 2
            },
            setCenterX: function (t) {
                this._fw || .5 === this._sx ? this.x = t - this.width / 2 : (this._sx && (this.x += 2 * (t - this.x) * this._sx),
                    this.width = 2 * (t - this.x)),
                    this._sx = .5,
                    this._fw = 0
            },
            getCenterY: function () {
                return this.y + this.height / 2
            },
            setCenterY: function (t) {
                this._fh || .5 === this._sy ? this.y = t - this.height / 2 : (this._sy && (this.y += 2 * (t - this.y) * this._sy),
                    this.height = 2 * (t - this.y)),
                    this._sy = .5,
                    this._fh = 0
            },
            getCenter: function (t) {
                return new (t ? c : f)(this.getCenterX(), this.getCenterY(), this, "setCenter")
            },
            setCenter: function () {
                var t = c.read(arguments);
                return this.setCenterX(t.x),
                    this.setCenterY(t.y),
                    this
            },
            getArea: function () {
                return this.width * this.height
            },
            isEmpty: function () {
                return 0 === this.width || 0 === this.height
            },
            contains: function (t) {
                return t && t.width !== e || 4 === (Array.isArray(t) ? t : arguments).length ? this._containsRectangle(g.read(arguments)) : this._containsPoint(c.read(arguments))
            },
            _containsPoint: function (t) {
                var e = t.x
                    , i = t.y;
                return e >= this.x && i >= this.y && e <= this.x + this.width && i <= this.y + this.height
            },
            _containsRectangle: function (t) {
                var e = t.x
                    , i = t.y;
                return e >= this.x && i >= this.y && e + t.width <= this.x + this.width && i + t.height <= this.y + this.height
            },
            intersects: function () {
                var t = g.read(arguments)
                    , e = r.read(arguments) || 0;
                return t.x + t.width > this.x - e && t.y + t.height > this.y - e && t.x < this.x + this.width + e && t.y < this.y + this.height + e
            },
            intersect: function () {
                var t = g.read(arguments)
                    , e = Math.max(this.x, t.x)
                    , i = Math.max(this.y, t.y)
                    , n = Math.min(this.x + this.width, t.x + t.width)
                    , r = Math.min(this.y + this.height, t.y + t.height);
                return new g(e, i, n - e, r - i)
            },
            unite: function () {
                var t = g.read(arguments)
                    , e = Math.min(this.x, t.x)
                    , i = Math.min(this.y, t.y)
                    , n = Math.max(this.x + this.width, t.x + t.width)
                    , r = Math.max(this.y + this.height, t.y + t.height);
                return new g(e, i, n - e, r - i)
            },
            include: function () {
                var t = c.read(arguments)
                    , e = Math.min(this.x, t.x)
                    , i = Math.min(this.y, t.y)
                    , n = Math.max(this.x + this.width, t.x)
                    , r = Math.max(this.y + this.height, t.y);
                return new g(e, i, n - e, r - i)
            },
            expand: function () {
                var t = d.read(arguments)
                    , e = t.width
                    , i = t.height;
                return new g(this.x - e / 2, this.y - i / 2, this.width + e, this.height + i)
            },
            scale: function (t, i) {
                return this.expand(this.width * t - this.width, this.height * (i === e ? t : i) - this.height)
            }
        }, r.each([["Top", "Left"], ["Top", "Right"], ["Bottom", "Left"], ["Bottom", "Right"], ["Left", "Center"], ["Top", "Center"], ["Right", "Center"], ["Bottom", "Center"]], function (t, e) {
            var i = t.join("")
                , n = /^[RL]/.test(i);
            e >= 4 && (t[1] += n ? "Y" : "X");
            var r = t[n ? 0 : 1]
                , s = t[n ? 1 : 0]
                , a = "get" + r
                , o = "get" + s
                , h = "set" + r
                , u = "set" + s
                , l = "set" + i;
            this["get" + i] = function (t) {
                return new (t ? c : f)(this[a](), this[o](), this, l)
            }
                ,
                this[l] = function () {
                    var t = c.read(arguments);
                    this[h](t.x),
                        this[u](t.y)
                }
        }, {
            beans: !0
        }))
        , v = g.extend({
            initialize: function (t, e, i, n, r, s) {
                this._set(t, e, i, n, !0),
                    this._owner = r,
                    this._setter = s
            },
            _set: function (t, e, i, n, r) {
                return this._x = t,
                    this._y = e,
                    this._width = i,
                    this._height = n,
                    r || this._owner[this._setter](this),
                    this
            }
        }, new function () {
            var t = g.prototype;
            return r.each(["x", "y", "width", "height"], function (t) {
                var e = r.capitalize(t)
                    , i = "_" + t;
                this["get" + e] = function () {
                    return this[i]
                }
                    ,
                    this["set" + e] = function (t) {
                        this[i] = t,
                            this._dontNotify || this._owner[this._setter](this)
                    }
            }, r.each(["Point", "Size", "Center", "Left", "Top", "Right", "Bottom", "CenterX", "CenterY", "TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], function (e) {
                var i = "set" + e;
                this[i] = function () {
                    this._dontNotify = !0,
                        t[i].apply(this, arguments),
                        this._dontNotify = !1,
                        this._owner[this._setter](this)
                }
            }, {
                isSelected: function () {
                    return !!(2 & this._owner._selection)
                },
                setSelected: function (t) {
                    var e = this._owner;
                    e._changeSelection && e._changeSelection(2, t)
                }
            }))
        }
        )
        , p = r.extend({
            _class: "Matrix",
            initialize: function t(e, i) {
                var n = arguments.length
                    , r = !0;
                if (n >= 6 ? this._set.apply(this, arguments) : 1 === n || 2 === n ? e instanceof t ? this._set(e._a, e._b, e._c, e._d, e._tx, e._ty, i) : Array.isArray(e) ? this._set.apply(this, i ? e.concat([i]) : e) : r = !1 : n ? r = !1 : this.reset(),
                    !r)
                    throw new Error("Unsupported matrix parameters");
                return this
            },
            set: "#initialize",
            _set: function (t, e, i, n, r, s, a) {
                return this._a = t,
                    this._b = e,
                    this._c = i,
                    this._d = n,
                    this._tx = r,
                    this._ty = s,
                    a || this._changed(),
                    this
            },
            _serialize: function (t, e) {
                return r.serialize(this.getValues(), t, !0, e)
            },
            _changed: function () {
                var t = this._owner;
                t && (t._applyMatrix ? t.transform(null, !0) : t._changed(9))
            },
            clone: function () {
                return new p(this._a, this._b, this._c, this._d, this._tx, this._ty)
            },
            equals: function (t) {
                return t === this || t && this._a === t._a && this._b === t._b && this._c === t._c && this._d === t._d && this._tx === t._tx && this._ty === t._ty
            },
            toString: function () {
                var t = h.instance;
                return "[[" + [t.number(this._a), t.number(this._c), t.number(this._tx)].join(", ") + "], [" + [t.number(this._b), t.number(this._d), t.number(this._ty)].join(", ") + "]]"
            },
            reset: function (t) {
                return this._a = this._d = 1,
                    this._b = this._c = this._tx = this._ty = 0,
                    t || this._changed(),
                    this
            },
            apply: function (t, e) {
                var i = this._owner;
                return !!i && (i.transform(null, !0, r.pick(t, !0), e),
                    this.isIdentity())
            },
            translate: function () {
                var t = c.read(arguments)
                    , e = t.x
                    , i = t.y;
                return this._tx += e * this._a + i * this._c,
                    this._ty += e * this._b + i * this._d,
                    this._changed(),
                    this
            },
            scale: function () {
                var t = c.read(arguments)
                    , e = c.read(arguments, 0, {
                        readNull: !0
                    });
                return e && this.translate(e),
                    this._a *= t.x,
                    this._b *= t.x,
                    this._c *= t.y,
                    this._d *= t.y,
                    e && this.translate(e.negate()),
                    this._changed(),
                    this
            },
            rotate: function (t) {
                t *= Math.PI / 180;
                var e = c.read(arguments, 1)
                    , i = e.x
                    , n = e.y
                    , r = Math.cos(t)
                    , s = Math.sin(t)
                    , a = i - i * r + n * s
                    , o = n - i * s - n * r
                    , h = this._a
                    , u = this._b
                    , l = this._c
                    , f = this._d;
                return this._a = r * h + s * l,
                    this._b = r * u + s * f,
                    this._c = -s * h + r * l,
                    this._d = -s * u + r * f,
                    this._tx += a * h + o * l,
                    this._ty += a * u + o * f,
                    this._changed(),
                    this
            },
            shear: function () {
                var t = c.read(arguments)
                    , e = c.read(arguments, 0, {
                        readNull: !0
                    });
                e && this.translate(e);
                var i = this._a
                    , n = this._b;
                return this._a += t.y * this._c,
                    this._b += t.y * this._d,
                    this._c += t.x * i,
                    this._d += t.x * n,
                    e && this.translate(e.negate()),
                    this._changed(),
                    this
            },
            skew: function () {
                var t = c.read(arguments)
                    , e = c.read(arguments, 0, {
                        readNull: !0
                    })
                    , i = Math.PI / 180
                    , n = new c(Math.tan(t.x * i), Math.tan(t.y * i));
                return this.shear(n, e)
            },
            append: function (t, e) {
                if (t) {
                    var i = this._a
                        , n = this._b
                        , r = this._c
                        , s = this._d
                        , a = t._a
                        , o = t._c
                        , h = t._b
                        , u = t._d
                        , l = t._tx
                        , c = t._ty;
                    this._a = a * i + h * r,
                        this._c = o * i + u * r,
                        this._b = a * n + h * s,
                        this._d = o * n + u * s,
                        this._tx += l * i + c * r,
                        this._ty += l * n + c * s,
                        e || this._changed()
                }
                return this
            },
            prepend: function (t, e) {
                if (t) {
                    var i = this._a
                        , n = this._b
                        , r = this._c
                        , s = this._d
                        , a = this._tx
                        , o = this._ty
                        , h = t._a
                        , u = t._c
                        , l = t._b
                        , c = t._d
                        , f = t._tx
                        , d = t._ty;
                    this._a = h * i + u * n,
                        this._c = h * r + u * s,
                        this._b = l * i + c * n,
                        this._d = l * r + c * s,
                        this._tx = h * a + u * o + f,
                        this._ty = l * a + c * o + d,
                        e || this._changed()
                }
                return this
            },
            appended: function (t) {
                return this.clone().append(t)
            },
            prepended: function (t) {
                return this.clone().prepend(t)
            },
            invert: function () {
                var t = this._a
                    , e = this._b
                    , i = this._c
                    , n = this._d
                    , r = this._tx
                    , s = this._ty
                    , a = t * n - e * i
                    , o = null;
                return a && !isNaN(a) && isFinite(r) && isFinite(s) && (this._a = n / a,
                    this._b = -e / a,
                    this._c = -i / a,
                    this._d = t / a,
                    this._tx = (i * s - n * r) / a,
                    this._ty = (e * r - t * s) / a,
                    o = this),
                    o
            },
            inverted: function () {
                return this.clone().invert()
            },
            concatenate: "#append",
            preConcatenate: "#prepend",
            chain: "#appended",
            _shiftless: function () {
                return new p(this._a, this._b, this._c, this._d, 0, 0)
            },
            _orNullIfIdentity: function () {
                return this.isIdentity() ? null : this
            },
            isIdentity: function () {
                return 1 === this._a && 0 === this._b && 0 === this._c && 1 === this._d && 0 === this._tx && 0 === this._ty
            },
            isInvertible: function () {
                var t = this._a * this._d - this._c * this._b;
                return t && !isNaN(t) && isFinite(this._tx) && isFinite(this._ty)
            },
            isSingular: function () {
                return !this.isInvertible()
            },
            transform: function (t, e, i) {
                return arguments.length < 3 ? this._transformPoint(c.read(arguments)) : this._transformCoordinates(t, e, i)
            },
            _transformPoint: function (t, e, i) {
                var n = t.x
                    , r = t.y;
                return e || (e = new c),
                    e._set(n * this._a + r * this._c + this._tx, n * this._b + r * this._d + this._ty, i)
            },
            _transformCoordinates: function (t, e, i) {
                for (var n = 0, r = 2 * i; n < r; n += 2) {
                    var s = t[n]
                        , a = t[n + 1];
                    e[n] = s * this._a + a * this._c + this._tx,
                        e[n + 1] = s * this._b + a * this._d + this._ty
                }
                return e
            },
            _transformCorners: function (t) {
                var e = t.x
                    , i = t.y
                    , n = e + t.width
                    , r = i + t.height
                    , s = [e, i, n, i, n, r, e, r];
                return this._transformCoordinates(s, s, 4)
            },
            _transformBounds: function (t, e, i) {
                for (var n = this._transformCorners(t), r = n.slice(0, 2), s = r.slice(), a = 2; a < 8; a++) {
                    var o = n[a]
                        , h = 1 & a;
                    o < r[h] ? r[h] = o : o > s[h] && (s[h] = o)
                }
                return e || (e = new g),
                    e._set(r[0], r[1], s[0] - r[0], s[1] - r[1], i)
            },
            inverseTransform: function () {
                return this._inverseTransform(c.read(arguments))
            },
            _inverseTransform: function (t, e, i) {
                var n = this._a
                    , r = this._b
                    , s = this._c
                    , a = this._d
                    , o = this._tx
                    , h = this._ty
                    , u = n * a - r * s
                    , l = null;
                if (u && !isNaN(u) && isFinite(o) && isFinite(h)) {
                    var f = t.x - this._tx
                        , d = t.y - this._ty;
                    e || (e = new c),
                        l = e._set((f * a - d * s) / u, (d * n - f * r) / u, i)
                }
                return l
            },
            decompose: function () {
                var t, e, i, n = this._a, r = this._b, s = this._c, a = this._d, o = n * a - r * s, h = Math.sqrt, u = Math.atan2, l = 180 / Math.PI;
                if (0 !== n || 0 !== r) {
                    var f = h(n * n + r * r);
                    t = Math.acos(n / f) * (r > 0 ? 1 : -1),
                        e = [f, o / f],
                        i = [u(n * s + r * a, f * f), 0]
                } else if (0 !== s || 0 !== a) {
                    var d = h(s * s + a * a);
                    t = Math.asin(s / d) * (a > 0 ? 1 : -1),
                        e = [o / d, d],
                        i = [0, u(n * s + r * a, d * d)]
                } else
                    t = 0,
                        i = e = [0, 0];
                return {
                    translation: this.getTranslation(),
                    rotation: t * l,
                    scaling: new c(e),
                    skewing: new c(i[0] * l, i[1] * l)
                }
            },
            getValues: function () {
                return [this._a, this._b, this._c, this._d, this._tx, this._ty]
            },
            getTranslation: function () {
                return new c(this._tx, this._ty)
            },
            getScaling: function () {
                return (this.decompose() || {}).scaling
            },
            getRotation: function () {
                return (this.decompose() || {}).rotation
            },
            applyToContext: function (t) {
                this.isIdentity() || t.transform(this._a, this._b, this._c, this._d, this._tx, this._ty)
            }
        }, r.each(["a", "b", "c", "d", "tx", "ty"], function (t) {
            var e = r.capitalize(t)
                , i = "_" + t;
            this["get" + e] = function () {
                return this[i]
            }
                ,
                this["set" + e] = function (t) {
                    this[i] = t,
                        this._changed()
                }
        }, {}))
        , m = r.extend({
            _class: "Line",
            initialize: function (t, e, i, n, r) {
                var s = !1;
                arguments.length >= 4 ? (this._px = t,
                    this._py = e,
                    this._vx = i,
                    this._vy = n,
                    s = r) : (this._px = t.x,
                        this._py = t.y,
                        this._vx = e.x,
                        this._vy = e.y,
                        s = i),
                    s || (this._vx -= this._px,
                        this._vy -= this._py)
            },
            getPoint: function () {
                return new c(this._px, this._py)
            },
            getVector: function () {
                return new c(this._vx, this._vy)
            },
            getLength: function () {
                return this.getVector().getLength()
            },
            intersect: function (t, e) {
                return m.intersect(this._px, this._py, this._vx, this._vy, t._px, t._py, t._vx, t._vy, !0, e)
            },
            getSide: function (t, e) {
                return m.getSide(this._px, this._py, this._vx, this._vy, t.x, t.y, !0, e)
            },
            getDistance: function (t) {
                return Math.abs(this.getSignedDistance(t))
            },
            getSignedDistance: function (t) {
                return m.getSignedDistance(this._px, this._py, this._vx, this._vy, t.x, t.y, !0)
            },
            isCollinear: function (t) {
                return c.isCollinear(this._vx, this._vy, t._vx, t._vy)
            },
            isOrthogonal: function (t) {
                return c.isOrthogonal(this._vx, this._vy, t._vx, t._vy)
            },
            statics: {
                intersect: function (t, e, i, n, r, s, a, o, h, l) {
                    h || (i -= t,
                        n -= e,
                        a -= r,
                        o -= s);
                    var f = i * o - n * a;
                    if (!u.isZero(f)) {
                        var d = t - r
                            , _ = e - s
                            , g = (a * _ - o * d) / f
                            , v = (i * _ - n * d) / f;
                        if (l || -1e-12 < g && g < 1 + 1e-12 && -1e-12 < v && v < 1 + 1e-12)
                            return l || (g = g <= 0 ? 0 : g >= 1 ? 1 : g),
                                new c(t + g * i, e + g * n)
                    }
                },
                getSide: function (t, e, i, n, r, s, a, o) {
                    a || (i -= t,
                        n -= e);
                    var h = r - t
                        , l = h * n - (s - e) * i;
                    return !o && u.isZero(l) && (l = (h * i + h * i) / (i * i + n * n)) >= 0 && l <= 1 && (l = 0),
                        l < 0 ? -1 : l > 0 ? 1 : 0
                },
                getSignedDistance: function (t, e, i, n, r, s, a) {
                    return a || (i -= t,
                        n -= e),
                        0 === i ? n > 0 ? r - t : t - r : 0 === n ? i < 0 ? s - e : e - s : ((r - t) * n - (s - e) * i) / Math.sqrt(i * i + n * n)
                },
                getDistance: function (t, e, i, n, r, s, a) {
                    return Math.abs(m.getSignedDistance(t, e, i, n, r, s, a))
                }
            }
        })
        , y = o.extend({
            _class: "Project",
            _list: "projects",
            _reference: "project",
            _compactSerialize: !0,
            initialize: function (t) {
                o.call(this, !0),
                    this._children = [],
                    this._namedChildren = {},
                    this._activeLayer = null,
                    this._currentStyle = new V(null, null, this),
                    this._view = U.create(this, t || Q.getCanvas(1, 1)),
                    this._selectionItems = {},
                    this._selectionCount = 0,
                    this._updateVersion = 0
            },
            _serialize: function (t, e) {
                return r.serialize(this._children, t, !0, e)
            },
            _changed: function (t, e) {
                if (1 & t) {
                    var i = this._view;
                    i && (i._needsUpdate = !0,
                        !i._requested && i._autoUpdate && i.requestUpdate())
                }
                var n = this._changes;
                if (n && e) {
                    var r = this._changesById
                        , s = e._id
                        , a = r[s];
                    a ? a.flags |= t : n.push(r[s] = {
                        item: e,
                        flags: t
                    })
                }
            },
            clear: function () {
                for (var t = this._children, e = t.length - 1; e >= 0; e--)
                    t[e].remove()
            },
            isEmpty: function () {
                return !this._children.length
            },
            remove: function t() {
                return !!t.base.call(this) && (this._view && this._view.remove(),
                    !0)
            },
            getView: function () {
                return this._view
            },
            getCurrentStyle: function () {
                return this._currentStyle
            },
            setCurrentStyle: function (t) {
                this._currentStyle.set(t)
            },
            getIndex: function () {
                return this._index
            },
            getOptions: function () {
                return this._scope.settings
            },
            getLayers: function () {
                return this._children
            },
            getActiveLayer: function () {
                return this._activeLayer || new b({
                    project: this,
                    insert: !0
                })
            },
            getSymbolDefinitions: function () {
                var t = []
                    , e = {};
                return this.getItems({
                    class: P,
                    match: function (i) {
                        var n = i._definition
                            , r = n._id;
                        return e[r] || (e[r] = !0,
                            t.push(n)),
                            !1
                    }
                }),
                    t
            },
            getSymbols: "getSymbolDefinitions",
            getSelectedItems: function () {
                var t = this._selectionItems
                    , e = [];
                for (var i in t) {
                    var n = t[i]
                        , r = n._selection;
                    1 & r && n.isInserted() ? e.push(n) : r || this._updateSelection(n)
                }
                return e
            },
            _updateSelection: function (t) {
                var e = t._id
                    , i = this._selectionItems;
                t._selection ? i[e] !== t && (this._selectionCount++,
                    i[e] = t) : i[e] === t && (this._selectionCount--,
                        delete i[e])
            },
            selectAll: function () {
                for (var t = this._children, e = 0, i = t.length; e < i; e++)
                    t[e].setFullySelected(!0)
            },
            deselectAll: function () {
                var t = this._selectionItems;
                for (var e in t)
                    t[e].setFullySelected(!1)
            },
            addLayer: function (t) {
                return this.insertLayer(e, t)
            },
            insertLayer: function (t, e) {
                if (e instanceof b) {
                    e._remove(!1, !0),
                        r.splice(this._children, [e], t, 0),
                        e._setProject(this, !0);
                    var i = e._name;
                    i && e.setName(i),
                        this._changes && e._changed(5),
                        this._activeLayer || (this._activeLayer = e)
                } else
                    e = null;
                return e
            },
            _insertItem: function (t, i, n) {
                return i = this.insertLayer(t, i) || (this._activeLayer || this._insertItem(e, new b(w.NO_INSERT), !0)).insertChild(t, i),
                    n && i.activate && i.activate(),
                    i
            },
            getItems: function (t) {
                return w._getItems(this, t)
            },
            getItem: function (t) {
                return w._getItems(this, t, null, null, !0)[0] || null
            },
            importJSON: function (t) {
                this.activate();
                var e = this._activeLayer;
                return r.importJSON(t, e && e.isEmpty() && e)
            },
            removeOn: function (t) {
                var e = this._removeSets;
                if (e) {
                    "mouseup" === t && (e.mousedrag = null);
                    var i = e[t];
                    if (i) {
                        for (var n in i) {
                            var r = i[n];
                            for (var s in e) {
                                var a = e[s];
                                a && a != i && delete a[r._id]
                            }
                            r.remove()
                        }
                        e[t] = null
                    }
                }
            },
            draw: function (t, e, i) {
                this._updateVersion++,
                    t.save(),
                    e.applyToContext(t);
                for (var n = this._children, s = new r({
                    offset: new c(0, 0),
                    pixelRatio: i,
                    viewMatrix: e.isIdentity() ? null : e,
                    matrices: [new p],
                    updateMatrix: !0
                }), a = 0, o = n.length; a < o; a++)
                    n[a].draw(t, s);
                if (t.restore(),
                    this._selectionCount > 0) {
                    t.save(),
                        t.strokeWidth = 1;
                    var h = this._selectionItems
                        , u = this._scope.settings.handleSize
                        , l = this._updateVersion;
                    for (var f in h)
                        h[f]._drawSelection(t, e, u, h, l);
                    t.restore()
                }
            }
        })
        , w = r.extend(s, {
            statics: {
                extend: function t(e) {
                    return e._serializeFields && (e._serializeFields = r.set({}, this.prototype._serializeFields, e._serializeFields)),
                        t.base.apply(this, arguments)
                },
                NO_INSERT: {
                    insert: !1
                }
            },
            _class: "Item",
            _name: null,
            _applyMatrix: !0,
            _canApplyMatrix: !0,
            _canScaleStroke: !1,
            _pivot: null,
            _visible: !0,
            _blendMode: "normal",
            _opacity: 1,
            _locked: !1,
            _guide: !1,
            _clipMask: !1,
            _selection: 0,
            _selectBounds: !0,
            _selectChildren: !1,
            _serializeFields: {
                name: null,
                applyMatrix: null,
                matrix: new p,
                pivot: null,
                visible: !0,
                blendMode: "normal",
                opacity: 1,
                locked: !1,
                guide: !1,
                clipMask: !1,
                selected: !1,
                data: {}
            },
            _prioritize: ["applyMatrix"]
        }, new function () {
            var t = ["onMouseDown", "onMouseUp", "onMouseDrag", "onClick", "onDoubleClick", "onMouseMove", "onMouseEnter", "onMouseLeave"];
            return r.each(t, function (t) {
                this._events[t] = {
                    install: function (t) {
                        this.getView()._countItemEvent(t, 1)
                    },
                    uninstall: function (t) {
                        this.getView()._countItemEvent(t, -1)
                    }
                }
            }, {
                _events: {
                    onFrame: {
                        install: function () {
                            this.getView()._animateItem(this, !0)
                        },
                        uninstall: function () {
                            this.getView()._animateItem(this, !1)
                        }
                    },
                    onLoad: {},
                    onError: {}
                },
                statics: {
                    _itemHandlers: t
                }
            })
        }
            , {
                initialize: function () { },
                _initialize: function (t, i) {
                    var n = t && r.isPlainObject(t)
                        , s = n && !0 === t.internal
                        , a = this._matrix = new p
                        , o = n && t.project || paper.project
                        , h = paper.settings;
                    return this._id = s ? null : l.get(),
                        this._parent = this._index = null,
                        this._applyMatrix = this._canApplyMatrix && h.applyMatrix,
                        i && a.translate(i),
                        a._owner = this,
                        this._style = new V(o._currentStyle, this, o),
                        s || n && 0 == t.insert || !h.insertItems && (!n || !0 !== t.insert) ? this._setProject(o) : (n && t.parent || o)._insertItem(e, this, !0),
                        n && t !== w.NO_INSERT && this.set(t, {
                            internal: !0,
                            insert: !0,
                            project: !0,
                            parent: !0
                        }),
                        n
                },
                _serialize: function (t, e) {
                    function i(i) {
                        for (var a in i) {
                            var o = s[a];
                            r.equals(o, "leading" === a ? 1.2 * i.fontSize : i[a]) || (n[a] = r.serialize(o, t, "data" !== a, e))
                        }
                    }
                    var n = {}
                        , s = this;
                    return i(this._serializeFields),
                        this instanceof x || i(this._style._defaults),
                        [this._class, n]
                },
                _changed: function (t) {
                    var i = this._symbol
                        , n = this._parent || i
                        , r = this._project;
                    8 & t && (this._bounds = this._position = this._decomposed = this._globalMatrix = e),
                        n && 40 & t && w._clearBoundsCache(n),
                        2 & t && w._clearBoundsCache(this),
                        r && r._changed(t, this),
                        i && i._changed(t)
                },
                getId: function () {
                    return this._id
                },
                getName: function () {
                    return this._name
                },
                setName: function (t) {
                    if (this._name && this._removeNamed(),
                        t === +t + "")
                        throw new Error("Names consisting only of numbers are not supported.");
                    var i = this._getOwner();
                    if (t && i) {
                        var n = i._children
                            , r = i._namedChildren;
                        (r[t] = r[t] || []).push(this),
                            t in n || (n[t] = this)
                    }
                    this._name = t || e,
                        this._changed(128)
                },
                getStyle: function () {
                    return this._style
                },
                setStyle: function (t) {
                    this.getStyle().set(t)
                }
            }, r.each(["locked", "visible", "blendMode", "opacity", "guide"], function (t) {
                var e = r.capitalize(t)
                    , i = "_" + t
                    , n = {
                        locked: 128,
                        visible: 137
                    };
                this["get" + e] = function () {
                    return this[i]
                }
                    ,
                    this["set" + e] = function (e) {
                        e != this[i] && (this[i] = e,
                            this._changed(n[t] || 129))
                    }
            }, {}), {
            beans: !0,
            getSelection: function () {
                return this._selection
            },
            setSelection: function (t) {
                if (t !== this._selection) {
                    this._selection = t;
                    var e = this._project;
                    e && (e._updateSelection(this),
                        this._changed(129))
                }
            },
            _changeSelection: function (t, e) {
                var i = this._selection;
                this.setSelection(e ? i | t : i & ~t)
            },
            isSelected: function () {
                if (this._selectChildren)
                    for (var t = this._children, e = 0, i = t.length; e < i; e++)
                        if (t[e].isSelected())
                            return !0;
                return !!(1 & this._selection)
            },
            setSelected: function (t) {
                if (this._selectChildren)
                    for (var e = this._children, i = 0, n = e.length; i < n; i++)
                        e[i].setSelected(t);
                this._changeSelection(1, t)
            },
            isFullySelected: function () {
                var t = this._children
                    , e = !!(1 & this._selection);
                if (t && e) {
                    for (var i = 0, n = t.length; i < n; i++)
                        if (!t[i].isFullySelected())
                            return !1;
                    return !0
                }
                return e
            },
            setFullySelected: function (t) {
                var e = this._children;
                if (e)
                    for (var i = 0, n = e.length; i < n; i++)
                        e[i].setFullySelected(t);
                this._changeSelection(1, t)
            },
            isClipMask: function () {
                return this._clipMask
            },
            setClipMask: function (t) {
                this._clipMask != (t = !!t) && (this._clipMask = t,
                    t && (this.setFillColor(null),
                        this.setStrokeColor(null)),
                    this._changed(129),
                    this._parent && this._parent._changed(1024))
            },
            getData: function () {
                return this._data || (this._data = {}),
                    this._data
            },
            setData: function (t) {
                this._data = t
            },
            getPosition: function (t) {
                var e = this._position
                    , i = t ? c : f;
                if (!e) {
                    var n = this._pivot;
                    e = this._position = n ? this._matrix._transformPoint(n) : this.getBounds().getCenter(!0)
                }
                return new i(e.x, e.y, this, "setPosition")
            },
            setPosition: function () {
                this.translate(c.read(arguments).subtract(this.getPosition(!0)))
            },
            getPivot: function () {
                var t = this._pivot;
                return t ? new f(t.x, t.y, this, "setPivot") : null
            },
            setPivot: function () {
                this._pivot = c.read(arguments, 0, {
                    clone: !0,
                    readNull: !0
                }),
                    this._position = e
            }
        }, r.each({
            getStrokeBounds: {
                stroke: !0
            },
            getHandleBounds: {
                handle: !0
            },
            getInternalBounds: {
                internal: !0
            }
        }, function (t, e) {
            this[e] = function (e) {
                return this.getBounds(e, t)
            }
        }, {
            beans: !0,
            getBounds: function (t, e) {
                var i = e || t instanceof p
                    , n = r.set({}, i ? e : t, this._boundsOptions);
                n.stroke && !this.getStrokeScaling() || (n.cacheItem = this);
                var s = this._getCachedBounds(i && t, n).rect;
                return arguments.length ? s : new v(s.x, s.y, s.width, s.height, this, "setBounds")
            },
            setBounds: function () {
                var t = g.read(arguments)
                    , e = this.getBounds()
                    , i = this._matrix
                    , n = new p
                    , r = t.getCenter();
                n.translate(r),
                    t.width == e.width && t.height == e.height || (i.isInvertible() || (i.set(i._backup || (new p).translate(i.getTranslation())),
                        e = this.getBounds()),
                        n.scale(0 !== e.width ? t.width / e.width : 0, 0 !== e.height ? t.height / e.height : 0)),
                    r = e.getCenter(),
                    n.translate(-r.x, -r.y),
                    this.transform(n)
            },
            _getBounds: function (t, e) {
                var i = this._children;
                return i && i.length ? (w._updateBoundsCache(this, e.cacheItem),
                    w._getBounds(i, t, e)) : new g
            },
            _getBoundsCacheKey: function (t, e) {
                return [t.stroke ? 1 : 0, t.handle ? 1 : 0, e ? 1 : 0].join("")
            },
            _getCachedBounds: function (t, e, i) {
                t = t && t._orNullIfIdentity();
                var n = e.internal && !i
                    , r = e.cacheItem
                    , s = n ? null : this._matrix._orNullIfIdentity()
                    , a = r && (!t || t.equals(s)) && this._getBoundsCacheKey(e, n)
                    , o = this._bounds;
                if (w._updateBoundsCache(this._parent || this._symbol, r),
                    a && o && a in o)
                    return {
                        rect: (f = o[a]).rect.clone(),
                        nonscaling: f.nonscaling
                    };
                var h = this._getBounds(t || s, e)
                    , u = h.rect || h
                    , l = this._style
                    , c = h.nonscaling || l.hasStroke() && !l.getStrokeScaling();
                if (a) {
                    o || (this._bounds = o = {});
                    var f = o[a] = {
                        rect: u.clone(),
                        nonscaling: c,
                        internal: n
                    }
                }
                return {
                    rect: u,
                    nonscaling: c
                }
            },
            _getStrokeMatrix: function (t, e) {
                var i = this.getStrokeScaling() ? null : e && e.internal ? this : this._parent || this._symbol && this._symbol._item
                    , n = i ? i.getViewMatrix().invert() : t;
                return n && n._shiftless()
            },
            statics: {
                _updateBoundsCache: function (t, e) {
                    if (t && e) {
                        var i = e._id
                            , n = t._boundsCache = t._boundsCache || {
                                ids: {},
                                list: []
                            };
                        n.ids[i] || (n.list.push(e),
                            n.ids[i] = e)
                    }
                },
                _clearBoundsCache: function (t) {
                    var i = t._boundsCache;
                    if (i) {
                        t._bounds = t._position = t._boundsCache = e;
                        for (var n = 0, r = i.list, s = r.length; n < s; n++) {
                            var a = r[n];
                            a !== t && (a._bounds = a._position = e,
                                a._boundsCache && w._clearBoundsCache(a))
                        }
                    }
                },
                _getBounds: function (t, e, i) {
                    var n = 1 / 0
                        , r = -n
                        , s = n
                        , a = r
                        , o = !1;
                    i = i || {};
                    for (var h = 0, u = t.length; h < u; h++) {
                        var l = t[h];
                        if (l._visible && !l.isEmpty()) {
                            var c = l._getCachedBounds(e && e.appended(l._matrix), i, !0)
                                , f = c.rect;
                            n = Math.min(f.x, n),
                                s = Math.min(f.y, s),
                                r = Math.max(f.x + f.width, r),
                                a = Math.max(f.y + f.height, a),
                                c.nonscaling && (o = !0)
                        }
                    }
                    return {
                        rect: isFinite(n) ? new g(n, s, r - n, a - s) : new g,
                        nonscaling: o
                    }
                }
            }
        }), {
            beans: !0,
            _decompose: function () {
                return this._applyMatrix ? null : this._decomposed || (this._decomposed = this._matrix.decompose())
            },
            getRotation: function () {
                var t = this._decompose();
                return t ? t.rotation : 0
            },
            setRotation: function (t) {
                var e = this.getRotation();
                if (null != e && null != t) {
                    var i = this._decomposed;
                    this.rotate(t - e),
                        i && (i.rotation = t,
                            this._decomposed = i)
                }
            },
            getScaling: function () {
                var t = this._decompose()
                    , e = t && t.scaling;
                return new f(e ? e.x : 1, e ? e.y : 1, this, "setScaling")
            },
            setScaling: function () {
                var t = this.getScaling()
                    , e = c.read(arguments, 0, {
                        clone: !0,
                        readNull: !0
                    });
                if (t && e && !t.equals(e)) {
                    var i = this.getRotation()
                        , n = this._decomposed
                        , r = new p
                        , s = this.getPosition(!0);
                    r.translate(s),
                        i && r.rotate(i),
                        r.scale(e.x / t.x, e.y / t.y),
                        i && r.rotate(-i),
                        r.translate(s.negate()),
                        this.transform(r),
                        n && (n.scaling = e,
                            this._decomposed = n)
                }
            },
            getMatrix: function () {
                return this._matrix
            },
            setMatrix: function () {
                var t = this._matrix;
                t.initialize.apply(t, arguments)
            },
            getGlobalMatrix: function (t) {
                var e = this._globalMatrix
                    , i = this._project._updateVersion;
                if (e && e._updateVersion !== i && (e = null),
                    !e) {
                    e = this._globalMatrix = this._matrix.clone();
                    var n = this._parent;
                    n && e.prepend(n.getGlobalMatrix(!0)),
                        e._updateVersion = i
                }
                return t ? e : e.clone()
            },
            getViewMatrix: function () {
                return this.getGlobalMatrix().prepend(this.getView()._matrix)
            },
            getApplyMatrix: function () {
                return this._applyMatrix
            },
            setApplyMatrix: function (t) {
                (this._applyMatrix = this._canApplyMatrix && !!t) && this.transform(null, !0)
            },
            getTransformContent: "#getApplyMatrix",
            setTransformContent: "#setApplyMatrix"
        }, {
            getProject: function () {
                return this._project
            },
            _setProject: function (t, e) {
                if (this._project !== t) {
                    this._project && this._installEvents(!1),
                        this._project = t;
                    for (var i = this._children, n = 0, r = i && i.length; n < r; n++)
                        i[n]._setProject(t);
                    e = !0
                }
                e && this._installEvents(!0)
            },
            getView: function () {
                return this._project._view
            },
            _installEvents: function t(e) {
                t.base.call(this, e);
                for (var i = this._children, n = 0, r = i && i.length; n < r; n++)
                    i[n]._installEvents(e)
            },
            getLayer: function () {
                for (var t = this; t = t._parent;)
                    if (t instanceof b)
                        return t;
                return null
            },
            getParent: function () {
                return this._parent
            },
            setParent: function (t) {
                return t.addChild(this)
            },
            _getOwner: "#getParent",
            getChildren: function () {
                return this._children
            },
            setChildren: function (t) {
                this.removeChildren(),
                    this.addChildren(t)
            },
            getFirstChild: function () {
                return this._children && this._children[0] || null
            },
            getLastChild: function () {
                return this._children && this._children[this._children.length - 1] || null
            },
            getNextSibling: function () {
                var t = this._getOwner();
                return t && t._children[this._index + 1] || null
            },
            getPreviousSibling: function () {
                var t = this._getOwner();
                return t && t._children[this._index - 1] || null
            },
            getIndex: function () {
                return this._index
            },
            equals: function (t) {
                return t === this || t && this._class === t._class && this._style.equals(t._style) && this._matrix.equals(t._matrix) && this._locked === t._locked && this._visible === t._visible && this._blendMode === t._blendMode && this._opacity === t._opacity && this._clipMask === t._clipMask && this._guide === t._guide && this._equals(t) || !1
            },
            _equals: function (t) {
                return r.equals(this._children, t._children)
            },
            clone: function (t) {
                var i = new this.constructor(w.NO_INSERT)
                    , n = this._children
                    , s = r.pick(t ? t.insert : e, t === e || !0 === t)
                    , a = r.pick(t ? t.deep : e, !0);
                n && i.copyAttributes(this),
                    n && !a || i.copyContent(this),
                    n || i.copyAttributes(this),
                    s && i.insertAbove(this);
                var o = this._name
                    , h = this._parent;
                if (o && h) {
                    for (var n = h._children, u = o, l = 1; n[o];)
                        o = u + " " + l++;
                    o !== u && i.setName(o)
                }
                return i
            },
            copyContent: function (t) {
                for (var e = t._children, i = 0, n = e && e.length; i < n; i++)
                    this.addChild(e[i].clone(!1), !0)
            },
            copyAttributes: function (t, e) {
                this.setStyle(t._style);
                for (var i = ["_locked", "_visible", "_blendMode", "_opacity", "_clipMask", "_guide"], n = 0, s = i.length; n < s; n++) {
                    var a = i[n];
                    t.hasOwnProperty(a) && (this[a] = t[a])
                }
                e || this._matrix.set(t._matrix, !0),
                    this.setApplyMatrix(t._applyMatrix),
                    this.setPivot(t._pivot),
                    this.setSelection(t._selection);
                var o = t._data
                    , h = t._name;
                this._data = o ? r.clone(o) : null,
                    h && this.setName(h)
            },
            rasterize: function (t, i) {
                var n = this.getStrokeBounds()
                    , s = (t || this.getView().getResolution()) / 72
                    , a = n.getTopLeft().floor()
                    , o = n.getBottomRight().ceil()
                    , h = new d(o.subtract(a))
                    , u = new S(w.NO_INSERT);
                if (!h.isZero()) {
                    var l = Q.getCanvas(h.multiply(s))
                        , c = l.getContext("2d")
                        , f = (new p).scale(s).translate(a.negate());
                    c.save(),
                        f.applyToContext(c),
                        this.draw(c, new r({
                            matrices: [f]
                        })),
                        c.restore(),
                        u.setCanvas(l)
                }
                return u.transform((new p).translate(a.add(h.divide(2))).scale(1 / s)),
                    (i === e || i) && u.insertAbove(this),
                    u
            },
            contains: function () {
                return !!this._contains(this._matrix._inverseTransform(c.read(arguments)))
            },
            _contains: function (t) {
                var e = this._children;
                if (e) {
                    for (var i = e.length - 1; i >= 0; i--)
                        if (e[i].contains(t))
                            return !0;
                    return !1
                }
                return t.isInside(this.getInternalBounds())
            },
            isInside: function () {
                return g.read(arguments).contains(this.getBounds())
            },
            _asPathItem: function () {
                return new L.Rectangle({
                    rectangle: this.getInternalBounds(),
                    matrix: this._matrix,
                    insert: !1
                })
            },
            intersects: function (t, e) {
                return t instanceof w && this._asPathItem().getIntersections(t._asPathItem(), null, e, !0).length > 0
            }
        }, new function () {
            function t() {
                return this._hitTest(c.read(arguments), M.getOptions(arguments))
            }
            function e() {
                var t = c.read(arguments)
                    , e = M.getOptions(arguments)
                    , i = [];
                return this._hitTest(t, r.set({
                    all: i
                }, e)),
                    i
            }
            function i(t, e, i, n) {
                var r = this._children;
                if (r)
                    for (var s = r.length - 1; s >= 0; s--) {
                        var a = r[s]
                            , o = a !== n && a._hitTest(t, e, i);
                        if (o && !e.all)
                            return o
                    }
                return null
            }
            return y.inject({
                hitTest: t,
                hitTestAll: e,
                _hitTest: i
            }),
            {
                hitTest: t,
                hitTestAll: e,
                _hitTestChildren: i
            }
        }
            , {
                _hitTest: function (t, e, i) {
                    function n(t) {
                        return t && _ && !_(t) && (t = null),
                            t && e.all && e.all.push(t),
                            t
                    }
                    function s(e, i) {
                        var n = i ? l["get" + i]() : g.getPosition();
                        if (t.subtract(n).divide(u).length <= 1)
                            return new M(e, g, {
                                name: i ? r.hyphenate(i) : e,
                                point: n
                            })
                    }
                    if (this._locked || !this._visible || this._guide && !e.guides || this.isEmpty())
                        return null;
                    var a = this._matrix
                        , o = i ? i.appended(a) : this.getGlobalMatrix().prepend(this.getView()._matrix)
                        , h = Math.max(e.tolerance, 1e-12)
                        , u = e._tolerancePadding = new d(L._getStrokePadding(h, a._shiftless().invert()));
                    if (!(t = a._inverseTransform(t)) || !this._children && !this.getBounds({
                        internal: !0,
                        stroke: !0,
                        handle: !0
                    }).expand(u.multiply(2))._containsPoint(t))
                        return null;
                    var l, c, f = !(e.guides && !this._guide || e.selected && !this.isSelected() || e.type && e.type !== r.hyphenate(this._class) || e.class && !(this instanceof e.class)), _ = e.match, g = this, v = e.position, p = e.center, m = e.bounds;
                    if (f && this._parent && (v || p || m)) {
                        if ((p || m) && (l = this.getInternalBounds()),
                            !(c = v && s("position") || p && s("center", "Center")) && m)
                            for (var y = ["TopLeft", "TopRight", "BottomLeft", "BottomRight", "LeftCenter", "TopCenter", "RightCenter", "BottomCenter"], w = 0; w < 8 && !c; w++)
                                c = s("bounds", y[w]);
                        c = n(c)
                    }
                    return c || (c = this._hitTestChildren(t, e, o) || f && n(this._hitTestSelf(t, e, o, this.getStrokeScaling() ? null : o._shiftless().invert())) || null),
                        c && c.point && (c.point = a.transform(c.point)),
                        c
                },
                _hitTestSelf: function (t, e) {
                    if (e.fill && this.hasFill() && this._contains(t))
                        return new M("fill", this)
                },
                matches: function (t, e) {
                    function i(t, e) {
                        for (var n in t)
                            if (t.hasOwnProperty(n)) {
                                var s = t[n]
                                    , a = e[n];
                                if (r.isPlainObject(s) && r.isPlainObject(a)) {
                                    if (!i(s, a))
                                        return !1
                                } else if (!r.equals(s, a))
                                    return !1
                            }
                        return !0
                    }
                    var n = typeof t;
                    if ("object" === n) {
                        for (var s in t)
                            if (t.hasOwnProperty(s) && !this.matches(s, t[s]))
                                return !1;
                        return !0
                    }
                    if ("function" === n)
                        return t(this);
                    if ("match" === t)
                        return e(this);
                    var a = /^(empty|editable)$/.test(t) ? this["is" + r.capitalize(t)]() : "type" === t ? r.hyphenate(this._class) : this[t];
                    if ("class" === t) {
                        if ("function" == typeof e)
                            return this instanceof e;
                        a = this._class
                    }
                    if ("function" == typeof e)
                        return !!e(a);
                    if (e) {
                        if (e.test)
                            return e.test(a);
                        if (r.isPlainObject(e))
                            return i(e, a)
                    }
                    return r.equals(a, e)
                },
                getItems: function (t) {
                    return w._getItems(this, t, this._matrix)
                },
                getItem: function (t) {
                    return w._getItems(this, t, this._matrix, null, !0)[0] || null
                },
                statics: {
                    _getItems: function t(e, i, n, s, a) {
                        if (!s) {
                            var o = "object" == typeof i && i
                                , h = o && o.overlapping
                                , u = o && o.inside
                                , l = (w = h || u) && g.read([w]);
                            s = {
                                items: [],
                                recursive: o && !1 !== o.recursive,
                                inside: !!u,
                                overlapping: !!h,
                                rect: l,
                                path: h && new L.Rectangle({
                                    rectangle: l,
                                    insert: !1
                                })
                            },
                                o && (i = r.filter({}, i, {
                                    recursive: !0,
                                    inside: !0,
                                    overlapping: !0
                                }))
                        }
                        var c = e._children
                            , f = s.items;
                        n = (l = s.rect) && (n || new p);
                        for (var d = 0, _ = c && c.length; d < _; d++) {
                            var v = c[d]
                                , m = n && n.appended(v._matrix)
                                , y = !0;
                            if (l) {
                                var w = v.getBounds(m);
                                if (!l.intersects(w))
                                    continue;
                                l.contains(w) || s.overlapping && (w.contains(l) || s.path.intersects(v, m)) || (y = !1)
                            }
                            if (y && v.matches(i) && (f.push(v),
                                a))
                                break;
                            if (!1 !== s.recursive && t(v, i, m, s, a),
                                a && f.length > 0)
                                break
                        }
                        return f
                    }
                }
            }, {
            importJSON: function (t) {
                var e = r.importJSON(t, this);
                return e !== this ? this.addChild(e) : e
            },
            addChild: function (t) {
                return this.insertChild(e, t)
            },
            insertChild: function (t, e) {
                var i = e ? this.insertChildren(t, [e]) : null;
                return i && i[0]
            },
            addChildren: function (t) {
                return this.insertChildren(this._children.length, t)
            },
            insertChildren: function (t, e) {
                var i = this._children;
                if (i && e && e.length > 0) {
                    for (var n = {}, s = (e = r.slice(e)).length - 1; s >= 0; s--) {
                        var a = (l = e[s]) && l._id;
                        !l || n[a] ? e.splice(s, 1) : (l._remove(!1, !0),
                            n[a] = !0)
                    }
                    r.splice(i, e, t, 0);
                    for (var o = this._project, h = o._changes, s = 0, u = e.length; s < u; s++) {
                        var l = e[s]
                            , c = l._name;
                        l._parent = this,
                            l._setProject(o, !0),
                            c && l.setName(c),
                            h && l._changed(5)
                    }
                    this._changed(11)
                } else
                    e = null;
                return e
            },
            _insertItem: "#insertChild",
            _insertAt: function (t, e) {
                var i = t && t._getOwner()
                    , n = t !== this && i ? this : null;
                return n && (n._remove(!1, !0),
                    i._insertItem(t._index + e, n)),
                    n
            },
            insertAbove: function (t) {
                return this._insertAt(t, 1)
            },
            insertBelow: function (t) {
                return this._insertAt(t, 0)
            },
            sendToBack: function () {
                var t = this._getOwner();
                return t ? t._insertItem(0, this) : null
            },
            bringToFront: function () {
                var t = this._getOwner();
                return t ? t._insertItem(e, this) : null
            },
            appendTop: "#addChild",
            appendBottom: function (t) {
                return this.insertChild(0, t)
            },
            moveAbove: "#insertAbove",
            moveBelow: "#insertBelow",
            addTo: function (t) {
                return t._insertItem(e, this)
            },
            copyTo: function (t) {
                return this.clone(!1).addTo(t)
            },
            reduce: function (t) {
                var e = this._children;
                if (e && 1 === e.length) {
                    var i = e[0].reduce(t);
                    return this._parent ? (i.insertAbove(this),
                        this.remove()) : i.remove(),
                        i
                }
                return this
            },
            _removeNamed: function () {
                var t = this._getOwner();
                if (t) {
                    var e = t._children
                        , i = t._namedChildren
                        , n = this._name
                        , r = i[n]
                        , s = r ? r.indexOf(this) : -1;
                    -1 !== s && (e[n] == this && delete e[n],
                        r.splice(s, 1),
                        r.length ? e[n] = r[0] : delete i[n])
                }
            },
            _remove: function (t, e) {
                var i = this._getOwner()
                    , n = this._project
                    , s = this._index;
                return !!i && (this._name && this._removeNamed(),
                    null != s && (n._activeLayer === this && (n._activeLayer = this.getNextSibling() || this.getPreviousSibling()),
                        r.splice(i._children, null, s, 1)),
                    this._installEvents(!1),
                    t && n._changes && this._changed(5),
                    e && i._changed(11, this),
                    this._parent = null,
                    !0)
            },
            remove: function () {
                return this._remove(!0, !0)
            },
            replaceWith: function (t) {
                var e = t && t.insertBelow(this);
                return e && this.remove(),
                    e
            },
            removeChildren: function (t, e) {
                if (!this._children)
                    return null;
                t = t || 0,
                    e = r.pick(e, this._children.length);
                for (var i = r.splice(this._children, null, t, e - t), n = i.length - 1; n >= 0; n--)
                    i[n]._remove(!0, !1);
                return i.length > 0 && this._changed(11),
                    i
            },
            clear: "#removeChildren",
            reverseChildren: function () {
                if (this._children) {
                    this._children.reverse();
                    for (var t = 0, e = this._children.length; t < e; t++)
                        this._children[t]._index = t;
                    this._changed(11)
                }
            },
            isEmpty: function () {
                var t = this._children;
                return !t || !t.length
            },
            isEditable: function () {
                for (var t = this; t;) {
                    if (!t._visible || t._locked)
                        return !1;
                    t = t._parent
                }
                return !0
            },
            hasFill: function () {
                return this.getStyle().hasFill()
            },
            hasStroke: function () {
                return this.getStyle().hasStroke()
            },
            hasShadow: function () {
                return this.getStyle().hasShadow()
            },
            _getOrder: function (t) {
                function e(t) {
                    var e = [];
                    do {
                        e.unshift(t)
                    } while (t = t._parent); return e
                }
                for (var i = e(this), n = e(t), r = 0, s = Math.min(i.length, n.length); r < s; r++)
                    if (i[r] != n[r])
                        return i[r]._index < n[r]._index ? 1 : -1;
                return 0
            },
            hasChildren: function () {
                return this._children && this._children.length > 0
            },
            isInserted: function () {
                return !!this._parent && this._parent.isInserted()
            },
            isAbove: function (t) {
                return -1 === this._getOrder(t)
            },
            isBelow: function (t) {
                return 1 === this._getOrder(t)
            },
            isParent: function (t) {
                return this._parent === t
            },
            isChild: function (t) {
                return t && t._parent === this
            },
            isDescendant: function (t) {
                for (var e = this; e = e._parent;)
                    if (e === t)
                        return !0;
                return !1
            },
            isAncestor: function (t) {
                return !!t && t.isDescendant(this)
            },
            isSibling: function (t) {
                return this._parent === t._parent
            },
            isGroupedWith: function (t) {
                for (var e = this._parent; e;) {
                    if (e._parent && /^(Group|Layer|CompoundPath)$/.test(e._class) && t.isDescendant(e))
                        return !0;
                    e = e._parent
                }
                return !1
            }
        }, r.each(["rotate", "scale", "shear", "skew"], function (t) {
            var e = "rotate" === t;
            this[t] = function () {
                var i = (e ? r : c).read(arguments)
                    , n = c.read(arguments, 0, {
                        readNull: !0
                    });
                return this.transform((new p)[t](i, n || this.getPosition(!0)))
            }
        }, {
            translate: function () {
                var t = new p;
                return this.transform(t.translate.apply(t, arguments))
            },
            transform: function (t, e, i, n) {
                var r = this._matrix
                    , s = t && !t.isIdentity()
                    , a = (e || this._applyMatrix) && (!r.isIdentity() || s || e && i && this._children);
                if (!s && !a)
                    return this;
                if (s) {
                    !t.isInvertible() && r.isInvertible() && (r._backup = r.getValues()),
                        r.prepend(t, !0);
                    var o = this._style
                        , h = o.getFillColor(!0)
                        , u = o.getStrokeColor(!0);
                    h && h.transform(t),
                        u && u.transform(t)
                }
                if (a && (a = this._transformContent(r, i, n))) {
                    var l = this._pivot;
                    l && r._transformPoint(l, l, !0),
                        r.reset(!0),
                        n && this._canApplyMatrix && (this._applyMatrix = !0)
                }
                var c = this._bounds
                    , f = this._position;
                (s || a) && this._changed(9);
                var d = s && c && t.decompose();
                if (d && d.skewing.isZero() && d.rotation % 90 == 0) {
                    for (var _ in c) {
                        var g = c[_];
                        if (g.nonscaling)
                            delete c[_];
                        else if (a || !g.internal) {
                            var v = g.rect;
                            t._transformBounds(v, v)
                        }
                    }
                    this._bounds = c;
                    var p = c[this._getBoundsCacheKey(this._boundsOptions || {})];
                    p && (this._position = p.rect.getCenter(!0))
                } else
                    s && f && this._pivot && (this._position = t._transformPoint(f, f));
                return this
            },
            _transformContent: function (t, e, i) {
                var n = this._children;
                if (n) {
                    for (var r = 0, s = n.length; r < s; r++)
                        n[r].transform(t, !0, e, i);
                    return !0
                }
            },
            globalToLocal: function () {
                return this.getGlobalMatrix(!0)._inverseTransform(c.read(arguments))
            },
            localToGlobal: function () {
                return this.getGlobalMatrix(!0)._transformPoint(c.read(arguments))
            },
            parentToLocal: function () {
                return this._matrix._inverseTransform(c.read(arguments))
            },
            localToParent: function () {
                return this._matrix._transformPoint(c.read(arguments))
            },
            fitBounds: function (t, e) {
                t = g.read(arguments);
                var i = this.getBounds()
                    , n = i.height / i.width
                    , r = t.height / t.width
                    , s = (e ? n > r : n < r) ? t.width / i.width : t.height / i.height
                    , a = new g(new c, new d(i.width * s, i.height * s));
                a.setCenter(t.getCenter()),
                    this.setBounds(a)
            }
        }), {
            _setStyles: function (t, e, i) {
                var n = this._style
                    , r = this._matrix;
                if (n.hasFill() && (t.fillStyle = n.getFillColor().toCanvasStyle(t, r)),
                    n.hasStroke()) {
                    t.strokeStyle = n.getStrokeColor().toCanvasStyle(t, r),
                        t.lineWidth = n.getStrokeWidth();
                    var s = n.getStrokeJoin()
                        , a = n.getStrokeCap()
                        , o = n.getMiterLimit();
                    if (s && (t.lineJoin = s),
                        a && (t.lineCap = a),
                        o && (t.miterLimit = o),
                        paper.support.nativeDash) {
                        var h = n.getDashArray()
                            , u = n.getDashOffset();
                        h && h.length && ("setLineDash" in t ? (t.setLineDash(h),
                            t.lineDashOffset = u) : (t.mozDash = h,
                                t.mozDashOffset = u))
                    }
                }
                if (n.hasShadow()) {
                    var l = e.pixelRatio || 1
                        , f = i._shiftless().prepend((new p).scale(l, l))
                        , d = f.transform(new c(n.getShadowBlur(), 0))
                        , _ = f.transform(this.getShadowOffset());
                    t.shadowColor = n.getShadowColor().toCanvasStyle(t),
                        t.shadowBlur = d.getLength(),
                        t.shadowOffsetX = _.x,
                        t.shadowOffsetY = _.y
                }
            },
            draw: function (t, e, i) {
                var n = this._updateVersion = this._project._updateVersion;
                if (this._visible && 0 !== this._opacity) {
                    var r = e.matrices
                        , s = e.viewMatrix
                        , a = this._matrix
                        , o = r[r.length - 1].appended(a);
                    if (o.isInvertible()) {
                        s = s ? s.appended(o) : o,
                            r.push(o),
                            e.updateMatrix && (o._updateVersion = n,
                                this._globalMatrix = o);
                        var h, u, l, c = this._blendMode, f = this._opacity, d = "normal" === c, _ = tt.nativeModes[c], g = d && 1 === f || e.dontStart || e.clip || (_ || d && f < 1) && this._canComposite(), v = e.pixelRatio || 1;
                        if (!g) {
                            var p = this.getStrokeBounds(s);
                            if (!p.width || !p.height)
                                return;
                            l = e.offset,
                                u = e.offset = p.getTopLeft().floor(),
                                h = t,
                                t = Q.getContext(p.getSize().ceil().add(1).multiply(v)),
                                1 !== v && t.scale(v, v)
                        }
                        t.save();
                        var m = i ? i.appended(a) : this._canScaleStroke && !this.getStrokeScaling(!0) && s
                            , y = !g && e.clipItem
                            , w = !m || y;
                        if (g ? (t.globalAlpha = f,
                            _ && (t.globalCompositeOperation = c)) : w && t.translate(-u.x, -u.y),
                            w && (g ? a : s).applyToContext(t),
                            y && e.clipItem.draw(t, e.extend({
                                clip: !0
                            })),
                            m) {
                            t.setTransform(v, 0, 0, v, 0, 0);
                            var x = e.offset;
                            x && t.translate(-x.x, -x.y)
                        }
                        this._draw(t, e, s, m),
                            t.restore(),
                            r.pop(),
                            e.clip && !e.dontFinish && t.clip(),
                            g || (tt.process(c, t, h, f, u.subtract(l).multiply(v)),
                                Q.release(t),
                                e.offset = l)
                    }
                }
            },
            _isUpdated: function (t) {
                var e = this._parent;
                if (e instanceof N)
                    return e._isUpdated(t);
                var i = this._updateVersion === t;
                return !i && e && e._visible && e._isUpdated(t) && (this._updateVersion = t,
                    i = !0),
                    i
            },
            _drawSelection: function (t, e, i, n, r) {
                var s = this._selection
                    , a = 1 & s
                    , o = 2 & s || a && this._selectBounds
                    , h = 4 & s;
                if (this._drawSelected || (a = !1),
                    (a || o || h) && this._isUpdated(r)) {
                    var u, l = this.getSelectedColor(!0) || (u = this.getLayer()) && u.getSelectedColor(!0), c = e.appended(this.getGlobalMatrix(!0)), f = i / 2;
                    if (t.strokeStyle = t.fillStyle = l ? l.toCanvasStyle(t) : "#009dec",
                        a && this._drawSelected(t, c, n),
                        h) {
                        var d = this.getPosition(!0)
                            , _ = d.x
                            , g = d.y;
                        t.beginPath(),
                            t.arc(_, g, f, 0, 2 * Math.PI, !0),
                            t.stroke();
                        for (var v = [[0, -1], [1, 0], [0, 1], [-1, 0]], p = f, m = i + 1, y = 0; y < 4; y++) {
                            var w = v[y]
                                , x = w[0]
                                , b = w[1];
                            t.moveTo(_ + x * p, g + b * p),
                                t.lineTo(_ + x * m, g + b * m),
                                t.stroke()
                        }
                    }
                    if (o) {
                        var C = c._transformCorners(this.getInternalBounds());
                        t.beginPath();
                        for (y = 0; y < 8; y++)
                            t[y ? "lineTo" : "moveTo"](C[y], C[++y]);
                        t.closePath(),
                            t.stroke();
                        for (y = 0; y < 8; y++)
                            t.fillRect(C[y] - f, C[++y] - f, i, i)
                    }
                }
            },
            _canComposite: function () {
                return !1
            }
        }, r.each(["down", "drag", "up", "move"], function (t) {
            this["removeOn" + r.capitalize(t)] = function () {
                var e = {};
                return e[t] = !0,
                    this.removeOn(e)
            }
        }, {
            removeOn: function (t) {
                for (var e in t)
                    if (t[e]) {
                        var i = "mouse" + e
                            , n = this._project
                            , r = n._removeSets = n._removeSets || {};
                        r[i] = r[i] || {},
                            r[i][this._id] = this
                    }
                return this
            }
        }))
        , x = w.extend({
            _class: "Group",
            _selectBounds: !1,
            _selectChildren: !0,
            _serializeFields: {
                children: []
            },
            initialize: function (t) {
                this._children = [],
                    this._namedChildren = {},
                    this._initialize(t) || this.addChildren(Array.isArray(t) ? t : arguments)
            },
            _changed: function t(i) {
                t.base.call(this, i),
                    1026 & i && (this._clipItem = e)
            },
            _getClipItem: function () {
                var t = this._clipItem;
                if (t === e) {
                    t = null;
                    for (var i = this._children, n = 0, r = i.length; n < r; n++)
                        if (i[n]._clipMask) {
                            t = i[n];
                            break
                        }
                    this._clipItem = t
                }
                return t
            },
            isClipped: function () {
                return !!this._getClipItem()
            },
            setClipped: function (t) {
                var e = this.getFirstChild();
                e && e.setClipMask(t)
            },
            _getBounds: function t(e, i) {
                var n = this._getClipItem();
                return n ? n._getCachedBounds(e && e.appended(n._matrix), r.set({}, i, {
                    stroke: !1
                })) : t.base.call(this, e, i)
            },
            _hitTestChildren: function t(e, i, n) {
                var r = this._getClipItem();
                return (!r || r.contains(e)) && t.base.call(this, e, i, n, r)
            },
            _draw: function (t, e) {
                var i = e.clip
                    , n = !i && this._getClipItem();
                e = e.extend({
                    clipItem: n,
                    clip: !1
                }),
                    i ? (t.beginPath(),
                        e.dontStart = e.dontFinish = !0) : n && n.draw(t, e.extend({
                            clip: !0
                        }));
                for (var r = this._children, s = 0, a = r.length; s < a; s++) {
                    var o = r[s];
                    o !== n && o.draw(t, e)
                }
            }
        })
        , b = x.extend({
            _class: "Layer",
            initialize: function () {
                x.apply(this, arguments)
            },
            _getOwner: function () {
                return this._parent || null != this._index && this._project
            },
            isInserted: function t() {
                return this._parent ? t.base.call(this) : null != this._index
            },
            activate: function () {
                this._project._activeLayer = this
            },
            _hitTestSelf: function () { }
        })
        , C = w.extend({
            _class: "Shape",
            _applyMatrix: !1,
            _canApplyMatrix: !1,
            _canScaleStroke: !0,
            _serializeFields: {
                type: null,
                size: null,
                radius: null
            },
            initialize: function (t, e) {
                this._initialize(t, e)
            },
            _equals: function (t) {
                return this._type === t._type && this._size.equals(t._size) && r.equals(this._radius, t._radius)
            },
            copyContent: function (t) {
                this.setType(t._type),
                    this.setSize(t._size),
                    this.setRadius(t._radius)
            },
            getType: function () {
                return this._type
            },
            setType: function (t) {
                this._type = t
            },
            getShape: "#getType",
            setShape: "#setType",
            getSize: function () {
                var t = this._size;
                return new _(t.width, t.height, this, "setSize")
            },
            setSize: function () {
                var t = d.read(arguments);
                if (this._size) {
                    if (!this._size.equals(t)) {
                        var e = this._type
                            , i = t.width
                            , n = t.height;
                        "rectangle" === e ? this._radius.set(d.min(this._radius, t.divide(2))) : "circle" === e ? (i = n = (i + n) / 2,
                            this._radius = i / 2) : "ellipse" === e && this._radius._set(i / 2, n / 2),
                            this._size._set(i, n),
                            this._changed(9)
                    }
                } else
                    this._size = t.clone()
            },
            getRadius: function () {
                var t = this._radius;
                return "circle" === this._type ? t : new _(t.width, t.height, this, "setRadius")
            },
            setRadius: function (t) {
                var e = this._type;
                if ("circle" === e) {
                    if (t === this._radius)
                        return;
                    i = 2 * t;
                    this._radius = t,
                        this._size._set(i, i)
                } else if (t = d.read(arguments),
                    this._radius) {
                    if (this._radius.equals(t))
                        return;
                    if (this._radius.set(t),
                        "rectangle" === e) {
                        var i = d.max(this._size, t.multiply(2));
                        this._size.set(i)
                    } else
                        "ellipse" === e && this._size._set(2 * t.width, 2 * t.height)
                } else
                    this._radius = t.clone();
                this._changed(9)
            },
            isEmpty: function () {
                return !1
            },
            toPath: function (t) {
                var i = new (L[r.capitalize(this._type)])({
                    center: new c,
                    size: this._size,
                    radius: this._radius,
                    insert: !1
                });
                return i.copyAttributes(this),
                    paper.settings.applyMatrix && i.setApplyMatrix(!0),
                    (t === e || t) && i.insertAbove(this),
                    i
            },
            toShape: "#clone",
            _asPathItem: function () {
                return this.toPath(!1)
            },
            _draw: function (t, e, i, n) {
                var r = this._style
                    , s = r.hasFill()
                    , a = r.hasStroke()
                    , o = e.dontFinish || e.clip
                    , h = !n;
                if (s || a || o) {
                    var u = this._type
                        , l = this._radius
                        , c = "circle" === u;
                    if (e.dontStart || t.beginPath(),
                        h && c)
                        t.arc(0, 0, l, 0, 2 * Math.PI, !0);
                    else {
                        var f = c ? l : l.width
                            , d = c ? l : l.height
                            , _ = this._size
                            , g = _.width
                            , v = _.height;
                        if (h && "rectangle" === u && 0 === f && 0 === d)
                            t.rect(-g / 2, -v / 2, g, v);
                        else {
                            var p = g / 2
                                , m = v / 2
                                , y = .44771525016920644
                                , w = f * y
                                , x = d * y
                                , b = [-p, -m + d, -p, -m + x, -p + w, -m, -p + f, -m, p - f, -m, p - w, -m, p, -m + x, p, -m + d, p, m - d, p, m - x, p - w, m, p - f, m, -p + f, m, -p + w, m, -p, m - x, -p, m - d];
                            n && n.transform(b, b, 32),
                                t.moveTo(b[0], b[1]),
                                t.bezierCurveTo(b[2], b[3], b[4], b[5], b[6], b[7]),
                                p !== f && t.lineTo(b[8], b[9]),
                                t.bezierCurveTo(b[10], b[11], b[12], b[13], b[14], b[15]),
                                m !== d && t.lineTo(b[16], b[17]),
                                t.bezierCurveTo(b[18], b[19], b[20], b[21], b[22], b[23]),
                                p !== f && t.lineTo(b[24], b[25]),
                                t.bezierCurveTo(b[26], b[27], b[28], b[29], b[30], b[31])
                        }
                    }
                    t.closePath()
                }
                o || !s && !a || (this._setStyles(t, e, i),
                    s && (t.fill(r.getFillRule()),
                        t.shadowColor = "rgba(0,0,0,0)"),
                    a && t.stroke())
            },
            _canComposite: function () {
                return !(this.hasFill() && this.hasStroke())
            },
            _getBounds: function (t, e) {
                var i = new g(this._size).setCenter(0, 0)
                    , n = this._style
                    , r = e.stroke && n.hasStroke() && n.getStrokeWidth();
                return t && (i = t._transformBounds(i)),
                    r ? i.expand(L._getStrokePadding(r, this._getStrokeMatrix(t, e))) : i
            }
        }, new function () {
            function t(t, e, i) {
                var n = t._radius;
                if (!n.isZero())
                    for (var r = t._size.divide(2), s = 1; s <= 4; s++) {
                        var a = new c(s > 1 && s < 4 ? -1 : 1, s > 2 ? -1 : 1)
                            , o = a.multiply(r)
                            , h = o.subtract(a.multiply(n));
                        if (new g(i ? o.add(a.multiply(i)) : o, h).contains(e))
                            return {
                                point: h,
                                quadrant: s
                            }
                    }
            }
            function e(t, e, i, n) {
                var r = t.divide(e);
                return (!n || r.isInQuadrant(n)) && r.subtract(r.normalize()).multiply(e).divide(i).length <= 1
            }
            return {
                _contains: function e(i) {
                    if ("rectangle" === this._type) {
                        var n = t(this, i);
                        return n ? i.subtract(n.point).divide(this._radius).getLength() <= 1 : e.base.call(this, i)
                    }
                    return i.divide(this.size).getLength() <= .5
                },
                _hitTestSelf: function i(n, r, s, a) {
                    var o = !1
                        , h = this._style
                        , u = r.stroke && h.hasStroke()
                        , l = r.fill && h.hasFill();
                    if (u || l) {
                        var c = this._type
                            , f = this._radius
                            , d = u ? h.getStrokeWidth() / 2 : 0
                            , _ = r._tolerancePadding.add(L._getStrokePadding(d, !h.getStrokeScaling() && a));
                        if ("rectangle" === c) {
                            var v = _.multiply(2)
                                , p = t(this, n, v);
                            if (p)
                                o = e(n.subtract(p.point), f, _, p.quadrant);
                            else {
                                var m = new g(this._size).setCenter(0, 0)
                                    , y = m.expand(v)
                                    , w = m.expand(v.negate());
                                o = y._containsPoint(n) && !w._containsPoint(n)
                            }
                        } else
                            o = e(n, f, _)
                    }
                    return o ? new M(u ? "stroke" : "fill", this) : i.base.apply(this, arguments)
                }
            }
        }
            , {
                statics: new function () {
                    function t(t, e, i, n, s) {
                        var a = new C(r.getNamed(s), e);
                        return a._type = t,
                            a._size = i,
                            a._radius = n,
                            a
                    }
                    return {
                        Circle: function () {
                            var e = c.readNamed(arguments, "center")
                                , i = r.readNamed(arguments, "radius");
                            return t("circle", e, new d(2 * i), i, arguments)
                        },
                        Rectangle: function () {
                            var e = g.readNamed(arguments, "rectangle")
                                , i = d.min(d.readNamed(arguments, "radius"), e.getSize(!0).divide(2));
                            return t("rectangle", e.getCenter(!0), e.getSize(!0), i, arguments)
                        },
                        Ellipse: function () {
                            var e = C._readEllipse(arguments)
                                , i = e.radius;
                            return t("ellipse", e.center, i.multiply(2), i, arguments)
                        },
                        _readEllipse: function (t) {
                            var e, i;
                            if (r.hasNamed(t, "radius"))
                                e = c.readNamed(t, "center"),
                                    i = d.readNamed(t, "radius");
                            else {
                                var n = g.readNamed(t, "rectangle");
                                e = n.getCenter(!0),
                                    i = n.getSize(!0).divide(2)
                            }
                            return {
                                center: e,
                                radius: i
                            }
                        }
                    }
                }
            })
        , S = w.extend({
            _class: "Raster",
            _applyMatrix: !1,
            _canApplyMatrix: !1,
            _boundsOptions: {
                stroke: !1,
                handle: !1
            },
            _serializeFields: {
                crossOrigin: null,
                source: null
            },
            _prioritize: ["crossOrigin"],
            initialize: function (t, i) {
                if (!this._initialize(t, i !== e && c.read(arguments, 1))) {
                    var r = "string" == typeof t ? n.getElementById(t) : t;
                    r ? this.setImage(r) : this.setSource(t)
                }
                this._size || (this._size = new d,
                    this._loaded = !1)
            },
            _equals: function (t) {
                return this.getSource() === t.getSource()
            },
            copyContent: function (t) {
                var e = t._image
                    , i = t._canvas;
                if (e)
                    this._setImage(e);
                else if (i) {
                    var n = Q.getCanvas(t._size);
                    n.getContext("2d").drawImage(i, 0, 0),
                        this._setImage(n)
                }
                this._crossOrigin = t._crossOrigin
            },
            getSize: function () {
                var t = this._size;
                return new _(t ? t.width : 0, t ? t.height : 0, this, "setSize")
            },
            setSize: function () {
                var t = d.read(arguments);
                if (!t.equals(this._size))
                    if (t.width > 0 && t.height > 0) {
                        var e = this.getElement();
                        this._setImage(Q.getCanvas(t)),
                            e && this.getContext(!0).drawImage(e, 0, 0, t.width, t.height)
                    } else
                        this._canvas && Q.release(this._canvas),
                            this._size = t.clone()
            },
            getWidth: function () {
                return this._size ? this._size.width : 0
            },
            setWidth: function (t) {
                this.setSize(t, this.getHeight())
            },
            getHeight: function () {
                return this._size ? this._size.height : 0
            },
            setHeight: function (t) {
                this.setSize(this.getWidth(), t)
            },
            getLoaded: function () {
                return this._loaded
            },
            isEmpty: function () {
                var t = this._size;
                return !t || 0 === t.width && 0 === t.height
            },
            getResolution: function () {
                var t = this._matrix
                    , e = new c(0, 0).transform(t)
                    , i = new c(1, 0).transform(t).subtract(e)
                    , n = new c(0, 1).transform(t).subtract(e);
                return new d(72 / i.getLength(), 72 / n.getLength())
            },
            getPpi: "#getResolution",
            getImage: function () {
                return this._image
            },
            setImage: function (t) {
                function e(t) {
                    var e = i.getView()
                        , n = t && t.type || "load";
                    e && i.responds(n) && (paper = e._scope,
                        i.emit(n, new G(t)))
                }
                var i = this;
                this._setImage(t),
                    this._loaded ? setTimeout(e, 0) : t && Z.add(t, {
                        load: function (n) {
                            i._setImage(t),
                                e(n)
                        },
                        error: e
                    })
            },
            _setImage: function (t) {
                this._canvas && Q.release(this._canvas),
                    t && t.getContext ? (this._image = null,
                        this._canvas = t,
                        this._loaded = !0) : (this._image = t,
                            this._canvas = null,
                            this._loaded = !!(t && t.src && t.complete)),
                    this._size = new d(t ? t.naturalWidth || t.width : 0, t ? t.naturalHeight || t.height : 0),
                    this._context = null,
                    this._changed(521)
            },
            getCanvas: function () {
                if (!this._canvas) {
                    var t = Q.getContext(this._size);
                    try {
                        this._image && t.drawImage(this._image, 0, 0),
                            this._canvas = t.canvas
                    } catch (e) {
                        Q.release(t)
                    }
                }
                return this._canvas
            },
            setCanvas: "#setImage",
            getContext: function (t) {
                return this._context || (this._context = this.getCanvas().getContext("2d")),
                    t && (this._image = null,
                        this._changed(513)),
                    this._context
            },
            setContext: function (t) {
                this._context = t
            },
            getSource: function () {
                var t = this._image;
                return t && t.src || this.toDataURL()
            },
            setSource: function (e) {
                var i = new t.Image
                    , n = this._crossOrigin;
                n && (i.crossOrigin = n),
                    i.src = e,
                    this.setImage(i)
            },
            getCrossOrigin: function () {
                var t = this._image;
                return t && t.crossOrigin || this._crossOrigin || ""
            },
            setCrossOrigin: function (t) {
                this._crossOrigin = t;
                var e = this._image;
                e && (e.crossOrigin = t)
            },
            getElement: function () {
                return this._canvas || this._loaded && this._image
            }
        }, {
            beans: !1,
            getSubCanvas: function () {
                var t = g.read(arguments)
                    , e = Q.getContext(t.getSize());
                return e.drawImage(this.getCanvas(), t.x, t.y, t.width, t.height, 0, 0, t.width, t.height),
                    e.canvas
            },
            getSubRaster: function () {
                var t = g.read(arguments)
                    , e = new S(w.NO_INSERT);
                return e._setImage(this.getSubCanvas(t)),
                    e.translate(t.getCenter().subtract(this.getSize().divide(2))),
                    e._matrix.prepend(this._matrix),
                    e.insertAbove(this),
                    e
            },
            toDataURL: function () {
                var t = this._image
                    , e = t && t.src;
                if (/^data:/.test(e))
                    return e;
                var i = this.getCanvas();
                return i ? i.toDataURL.apply(i, arguments) : null
            },
            drawImage: function (t) {
                var e = c.read(arguments, 1);
                this.getContext(!0).drawImage(t, e.x, e.y)
            },
            getAverageColor: function (t) {
                var e, i;
                if (t ? t instanceof A ? (i = t,
                    e = t.getBounds()) : "object" == typeof t && ("width" in t ? e = new g(t) : "x" in t && (e = new g(t.x - .5, t.y - .5, 1, 1))) : e = this.getBounds(),
                    !e)
                    return null;
                var n = Math.min(e.width, 32)
                    , s = Math.min(e.height, 32)
                    , a = S._sampleContext;
                a ? a.clearRect(0, 0, 33, 33) : a = S._sampleContext = Q.getContext(new d(32)),
                    a.save();
                var o = (new p).scale(n / e.width, s / e.height).translate(-e.x, -e.y);
                o.applyToContext(a),
                    i && i.draw(a, new r({
                        clip: !0,
                        matrices: [o]
                    })),
                    this._matrix.applyToContext(a);
                var h = this.getElement()
                    , u = this._size;
                h && a.drawImage(h, -u.width / 2, -u.height / 2),
                    a.restore();
                for (var l = a.getImageData(.5, .5, Math.ceil(n), Math.ceil(s)).data, c = [0, 0, 0], f = 0, _ = 0, v = l.length; _ < v; _ += 4) {
                    var m = l[_ + 3];
                    f += m,
                        m /= 255,
                        c[0] += l[_] * m,
                        c[1] += l[_ + 1] * m,
                        c[2] += l[_ + 2] * m
                }
                for (_ = 0; _ < 3; _++)
                    c[_] /= f;
                return f ? F.read(c) : null
            },
            getPixel: function () {
                var t = c.read(arguments)
                    , e = this.getContext().getImageData(t.x, t.y, 1, 1).data;
                return new F("rgb", [e[0] / 255, e[1] / 255, e[2] / 255], e[3] / 255)
            },
            setPixel: function () {
                var t = c.read(arguments)
                    , e = F.read(arguments)
                    , i = e._convert("rgb")
                    , n = e._alpha
                    , r = this.getContext(!0)
                    , s = r.createImageData(1, 1)
                    , a = s.data;
                a[0] = 255 * i[0],
                    a[1] = 255 * i[1],
                    a[2] = 255 * i[2],
                    a[3] = null != n ? 255 * n : 255,
                    r.putImageData(s, t.x, t.y)
            },
            createImageData: function () {
                var t = d.read(arguments);
                return this.getContext().createImageData(t.width, t.height)
            },
            getImageData: function () {
                var t = g.read(arguments);
                return t.isEmpty() && (t = new g(this._size)),
                    this.getContext().getImageData(t.x, t.y, t.width, t.height)
            },
            setImageData: function (t) {
                var e = c.read(arguments, 1);
                this.getContext(!0).putImageData(t, e.x, e.y)
            },
            _getBounds: function (t, e) {
                var i = new g(this._size).setCenter(0, 0);
                return t ? t._transformBounds(i) : i
            },
            _hitTestSelf: function (t) {
                if (this._contains(t)) {
                    var e = this;
                    return new M("pixel", e, {
                        offset: t.add(e._size.divide(2)).round(),
                        color: {
                            get: function () {
                                return e.getPixel(this.offset)
                            }
                        }
                    })
                }
            },
            _draw: function (t) {
                var e = this.getElement();
                e && (t.globalAlpha = this._opacity,
                    t.drawImage(e, -this._size.width / 2, -this._size.height / 2))
            },
            _canComposite: function () {
                return !0
            }
        })
        , P = w.extend({
            _class: "SymbolItem",
            _applyMatrix: !1,
            _canApplyMatrix: !1,
            _boundsOptions: {
                stroke: !0
            },
            _serializeFields: {
                symbol: null
            },
            initialize: function (t, i) {
                this._initialize(t, i !== e && c.read(arguments, 1)) || this.setDefinition(t instanceof I ? t : new I(t))
            },
            _equals: function (t) {
                return this._definition === t._definition
            },
            copyContent: function (t) {
                this.setDefinition(t._definition)
            },
            getDefinition: function () {
                return this._definition
            },
            setDefinition: function (t) {
                this._definition = t,
                    this._changed(9)
            },
            getSymbol: "#getDefinition",
            setSymbol: "#setDefinition",
            isEmpty: function () {
                return this._definition._item.isEmpty()
            },
            _getBounds: function (t, e) {
                var i = this._definition._item;
                return i._getCachedBounds(i._matrix.prepended(t), e)
            },
            _hitTestSelf: function (t, e, i) {
                var n = this._definition._item._hitTest(t, e, i);
                return n && (n.item = this),
                    n
            },
            _draw: function (t, e) {
                this._definition._item.draw(t, e)
            }
        })
        , I = r.extend({
            _class: "SymbolDefinition",
            initialize: function (t, e) {
                this._id = l.get(),
                    this.project = paper.project,
                    t && this.setItem(t, e)
            },
            _serialize: function (t, e) {
                return e.add(this, function () {
                    return r.serialize([this._class, this._item], t, !1, e)
                })
            },
            _changed: function (t) {
                8 & t && w._clearBoundsCache(this),
                    1 & t && this.project._changed(t)
            },
            getItem: function () {
                return this._item
            },
            setItem: function (t, e) {
                t._symbol && (t = t.clone()),
                    this._item && (this._item._symbol = null),
                    this._item = t,
                    t.remove(),
                    t.setSelected(!1),
                    e || t.setPosition(new c),
                    t._symbol = this,
                    this._changed(9)
            },
            getDefinition: "#getItem",
            setDefinition: "#setItem",
            place: function (t) {
                return new P(this, t)
            },
            clone: function () {
                return new I(this._item.clone(!1))
            },
            equals: function (t) {
                return t === this || t && this._item.equals(t._item) || !1
            }
        })
        , M = r.extend({
            _class: "HitResult",
            initialize: function (t, e, i) {
                this.type = t,
                    this.item = e,
                    i && this.inject(i)
            },
            statics: {
                getOptions: function (t) {
                    var e = t && r.read(t);
                    return r.set({
                        type: null,
                        tolerance: paper.settings.hitTolerance,
                        fill: !e,
                        stroke: !e,
                        segments: !e,
                        handles: !1,
                        ends: !1,
                        position: !1,
                        center: !1,
                        bounds: !1,
                        guides: !1,
                        selected: !1
                    }, e)
                }
            }
        })
        , T = r.extend({
            _class: "Segment",
            beans: !0,
            _selection: 0,
            initialize: function (t, i, n, r, s, a) {
                var o, h, u, l, c = arguments.length;
                c > 0 && (null == t || "object" == typeof t ? 1 === c && t && "point" in t ? (o = t.point,
                    h = t.handleIn,
                    u = t.handleOut,
                    l = t.selection) : (o = t,
                        h = i,
                        u = n,
                        l = r) : (o = [t, i],
                            h = n !== e ? [n, r] : null,
                            u = s !== e ? [s, a] : null)),
                    new z(o, this, "_point"),
                    new z(h, this, "_handleIn"),
                    new z(u, this, "_handleOut"),
                    l && this.setSelection(l)
            },
            _serialize: function (t, e) {
                var i = this._point
                    , n = this._selection
                    , s = n || this.hasHandles() ? [i, this._handleIn, this._handleOut] : i;
                return n && s.push(n),
                    r.serialize(s, t, !0, e)
            },
            _changed: function (t) {
                var e = this._path;
                if (e) {
                    var i, n = e._curves, r = this._index;
                    n && (t && t !== this._point && t !== this._handleIn || !(i = r > 0 ? n[r - 1] : e._closed ? n[n.length - 1] : null) || i._changed(),
                        t && t !== this._point && t !== this._handleOut || !(i = n[r]) || i._changed()),
                        e._changed(25)
                }
            },
            getPoint: function () {
                return this._point
            },
            setPoint: function () {
                this._point.set(c.read(arguments))
            },
            getHandleIn: function () {
                return this._handleIn
            },
            setHandleIn: function () {
                this._handleIn.set(c.read(arguments))
            },
            getHandleOut: function () {
                return this._handleOut
            },
            setHandleOut: function () {
                this._handleOut.set(c.read(arguments))
            },
            hasHandles: function () {
                return !this._handleIn.isZero() || !this._handleOut.isZero()
            },
            isSmooth: function () {
                var t = this._handleIn
                    , e = this._handleOut;
                return !t.isZero() && !e.isZero() && t.isCollinear(e)
            },
            clearHandles: function () {
                this._handleIn._set(0, 0),
                    this._handleOut._set(0, 0)
            },
            getSelection: function () {
                return this._selection
            },
            setSelection: function (t) {
                var e = this._selection
                    , i = this._path;
                this._selection = t = t || 0,
                    i && t !== e && (i._updateSelection(this, e, t),
                        i._changed(129))
            },
            _changeSelection: function (t, e) {
                var i = this._selection;
                this.setSelection(e ? i | t : i & ~t)
            },
            isSelected: function () {
                return !!(7 & this._selection)
            },
            setSelected: function (t) {
                this._changeSelection(7, t)
            },
            getIndex: function () {
                return this._index !== e ? this._index : null
            },
            getPath: function () {
                return this._path || null
            },
            getCurve: function () {
                var t = this._path
                    , e = this._index;
                return t ? (e > 0 && !t._closed && e === t._segments.length - 1 && e--,
                    t.getCurves()[e] || null) : null
            },
            getLocation: function () {
                var t = this.getCurve();
                return t ? new O(t, this === t._segment1 ? 0 : 1) : null
            },
            getNext: function () {
                var t = this._path && this._path._segments;
                return t && (t[this._index + 1] || this._path._closed && t[0]) || null
            },
            smooth: function (t, i, n) {
                var r = t || {}
                    , s = r.type
                    , a = r.factor
                    , o = this.getPrevious()
                    , h = this.getNext()
                    , u = (o || this)._point
                    , l = this._point
                    , f = (h || this)._point
                    , d = u.getDistance(l)
                    , _ = l.getDistance(f);
                if (s && "catmull-rom" !== s) {
                    if ("geometric" !== s)
                        throw new Error("Smoothing method '" + s + "' not supported.");
                    if (o && h) {
                        var g = u.subtract(f)
                            , v = a === e ? .4 : a
                            , p = v * d / (d + _);
                        i || this.setHandleIn(g.multiply(p)),
                            n || this.setHandleOut(g.multiply(p - v))
                    }
                } else {
                    var m = a === e ? .5 : a
                        , y = Math.pow(d, m)
                        , w = y * y
                        , x = Math.pow(_, m)
                        , b = x * x;
                    if (!i && o) {
                        var C = 2 * b + 3 * x * y + w
                            , S = 3 * x * (x + y);
                        this.setHandleIn(0 !== S ? new c((b * u._x + C * l._x - w * f._x) / S - l._x, (b * u._y + C * l._y - w * f._y) / S - l._y) : new c)
                    }
                    if (!n && h) {
                        var C = 2 * w + 3 * y * x + b
                            , S = 3 * y * (y + x);
                        this.setHandleOut(0 !== S ? new c((w * f._x + C * l._x - b * u._x) / S - l._x, (w * f._y + C * l._y - b * u._y) / S - l._y) : new c)
                    }
                }
            },
            getPrevious: function () {
                var t = this._path && this._path._segments;
                return t && (t[this._index - 1] || this._path._closed && t[t.length - 1]) || null
            },
            isFirst: function () {
                return !this._index
            },
            isLast: function () {
                var t = this._path;
                return t && this._index === t._segments.length - 1 || !1
            },
            reverse: function () {
                var t = this._handleIn
                    , e = this._handleOut
                    , i = t.clone();
                t.set(e),
                    e.set(i)
            },
            reversed: function () {
                return new T(this._point, this._handleOut, this._handleIn)
            },
            remove: function () {
                return !!this._path && !!this._path.removeSegment(this._index)
            },
            clone: function () {
                return new T(this._point, this._handleIn, this._handleOut)
            },
            equals: function (t) {
                return t === this || t && this._class === t._class && this._point.equals(t._point) && this._handleIn.equals(t._handleIn) && this._handleOut.equals(t._handleOut) || !1
            },
            toString: function () {
                var t = ["point: " + this._point];
                return this._handleIn.isZero() || t.push("handleIn: " + this._handleIn),
                    this._handleOut.isZero() || t.push("handleOut: " + this._handleOut),
                    "{ " + t.join(", ") + " }"
            },
            transform: function (t) {
                this._transformCoordinates(t, new Array(6), !0),
                    this._changed()
            },
            interpolate: function (t, e, i) {
                var n = 1 - i
                    , r = i
                    , s = t._point
                    , a = e._point
                    , o = t._handleIn
                    , h = e._handleIn
                    , u = e._handleOut
                    , l = t._handleOut;
                this._point._set(n * s._x + r * a._x, n * s._y + r * a._y, !0),
                    this._handleIn._set(n * o._x + r * h._x, n * o._y + r * h._y, !0),
                    this._handleOut._set(n * l._x + r * u._x, n * l._y + r * u._y, !0),
                    this._changed()
            },
            _transformCoordinates: function (t, e, i) {
                var n = this._point
                    , r = i && this._handleIn.isZero() ? null : this._handleIn
                    , s = i && this._handleOut.isZero() ? null : this._handleOut
                    , a = n._x
                    , o = n._y
                    , h = 2;
                return e[0] = a,
                    e[1] = o,
                    r && (e[h++] = r._x + a,
                        e[h++] = r._y + o),
                    s && (e[h++] = s._x + a,
                        e[h++] = s._y + o),
                    t && (t._transformCoordinates(e, e, h / 2),
                        a = e[0],
                        o = e[1],
                        i ? (n._x = a,
                            n._y = o,
                            h = 2,
                            r && (r._x = e[h++] - a,
                                r._y = e[h++] - o),
                            s && (s._x = e[h++] - a,
                                s._y = e[h++] - o)) : (r || (e[h++] = a,
                                    e[h++] = o),
                                    s || (e[h++] = a,
                                        e[h++] = o))),
                    e
            }
        })
        , z = c.extend({
            initialize: function (t, i, n) {
                var r, s, a;
                if (t)
                    if ((r = t[0]) !== e)
                        s = t[1];
                    else {
                        var o = t;
                        (r = o.x) === e && (r = (o = c.read(arguments)).x),
                            s = o.y,
                            a = o.selected
                    }
                else
                    r = s = 0;
                this._x = r,
                    this._y = s,
                    this._owner = i,
                    i[n] = this,
                    a && this.setSelected(!0)
            },
            _set: function (t, e) {
                return this._x = t,
                    this._y = e,
                    this._owner._changed(this),
                    this
            },
            getX: function () {
                return this._x
            },
            setX: function (t) {
                this._x = t,
                    this._owner._changed(this)
            },
            getY: function () {
                return this._y
            },
            setY: function (t) {
                this._y = t,
                    this._owner._changed(this)
            },
            isZero: function () {
                var t = u.isZero;
                return t(this._x) && t(this._y)
            },
            isSelected: function () {
                return !!(this._owner._selection & this._getSelection())
            },
            setSelected: function (t) {
                this._owner._changeSelection(this._getSelection(), t)
            },
            _getSelection: function () {
                var t = this._owner;
                return this === t._point ? 1 : this === t._handleIn ? 2 : this === t._handleOut ? 4 : 0
            }
        })
        , k = r.extend({
            _class: "Curve",
            beans: !0,
            initialize: function (t, e, i, n, r, s, a, o) {
                var h, u, l, c, f, d, _ = arguments.length;
                3 === _ ? (this._path = t,
                    h = e,
                    u = i) : _ ? 1 === _ ? "segment1" in t ? (h = new T(t.segment1),
                        u = new T(t.segment2)) : "point1" in t ? (l = t.point1,
                            f = t.handle1,
                            d = t.handle2,
                            c = t.point2) : Array.isArray(t) && (l = [t[0], t[1]],
                                c = [t[6], t[7]],
                                f = [t[2] - t[0], t[3] - t[1]],
                                d = [t[4] - t[6], t[5] - t[7]]) : 2 === _ ? (h = new T(t),
                                    u = new T(e)) : 4 === _ ? (l = t,
                                        f = e,
                                        d = i,
                                        c = n) : 8 === _ && (l = [t, e],
                                            c = [a, o],
                                            f = [i - t, n - e],
                                            d = [r - a, s - o]) : (h = new T,
                                                u = new T),
                    this._segment1 = h || new T(l, null, f),
                    this._segment2 = u || new T(c, d, null)
            },
            _serialize: function (t, e) {
                return r.serialize(this.hasHandles() ? [this.getPoint1(), this.getHandle1(), this.getHandle2(), this.getPoint2()] : [this.getPoint1(), this.getPoint2()], t, !0, e)
            },
            _changed: function () {
                this._length = this._bounds = e
            },
            clone: function () {
                return new k(this._segment1, this._segment2)
            },
            toString: function () {
                var t = ["point1: " + this._segment1._point];
                return this._segment1._handleOut.isZero() || t.push("handle1: " + this._segment1._handleOut),
                    this._segment2._handleIn.isZero() || t.push("handle2: " + this._segment2._handleIn),
                    t.push("point2: " + this._segment2._point),
                    "{ " + t.join(", ") + " }"
            },
            classify: function () {
                return k.classify(this.getValues())
            },
            remove: function () {
                var t = !1;
                if (this._path) {
                    var e = this._segment2
                        , i = e._handleOut;
                    (t = e.remove()) && this._segment1._handleOut.set(i)
                }
                return t
            },
            getPoint1: function () {
                return this._segment1._point
            },
            setPoint1: function () {
                this._segment1._point.set(c.read(arguments))
            },
            getPoint2: function () {
                return this._segment2._point
            },
            setPoint2: function () {
                this._segment2._point.set(c.read(arguments))
            },
            getHandle1: function () {
                return this._segment1._handleOut
            },
            setHandle1: function () {
                this._segment1._handleOut.set(c.read(arguments))
            },
            getHandle2: function () {
                return this._segment2._handleIn
            },
            setHandle2: function () {
                this._segment2._handleIn.set(c.read(arguments))
            },
            getSegment1: function () {
                return this._segment1
            },
            getSegment2: function () {
                return this._segment2
            },
            getPath: function () {
                return this._path
            },
            getIndex: function () {
                return this._segment1._index
            },
            getNext: function () {
                var t = this._path && this._path._curves;
                return t && (t[this._segment1._index + 1] || this._path._closed && t[0]) || null
            },
            getPrevious: function () {
                var t = this._path && this._path._curves;
                return t && (t[this._segment1._index - 1] || this._path._closed && t[t.length - 1]) || null
            },
            isFirst: function () {
                return !this._segment1._index
            },
            isLast: function () {
                var t = this._path;
                return t && this._segment1._index === t._curves.length - 1 || !1
            },
            isSelected: function () {
                return this.getPoint1().isSelected() && this.getHandle1().isSelected() && this.getHandle2().isSelected() && this.getPoint2().isSelected()
            },
            setSelected: function (t) {
                this.getPoint1().setSelected(t),
                    this.getHandle1().setSelected(t),
                    this.getHandle2().setSelected(t),
                    this.getPoint2().setSelected(t)
            },
            getValues: function (t) {
                return k.getValues(this._segment1, this._segment2, t)
            },
            getPoints: function () {
                for (var t = this.getValues(), e = [], i = 0; i < 8; i += 2)
                    e.push(new c(t[i], t[i + 1]));
                return e
            }
        }, {
            getLength: function () {
                return null == this._length && (this._length = k.getLength(this.getValues(), 0, 1)),
                    this._length
            },
            getArea: function () {
                return k.getArea(this.getValues())
            },
            getLine: function () {
                return new m(this._segment1._point, this._segment2._point)
            },
            getPart: function (t, e) {
                return new k(k.getPart(this.getValues(), t, e))
            },
            getPartLength: function (t, e) {
                return k.getLength(this.getValues(), t, e)
            },
            divideAt: function (t) {
                return this.divideAtTime(t && t.curve === this ? t.time : this.getTimeAt(t))
            },
            divideAtTime: function (t, e) {
                var i = null;
                if (t >= 1e-8 && t <= 1 - 1e-8) {
                    var n = k.subdivide(this.getValues(), t)
                        , r = n[0]
                        , s = n[1]
                        , a = e || this.hasHandles()
                        , o = this._segment1
                        , h = this._segment2
                        , u = this._path;
                    a && (o._handleOut._set(r[2] - r[0], r[3] - r[1]),
                        h._handleIn._set(s[4] - s[6], s[5] - s[7]));
                    var l = r[6]
                        , f = r[7]
                        , d = new T(new c(l, f), a && new c(r[4] - l, r[5] - f), a && new c(s[2] - l, s[3] - f));
                    u ? (u.insert(o._index + 1, d),
                        i = this.getNext()) : (this._segment2 = d,
                            this._changed(),
                            i = new k(d, h))
                }
                return i
            },
            splitAt: function (t) {
                var e = this._path;
                return e ? e.splitAt(t) : null
            },
            splitAtTime: function (t) {
                return this.splitAt(this.getLocationAtTime(t))
            },
            divide: function (t, i) {
                return this.divideAtTime(t === e ? .5 : i ? t : this.getTimeAt(t))
            },
            split: function (t, i) {
                return this.splitAtTime(t === e ? .5 : i ? t : this.getTimeAt(t))
            },
            reversed: function () {
                return new k(this._segment2.reversed(), this._segment1.reversed())
            },
            clearHandles: function () {
                this._segment1._handleOut._set(0, 0),
                    this._segment2._handleIn._set(0, 0)
            },
            statics: {
                getValues: function (t, e, i, n) {
                    var r = t._point
                        , s = t._handleOut
                        , a = e._handleIn
                        , o = e._point
                        , h = r.x
                        , u = r.y
                        , l = o.x
                        , c = o.y
                        , f = n ? [h, u, h, u, l, c, l, c] : [h, u, h + s._x, u + s._y, l + a._x, c + a._y, l, c];
                    return i && i._transformCoordinates(f, f, 4),
                        f
                },
                subdivide: function (t, i) {
                    var n = t[0]
                        , r = t[1]
                        , s = t[2]
                        , a = t[3]
                        , o = t[4]
                        , h = t[5]
                        , u = t[6]
                        , l = t[7];
                    i === e && (i = .5);
                    var c = 1 - i
                        , f = c * n + i * s
                        , d = c * r + i * a
                        , _ = c * s + i * o
                        , g = c * a + i * h
                        , v = c * o + i * u
                        , p = c * h + i * l
                        , m = c * f + i * _
                        , y = c * d + i * g
                        , w = c * _ + i * v
                        , x = c * g + i * p
                        , b = c * m + i * w
                        , C = c * y + i * x;
                    return [[n, r, f, d, m, y, b, C], [b, C, w, x, v, p, u, l]]
                },
                getMonoCurves: function (t, e) {
                    var i = []
                        , n = e ? 0 : 1
                        , r = t[n + 0]
                        , s = t[n + 2]
                        , a = t[n + 4]
                        , o = t[n + 6];
                    if (r >= s == s >= a && s >= a == a >= o || k.isStraight(t))
                        i.push(t);
                    else {
                        var h = 3 * (s - a) - r + o
                            , l = 2 * (r + a) - 4 * s
                            , c = s - r
                            , f = []
                            , d = u.solveQuadratic(h, l, c, f, 1e-8, 1 - 1e-8);
                        if (d) {
                            f.sort();
                            var _ = f[0]
                                , g = k.subdivide(t, _);
                            i.push(g[0]),
                                d > 1 && (_ = (f[1] - _) / (1 - _),
                                    g = k.subdivide(g[1], _),
                                    i.push(g[0])),
                                i.push(g[1])
                        } else
                            i.push(t)
                    }
                    return i
                },
                solveCubic: function (t, e, i, n, r, s) {
                    var a = t[e]
                        , o = t[e + 2]
                        , h = t[e + 4]
                        , l = t[e + 6]
                        , c = 0;
                    if (!(a < i && l < i && o < i && h < i || a > i && l > i && o > i && h > i)) {
                        var f = 3 * (o - a)
                            , d = 3 * (h - o) - f
                            , _ = l - a - f - d;
                        c = u.solveCubic(_, d, f, a - i, n, r, s)
                    }
                    return c
                },
                getTimeOf: function (t, e) {
                    var i = new c(t[0], t[1])
                        , n = new c(t[6], t[7]);
                    if (null === (e.isClose(i, 1e-12) ? 0 : e.isClose(n, 1e-12) ? 1 : null))
                        for (var r = [e.x, e.y], s = [], a = 0; a < 2; a++)
                            for (var o = k.solveCubic(t, a, r[a], s, 0, 1), h = 0; h < o; h++) {
                                var u = s[h];
                                if (e.isClose(k.getPoint(t, u), 1e-7))
                                    return u
                            }
                    return e.isClose(i, 1e-7) ? 0 : e.isClose(n, 1e-7) ? 1 : null
                },
                getNearestTime: function (t, e) {
                    function i(i) {
                        if (i >= 0 && i <= 1) {
                            var n = e.getDistance(k.getPoint(t, i), !0);
                            if (n < u)
                                return u = n,
                                    l = i,
                                    !0
                        }
                    }
                    if (k.isStraight(t)) {
                        var n = t[0]
                            , r = t[1]
                            , s = t[6] - n
                            , a = t[7] - r
                            , o = s * s + a * a;
                        if (0 === o)
                            return 0;
                        var h = ((e.x - n) * s + (e.y - r) * a) / o;
                        return h < 1e-12 ? 0 : h > .999999999999 ? 1 : k.getTimeOf(t, new c(n + h * s, r + h * a))
                    }
                    for (var u = 1 / 0, l = 0, f = 0; f <= 100; f++)
                        i(f / 100);
                    for (var d = .005; d > 1e-8;)
                        i(l - d) || i(l + d) || (d /= 2);
                    return l
                },
                getPart: function (t, e, i) {
                    var n = e > i;
                    if (n) {
                        var r = e;
                        e = i,
                            i = r
                    }
                    return e > 0 && (t = k.subdivide(t, e)[1]),
                        i < 1 && (t = k.subdivide(t, (i - e) / (1 - e))[0]),
                        n ? [t[6], t[7], t[4], t[5], t[2], t[3], t[0], t[1]] : t
                },
                isFlatEnough: function (t, e) {
                    var i = t[0]
                        , n = t[1]
                        , r = t[2]
                        , s = t[3]
                        , a = t[4]
                        , o = t[5]
                        , h = t[6]
                        , u = t[7]
                        , l = 3 * r - 2 * i - h
                        , c = 3 * s - 2 * n - u
                        , f = 3 * a - 2 * h - i
                        , d = 3 * o - 2 * u - n;
                    return Math.max(l * l, f * f) + Math.max(c * c, d * d) <= 16 * e * e
                },
                getArea: function (t) {
                    var e = t[0]
                        , i = t[1]
                        , n = t[2]
                        , r = t[3]
                        , s = t[4]
                        , a = t[5]
                        , o = t[6]
                        , h = t[7];
                    return 3 * ((h - i) * (n + s) - (o - e) * (r + a) + r * (e - s) - n * (i - a) + h * (s + e / 3) - o * (a + i / 3)) / 20
                },
                getBounds: function (t) {
                    for (var e = t.slice(0, 2), i = e.slice(), n = [0, 0], r = 0; r < 2; r++)
                        k._addBounds(t[r], t[r + 2], t[r + 4], t[r + 6], r, 0, e, i, n);
                    return new g(e[0], e[1], i[0] - e[0], i[1] - e[1])
                },
                _addBounds: function (t, e, i, n, r, s, a, o, h) {
                    function l(t, e) {
                        var i = t - e
                            , n = t + e;
                        i < a[r] && (a[r] = i),
                            n > o[r] && (o[r] = n)
                    }
                    s /= 2;
                    var c = a[r] - s
                        , f = o[r] + s;
                    if (t < c || e < c || i < c || n < c || t > f || e > f || i > f || n > f)
                        if (e < t != e < n && i < t != i < n)
                            l(t, s),
                                l(n, s);
                        else {
                            var d = 3 * (e - i) - t + n
                                , _ = 2 * (t + i) - 4 * e
                                , g = e - t
                                , v = u.solveQuadratic(d, _, g, h);
                            l(n, 0);
                            for (var p = 0; p < v; p++) {
                                var m = h[p]
                                    , y = 1 - m;
                                1e-8 <= m && m <= 1 - 1e-8 && l(y * y * y * t + 3 * y * y * m * e + 3 * y * m * m * i + m * m * m * n, s)
                            }
                        }
                }
            }
        }, r.each(["getBounds", "getStrokeBounds", "getHandleBounds"], function (t) {
            this[t] = function () {
                this._bounds || (this._bounds = {});
                var e = this._bounds[t];
                return e || (e = this._bounds[t] = L[t]([this._segment1, this._segment2], !1, this._path)),
                    e.clone()
            }
        }, {}), r.each({
            isStraight: function (t, e, i, n) {
                if (e.isZero() && i.isZero())
                    return !0;
                var r = n.subtract(t);
                if (r.isZero())
                    return !1;
                if (r.isCollinear(e) && r.isCollinear(i)) {
                    var s = new m(t, n);
                    if (s.getDistance(t.add(e)) < 1e-7 && s.getDistance(n.add(i)) < 1e-7) {
                        var a = r.dot(r)
                            , o = r.dot(e) / a
                            , h = r.dot(i) / a;
                        return o >= 0 && o <= 1 && h <= 0 && h >= -1
                    }
                }
                return !1
            },
            isLinear: function (t, e, i, n) {
                var r = n.subtract(t).divide(3);
                return e.equals(r) && i.negate().equals(r)
            }
        }, function (t, e) {
            this[e] = function (e) {
                var i = this._segment1
                    , n = this._segment2;
                return t(i._point, i._handleOut, n._handleIn, n._point, e)
            }
                ,
                this.statics[e] = function (e, i) {
                    var n = e[0]
                        , r = e[1]
                        , s = e[6]
                        , a = e[7];
                    return t(new c(n, r), new c(e[2] - n, e[3] - r), new c(e[4] - s, e[5] - a), new c(s, a), i)
                }
        }, {
            statics: {},
            hasHandles: function () {
                return !this._segment1._handleOut.isZero() || !this._segment2._handleIn.isZero()
            },
            hasLength: function (t) {
                return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) && this.getLength() > (t || 0)
            },
            isCollinear: function (t) {
                return t && this.isStraight() && t.isStraight() && this.getLine().isCollinear(t.getLine())
            },
            isHorizontal: function () {
                return this.isStraight() && Math.abs(this.getTangentAtTime(.5).y) < 1e-8
            },
            isVertical: function () {
                return this.isStraight() && Math.abs(this.getTangentAtTime(.5).x) < 1e-8
            }
        }), {
            beans: !1,
            getLocationAt: function (t, e) {
                return this.getLocationAtTime(e ? t : this.getTimeAt(t))
            },
            getLocationAtTime: function (t) {
                return null != t && t >= 0 && t <= 1 ? new O(this, t) : null
            },
            getTimeAt: function (t, e) {
                return k.getTimeAt(this.getValues(), t, e)
            },
            getParameterAt: "#getTimeAt",
            getOffsetAtTime: function (t) {
                return this.getPartLength(0, t)
            },
            getLocationOf: function () {
                return this.getLocationAtTime(this.getTimeOf(c.read(arguments)))
            },
            getOffsetOf: function () {
                var t = this.getLocationOf.apply(this, arguments);
                return t ? t.getOffset() : null
            },
            getTimeOf: function () {
                return k.getTimeOf(this.getValues(), c.read(arguments))
            },
            getParameterOf: "#getTimeOf",
            getNearestLocation: function () {
                var t = c.read(arguments)
                    , e = this.getValues()
                    , i = k.getNearestTime(e, t)
                    , n = k.getPoint(e, i);
                return new O(this, i, n, null, t.getDistance(n))
            },
            getNearestPoint: function () {
                var t = this.getNearestLocation.apply(this, arguments);
                return t ? t.getPoint() : t
            }
        }, new function () {
            var t = ["getPoint", "getTangent", "getNormal", "getWeightedTangent", "getWeightedNormal", "getCurvature"];
            return r.each(t, function (t) {
                this[t + "At"] = function (e, i) {
                    var n = this.getValues();
                    return k[t](n, i ? e : k.getTimeAt(n, e))
                }
                    ,
                    this[t + "AtTime"] = function (e) {
                        return k[t](this.getValues(), e)
                    }
            }, {
                statics: {
                    _evaluateMethods: t
                }
            })
        }
            , new function () {
                function t(t) {
                    var e = t[0]
                        , i = t[1]
                        , n = t[2]
                        , r = t[3]
                        , s = t[4]
                        , a = t[5]
                        , o = 9 * (n - s) + 3 * (t[6] - e)
                        , h = 6 * (e + s) - 12 * n
                        , u = 3 * (n - e)
                        , l = 9 * (r - a) + 3 * (t[7] - i)
                        , c = 6 * (i + a) - 12 * r
                        , f = 3 * (r - i);
                    return function (t) {
                        var e = (o * t + h) * t + u
                            , i = (l * t + c) * t + f;
                        return Math.sqrt(e * e + i * i)
                    }
                }
                function i(t, e) {
                    return Math.max(2, Math.min(16, Math.ceil(32 * Math.abs(e - t))))
                }
                function n(t, e, i, n) {
                    if (null == e || e < 0 || e > 1)
                        return null;
                    var r = t[0]
                        , s = t[1]
                        , a = t[2]
                        , o = t[3]
                        , h = t[4]
                        , l = t[5]
                        , f = t[6]
                        , d = t[7]
                        , _ = u.isZero;
                    _(a - r) && _(o - s) && (a = r,
                        o = s),
                        _(h - f) && _(l - d) && (h = f,
                            l = d);
                    var g, v, p = 3 * (a - r), m = 3 * (h - a) - p, y = f - r - p - m, w = 3 * (o - s), x = 3 * (l - o) - w, b = d - s - w - x;
                    if (0 === i)
                        g = 0 === e ? r : 1 === e ? f : ((y * e + m) * e + p) * e + r,
                            v = 0 === e ? s : 1 === e ? d : ((b * e + x) * e + w) * e + s;
                    else {
                        if (e < 1e-8 ? (g = p,
                            v = w) : e > 1 - 1e-8 ? (g = 3 * (f - h),
                                v = 3 * (d - l)) : (g = (3 * y * e + 2 * m) * e + p,
                                    v = (3 * b * e + 2 * x) * e + w),
                            n) {
                            0 === g && 0 === v && (e < 1e-8 || e > 1 - 1e-8) && (g = h - a,
                                v = l - o);
                            var C = Math.sqrt(g * g + v * v);
                            C && (g /= C,
                                v /= C)
                        }
                        if (3 === i) {
                            var h = 6 * y * e + 2 * m
                                , l = 6 * b * e + 2 * x
                                , S = Math.pow(g * g + v * v, 1.5);
                            g = 0 !== S ? (g * l - v * h) / S : 0,
                                v = 0
                        }
                    }
                    return 2 === i ? new c(v, -g) : new c(g, v)
                }
                return {
                    statics: {
                        classify: function (t) {
                            function i(t, i, n) {
                                var r = i !== e
                                    , s = r && i > 0 && i < 1
                                    , a = r && n > 0 && n < 1;
                                return !r || (s || a) && ("loop" !== t || s && a) || (t = "arch",
                                    s = a = !1),
                                {
                                    type: t,
                                    roots: s || a ? s && a ? i < n ? [i, n] : [n, i] : [s ? i : n] : null
                                }
                            }
                            var n = t[0]
                                , r = t[1]
                                , s = t[2]
                                , a = t[3]
                                , o = t[4]
                                , h = t[5]
                                , l = t[6]
                                , c = t[7]
                                , f = s * (r - c) + a * (l - n) + n * c - r * l
                                , d = 3 * (o * (a - r) + h * (n - s) + s * r - a * n)
                                , _ = d - f
                                , g = _ - f + (n * (c - h) + r * (o - l) + l * h - c * o)
                                , v = Math.sqrt(g * g + _ * _ + d * d)
                                , p = 0 !== v ? 1 / v : 0
                                , m = u.isZero;
                            if (g *= p,
                                _ *= p,
                                d *= p,
                                m(g))
                                return m(_) ? i(m(d) ? "line" : "quadratic") : i("serpentine", d / (3 * _));
                            var y = 3 * _ * _ - 4 * g * d;
                            if (m(y))
                                return i("cusp", _ / (2 * g));
                            var w = y > 0 ? Math.sqrt(y / 3) : Math.sqrt(-y)
                                , x = 2 * g;
                            return i(y > 0 ? "serpentine" : "loop", (_ + w) / x, (_ - w) / x)
                        },
                        getLength: function (n, r, s, a) {
                            if (r === e && (r = 0),
                                s === e && (s = 1),
                                k.isStraight(n)) {
                                var o = n;
                                s < 1 && (o = k.subdivide(o, s)[0],
                                    r /= s),
                                    r > 0 && (o = k.subdivide(o, r)[1]);
                                var h = o[6] - o[0]
                                    , l = o[7] - o[1];
                                return Math.sqrt(h * h + l * l)
                            }
                            return u.integrate(a || t(n), r, s, i(r, s))
                        },
                        getTimeAt: function (n, r, s) {
                            if (s === e && (s = r < 0 ? 1 : 0),
                                0 === r)
                                return s;
                            var a = Math.abs
                                , o = r > 0
                                , h = o ? s : 0
                                , l = o ? 1 : s
                                , c = t(n)
                                , f = k.getLength(n, h, l, c)
                                , d = a(r) - f;
                            if (a(d) < 1e-12)
                                return o ? l : h;
                            if (d > 1e-12)
                                return null;
                            var _ = r / f
                                , g = 0;
                            return u.findRoot(function (t) {
                                return g += u.integrate(c, s, t, i(s, t)),
                                    s = t,
                                    g - r
                            }, c, s + _, h, l, 32, 1e-12)
                        },
                        getPoint: function (t, e) {
                            return n(t, e, 0, !1)
                        },
                        getTangent: function (t, e) {
                            return n(t, e, 1, !0)
                        },
                        getWeightedTangent: function (t, e) {
                            return n(t, e, 1, !1)
                        },
                        getNormal: function (t, e) {
                            return n(t, e, 2, !0)
                        },
                        getWeightedNormal: function (t, e) {
                            return n(t, e, 2, !1)
                        },
                        getCurvature: function (t, e) {
                            return n(t, e, 3, !1).x
                        },
                        getPeaks: function (t) {
                            var e = t[0]
                                , i = t[1]
                                , n = t[2]
                                , r = t[3]
                                , s = t[4]
                                , a = t[5]
                                , o = 3 * n - e - 3 * s + t[6]
                                , h = 3 * e - 6 * n + 3 * s
                                , l = -3 * e + 3 * n
                                , c = 3 * r - i - 3 * a + t[7]
                                , f = 3 * i - 6 * r + 3 * a
                                , d = -3 * i + 3 * r
                                , _ = [];
                            return u.solveCubic(9 * (o * o + c * c), 9 * (o * h + f * c), 2 * (h * h + f * f) + 3 * (l * o + d * c), l * h + f * d, _, 1e-8, 1 - 1e-8),
                                _.sort()
                        }
                    }
                }
            }
            , new function () {
                function t(t, e, i, n, r, s, a) {
                    var o = !a && i.getPrevious() === r
                        , h = !a && i !== r && i.getNext() === r;
                    if (null !== n && n >= (o ? 1e-8 : 0) && n <= (h ? 1 - 1e-8 : 1) && null !== s && s >= (h ? 1e-8 : 0) && s <= (o ? 1 - 1e-8 : 1)) {
                        var u = new O(i, n, null, a)
                            , l = new O(r, s, null, a);
                        u._intersection = l,
                            l._intersection = u,
                            e && !e(u) || O.insert(t, u, !0)
                    }
                }
                function e(r, s, a, o, h, u, l, c, f, d, _, g, v) {
                    if (++f >= 4096 || ++c >= 40)
                        return f;
                    var p, y, w = s[0], x = s[1], b = s[6], C = s[7], S = m.getSignedDistance, P = S(w, x, b, C, s[2], s[3]), I = S(w, x, b, C, s[4], s[5]), M = P * I > 0 ? .75 : 4 / 9, T = M * Math.min(0, P, I), z = M * Math.max(0, P, I), O = S(w, x, b, C, r[0], r[1]), A = S(w, x, b, C, r[2], r[3]), L = S(w, x, b, C, r[4], r[5]), N = S(w, x, b, C, r[6], r[7]), B = i(O, A, L, N), D = B[0], j = B[1];
                    if (0 === P && 0 === I && 0 === O && 0 === A && 0 === L && 0 === N || null == (p = n(D, j, T, z)) || null == (y = n(D.reverse(), j.reverse(), T, z)))
                        return f;
                    var E = d + (_ - d) * p
                        , F = d + (_ - d) * y;
                    if (Math.max(v - g, F - E) < 1e-9) {
                        var R = (E + F) / 2
                            , q = (g + v) / 2;
                        t(h, u, l ? o : a, l ? q : R, l ? a : o, l ? R : q)
                    } else if (r = k.getPart(r, p, y),
                        y - p > .8)
                        if (F - E > v - g) {
                            R = (E + F) / 2;
                            f = e(s, (V = k.subdivide(r, .5))[0], o, a, h, u, !l, c, f, g, v, E, R),
                                f = e(s, V[1], o, a, h, u, !l, c, f, g, v, R, F)
                        } else {
                            var V = k.subdivide(s, .5)
                                , q = (g + v) / 2;
                            f = e(V[0], r, o, a, h, u, !l, c, f, g, q, E, F),
                                f = e(V[1], r, o, a, h, u, !l, c, f, q, v, E, F)
                        }
                    else
                        f = v - g >= 1e-9 ? e(s, r, o, a, h, u, !l, c, f, g, v, E, F) : e(r, s, a, o, h, u, l, c, f, E, F, g, v);
                    return f
                }
                function i(t, e, i, n) {
                    var r, s = [0, t], a = [1 / 3, e], o = [2 / 3, i], h = [1, n], u = e - (2 * t + n) / 3, l = i - (t + 2 * n) / 3;
                    if (u * l < 0)
                        r = [[s, a, h], [s, o, h]];
                    else {
                        var c = u / l;
                        r = [c >= 2 ? [s, a, h] : c <= .5 ? [s, o, h] : [s, a, o, h], [s, h]]
                    }
                    return (u || l) < 0 ? r.reverse() : r
                }
                function n(t, e, i, n) {
                    return t[0][1] < i ? r(t, !0, i) : e[0][1] > n ? r(e, !1, n) : t[0][0]
                }
                function r(t, e, i) {
                    for (var n = t[0][0], r = t[0][1], s = 1, a = t.length; s < a; s++) {
                        var o = t[s][0]
                            , h = t[s][1];
                        if (e ? h >= i : h <= i)
                            return h === i ? o : n + (i - r) * (o - n) / (h - r);
                        n = o,
                            r = h
                    }
                    return null
                }
                function s(t, e, i, n, r) {
                    var s = u.isZero;
                    if (s(n) && s(r)) {
                        var a = k.getTimeOf(t, new c(e, i));
                        return null === a ? [] : [a]
                    }
                    for (var o = Math.atan2(-r, n), h = Math.sin(o), l = Math.cos(o), f = [], d = [], _ = 0; _ < 8; _ += 2) {
                        var g = t[_] - e
                            , v = t[_ + 1] - i;
                        f.push(g * l - v * h, g * h + v * l)
                    }
                    return k.solveCubic(f, 1, 0, d, 0, 1),
                        d
                }
                function a(e, i, n, r, a, o, h) {
                    for (var u = i[0], l = i[1], c = s(e, u, l, i[6] - u, i[7] - l), f = 0, d = c.length; f < d; f++) {
                        var _ = c[f]
                            , g = k.getPoint(e, _)
                            , v = k.getTimeOf(i, g);
                        null !== v && t(a, o, h ? r : n, h ? v : _, h ? n : r, h ? _ : v)
                    }
                }
                function o(e, i, n, r, s, a) {
                    var o = m.intersect(e[0], e[1], e[6], e[7], i[0], i[1], i[6], i[7]);
                    o && t(s, a, n, k.getTimeOf(e, o), r, k.getTimeOf(i, o))
                }
                function h(i, n, r, s, h, u) {
                    var l = Math.min
                        , d = Math.max;
                    if (d(i[0], i[2], i[4], i[6]) + 1e-12 > l(n[0], n[2], n[4], n[6]) && l(i[0], i[2], i[4], i[6]) - 1e-12 < d(n[0], n[2], n[4], n[6]) && d(i[1], i[3], i[5], i[7]) + 1e-12 > l(n[1], n[3], n[5], n[7]) && l(i[1], i[3], i[5], i[7]) - 1e-12 < d(n[1], n[3], n[5], n[7])) {
                        var _ = f(i, n);
                        if (_)
                            for (x = 0; x < 2; x++) {
                                var g = _[x];
                                t(h, u, r, g[0], s, g[1], !0)
                            }
                        else {
                            var v = k.isStraight(i)
                                , p = k.isStraight(n)
                                , m = v && p
                                , y = v && !p
                                , w = h.length;
                            if ((m ? o : v || p ? a : e)(y ? n : i, y ? i : n, y ? s : r, y ? r : s, h, u, y, 0, 0, 0, 1, 0, 1),
                                !m || h.length === w)
                                for (var x = 0; x < 4; x++) {
                                    var b = x >> 1
                                        , C = 1 & x
                                        , S = 6 * b
                                        , P = 6 * C
                                        , I = new c(i[S], i[S + 1])
                                        , M = new c(n[P], n[P + 1]);
                                    I.isClose(M, 1e-12) && t(h, u, r, b, s, C)
                                }
                        }
                    }
                    return h
                }
                function l(e, i, n, r) {
                    var s = k.classify(e);
                    if ("loop" === s.type) {
                        var a = s.roots;
                        t(n, r, i, a[0], i, a[1])
                    }
                    return n
                }
                function f(t, e) {
                    function i(t) {
                        var e = t[6] - t[0]
                            , i = t[7] - t[1];
                        return e * e + i * i
                    }
                    var n = Math.abs
                        , r = m.getDistance
                        , s = k.isStraight(t)
                        , a = k.isStraight(e)
                        , o = s && a
                        , h = i(t) < i(e)
                        , u = h ? e : t
                        , l = h ? t : e
                        , f = u[0]
                        , d = u[1]
                        , _ = u[6] - f
                        , g = u[7] - d;
                    if (r(f, d, _, g, l[0], l[1], !0) < 1e-7 && r(f, d, _, g, l[6], l[7], !0) < 1e-7)
                        !o && r(f, d, _, g, u[2], u[3], !0) < 1e-7 && r(f, d, _, g, u[4], u[5], !0) < 1e-7 && r(f, d, _, g, l[2], l[3], !0) < 1e-7 && r(f, d, _, g, l[4], l[5], !0) < 1e-7 && (s = a = o = !0);
                    else if (o)
                        return null;
                    if (s ^ a)
                        return null;
                    for (var v = [t, e], p = [], y = 0; y < 4 && p.length < 2; y++) {
                        var w = 1 & y
                            , x = 1 ^ w
                            , b = y >> 1
                            , C = k.getTimeOf(v[w], new c(v[x][b ? 6 : 0], v[x][b ? 7 : 1]));
                        if (null != C) {
                            var S = w ? [b, C] : [C, b];
                            (!p.length || n(S[0] - p[0][0]) > 1e-8 && n(S[1] - p[0][1]) > 1e-8) && p.push(S)
                        }
                        if (y > 2 && !p.length)
                            break
                    }
                    if (2 !== p.length)
                        p = null;
                    else if (!o) {
                        var P = k.getPart(t, p[0][0], p[1][0])
                            , I = k.getPart(e, p[0][1], p[1][1]);
                        (n(I[2] - P[2]) > 1e-7 || n(I[3] - P[3]) > 1e-7 || n(I[4] - P[4]) > 1e-7 || n(I[5] - P[5]) > 1e-7) && (p = null)
                    }
                    return p
                }
                return {
                    getIntersections: function (t) {
                        var e = this.getValues()
                            , i = t && t !== this && t.getValues();
                        return i ? h(e, i, this, t, []) : l(e, this, [])
                    },
                    statics: {
                        getOverlaps: f,
                        getIntersections: function (t, e, i, n, r, s) {
                            var a = !e;
                            a && (e = t);
                            for (var o, u, c = t.length, f = e.length, d = [], _ = [], g = 0; g < f; g++)
                                d[g] = e[g].getValues(r);
                            for (g = 0; g < c; g++) {
                                var v = t[g]
                                    , p = a ? d[g] : v.getValues(n)
                                    , m = v.getPath();
                                m !== u && (u = m,
                                    o = [],
                                    _.push(o)),
                                    a && l(p, v, o, i);
                                for (var y = a ? g + 1 : 0; y < f; y++) {
                                    if (s && o.length)
                                        return o;
                                    h(p, d[y], v, e[y], o, i)
                                }
                            }
                            o = [];
                            for (var g = 0, w = _.length; g < w; g++)
                                o.push.apply(o, _[g]);
                            return o
                        },
                        getCurveLineIntersections: s
                    }
                }
            }
        )
        , O = r.extend({
            _class: "CurveLocation",
            initialize: function (t, e, i, n, r) {
                if (e >= .99999999) {
                    var s = t.getNext();
                    s && (e = 0,
                        t = s)
                }
                this._setCurve(t),
                    this._time = e,
                    this._point = i || t.getPointAtTime(e),
                    this._overlap = n,
                    this._distance = r,
                    this._intersection = this._next = this._previous = null
            },
            _setCurve: function (t) {
                var e = t._path;
                this._path = e,
                    this._version = e ? e._version : 0,
                    this._curve = t,
                    this._segment = null,
                    this._segment1 = t._segment1,
                    this._segment2 = t._segment2
            },
            _setSegment: function (t) {
                this._setCurve(t.getCurve()),
                    this._segment = t,
                    this._time = t === this._segment1 ? 0 : 1,
                    this._point = t._point.clone()
            },
            getSegment: function () {
                var t = this._segment;
                if (!t) {
                    var e = this.getCurve()
                        , i = this.getTime();
                    0 === i ? t = e._segment1 : 1 === i ? t = e._segment2 : null != i && (t = e.getPartLength(0, i) < e.getPartLength(i, 1) ? e._segment1 : e._segment2),
                        this._segment = t
                }
                return t
            },
            getCurve: function () {
                function t(t) {
                    var e = t && t.getCurve();
                    if (e && null != (i._time = e.getTimeOf(i._point)))
                        return i._setCurve(e),
                            e
                }
                var e = this._path
                    , i = this;
                return e && e._version !== this._version && (this._time = this._offset = this._curveOffset = this._curve = null),
                    this._curve || t(this._segment) || t(this._segment1) || t(this._segment2.getPrevious())
            },
            getPath: function () {
                var t = this.getCurve();
                return t && t._path
            },
            getIndex: function () {
                var t = this.getCurve();
                return t && t.getIndex()
            },
            getTime: function () {
                var t = this.getCurve()
                    , e = this._time;
                return t && null == e ? this._time = t.getTimeOf(this._point) : e
            },
            getParameter: "#getTime",
            getPoint: function () {
                return this._point
            },
            getOffset: function () {
                var t = this._offset;
                if (null == t) {
                    t = 0;
                    var e = this.getPath()
                        , i = this.getIndex();
                    if (e && null != i)
                        for (var n = e.getCurves(), r = 0; r < i; r++)
                            t += n[r].getLength();
                    this._offset = t += this.getCurveOffset()
                }
                return t
            },
            getCurveOffset: function () {
                var t = this._curveOffset;
                if (null == t) {
                    var e = this.getCurve()
                        , i = this.getTime();
                    this._curveOffset = t = null != i && e && e.getPartLength(0, i)
                }
                return t
            },
            getIntersection: function () {
                return this._intersection
            },
            getDistance: function () {
                return this._distance
            },
            divide: function () {
                var t = this.getCurve()
                    , e = t && t.divideAtTime(this.getTime());
                return e && this._setSegment(e._segment1),
                    e
            },
            split: function () {
                var t = this.getCurve()
                    , e = t._path
                    , i = t && t.splitAtTime(this.getTime());
                return i && this._setSegment(e.getLastSegment()),
                    i
            },
            equals: function (t, e) {
                var i = this === t;
                if (!i && t instanceof O) {
                    var n = this.getCurve()
                        , r = t.getCurve()
                        , s = n._path;
                    if (s === r._path) {
                        var a = Math.abs
                            , o = a(this.getOffset() - t.getOffset())
                            , h = !e && this._intersection
                            , u = !e && t._intersection;
                        i = (o < 1e-7 || s && a(s.getLength() - o) < 1e-7) && (!h && !u || h && u && h.equals(u, !0))
                    }
                }
                return i
            },
            toString: function () {
                var t = []
                    , e = this.getPoint()
                    , i = h.instance;
                e && t.push("point: " + e);
                var n = this.getIndex();
                null != n && t.push("index: " + n);
                var r = this.getTime();
                return null != r && t.push("time: " + i.number(r)),
                    null != this._distance && t.push("distance: " + i.number(this._distance)),
                    "{ " + t.join(", ") + " }"
            },
            isTouching: function () {
                var t = this._intersection;
                if (t && this.getTangent().isCollinear(t.getTangent())) {
                    var e = this.getCurve()
                        , i = t.getCurve();
                    return !(e.isStraight() && i.isStraight() && e.getLine().intersect(i.getLine()))
                }
                return !1
            },
            isCrossing: function () {
                function t(t, e) {
                    var i = t.getValues()
                        , n = k.classify(i).roots || k.getPeaks(i)
                        , r = n.length
                        , s = e && r > 1 ? n[r - 1] : r > 0 ? n[0] : .5;
                    c.push(k.getLength(i, e ? s : 0, e ? 1 : s) / 2)
                }
                function e(t, e, i) {
                    return e < i ? t > e && t < i : t > e || t < i
                }
                var i = this._intersection;
                if (!i)
                    return !1;
                var n = this.getTime()
                    , r = i.getTime()
                    , s = n >= 1e-8 && n <= 1 - 1e-8
                    , a = r >= 1e-8 && r <= 1 - 1e-8;
                if (s && a)
                    return !this.isTouching();
                var o = this.getCurve()
                    , h = n < 1e-8 ? o.getPrevious() : o
                    , u = i.getCurve()
                    , l = r < 1e-8 ? u.getPrevious() : u;
                if (n > 1 - 1e-8 && (o = o.getNext()),
                    r > 1 - 1e-8 && (u = u.getNext()),
                    !(h && o && l && u))
                    return !1;
                var c = [];
                s || (t(h, !0),
                    t(o, !1)),
                    a || (t(l, !0),
                        t(u, !1));
                var f = this.getPoint()
                    , d = Math.min.apply(Math, c)
                    , _ = s ? o.getTangentAtTime(n) : o.getPointAt(d).subtract(f)
                    , g = s ? _.negate() : h.getPointAt(-d).subtract(f)
                    , v = a ? u.getTangentAtTime(r) : u.getPointAt(d).subtract(f)
                    , p = a ? v.negate() : l.getPointAt(-d).subtract(f)
                    , m = g.getAngle()
                    , y = _.getAngle()
                    , w = p.getAngle()
                    , x = v.getAngle();
                return !!(s ? e(m, w, x) ^ e(y, w, x) && e(m, x, w) ^ e(y, x, w) : e(w, m, y) ^ e(x, m, y) && e(w, y, m) ^ e(x, y, m))
            },
            hasOverlap: function () {
                return !!this._overlap
            }
        }, r.each(k._evaluateMethods, function (t) {
            var e = t + "At";
            this[t] = function () {
                var t = this.getCurve()
                    , i = this.getTime();
                return null != i && t && t[e](i, !0)
            }
        }, {
            preserve: !0
        }), new function () {
            function t(t, e, i) {
                function n(i, n) {
                    for (var s = i + n; s >= -1 && s <= r; s += n) {
                        var a = t[(s % r + r) % r];
                        if (!e.getPoint().isClose(a.getPoint(), 1e-7))
                            break;
                        if (e.equals(a))
                            return a
                    }
                    return null
                }
                for (var r = t.length, s = 0, a = r - 1; s <= a;) {
                    var o, h = s + a >>> 1, u = t[h];
                    if (i && (o = e.equals(u) ? u : n(h, -1) || n(h, 1)))
                        return e._overlap && (o._overlap = o._intersection._overlap = !0),
                            o;
                    var l = e.getPath()
                        , c = u.getPath();
                    (l !== c ? l._id - c._id : e.getIndex() + e.getTime() - (u.getIndex() + u.getTime())) < 0 ? a = h - 1 : s = h + 1
                }
                return t.splice(s, 0, e),
                    e
            }
            return {
                statics: {
                    insert: t,
                    expand: function (e) {
                        for (var i = e.slice(), n = e.length - 1; n >= 0; n--)
                            t(i, e[n]._intersection, !1);
                        return i
                    }
                }
            }
        }
        )
        , A = w.extend({
            _class: "PathItem",
            _selectBounds: !1,
            _canScaleStroke: !0,
            beans: !0,
            initialize: function () { },
            statics: {
                create: function (t) {
                    var e, i, n;
                    if (r.isPlainObject(t) ? (i = t.segments,
                        e = t.pathData) : Array.isArray(t) ? i = t : "string" == typeof t && (e = t),
                        i) {
                        var s = i[0];
                        n = s && Array.isArray(s[0])
                    } else
                        e && (n = (e.match(/m/gi) || []).length > 1 || /z\s*\S+/i.test(e));
                    return new (n ? N : L)(t)
                }
            },
            _asPathItem: function () {
                return this
            },
            isClockwise: function () {
                return this.getArea() >= 0
            },
            setClockwise: function (t) {
                this.isClockwise() != (t = !!t) && this.reverse()
            },
            setPathData: function (t) {
                function e(t, e) {
                    var i = +n[t];
                    return o && (i += h[e]),
                        i
                }
                function i(t) {
                    return new c(e(t, "x"), e(t + 1, "y"))
                }
                var n, r, s, a = t && t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi), o = !1, h = new c, u = new c;
                this.clear();
                for (var l = 0, f = a && a.length; l < f; l++) {
                    var _ = a[l]
                        , g = _[0]
                        , v = g.toLowerCase()
                        , p = (n = _.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g)) && n.length;
                    switch (o = g === v,
                    "z" !== r || /[mz]/.test(v) || this.moveTo(h),
                    v) {
                        case "m":
                        case "l":
                            for (var m = "m" === v, y = 0; y < p; y += 2)
                                this[m ? "moveTo" : "lineTo"](h = i(y)),
                                    m && (u = h,
                                        m = !1);
                            s = h;
                            break;
                        case "h":
                        case "v":
                            var w = "h" === v ? "x" : "y";
                            h = h.clone();
                            for (y = 0; y < p; y++)
                                h[w] = e(y, w),
                                    this.lineTo(h);
                            s = h;
                            break;
                        case "c":
                            for (y = 0; y < p; y += 6)
                                this.cubicCurveTo(i(y), s = i(y + 2), h = i(y + 4));
                            break;
                        case "s":
                            for (y = 0; y < p; y += 4)
                                this.cubicCurveTo(/[cs]/.test(r) ? h.multiply(2).subtract(s) : h, s = i(y), h = i(y + 2)),
                                    r = v;
                            break;
                        case "q":
                            for (y = 0; y < p; y += 4)
                                this.quadraticCurveTo(s = i(y), h = i(y + 2));
                            break;
                        case "t":
                            for (y = 0; y < p; y += 2)
                                this.quadraticCurveTo(s = /[qt]/.test(r) ? h.multiply(2).subtract(s) : h, h = i(y)),
                                    r = v;
                            break;
                        case "a":
                            for (y = 0; y < p; y += 7)
                                this.arcTo(h = i(y + 5), new d(+n[y], +n[y + 1]), +n[y + 2], +n[y + 4], +n[y + 3]);
                            break;
                        case "z":
                            this.closePath(1e-12),
                                h = u
                    }
                    r = v
                }
            },
            _canComposite: function () {
                return !(this.hasFill() && this.hasStroke())
            },
            _contains: function (t) {
                var e = t.isInside(this.getBounds({
                    internal: !0,
                    handle: !0
                })) ? this._getWinding(t) : {};
                return e.onPath || !!("evenodd" === this.getFillRule() ? 1 & e.windingL || 1 & e.windingR : e.winding)
            },
            getIntersections: function (t, e, i, n) {
                var r = this === t || !t
                    , s = this._matrix._orNullIfIdentity()
                    , a = r ? s : (i || t._matrix)._orNullIfIdentity();
                return r || this.getBounds(s).intersects(t.getBounds(a), 1e-12) ? k.getIntersections(this.getCurves(), !r && t.getCurves(), e, s, a, n) : []
            },
            getCrossings: function (t) {
                return this.getIntersections(t, function (t) {
                    return t.hasOverlap() || t.isCrossing()
                })
            },
            getNearestLocation: function () {
                for (var t = c.read(arguments), e = this.getCurves(), i = 1 / 0, n = null, r = 0, s = e.length; r < s; r++) {
                    var a = e[r].getNearestLocation(t);
                    a._distance < i && (i = a._distance,
                        n = a)
                }
                return n
            },
            getNearestPoint: function () {
                var t = this.getNearestLocation.apply(this, arguments);
                return t ? t.getPoint() : t
            },
            interpolate: function (t, e, i) {
                var n = !this._children
                    , r = n ? "_segments" : "_children"
                    , s = t[r]
                    , a = e[r]
                    , o = this[r];
                if (!s || !a || s.length !== a.length)
                    throw new Error("Invalid operands in interpolate() call: " + t + ", " + e);
                var h = o.length
                    , u = a.length;
                if (h < u)
                    for (var l = n ? T : L, c = h; c < u; c++)
                        this.add(new l);
                else
                    h > u && this[n ? "removeSegments" : "removeChildren"](u, h);
                for (c = 0; c < u; c++)
                    o[c].interpolate(s[c], a[c], i);
                n && (this.setClosed(t._closed),
                    this._changed(9))
            },
            compare: function (t) {
                var e = !1;
                if (t) {
                    var i = this._children || [this]
                        , n = t._children ? t._children.slice() : [t]
                        , r = i.length
                        , s = n.length
                        , a = []
                        , o = 0;
                    e = !0;
                    for (var h = r - 1; h >= 0 && e; h--) {
                        var u = i[h];
                        e = !1;
                        for (var l = s - 1; l >= 0 && !e; l--)
                            u.compare(n[l]) && (a[l] || (a[l] = !0,
                                o++),
                                e = !0)
                    }
                    e = e && o === s
                }
                return e
            }
        })
        , L = A.extend({
            _class: "Path",
            _serializeFields: {
                segments: [],
                closed: !1
            },
            initialize: function (t) {
                this._closed = !1,
                    this._segments = [],
                    this._version = 0;
                var i = Array.isArray(t) ? "object" == typeof t[0] ? t : arguments : !t || t.size !== e || t.x === e && t.point === e ? null : arguments;
                i && i.length > 0 ? this.setSegments(i) : (this._curves = e,
                    this._segmentSelection = 0,
                    i || "string" != typeof t || (this.setPathData(t),
                        t = null)),
                    this._initialize(!i && t)
            },
            _equals: function (t) {
                return this._closed === t._closed && r.equals(this._segments, t._segments)
            },
            copyContent: function (t) {
                this.setSegments(t._segments),
                    this._closed = t._closed
            },
            _changed: function t(i) {
                if (t.base.call(this, i),
                    8 & i) {
                    if (this._length = this._area = e,
                        16 & i)
                        this._version++;
                    else if (this._curves)
                        for (var n = 0, r = this._curves.length; n < r; n++)
                            this._curves[n]._changed()
                } else
                    32 & i && (this._bounds = e)
            },
            getStyle: function () {
                var t = this._parent;
                return (t instanceof N ? t : this)._style
            },
            getSegments: function () {
                return this._segments
            },
            setSegments: function (t) {
                var i = this.isFullySelected()
                    , n = t && t.length;
                if (this._segments.length = 0,
                    this._segmentSelection = 0,
                    this._curves = e,
                    n) {
                    var r = t[n - 1];
                    "boolean" == typeof r && (this.setClosed(r),
                        n--),
                        this._add(T.readList(t, 0, {}, n))
                }
                i && this.setFullySelected(!0)
            },
            getFirstSegment: function () {
                return this._segments[0]
            },
            getLastSegment: function () {
                return this._segments[this._segments.length - 1]
            },
            getCurves: function () {
                var t = this._curves
                    , e = this._segments;
                if (!t) {
                    var i = this._countCurves();
                    t = this._curves = new Array(i);
                    for (var n = 0; n < i; n++)
                        t[n] = new k(this, e[n], e[n + 1] || e[0])
                }
                return t
            },
            getFirstCurve: function () {
                return this.getCurves()[0]
            },
            getLastCurve: function () {
                var t = this.getCurves();
                return t[t.length - 1]
            },
            isClosed: function () {
                return this._closed
            },
            setClosed: function (t) {
                if (this._closed != (t = !!t)) {
                    if (this._closed = t,
                        this._curves) {
                        var e = this._curves.length = this._countCurves();
                        t && (this._curves[e - 1] = new k(this, this._segments[e - 1], this._segments[0]))
                    }
                    this._changed(25)
                }
            }
        }, {
            beans: !0,
            getPathData: function (t, e) {
                function i(e, i) {
                    if (e._transformCoordinates(t, g),
                        n = g[0],
                        r = g[1],
                        v)
                        p.push("M" + _.pair(n, r)),
                            v = !1;
                    else if (o = g[2],
                        u = g[3],
                        o === n && u === r && l === s && c === a) {
                        if (!i) {
                            var h = n - s
                                , f = r - a;
                            p.push(0 === h ? "v" + _.number(f) : 0 === f ? "h" + _.number(h) : "l" + _.pair(h, f))
                        }
                    } else
                        p.push("c" + _.pair(l - s, c - a) + " " + _.pair(o - s, u - a) + " " + _.pair(n - s, r - a));
                    s = n,
                        a = r,
                        l = g[4],
                        c = g[5]
                }
                var n, r, s, a, o, u, l, c, f = this._segments, d = f.length, _ = new h(e), g = new Array(6), v = !0, p = [];
                if (!d)
                    return "";
                for (var m = 0; m < d; m++)
                    i(f[m]);
                return this._closed && d > 0 && (i(f[0], !0),
                    p.push("z")),
                    p.join("")
            },
            isEmpty: function () {
                return !this._segments.length
            },
            _transformContent: function (t) {
                for (var e = this._segments, i = new Array(6), n = 0, r = e.length; n < r; n++)
                    e[n]._transformCoordinates(t, i, !0);
                return !0
            },
            _add: function (t, e) {
                for (var i = this._segments, n = this._curves, r = t.length, s = null == e, e = s ? i.length : e, a = 0; a < r; a++) {
                    var o = t[a];
                    o._path && (o = t[a] = o.clone()),
                        o._path = this,
                        o._index = e + a,
                        o._selection && this._updateSelection(o, 0, o._selection)
                }
                if (s)
                    i.push.apply(i, t);
                else {
                    i.splice.apply(i, [e, 0].concat(t));
                    for (var a = e + r, h = i.length; a < h; a++)
                        i[a]._index = a
                }
                if (n) {
                    var u = this._countCurves()
                        , l = e > 0 && e + r - 1 === u ? e - 1 : e
                        , c = l
                        , f = Math.min(l + r, u);
                    t._curves && (n.splice.apply(n, [l, 0].concat(t._curves)),
                        c += t._curves.length);
                    for (a = c; a < f; a++)
                        n.splice(a, 0, new k(this, null, null));
                    this._adjustCurves(l, f)
                }
                return this._changed(25),
                    t
            },
            _adjustCurves: function (t, e) {
                for (var i, n = this._segments, r = this._curves, s = t; s < e; s++)
                    (i = r[s])._path = this,
                        i._segment1 = n[s],
                        i._segment2 = n[s + 1] || n[0],
                        i._changed();
                (i = r[this._closed && !t ? n.length - 1 : t - 1]) && (i._segment2 = n[t] || n[0],
                    i._changed()),
                    (i = r[e]) && (i._segment1 = n[e],
                        i._changed())
            },
            _countCurves: function () {
                var t = this._segments.length;
                return !this._closed && t > 0 ? t - 1 : t
            },
            add: function (t) {
                return arguments.length > 1 && "number" != typeof t ? this._add(T.readList(arguments)) : this._add([T.read(arguments)])[0]
            },
            insert: function (t, e) {
                return arguments.length > 2 && "number" != typeof e ? this._add(T.readList(arguments, 1), t) : this._add([T.read(arguments, 1)], t)[0]
            },
            addSegment: function () {
                return this._add([T.read(arguments)])[0]
            },
            insertSegment: function (t) {
                return this._add([T.read(arguments, 1)], t)[0]
            },
            addSegments: function (t) {
                return this._add(T.readList(t))
            },
            insertSegments: function (t, e) {
                return this._add(T.readList(e), t)
            },
            removeSegment: function (t) {
                return this.removeSegments(t, t + 1)[0] || null
            },
            removeSegments: function (t, e, i) {
                t = t || 0,
                    e = r.pick(e, this._segments.length);
                var n = this._segments
                    , s = this._curves
                    , a = n.length
                    , o = n.splice(t, e - t)
                    , h = o.length;
                if (!h)
                    return o;
                for (l = 0; l < h; l++) {
                    var u = o[l];
                    u._selection && this._updateSelection(u, u._selection, 0),
                        u._index = u._path = null
                }
                for (var l = t, c = n.length; l < c; l++)
                    n[l]._index = l;
                if (s) {
                    for (var f = t > 0 && e === a + (this._closed ? 1 : 0) ? t - 1 : t, l = (s = s.splice(f, h)).length - 1; l >= 0; l--)
                        s[l]._path = null;
                    i && (o._curves = s.slice(1)),
                        this._adjustCurves(f, f)
                }
                return this._changed(25),
                    o
            },
            clear: "#removeSegments",
            hasHandles: function () {
                for (var t = this._segments, e = 0, i = t.length; e < i; e++)
                    if (t[e].hasHandles())
                        return !0;
                return !1
            },
            clearHandles: function () {
                for (var t = this._segments, e = 0, i = t.length; e < i; e++)
                    t[e].clearHandles()
            },
            getLength: function () {
                if (null == this._length) {
                    for (var t = this.getCurves(), e = 0, i = 0, n = t.length; i < n; i++)
                        e += t[i].getLength();
                    this._length = e
                }
                return this._length
            },
            getArea: function () {
                var t = this._area;
                if (null == t) {
                    var e = this._segments
                        , i = this._closed;
                    t = 0;
                    for (var n = 0, r = e.length; n < r; n++) {
                        var s = n + 1 === r;
                        t += k.getArea(k.getValues(e[n], e[s ? 0 : n + 1], null, s && !i))
                    }
                    this._area = t
                }
                return t
            },
            isFullySelected: function () {
                var t = this._segments.length;
                return this.isSelected() && t > 0 && this._segmentSelection === 7 * t
            },
            setFullySelected: function (t) {
                t && this._selectSegments(!0),
                    this.setSelected(t)
            },
            setSelection: function t(e) {
                1 & e || this._selectSegments(!1),
                    t.base.call(this, e)
            },
            _selectSegments: function (t) {
                var e = this._segments
                    , i = e.length
                    , n = t ? 7 : 0;
                this._segmentSelection = n * i;
                for (var r = 0; r < i; r++)
                    e[r]._selection = n
            },
            _updateSelection: function (t, e, i) {
                t._selection = i,
                    (this._segmentSelection += i - e) > 0 && this.setSelected(!0)
            },
            divideAt: function (t) {
                var e, i = this.getLocationAt(t);
                return i && (e = i.getCurve().divideAt(i.getCurveOffset())) ? e._segment1 : null
            },
            splitAt: function (t) {
                var e = this.getLocationAt(t)
                    , i = e && e.index
                    , n = e && e.time;
                n > 1 - 1e-8 && (i++,
                    n = 0);
                var r = this.getCurves();
                if (i >= 0 && i < r.length) {
                    n >= 1e-8 && r[i++].divideAtTime(n);
                    var s, a = this.removeSegments(i, this._segments.length, !0);
                    return this._closed ? (this.setClosed(!1),
                        s = this) : ((s = new L(w.NO_INSERT)).insertAbove(this),
                            s.copyAttributes(this)),
                        s._add(a, 0),
                        this.addSegment(a[0]),
                        s
                }
                return null
            },
            split: function (t, i) {
                var n, r = i === e ? t : (n = this.getCurves()[t]) && n.getLocationAtTime(i);
                return null != r ? this.splitAt(r) : null
            },
            join: function (t, e) {
                var i = e || 0;
                if (t && t !== this) {
                    var n = t._segments
                        , r = this.getLastSegment()
                        , s = t.getLastSegment();
                    if (!s)
                        return this;
                    r && r._point.isClose(s._point, i) && t.reverse();
                    var a = t.getFirstSegment();
                    if (r && r._point.isClose(a._point, i))
                        r.setHandleOut(a._handleOut),
                            this._add(n.slice(1));
                    else {
                        var o = this.getFirstSegment();
                        o && o._point.isClose(a._point, i) && t.reverse(),
                            s = t.getLastSegment(),
                            o && o._point.isClose(s._point, i) ? (o.setHandleIn(s._handleIn),
                                this._add(n.slice(0, n.length - 1), 0)) : this._add(n.slice())
                    }
                    t._closed && this._add([n[0]]),
                        t.remove()
                }
                var h = this.getFirstSegment()
                    , u = this.getLastSegment();
                return h !== u && h._point.isClose(u._point, i) && (h.setHandleIn(u._handleIn),
                    u.remove(),
                    this.setClosed(!0)),
                    this
            },
            reduce: function (t) {
                for (var e = this.getCurves(), i = t && t.simplify, n = i ? 1e-7 : 0, r = e.length - 1; r >= 0; r--) {
                    var s = e[r];
                    !s.hasHandles() && (!s.hasLength(n) || i && s.isCollinear(s.getNext())) && s.remove()
                }
                return this
            },
            reverse: function () {
                this._segments.reverse();
                for (var t = 0, e = this._segments.length; t < e; t++) {
                    var i = this._segments[t]
                        , n = i._handleIn;
                    i._handleIn = i._handleOut,
                        i._handleOut = n,
                        i._index = t
                }
                this._curves = null,
                    this._changed(9)
            },
            flatten: function (t) {
                for (var e = new B(this, t || .25, 256, !0).parts, i = e.length, n = [], r = 0; r < i; r++)
                    n.push(new T(e[r].curve.slice(0, 2)));
                !this._closed && i > 0 && n.push(new T(e[i - 1].curve.slice(6))),
                    this.setSegments(n)
            },
            simplify: function (t) {
                var e = new D(this).fit(t || 2.5);
                return e && this.setSegments(e),
                    !!e
            },
            smooth: function (t) {
                function i(t, e) {
                    var i = t && t.index;
                    if (null != i) {
                        var r = t.path;
                        if (r && r !== n)
                            throw new Error(t._class + " " + i + " of " + r + " is not part of " + n);
                        e && t instanceof k && i++
                    } else
                        i = "number" == typeof t ? t : e;
                    return Math.min(i < 0 && h ? i % o : i < 0 ? i + o : i, o - 1)
                }
                var n = this
                    , r = t || {}
                    , s = r.type || "asymmetric"
                    , a = this._segments
                    , o = a.length
                    , h = this._closed
                    , u = h && r.from === e && r.to === e
                    , l = i(r.from, 0)
                    , c = i(r.to, o - 1);
                if (l > c)
                    if (h)
                        l -= o;
                    else {
                        var f = l;
                        l = c,
                            c = f
                    }
                if (/^(?:asymmetric|continuous)$/.test(s)) {
                    var d = "asymmetric" === s
                        , _ = Math.min
                        , g = c - l + 1
                        , v = g - 1
                        , p = u ? _(g, 4) : 1
                        , m = p
                        , y = p
                        , w = [];
                    if (h || (m = _(1, l),
                        y = _(1, o - c - 1)),
                        (v += m + y) <= 1)
                        return;
                    for (var x = 0, b = l - m; x <= v; x++,
                        b++)
                        w[x] = a[(b < 0 ? b + o : b) % o]._point;
                    for (var C = w[0]._x + 2 * w[1]._x, S = w[0]._y + 2 * w[1]._y, P = 2, I = v - 1, M = [C], T = [S], z = [P], O = [], A = [], x = 1; x < v; x++) {
                        var L = x < I
                            , N = L ? 1 : d ? 1 : 2
                            , B = L ? 4 : d ? 2 : 7
                            , D = L ? 4 : d ? 3 : 8
                            , j = L ? 2 : d ? 0 : 1
                            , E = N / P;
                        P = z[x] = B - E,
                            C = M[x] = D * w[x]._x + j * w[x + 1]._x - E * C,
                            S = T[x] = D * w[x]._y + j * w[x + 1]._y - E * S
                    }
                    O[I] = M[I] / z[I],
                        A[I] = T[I] / z[I];
                    for (x = v - 2; x >= 0; x--)
                        O[x] = (M[x] - O[x + 1]) / z[x],
                            A[x] = (T[x] - A[x + 1]) / z[x];
                    O[v] = (3 * w[v]._x - O[I]) / 2,
                        A[v] = (3 * w[v]._y - A[I]) / 2;
                    for (var x = m, F = v - y, b = l; x <= F; x++,
                        b++) {
                        var R = a[b < 0 ? b + o : b]
                            , q = R._point
                            , V = O[x] - q._x
                            , H = A[x] - q._y;
                        (u || x < F) && R.setHandleOut(V, H),
                            (u || x > m) && R.setHandleIn(-V, -H)
                    }
                } else
                    for (x = l; x <= c; x++)
                        a[x < 0 ? x + o : x].smooth(r, !u && x === l, !u && x === c)
            },
            toShape: function (t) {
                function i(t, e) {
                    var i = l[t]
                        , n = i.getNext()
                        , r = l[e]
                        , s = r.getNext();
                    return i._handleOut.isZero() && n._handleIn.isZero() && r._handleOut.isZero() && s._handleIn.isZero() && n._point.subtract(i._point).isCollinear(s._point.subtract(r._point))
                }
                function n(t) {
                    var e = l[t]
                        , i = e.getNext()
                        , n = e._handleOut
                        , r = i._handleIn;
                    if (n.isOrthogonal(r)) {
                        var s = e._point
                            , a = i._point
                            , o = new m(s, n, !0).intersect(new m(a, r, !0), !0);
                        return o && u.isZero(n.getLength() / o.subtract(s).getLength() - .5522847498307936) && u.isZero(r.getLength() / o.subtract(a).getLength() - .5522847498307936)
                    }
                    return !1
                }
                function r(t, e) {
                    return l[t]._point.getDistance(l[e]._point)
                }
                if (!this._closed)
                    return null;
                var s, a, o, h, l = this._segments;
                if (!this.hasHandles() && 4 === l.length && i(0, 2) && i(1, 3) && function (t) {
                    var e = l[t]
                        , i = e.getPrevious()
                        , n = e.getNext();
                    return i._handleOut.isZero() && e._handleIn.isZero() && e._handleOut.isZero() && n._handleIn.isZero() && e._point.subtract(i._point).isOrthogonal(n._point.subtract(e._point))
                }(1) ? (s = C.Rectangle,
                    a = new d(r(0, 3), r(0, 1)),
                    h = l[1]._point.add(l[2]._point).divide(2)) : 8 === l.length && n(0) && n(2) && n(4) && n(6) && i(1, 5) && i(3, 7) ? (s = C.Rectangle,
                        o = (a = new d(r(1, 6), r(0, 3))).subtract(new d(r(0, 7), r(1, 2))).divide(2),
                        h = l[3]._point.add(l[4]._point).divide(2)) : 4 === l.length && n(0) && n(1) && n(2) && n(3) && (u.isZero(r(0, 2) - r(1, 3)) ? (s = C.Circle,
                            o = r(0, 2) / 2) : (s = C.Ellipse,
                                o = new d(r(2, 0) / 2, r(3, 1) / 2)),
                            h = l[1]._point),
                    s) {
                    var c = this.getPosition(!0)
                        , f = new s({
                            center: c,
                            size: a,
                            radius: o,
                            insert: !1
                        });
                    return f.copyAttributes(this, !0),
                        f._matrix.prepend(this._matrix),
                        f.rotate(h.subtract(c).getAngle() + 90),
                        (t === e || t) && f.insertAbove(this),
                        f
                }
                return null
            },
            toPath: "#clone",
            compare: function t(e) {
                if (!e || e instanceof N)
                    return t.base.call(this, e);
                var i = this.getCurves()
                    , n = e.getCurves()
                    , r = i.length
                    , s = n.length;
                if (!r || !s)
                    return r == s;
                for (var a, o, h = i[0].getValues(), u = [], l = 0, c = 0, f = 0; f < s; f++) {
                    g = n[f].getValues();
                    if (u.push(g),
                        v = k.getOverlaps(h, g)) {
                        a = !f && v[0][0] > 0 ? s - 1 : f,
                            o = v[0][1];
                        break
                    }
                }
                for (var d, _ = Math.abs, g = u[a]; h && g;) {
                    var v = k.getOverlaps(h, g);
                    if (v && _(v[0][0] - c) < 1e-8) {
                        1 === (c = v[1][0]) && (h = ++l < r ? i[l].getValues() : null,
                            c = 0);
                        var p = v[0][1];
                        if (_(p - o) < 1e-8) {
                            if (d || (d = [a, p]),
                                1 === (o = v[1][1]) && (++a >= s && (a = 0),
                                    g = u[a] || n[a].getValues(),
                                    o = 0),
                                !h)
                                return d[0] === a && d[1] === o;
                            continue
                        }
                    }
                    break
                }
                return !1
            },
            _hitTestSelf: function (t, e, i, n) {
                function r(e, i) {
                    return t.subtract(e).divide(i).length <= 1
                }
                function s(t, i, n) {
                    if (!e.selected || i.isSelected()) {
                        var s = t._point;
                        if (i !== s && (i = i.add(s)),
                            r(i, x))
                            return new M(n, g, {
                                segment: t,
                                point: i
                            })
                    }
                }
                function a(t, i) {
                    return (i || e.segments) && s(t, t._point, "segment") || !i && e.handles && (s(t, t._handleIn, "handle-in") || s(t, t._handleOut, "handle-out"))
                }
                function o(t) {
                    f.add(t)
                }
                function h(e) {
                    var i = y || e._index > 0 && e._index < m - 1;
                    if ("round" === (i ? u : l))
                        return r(e._point, x);
                    if (f = new L({
                        internal: !0,
                        closed: !0
                    }),
                        i ? e.isSmooth() || L._addBevelJoin(e, u, P, c, null, n, o, !0) : "square" === l && L._addSquareCap(e, l, P, null, n, o, !0),
                        !f.isEmpty()) {
                        var s;
                        return f.contains(t) || (s = f.getNearestLocation(t)) && r(s.getPoint(), w)
                    }
                }
                var u, l, c, f, d, _, g = this, v = this.getStyle(), p = this._segments, m = p.length, y = this._closed, w = e._tolerancePadding, x = w, b = e.stroke && v.hasStroke(), C = e.fill && v.hasFill(), S = e.curves, P = b ? v.getStrokeWidth() / 2 : C && e.tolerance > 0 || S ? 0 : null;
                if (null !== P && (P > 0 ? (u = v.getStrokeJoin(),
                    l = v.getStrokeCap(),
                    c = v.getMiterLimit(),
                    x = x.add(L._getStrokePadding(P, n))) : u = l = "round"),
                    !e.ends || e.segments || y) {
                    if (e.segments || e.handles)
                        for (T = 0; T < m; T++)
                            if (_ = a(p[T]))
                                return _
                } else if (_ = a(p[0], !0) || a(p[m - 1], !0))
                    return _;
                if (null !== P) {
                    if (d = this.getNearestLocation(t)) {
                        var I = d.getTime();
                        0 === I || 1 === I && m > 1 ? h(d.getSegment()) || (d = null) : r(d.getPoint(), x) || (d = null)
                    }
                    if (!d && "miter" === u && m > 1)
                        for (var T = 0; T < m; T++) {
                            var z = p[T];
                            if (t.getDistance(z._point) <= c * P && h(z)) {
                                d = z.getLocation();
                                break
                            }
                        }
                }
                return !d && C && this._contains(t) || d && !b && !S ? new M("fill", this) : d ? new M(b ? "stroke" : "curve", this, {
                    location: d,
                    point: d.getPoint()
                }) : null
            }
        }, r.each(k._evaluateMethods, function (t) {
            this[t + "At"] = function (e) {
                var i = this.getLocationAt(e);
                return i && i[t]()
            }
        }, {
            beans: !1,
            getLocationOf: function () {
                for (var t = c.read(arguments), e = this.getCurves(), i = 0, n = e.length; i < n; i++) {
                    var r = e[i].getLocationOf(t);
                    if (r)
                        return r
                }
                return null
            },
            getOffsetOf: function () {
                var t = this.getLocationOf.apply(this, arguments);
                return t ? t.getOffset() : null
            },
            getLocationAt: function (t) {
                if ("number" == typeof t) {
                    for (var e = this.getCurves(), i = 0, n = 0, r = e.length; n < r; n++) {
                        var s = i
                            , a = e[n];
                        if ((i += a.getLength()) > t)
                            return a.getLocationAt(t - s)
                    }
                    if (e.length > 0 && t <= this.getLength())
                        return new O(e[e.length - 1], 1)
                } else if (t && t.getPath && t.getPath() === this)
                    return t;
                return null
            }
        }), new function () {
            function t(t, e, i, n) {
                function r(e) {
                    var i = h[e]
                        , n = h[e + 1];
                    s == i && a == n || (t.beginPath(),
                        t.moveTo(s, a),
                        t.lineTo(i, n),
                        t.stroke(),
                        t.beginPath(),
                        t.arc(i, n, o, 0, 2 * Math.PI, !0),
                        t.fill())
                }
                for (var s, a, o = n / 2, h = new Array(6), u = 0, l = e.length; u < l; u++) {
                    var c = e[u]
                        , f = c._selection;
                    if (c._transformCoordinates(i, h),
                        s = h[0],
                        a = h[1],
                        2 & f && r(2),
                        4 & f && r(4),
                        t.fillRect(s - o, a - o, n, n),
                        !(1 & f)) {
                        var d = t.fillStyle;
                        t.fillStyle = "#ffffff",
                            t.fillRect(s - o + 1, a - o + 1, n - 2, n - 2),
                            t.fillStyle = d
                    }
                }
            }
            function e(t, e, i) {
                function n(e) {
                    if (i)
                        e._transformCoordinates(i, _),
                            r = _[0],
                            s = _[1];
                    else {
                        var n = e._point;
                        r = n._x,
                            s = n._y
                    }
                    if (g)
                        t.moveTo(r, s),
                            g = !1;
                    else {
                        if (i)
                            h = _[2],
                                u = _[3];
                        else {
                            f = e._handleIn;
                            h = r + f._x,
                                u = s + f._y
                        }
                        h === r && u === s && l === a && c === o ? t.lineTo(r, s) : t.bezierCurveTo(l, c, h, u, r, s)
                    }
                    if (a = r,
                        o = s,
                        i)
                        l = _[4],
                            c = _[5];
                    else {
                        var f = e._handleOut;
                        l = a + f._x,
                            c = o + f._y
                    }
                }
                for (var r, s, a, o, h, u, l, c, f = e._segments, d = f.length, _ = new Array(6), g = !0, v = 0; v < d; v++)
                    n(f[v]);
                e._closed && d > 0 && n(f[0])
            }
            return {
                _draw: function (t, i, n, r) {
                    function s(t) {
                        return c[(t % f + f) % f]
                    }
                    var a = i.dontStart
                        , o = i.dontFinish || i.clip
                        , h = this.getStyle()
                        , u = h.hasFill()
                        , l = h.hasStroke()
                        , c = h.getDashArray()
                        , f = !paper.support.nativeDash && l && c && c.length;
                    if (a || t.beginPath(),
                        (u || l && !f || o) && (e(t, this, r),
                            this._closed && t.closePath()),
                        !o && (u || l) && (this._setStyles(t, i, n),
                            u && (t.fill(h.getFillRule()),
                                t.shadowColor = "rgba(0,0,0,0)"),
                            l)) {
                        if (f) {
                            a || t.beginPath();
                            var d, _ = new B(this, .25, 32, !1, r), g = _.length, v = -h.getDashOffset(), p = 0;
                            for (v %= g; v > 0;)
                                v -= s(p--) + s(p--);
                            for (; v < g;)
                                d = v + s(p++),
                                    (v > 0 || d > 0) && _.drawPart(t, Math.max(v, 0), Math.max(d, 0)),
                                    v = d + s(p++)
                        }
                        t.stroke()
                    }
                },
                _drawSelected: function (i, n) {
                    i.beginPath(),
                        e(i, this, n),
                        i.stroke(),
                        t(i, this._segments, n, paper.settings.handleSize)
                }
            }
        }
            , new function () {
                function t(t) {
                    var e = t._segments;
                    if (!e.length)
                        throw new Error("Use a moveTo() command first");
                    return e[e.length - 1]
                }
                return {
                    moveTo: function () {
                        var t = this._segments;
                        1 === t.length && this.removeSegment(0),
                            t.length || this._add([new T(c.read(arguments))])
                    },
                    moveBy: function () {
                        throw new Error("moveBy() is unsupported on Path items.")
                    },
                    lineTo: function () {
                        this._add([new T(c.read(arguments))])
                    },
                    cubicCurveTo: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = c.read(arguments)
                            , r = t(this);
                        r.setHandleOut(e.subtract(r._point)),
                            this._add([new T(n, i.subtract(n))])
                    },
                    quadraticCurveTo: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = t(this)._point;
                        this.cubicCurveTo(e.add(n.subtract(e).multiply(1 / 3)), e.add(i.subtract(e).multiply(1 / 3)), i)
                    },
                    curveTo: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = r.pick(r.read(arguments), .5)
                            , s = 1 - n
                            , a = t(this)._point
                            , o = e.subtract(a.multiply(s * s)).subtract(i.multiply(n * n)).divide(2 * n * s);
                        if (o.isNaN())
                            throw new Error("Cannot put a curve through points with parameter = " + n);
                        this.quadraticCurveTo(o, i)
                    },
                    arcTo: function () {
                        var e, i, n, s, a = Math.abs, o = Math.sqrt, h = t(this), l = h._point, f = c.read(arguments), _ = r.peek(arguments);
                        if ("boolean" == typeof (x = r.pick(_, !0)))
                            var g = (C = l.add(f).divide(2)).add(C.subtract(l).rotate(x ? -90 : 90));
                        else if (r.remain(arguments) <= 2)
                            g = f,
                                f = c.read(arguments);
                        else {
                            var v = d.read(arguments)
                                , y = u.isZero;
                            if (y(v.width) || y(v.height))
                                return this.lineTo(f);
                            var w = r.read(arguments)
                                , x = !!r.read(arguments)
                                , b = !!r.read(arguments)
                                , C = l.add(f).divide(2)
                                , S = (W = l.subtract(C).rotate(-w)).x
                                , P = W.y
                                , I = a(v.width)
                                , M = a(v.height)
                                , z = I * I
                                , k = M * M
                                , O = S * S
                                , A = P * P
                                , L = o(O / z + A / k);
                            if (L > 1 && (z = (I *= L) * I,
                                k = (M *= L) * M),
                                L = (z * k - z * A - k * O) / (z * A + k * O),
                                a(L) < 1e-12 && (L = 0),
                                L < 0)
                                throw new Error("Cannot create an arc with the given arguments");
                            e = new c(I * P / M, -M * S / I).multiply((b === x ? -1 : 1) * o(L)).rotate(w).add(C),
                                i = (n = (s = (new p).translate(e).rotate(w).scale(I, M))._inverseTransform(l)).getDirectedAngle(s._inverseTransform(f)),
                                !x && i > 0 ? i -= 360 : x && i < 0 && (i += 360)
                        }
                        if (g) {
                            var N = new m(l.add(g).divide(2), g.subtract(l).rotate(90), !0)
                                , B = new m(g.add(f).divide(2), f.subtract(g).rotate(90), !0)
                                , D = new m(l, f)
                                , j = D.getSide(g);
                            if (!(e = N.intersect(B, !0))) {
                                if (!j)
                                    return this.lineTo(f);
                                throw new Error("Cannot create an arc with the given arguments")
                            }
                            i = (n = l.subtract(e)).getDirectedAngle(f.subtract(e));
                            var E = D.getSide(e);
                            0 === E ? i = j * a(i) : j === E && (i += i < 0 ? 360 : -360)
                        }
                        for (var F = a(i), R = F >= 360 ? 4 : Math.ceil((F - 1e-7) / 90), q = i / R, V = q * Math.PI / 360, H = 4 / 3 * Math.sin(V) / (1 + Math.cos(V)), Z = [], U = 0; U <= R; U++) {
                            var W = f
                                , G = null;
                            if (U < R && (G = n.rotate(90).multiply(H),
                                s ? (W = s._transformPoint(n),
                                    G = s._transformPoint(n.add(G)).subtract(W)) : W = e.add(n)),
                                U) {
                                var J = n.rotate(-90).multiply(H);
                                s && (J = s._transformPoint(n.add(J)).subtract(W)),
                                    Z.push(new T(W, J, G))
                            } else
                                h.setHandleOut(G);
                            n = n.rotate(q)
                        }
                        this._add(Z)
                    },
                    lineBy: function () {
                        var e = c.read(arguments)
                            , i = t(this)._point;
                        this.lineTo(i.add(e))
                    },
                    curveBy: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = r.read(arguments)
                            , s = t(this)._point;
                        this.curveTo(s.add(e), s.add(i), n)
                    },
                    cubicCurveBy: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = c.read(arguments)
                            , r = t(this)._point;
                        this.cubicCurveTo(r.add(e), r.add(i), r.add(n))
                    },
                    quadraticCurveBy: function () {
                        var e = c.read(arguments)
                            , i = c.read(arguments)
                            , n = t(this)._point;
                        this.quadraticCurveTo(n.add(e), n.add(i))
                    },
                    arcBy: function () {
                        var e = t(this)._point
                            , i = e.add(c.read(arguments))
                            , n = r.pick(r.peek(arguments), !0);
                        "boolean" == typeof n ? this.arcTo(i, n) : this.arcTo(i, e.add(c.read(arguments)))
                    },
                    closePath: function (t) {
                        this.setClosed(!0),
                            this.join(this, t)
                    }
                }
            }
            , {
                _getBounds: function (t, e) {
                    var i = e.handle ? "getHandleBounds" : e.stroke ? "getStrokeBounds" : "getBounds";
                    return L[i](this._segments, this._closed, this, t, e)
                },
                statics: {
                    getBounds: function (t, e, i, n, r, s) {
                        function a(t) {
                            t._transformCoordinates(n, h);
                            for (var e = 0; e < 2; e++)
                                k._addBounds(u[e], u[e + 4], h[e + 2], h[e], e, s ? s[e] : 0, l, c, f);
                            var i = u;
                            u = h,
                                h = i
                        }
                        var o = t[0];
                        if (!o)
                            return new g;
                        for (var h = new Array(6), u = o._transformCoordinates(n, new Array(6)), l = u.slice(0, 2), c = l.slice(), f = new Array(2), d = 1, _ = t.length; d < _; d++)
                            a(t[d]);
                        return e && a(o),
                            new g(l[0], l[1], c[0] - l[0], c[1] - l[1])
                    },
                    getStrokeBounds: function (t, e, i, n, r) {
                        function s(t) {
                            v = v.include(t)
                        }
                        function a(t) {
                            v = v.unite(x.setCenter(t._point.transform(n)))
                        }
                        function o(t, e) {
                            "round" === e || t.isSmooth() ? a(t) : L._addBevelJoin(t, e, p, w, n, f, s)
                        }
                        function h(t, e) {
                            "round" === e ? a(t) : L._addSquareCap(t, e, p, n, f, s)
                        }
                        var u = i.getStyle()
                            , l = u.hasStroke()
                            , c = u.getStrokeWidth()
                            , f = l && i._getStrokeMatrix(n, r)
                            , _ = l && L._getStrokePadding(c, f)
                            , v = L.getBounds(t, e, i, n, r, _);
                        if (!l)
                            return v;
                        for (var p = c / 2, m = u.getStrokeJoin(), y = u.getStrokeCap(), w = u.getMiterLimit(), x = new g(new d(_)), b = t.length - (e ? 0 : 1), C = 1; C < b; C++)
                            o(t[C], m);
                        return e ? o(t[0], m) : b > 0 && (h(t[0], y),
                            h(t[t.length - 1], y)),
                            v
                    },
                    _getStrokePadding: function (t, e) {
                        if (!e)
                            return [t, t];
                        var i = new c(t, 0).transform(e)
                            , n = new c(0, t).transform(e)
                            , r = i.getAngleInRadians()
                            , s = i.getLength()
                            , a = n.getLength()
                            , o = Math.sin(r)
                            , h = Math.cos(r)
                            , u = Math.tan(r)
                            , l = Math.atan2(a * u, s)
                            , f = Math.atan2(a, u * s);
                        return [Math.abs(s * Math.cos(l) * h + a * Math.sin(l) * o), Math.abs(a * Math.sin(f) * h + s * Math.cos(f) * o)]
                    },
                    _addBevelJoin: function (t, e, i, n, r, s, a, o) {
                        var h = t.getCurve()
                            , u = h.getPrevious()
                            , l = h.getPoint1().transform(r)
                            , f = u.getNormalAtTime(1).multiply(i).transform(s)
                            , d = h.getNormalAtTime(0).multiply(i).transform(s);
                        if (f.getDirectedAngle(d) < 0 && (f = f.negate(),
                            d = d.negate()),
                            o && a(l),
                            a(l.add(f)),
                            "miter" === e) {
                            var _ = new m(l.add(f), new c(-f.y, f.x), !0).intersect(new m(l.add(d), new c(-d.y, d.x), !0), !0);
                            _ && l.getDistance(_) <= n * i && a(_)
                        }
                        a(l.add(d))
                    },
                    _addSquareCap: function (t, e, i, n, r, s, a) {
                        var o = t._point.transform(n)
                            , h = t.getLocation()
                            , u = h.getNormal().multiply(0 === h.getTime() ? i : -i).transform(r);
                        "square" === e && (a && (s(o.subtract(u)),
                            s(o.add(u))),
                            o = o.add(u.rotate(-90))),
                            s(o.add(u)),
                            s(o.subtract(u))
                    },
                    getHandleBounds: function (t, e, i, n, r) {
                        var s, a, o = i.getStyle();
                        if (r.stroke && o.hasStroke()) {
                            var h = i._getStrokeMatrix(n, r)
                                , u = o.getStrokeWidth() / 2
                                , l = u;
                            "miter" === o.getStrokeJoin() && (l = u * o.getMiterLimit()),
                                "square" === o.getStrokeCap() && (l = Math.max(l, u * Math.SQRT2)),
                                s = L._getStrokePadding(u, h),
                                a = L._getStrokePadding(l, h)
                        }
                        for (var c = new Array(6), f = 1 / 0, d = -f, _ = f, v = d, p = 0, m = t.length; p < m; p++) {
                            t[p]._transformCoordinates(n, c);
                            for (var y = 0; y < 6; y += 2) {
                                var w = y ? s : a
                                    , x = w ? w[0] : 0
                                    , b = w ? w[1] : 0
                                    , C = c[y]
                                    , S = c[y + 1]
                                    , P = C - x
                                    , I = C + x
                                    , M = S - b
                                    , T = S + b;
                                P < f && (f = P),
                                    I > d && (d = I),
                                    M < _ && (_ = M),
                                    T > v && (v = T)
                            }
                        }
                        return new g(f, _, d - f, v - _)
                    }
                }
            });
    L.inject({
        statics: new function () {
            function t(t, e, i) {
                var n = r.getNamed(i)
                    , s = new L(n && 0 == n.insert && w.NO_INSERT);
                return s._add(t),
                    s._closed = e,
                    s.set(n, {
                        insert: !0
                    })
            }
            function e(e, i, r) {
                for (var s = new Array(4), a = 0; a < 4; a++) {
                    var o = n[a];
                    s[a] = new T(o._point.multiply(i).add(e), o._handleIn.multiply(i), o._handleOut.multiply(i))
                }
                return t(s, !0, r)
            }
            var i = .5522847498307936
                , n = [new T([-1, 0], [0, i], [0, -i]), new T([0, -1], [-i, 0], [i, 0]), new T([1, 0], [0, -i], [0, i]), new T([0, 1], [i, 0], [-i, 0])];
            return {
                Line: function () {
                    return t([new T(c.readNamed(arguments, "from")), new T(c.readNamed(arguments, "to"))], !1, arguments)
                },
                Circle: function () {
                    var t = c.readNamed(arguments, "center")
                        , i = r.readNamed(arguments, "radius");
                    return e(t, new d(i), arguments)
                },
                Rectangle: function () {
                    var e, n = g.readNamed(arguments, "rectangle"), r = d.readNamed(arguments, "radius", 0, {
                        readNull: !0
                    }), s = n.getBottomLeft(!0), a = n.getTopLeft(!0), o = n.getTopRight(!0), h = n.getBottomRight(!0);
                    if (!r || r.isZero())
                        e = [new T(s), new T(a), new T(o), new T(h)];
                    else {
                        var u = (r = d.min(r, n.getSize(!0).divide(2))).width
                            , l = r.height
                            , c = u * i
                            , f = l * i;
                        e = [new T(s.add(u, 0), null, [-c, 0]), new T(s.subtract(0, l), [0, f]), new T(a.add(0, l), null, [0, -f]), new T(a.add(u, 0), [-c, 0], null), new T(o.subtract(u, 0), null, [c, 0]), new T(o.add(0, l), [0, -f], null), new T(h.subtract(0, l), null, [0, f]), new T(h.subtract(u, 0), [c, 0])]
                    }
                    return t(e, !0, arguments)
                },
                RoundRectangle: "#Rectangle",
                Ellipse: function () {
                    var t = C._readEllipse(arguments);
                    return e(t.center, t.radius, arguments)
                },
                Oval: "#Ellipse",
                Arc: function () {
                    var t = c.readNamed(arguments, "from")
                        , e = c.readNamed(arguments, "through")
                        , i = c.readNamed(arguments, "to")
                        , n = r.getNamed(arguments)
                        , s = new L(n && 0 == n.insert && w.NO_INSERT);
                    return s.moveTo(t),
                        s.arcTo(e, i),
                        s.set(n)
                },
                RegularPolygon: function () {
                    for (var e = c.readNamed(arguments, "center"), i = r.readNamed(arguments, "sides"), n = r.readNamed(arguments, "radius"), s = 360 / i, a = i % 3 == 0, o = new c(0, a ? -n : n), h = a ? -1 : .5, u = new Array(i), l = 0; l < i; l++)
                        u[l] = new T(e.add(o.rotate((l + h) * s)));
                    return t(u, !0, arguments)
                },
                Star: function () {
                    for (var e = c.readNamed(arguments, "center"), i = 2 * r.readNamed(arguments, "points"), n = r.readNamed(arguments, "radius1"), s = r.readNamed(arguments, "radius2"), a = 360 / i, o = new c(0, -1), h = new Array(i), u = 0; u < i; u++)
                        h[u] = new T(e.add(o.rotate(a * u).multiply(u % 2 ? s : n)));
                    return t(h, !0, arguments)
                }
            }
        }
    });
    var N = A.extend({
        _class: "CompoundPath",
        _serializeFields: {
            children: []
        },
        beans: !0,
        initialize: function (t) {
            this._children = [],
                this._namedChildren = {},
                this._initialize(t) || ("string" == typeof t ? this.setPathData(t) : this.addChildren(Array.isArray(t) ? t : arguments))
        },
        insertChildren: function t(e, i) {
            var n = i
                , s = n[0];
            s && "number" == typeof s[0] && (n = [n]);
            for (var a = i.length - 1; a >= 0; a--) {
                var o = n[a];
                n !== i || o instanceof L || (n = r.slice(n)),
                    Array.isArray(o) ? n[a] = new L({
                        segments: o,
                        insert: !1
                    }) : o instanceof N && (n.splice.apply(n, [a, 1].concat(o.removeChildren())),
                        o.remove())
            }
            return t.base.call(this, e, n)
        },
        reduce: function t(e) {
            for (var i = this._children, n = i.length - 1; n >= 0; n--)
                (r = i[n].reduce(e)).isEmpty() && r.remove();
            if (!i.length) {
                var r = new L(w.NO_INSERT);
                return r.copyAttributes(this),
                    r.insertAbove(this),
                    this.remove(),
                    r
            }
            return t.base.call(this)
        },
        isClosed: function () {
            for (var t = this._children, e = 0, i = t.length; e < i; e++)
                if (!t[e]._closed)
                    return !1;
            return !0
        },
        setClosed: function (t) {
            for (var e = this._children, i = 0, n = e.length; i < n; i++)
                e[i].setClosed(t)
        },
        getFirstSegment: function () {
            var t = this.getFirstChild();
            return t && t.getFirstSegment()
        },
        getLastSegment: function () {
            var t = this.getLastChild();
            return t && t.getLastSegment()
        },
        getCurves: function () {
            for (var t = this._children, e = [], i = 0, n = t.length; i < n; i++)
                e.push.apply(e, t[i].getCurves());
            return e
        },
        getFirstCurve: function () {
            var t = this.getFirstChild();
            return t && t.getFirstCurve()
        },
        getLastCurve: function () {
            var t = this.getLastChild();
            return t && t.getLastCurve()
        },
        getArea: function () {
            for (var t = this._children, e = 0, i = 0, n = t.length; i < n; i++)
                e += t[i].getArea();
            return e
        },
        getLength: function () {
            for (var t = this._children, e = 0, i = 0, n = t.length; i < n; i++)
                e += t[i].getLength();
            return e
        },
        getPathData: function (t, e) {
            for (var i = this._children, n = [], r = 0, s = i.length; r < s; r++) {
                var a = i[r]
                    , o = a._matrix;
                n.push(a.getPathData(t && !o.isIdentity() ? t.appended(o) : t, e))
            }
            return n.join("")
        },
        _hitTestChildren: function t(e, i, n) {
            return t.base.call(this, e, i.class === L || "path" === i.type ? i : r.set({}, i, {
                fill: !1
            }), n)
        },
        _draw: function (t, e, i, n) {
            var r = this._children;
            if (r.length) {
                e = e.extend({
                    dontStart: !0,
                    dontFinish: !0
                }),
                    t.beginPath();
                for (var s = 0, a = r.length; s < a; s++)
                    r[s].draw(t, e, n);
                if (!e.clip) {
                    this._setStyles(t, e, i);
                    var o = this._style;
                    o.hasFill() && (t.fill(o.getFillRule()),
                        t.shadowColor = "rgba(0,0,0,0)"),
                        o.hasStroke() && t.stroke()
                }
            }
        },
        _drawSelected: function (t, e, i) {
            for (var n = this._children, r = 0, s = n.length; r < s; r++) {
                var a = n[r]
                    , o = a._matrix;
                i[a._id] || a._drawSelected(t, o.isIdentity() ? e : e.appended(o))
            }
        }
    }, new function () {
        function t(t, e) {
            var i = t._children;
            if (e && !i.length)
                throw new Error("Use a moveTo() command first");
            return i[i.length - 1]
        }
        return r.each(["lineTo", "cubicCurveTo", "quadraticCurveTo", "curveTo", "arcTo", "lineBy", "cubicCurveBy", "quadraticCurveBy", "curveBy", "arcBy"], function (e) {
            this[e] = function () {
                var i = t(this, !0);
                i[e].apply(i, arguments)
            }
        }, {
            moveTo: function () {
                var e = t(this)
                    , i = e && e.isEmpty() ? e : new L(w.NO_INSERT);
                i !== e && this.addChild(i),
                    i.moveTo.apply(i, arguments)
            },
            moveBy: function () {
                var e = t(this, !0)
                    , i = e && e.getLastSegment()
                    , n = c.read(arguments);
                this.moveTo(i ? n.add(i._point) : n)
            },
            closePath: function (e) {
                t(this, !0).closePath(e)
            }
        })
    }
        , r.each(["reverse", "flatten", "simplify", "smooth"], function (t) {
            this[t] = function (e) {
                for (var i, n = this._children, r = 0, s = n.length; r < s; r++)
                    i = n[r][t](e) || i;
                return i
            }
        }, {}));
    A.inject(new function () {
        function t(t, e) {
            var i = t.clone(!1).reduce({
                simplify: !0
            }).transform(null, !0, !0);
            return e ? i.resolveCrossings().reorient("nonzero" === i.getFillRule(), !0) : i
        }
        function i(t, e, i, n, r) {
            var s = new N(w.NO_INSERT);
            return s.addChildren(t, !0),
                s = s.reduce({
                    simplify: e
                }),
                r && 0 == r.insert || s.insertAbove(n && i.isSibling(n) && i.getIndex() < n.getIndex() ? n : i),
                s.copyAttributes(i, !0),
                s
        }
        function n(e, n, r, a) {
            function o(t) {
                for (var e = 0, i = t.length; e < i; e++) {
                    var n = t[e];
                    w.push.apply(w, n._segments),
                        x.push.apply(x, n.getCurves()),
                        n._overlapsOnly = !0
                }
            }
            if (a && (0 == a.trace || a.stroke) && /^(subtract|intersect)$/.test(r))
                return s(e, n, r);
            var u = t(e, !0)
                , c = n && e !== n && t(n, !0)
                , _ = p[r];
            _[r] = !0,
                c && (_.subtract || _.exclude) ^ c.isClockwise() ^ u.isClockwise() && c.reverse();
            var g, v = l(O.expand(u.getCrossings(c))), m = u._children || [u], y = c && (c._children || [c]), w = [], x = [];
            if (v.length) {
                o(m),
                    y && o(y);
                for (var b = 0, C = v.length; b < C; b++)
                    f(v[b]._segment, u, c, x, _);
                for (var b = 0, C = w.length; b < C; b++) {
                    var S = w[b]
                        , P = S._intersection;
                    S._winding || f(S, u, c, x, _),
                        P && P._overlap || (S._path._overlapsOnly = !1)
                }
                g = d(w, _)
            } else
                g = h(y ? m.concat(y) : m.slice(), function (t) {
                    return !!_[t]
                });
            return i(g, !0, e, n, a)
        }
        function s(e, n, r) {
            function s(t) {
                if (!c[t._id] && (l || o.contains(t.getPointAt(t.getLength() / 2)) ^ u))
                    return f.unshift(t),
                        c[t._id] = !0
            }
            for (var a = t(e), o = t(n), h = a.getCrossings(o), u = "subtract" === r, l = "divide" === r, c = {}, f = [], d = h.length - 1; d >= 0; d--) {
                var _ = h[d].split();
                _ && (s(_) && _.getFirstSegment().setHandleIn(0, 0),
                    a.getLastSegment().setHandleOut(0, 0))
            }
            return s(a),
                i(f, !1, e, n)
        }
        function a(t, e) {
            for (var i = t; i;) {
                if (i === e)
                    return;
                i = i._previous
            }
            for (; t._next && t._next !== e;)
                t = t._next;
            if (!t._next) {
                for (; e._previous;)
                    e = e._previous;
                t._next = e,
                    e._previous = t
            }
        }
        function o(t) {
            for (var e = t.length - 1; e >= 0; e--)
                t[e].clearHandles()
        }
        function h(t, e, i) {
            var n = t && t.length;
            if (n) {
                var s = r.each(t, function (t, e) {
                    this[t._id] = {
                        container: null,
                        winding: t.isClockwise() ? 1 : -1,
                        index: e
                    }
                }, {})
                    , a = t.slice().sort(function (t, e) {
                        return v(e.getArea()) - v(t.getArea())
                    })
                    , o = a[0];
                null == i && (i = o.isClockwise());
                for (var h = 0; h < n; h++) {
                    for (var u = a[h], l = s[u._id], c = u.getInteriorPoint(), f = 0, d = h - 1; d >= 0; d--) {
                        var _ = a[d];
                        if (_.contains(c)) {
                            var g = s[_._id];
                            f = g.winding,
                                l.winding += f,
                                l.container = g.exclude ? g.container : _;
                            break
                        }
                    }
                    if (e(l.winding) === e(f))
                        l.exclude = !0,
                            t[l.index] = null;
                    else {
                        var p = l.container;
                        u.setClockwise(p ? !p.isClockwise() : i)
                    }
                }
            }
            return t
        }
        function l(t, e, i) {
            function n(t) {
                return t._path._id + "." + t._segment1._index
            }
            for (var r, s, h, u = e && [], l = !1, c = i || [], f = i && {}, d = (i && i.length) - 1; d >= 0; d--)
                (y = i[d])._path && (f[n(y)] = !0);
            for (d = t.length - 1; d >= 0; d--) {
                var _, g = t[d], v = g._time, p = v, m = e && !e(g), y = g._curve;
                if (y && (y !== s ? (l = !y.hasHandles() || f && f[n(y)],
                    r = [],
                    h = null,
                    s = y) : h >= 1e-8 && (v /= h)),
                    m)
                    r && r.push(g);
                else {
                    if (e && u.unshift(g),
                        h = p,
                        v < 1e-8)
                        _ = y._segment1;
                    else if (v > 1 - 1e-8)
                        _ = y._segment2;
                    else {
                        var w = y.divideAtTime(v, !0);
                        l && c.push(y, w),
                            _ = w._segment1;
                        for (var x = r.length - 1; x >= 0; x--) {
                            var b = r[x];
                            b._time = (b._time - v) / (1 - v)
                        }
                    }
                    g._setSegment(_);
                    var C = _._intersection
                        , S = g._intersection;
                    if (C) {
                        a(C, S);
                        for (var P = C; P;)
                            a(P._intersection, C),
                                P = P._next
                    } else
                        _._intersection = S
                }
            }
            return i || o(c),
                u || t
        }
        function c(t, e, i, n, r) {
            function s(s) {
                var a = s[l + 0]
                    , h = s[l + 6];
                if (!(p < _(a, h) || p > g(a, h))) {
                    var f = s[u + 0]
                        , v = s[u + 2]
                        , x = s[u + 4]
                        , b = s[u + 6];
                    if (a !== h) {
                        var I = p === a ? 0 : p === h ? 1 : y > g(f, v, x, b) || w < _(f, v, x, b) ? 1 : k.solveCubic(s, l, p, T, 0, 1) > 0 ? T[0] : 1
                            , z = 0 === I ? f : 1 === I ? b : k.getPoint(s, I)[i ? "y" : "x"]
                            , O = a > h ? 1 : -1
                            , A = o[l] > o[l + 6] ? 1 : -1
                            , L = o[u + 6];
                        return p !== a ? (z < y ? C += O : z > w ? S += O : P = !0,
                            z > d - m && z < d + m && (M /= 2)) : (O !== A ? f < y ? C += O : f > w && (S += O) : f != L && (L < w && z > w ? (S += O,
                                P = !0) : L > y && z < y && (C += O,
                                    P = !0)),
                                M = 0),
                            o = s,
                            !r && z > y && z < w && 0 === k.getTangent(s, I)[i ? "x" : "y"] && c(t, e, !i, n, !0)
                    }
                    (f < w && b > y || b < w && f > y) && (P = !0)
                }
            }
            function a(t) {
                var e = t[l + 0]
                    , n = t[l + 2]
                    , r = t[l + 4]
                    , a = t[l + 6];
                if (p <= g(e, n, r, a) && p >= _(e, n, r, a))
                    for (var o, h = t[u + 0], c = t[u + 2], f = t[u + 4], d = t[u + 6], v = y > g(h, c, f, d) || w < _(h, c, f, d) ? [t] : k.getMonoCurves(t, i), m = 0, x = v.length; m < x; m++)
                        if (o = s(v[m]))
                            return o
            }
            for (var o, h, u = i ? 1 : 0, l = 1 ^ u, f = [t.x, t.y], d = f[u], p = f[l], m = 1e-6, y = d - 1e-9, w = d + 1e-9, x = 0, b = 0, C = 0, S = 0, P = !1, I = !1, M = 1, T = [], z = 0, O = e.length; z < O; z++) {
                var A, L = e[z], N = L._path, B = L.getValues();
                if (!(z && e[z - 1]._path === N || (o = null,
                    N._closed || (h = k.getValues(N.getLastCurve().getSegment2(), L.getSegment1(), null, !n))[l] !== h[l + 6] && (o = h),
                    o))) {
                    o = B;
                    for (var D = N.getLastCurve(); D && D !== L;) {
                        var j = D.getValues();
                        if (j[l] !== j[l + 6]) {
                            o = j;
                            break
                        }
                        D = D.getPrevious()
                    }
                }
                if (A = a(B))
                    return A;
                if (z + 1 === O || e[z + 1]._path !== N) {
                    if (h && (A = a(h)))
                        return A;
                    !P || C || S || (C = S = N.isClockwise(n) ^ i ? 1 : -1),
                        x += C,
                        b += S,
                        C = S = 0,
                        P && (I = !0,
                            P = !1),
                        h = null
                }
            }
            return x = v(x),
                b = v(b),
            {
                winding: g(x, b),
                windingL: x,
                windingR: b,
                quality: M,
                onPath: I
            }
        }
        function f(t, e, i, n, r) {
            var s = []
                , a = t
                , o = 0;
            do {
                d = (y = t.getCurve()).getLength();
                s.push({
                    segment: t,
                    curve: y,
                    length: d
                }),
                    o += d,
                    t = t.getNext()
            } while (t && !t._intersection && t !== a); for (var h = [.5, .25, .75], l = {
                winding: 0,
                quality: -1
            }, f = 0; f < h.length && l.quality < .5; f++)
                for (var d = o * h[f], _ = 0, g = s.length; _ < g; _++) {
                    var p = s[_]
                        , m = p.length;
                    if (d <= m) {
                        var y = p.curve
                            , w = y._path
                            , x = w._parent
                            , b = x instanceof N ? x : w
                            , C = u.clamp(y.getTimeAt(d), 1e-8, 1 - 1e-8)
                            , S = y.getPointAtTime(C)
                            , P = v(y.getTangentAtTime(C).y) < Math.SQRT1_2
                            , I = r.subtract && i && (b === e && i._getWinding(S, P, !0).winding || b === i && !e._getWinding(S, P, !0).winding) ? {
                                winding: 0,
                                quality: 1
                            } : c(S, n, P, !0);
                        I.quality > l.quality && (l = I);
                        break
                    }
                    d -= m
                }
            for (_ = s.length - 1; _ >= 0; _--)
                s[_].segment._winding = l
        }
        function d(t, e) {
            function i(t) {
                var i;
                return !(!t || t._visited || e && (!e[(i = t._winding || {}).winding] || e.unite && 2 === i.winding && i.windingL && i.windingR))
            }
            function n(t) {
                if (t)
                    for (var e = 0, i = s.length; e < i; e++)
                        if (t === s[e])
                            return !0;
                return !1
            }
            function r(t) {
                for (var e = t._segments, i = 0, n = e.length; i < n; i++)
                    e[i]._visited = !0
            }
            var s, a = [];
            t.sort(function (t, e) {
                var i = t._intersection
                    , n = e._intersection
                    , r = !(!i || !i._overlap)
                    , s = !(!n || !n._overlap)
                    , a = t._path
                    , o = e._path;
                return r ^ s ? r ? 1 : -1 : !i ^ !n ? i ? 1 : -1 : a !== o ? a._id - o._id : t._index - e._index
            });
            for (var o = 0, h = t.length; o < h; o++) {
                var u, l, c, f = t[o], d = i(f), _ = null, g = !1, v = !0, p = [];
                if (d && f._path._overlapsOnly) {
                    var m = f._path
                        , y = f._intersection._segment._path;
                    m.compare(y) && (m.getArea() && a.push(m.clone(!1)),
                        r(m),
                        r(y),
                        d = !1)
                }
                for (; d;) {
                    var x = !_
                        , b = function (t, e) {
                            function r(r, a) {
                                for (; r && r !== a;) {
                                    var o = r._segment
                                        , u = o && o._path;
                                    if (u) {
                                        var l = o.getNext() || u.getFirstSegment()
                                            , c = l._intersection;
                                        o !== t && (n(o) || n(l) || l && i(o) && (i(l) || c && i(c._segment))) && h.push(o),
                                            e && s.push(o)
                                    }
                                    r = r._next
                                }
                            }
                            var a = t._intersection
                                , o = a
                                , h = [];
                            if (e && (s = [t]),
                                a) {
                                for (r(a); a && a._prev;)
                                    a = a._prev;
                                r(a, o)
                            }
                            return h
                        }(f, x)
                        , C = b.shift()
                        , S = !(g = !x && (n(f) || n(C))) && C;
                    if (x && (_ = new L(w.NO_INSERT),
                        u = null),
                        g) {
                        (f.isFirst() || f.isLast()) && (v = f._path._closed),
                            f._visited = !0;
                        break
                    }
                    if (S && u && (p.push(u),
                        u = null),
                        u || (S && b.push(f),
                            u = {
                                start: _._segments.length,
                                crossings: b,
                                visited: l = [],
                                handleIn: c
                            }),
                        S && (f = C),
                        !i(f)) {
                        _.removeSegments(u.start);
                        for (var P = 0, I = l.length; P < I; P++)
                            l[P]._visited = !1;
                        l.length = 0;
                        do {
                            (f = u && u.crossings.shift()) && f._path || (f = null,
                                (u = p.pop()) && (l = u.visited,
                                    c = u.handleIn))
                        } while (u && !i(f)); if (!f)
                            break
                    }
                    var M = f.getNext();
                    _.add(new T(f._point, c, M && f._handleOut)),
                        f._visited = !0,
                        l.push(f),
                        f = M || f._path.getFirstSegment(),
                        c = M && M._handleIn
                }
                g && (v && (_.getFirstSegment().setHandleIn(c),
                    _.setClosed(v)),
                    0 !== _.getArea() && a.push(_))
            }
            return a
        }
        var _ = Math.min
            , g = Math.max
            , v = Math.abs
            , p = {
                unite: {
                    1: !0,
                    2: !0
                },
                intersect: {
                    2: !0
                },
                subtract: {
                    1: !0
                },
                exclude: {
                    1: !0,
                    "-1": !0
                }
            };
        return {
            _getWinding: function (t, e, i) {
                return c(t, this.getCurves(), e, i)
            },
            unite: function (t, e) {
                return n(this, t, "unite", e)
            },
            intersect: function (t, e) {
                return n(this, t, "intersect", e)
            },
            subtract: function (t, e) {
                return n(this, t, "subtract", e)
            },
            exclude: function (t, e) {
                return n(this, t, "exclude", e)
            },
            divide: function (t, e) {
                return e && (0 == e.trace || e.stroke) ? s(this, t, "divide") : i([this.subtract(t, e), this.intersect(t, e)], !0, this, t, e)
            },
            resolveCrossings: function () {
                function t(t, e) {
                    var i = t && t._intersection;
                    return i && i._overlap && i._path === e
                }
                var e = this._children
                    , i = e || [this]
                    , n = !1
                    , s = !1
                    , a = this.getIntersections(null, function (t) {
                        return t.hasOverlap() && (n = !0) || t.isCrossing() && (s = !0)
                    })
                    , h = n && s && [];
                if (a = O.expand(a),
                    n)
                    for (var u = l(a, function (t) {
                        return t.hasOverlap()
                    }, h), c = u.length - 1; c >= 0; c--) {
                        var f = u[c]
                            , _ = f._path
                            , g = f._segment
                            , v = g.getPrevious()
                            , p = g.getNext();
                        t(v, _) && t(p, _) && (g.remove(),
                            v._handleOut._set(0, 0),
                            p._handleIn._set(0, 0),
                            v === g || v.getCurve().hasLength() || (p._handleIn.set(v._handleIn),
                                v.remove()))
                    }
                s && (l(a, n && function (t) {
                    var e = t.getCurve()
                        , i = t.getSegment()
                        , n = t._intersection
                        , r = n._curve
                        , s = n._segment;
                    if (e && r && e._path && r._path)
                        return !0;
                    i && (i._intersection = null),
                        s && (s._intersection = null)
                }
                    , h),
                    h && o(h),
                    i = d(r.each(i, function (t) {
                        this.push.apply(this, t._segments)
                    }, [])));
                var m, y = i.length;
                return y > 1 && e ? (i !== e && this.setChildren(i),
                    m = this) : 1 !== y || e || (i[0] !== this && this.setSegments(i[0].removeSegments()),
                        m = this),
                    m || ((m = new N(w.NO_INSERT)).addChildren(i),
                        (m = m.reduce()).copyAttributes(this),
                        this.replaceWith(m)),
                    m
            },
            reorient: function (t, i) {
                var n = this._children;
                return n && n.length ? this.setChildren(h(this.removeChildren(), function (e) {
                    return !!(t ? e : 1 & e)
                }, i)) : i !== e && this.setClockwise(i),
                    this
            },
            getInteriorPoint: function () {
                var t = this.getBounds().getCenter(!0);
                if (!this.contains(t)) {
                    for (var e = this.getCurves(), i = t.y, n = [], r = [], s = 0, a = e.length; s < a; s++) {
                        var o = e[s].getValues()
                            , h = o[1]
                            , u = o[3]
                            , l = o[5]
                            , c = o[7];
                        if (i >= _(h, u, l, c) && i <= g(h, u, l, c))
                            for (var f = k.getMonoCurves(o), d = 0, v = f.length; d < v; d++) {
                                var p = f[d]
                                    , m = p[1]
                                    , y = p[7];
                                if (m !== y && (i >= m && i <= y || i >= y && i <= m)) {
                                    var w = i === m ? p[0] : i === y ? p[6] : 1 === k.solveCubic(p, 1, i, r, 0, 1) ? k.getPoint(p, r[0]).x : (p[0] + p[6]) / 2;
                                    n.push(w)
                                }
                            }
                    }
                    n.length > 1 && (n.sort(function (t, e) {
                        return t - e
                    }),
                        t.x = (n[0] + n[1]) / 2)
                }
                return t
            }
        }
    }
    );
    var B = r.extend({
        _class: "PathFlattener",
        initialize: function (t, e, i, n, r) {
            function s(t, e) {
                var i = k.getValues(t, e, r);
                h.push(i),
                    a(i, t._index, 0, 1)
            }
            function a(t, i, r, s) {
                if (!(s - r > c) || n && k.isStraight(t) || k.isFlatEnough(t, e || .25)) {
                    var o = t[6] - t[0]
                        , h = t[7] - t[1]
                        , f = Math.sqrt(o * o + h * h);
                    f > 0 && (l += f,
                        u.push({
                            offset: l,
                            curve: t,
                            index: i,
                            time: s
                        }))
                } else {
                    var d = k.subdivide(t, .5)
                        , _ = (r + s) / 2;
                    a(d[0], i, r, _),
                        a(d[1], i, _, s)
                }
            }
            for (var o, h = [], u = [], l = 0, c = 1 / (i || 32), f = t._segments, d = f[0], _ = 1, g = f.length; _ < g; _++)
                s(d, o = f[_]),
                    d = o;
            t._closed && s(o, f[0]),
                this.curves = h,
                this.parts = u,
                this.length = l,
                this.index = 0
        },
        _get: function (t) {
            for (var e, i = this.parts, n = i.length, r = this.index; e = r,
                r && !(i[--r].offset < t);)
                ;
            for (; e < n; e++) {
                var s = i[e];
                if (s.offset >= t) {
                    this.index = e;
                    var a = i[e - 1]
                        , o = a && a.index === s.index ? a.time : 0
                        , h = a ? a.offset : 0;
                    return {
                        index: s.index,
                        time: o + (s.time - o) * (t - h) / (s.offset - h)
                    }
                }
            }
            return {
                index: i[n - 1].index,
                time: 1
            }
        },
        drawPart: function (t, e, i) {
            for (var n = this._get(e), r = this._get(i), s = n.index, a = r.index; s <= a; s++) {
                var o = k.getPart(this.curves[s], s === n.index ? n.time : 0, s === r.index ? r.time : 1);
                s === n.index && t.moveTo(o[0], o[1]),
                    t.bezierCurveTo.apply(t, o.slice(2))
            }
        }
    }, r.each(k._evaluateMethods, function (t) {
        this[t + "At"] = function (e) {
            var i = this._get(e);
            return k[t](this.curves[i.index], i.time)
        }
    }, {}))
        , D = r.extend({
            initialize: function (t) {
                for (var e, i = this.points = [], n = t._segments, r = t._closed, s = 0, a = n.length; s < a; s++) {
                    var o = n[s].point;
                    e && e.equals(o) || i.push(e = o.clone())
                }
                r && (i.unshift(i[i.length - 1]),
                    i.push(i[1])),
                    this.closed = r
            },
            fit: function (t) {
                var e = this.points
                    , i = e.length
                    , n = null;
                return i > 0 && (n = [new T(e[0])],
                    i > 1 && (this.fitCubic(n, t, 0, i - 1, e[1].subtract(e[0]), e[i - 2].subtract(e[i - 1])),
                        this.closed && (n.shift(),
                            n.pop()))),
                    n
            },
            fitCubic: function (t, e, i, n, r, s) {
                var a = this.points;
                if (n - i != 1) {
                    for (var o, h = this.chordLengthParameterize(i, n), u = Math.max(e, e * e), l = !0, c = 0; c <= 4; c++) {
                        var f = this.generateBezier(i, n, h, r, s)
                            , d = this.findMaxError(i, n, f, h);
                        if (d.error < e && l)
                            return void this.addCurve(t, f);
                        if (o = d.index,
                            d.error >= u)
                            break;
                        l = this.reparameterize(i, n, h, f),
                            u = d.error
                    }
                    var _ = a[o - 1].subtract(a[o + 1]);
                    this.fitCubic(t, e, i, o, r, _),
                        this.fitCubic(t, e, o, n, _.negate(), s)
                } else {
                    var g = a[i]
                        , v = a[n]
                        , p = g.getDistance(v) / 3;
                    this.addCurve(t, [g, g.add(r.normalize(p)), v.add(s.normalize(p)), v])
                }
            },
            addCurve: function (t, e) {
                t[t.length - 1].setHandleOut(e[1].subtract(e[0])),
                    t.push(new T(e[3], e[2].subtract(e[3])))
            },
            generateBezier: function (t, e, i, n, r) {
                for (var s = Math.abs, a = this.points, o = a[t], h = a[e], u = [[0, 0], [0, 0]], l = [0, 0], c = 0, f = e - t + 1; c < f; c++) {
                    var d = i[c]
                        , _ = 1 - d
                        , g = 3 * d * _
                        , v = _ * _ * _
                        , p = g * _
                        , m = g * d
                        , y = d * d * d
                        , w = n.normalize(p)
                        , x = r.normalize(m)
                        , b = a[t + c].subtract(o.multiply(v + p)).subtract(h.multiply(m + y));
                    u[0][0] += w.dot(w),
                        u[0][1] += w.dot(x),
                        u[1][0] = u[0][1],
                        u[1][1] += x.dot(x),
                        l[0] += w.dot(b),
                        l[1] += x.dot(b)
                }
                var C, S, P = u[0][0] * u[1][1] - u[1][0] * u[0][1];
                if (s(P) > 1e-12) {
                    var I = u[0][0] * l[1] - u[1][0] * l[0];
                    C = (l[0] * u[1][1] - l[1] * u[0][1]) / P,
                        S = I / P
                } else {
                    var M = u[0][0] + u[0][1]
                        , T = u[1][0] + u[1][1];
                    C = S = s(M) > 1e-12 ? l[0] / M : s(T) > 1e-12 ? l[1] / T : 0
                }
                var z, k, O = h.getDistance(o), A = 1e-12 * O;
                if (C < A || S < A)
                    C = S = O / 3;
                else {
                    var L = h.subtract(o);
                    z = n.normalize(C),
                        k = r.normalize(S),
                        z.dot(L) - k.dot(L) > O * O && (C = S = O / 3,
                            z = k = null)
                }
                return [o, o.add(z || n.normalize(C)), h.add(k || r.normalize(S)), h]
            },
            reparameterize: function (t, e, i, n) {
                for (r = t; r <= e; r++)
                    i[r - t] = this.findRoot(n, this.points[r], i[r - t]);
                for (var r = 1, s = i.length; r < s; r++)
                    if (i[r] <= i[r - 1])
                        return !1;
                return !0
            },
            findRoot: function (t, e, i) {
                for (var n = [], r = [], s = 0; s <= 2; s++)
                    n[s] = t[s + 1].subtract(t[s]).multiply(3);
                for (s = 0; s <= 1; s++)
                    r[s] = n[s + 1].subtract(n[s]).multiply(2);
                var a = this.evaluate(3, t, i)
                    , o = this.evaluate(2, n, i)
                    , h = this.evaluate(1, r, i)
                    , l = a.subtract(e)
                    , c = o.dot(o) + l.dot(h);
                return u.isZero(c) ? i : i - l.dot(o) / c
            },
            evaluate: function (t, e, i) {
                for (var n = e.slice(), r = 1; r <= t; r++)
                    for (var s = 0; s <= t - r; s++)
                        n[s] = n[s].multiply(1 - i).add(n[s + 1].multiply(i));
                return n[0]
            },
            chordLengthParameterize: function (t, e) {
                for (var i = [0], n = t + 1; n <= e; n++)
                    i[n - t] = i[n - t - 1] + this.points[n].getDistance(this.points[n - 1]);
                for (var n = 1, r = e - t; n <= r; n++)
                    i[n] /= i[r];
                return i
            },
            findMaxError: function (t, e, i, n) {
                for (var r = Math.floor((e - t + 1) / 2), s = 0, a = t + 1; a < e; a++) {
                    var o = this.evaluate(3, i, n[a - t]).subtract(this.points[a])
                        , h = o.x * o.x + o.y * o.y;
                    h >= s && (s = h,
                        r = a)
                }
                return {
                    error: s,
                    index: r
                }
            }
        })
        , j = w.extend({
            _class: "TextItem",
            _applyMatrix: !1,
            _canApplyMatrix: !1,
            _serializeFields: {
                content: null
            },
            _boundsOptions: {
                stroke: !1,
                handle: !1
            },
            initialize: function (t) {
                this._content = "",
                    this._lines = [];
                var i = t && r.isPlainObject(t) && t.x === e && t.y === e;
                this._initialize(i && t, !i && c.read(arguments))
            },
            _equals: function (t) {
                return this._content === t._content
            },
            copyContent: function (t) {
                this.setContent(t._content)
            },
            getContent: function () {
                return this._content
            },
            setContent: function (t) {
                this._content = "" + t,
                    this._lines = this._content.split(/\r\n|\n|\r/gm),
                    this._changed(265)
            },
            isEmpty: function () {
                return !this._content
            },
            getCharacterStyle: "#getStyle",
            setCharacterStyle: "#setStyle",
            getParagraphStyle: "#getStyle",
            setParagraphStyle: "#setStyle"
        })
        , E = j.extend({
            _class: "PointText",
            initialize: function () {
                j.apply(this, arguments)
            },
            getPoint: function () {
                var t = this._matrix.getTranslation();
                return new f(t.x, t.y, this, "setPoint")
            },
            setPoint: function () {
                var t = c.read(arguments);
                this.translate(t.subtract(this._matrix.getTranslation()))
            },
            _draw: function (t, e, i) {
                if (this._content) {
                    this._setStyles(t, e, i);
                    var n = this._lines
                        , r = this._style
                        , s = r.hasFill()
                        , a = r.hasStroke()
                        , o = r.getLeading()
                        , h = t.shadowColor;
                    t.font = r.getFontStyle(),
                        t.textAlign = r.getJustification();
                    for (var u = 0, l = n.length; u < l; u++) {
                        t.shadowColor = h;
                        var c = n[u];
                        s && (t.fillText(c, 0, 0),
                            t.shadowColor = "rgba(0,0,0,0)"),
                            a && t.strokeText(c, 0, 0),
                            t.translate(0, o)
                    }
                }
            },
            _getBounds: function (t, e) {
                var i = this._style
                    , n = this._lines
                    , r = n.length
                    , s = i.getJustification()
                    , a = i.getLeading()
                    , o = this.getView().getTextWidth(i.getFontStyle(), n)
                    , h = 0;
                "left" !== s && (h -= o / ("center" === s ? 2 : 1));
                var u = new g(h, r ? -.75 * a : 0, o, r * a);
                return t ? t._transformBounds(u, u) : u
            }
        })
        , F = r.extend(new function () {
            function t(t) {
                var n, r = t.match(/^#(\w{1,2})(\w{1,2})(\w{1,2})$/);
                if (r) {
                    n = [0, 0, 0];
                    for (s = 0; s < 3; s++) {
                        h = r[s + 1];
                        n[s] = parseInt(1 == h.length ? h + h : h, 16) / 255
                    }
                } else if (r = t.match(/^rgba?\((.*)\)$/))
                    for (var s = 0, o = (n = r[1].split(",")).length; s < o; s++) {
                        var h = +n[s];
                        n[s] = s < 3 ? h / 255 : h
                    }
                else if (i) {
                    var u = a[t];
                    if (!u) {
                        e || ((e = Q.getContext(1, 1)).globalCompositeOperation = "copy"),
                            e.fillStyle = "rgba(0,0,0,0)",
                            e.fillStyle = t,
                            e.fillRect(0, 0, 1, 1);
                        var l = e.getImageData(0, 0, 1, 1).data;
                        u = a[t] = [l[0] / 255, l[1] / 255, l[2] / 255]
                    }
                    n = u.slice()
                } else
                    n = [0, 0, 0];
                return n
            }
            var e, n = {
                gray: ["gray"],
                rgb: ["red", "green", "blue"],
                hsb: ["hue", "saturation", "brightness"],
                hsl: ["hue", "saturation", "lightness"],
                gradient: ["gradient", "origin", "destination", "highlight"]
            }, s = {}, a = {}, o = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]], u = {
                "rgb-hsb": function (t, e, i) {
                    var n = Math.max(t, e, i)
                        , r = n - Math.min(t, e, i);
                    return [0 === r ? 0 : 60 * (n == t ? (e - i) / r + (e < i ? 6 : 0) : n == e ? (i - t) / r + 2 : (t - e) / r + 4), 0 === n ? 0 : r / n, n]
                },
                "hsb-rgb": function (t, e, i) {
                    t = (t / 60 % 6 + 6) % 6;
                    var n = Math.floor(t)
                        , r = t - n
                        , s = [i, i * (1 - e), i * (1 - e * r), i * (1 - e * (1 - r))];
                    return [s[(n = o[n])[0]], s[n[1]], s[n[2]]]
                },
                "rgb-hsl": function (t, e, i) {
                    var n = Math.max(t, e, i)
                        , r = Math.min(t, e, i)
                        , s = n - r
                        , a = 0 === s
                        , o = (n + r) / 2;
                    return [a ? 0 : 60 * (n == t ? (e - i) / s + (e < i ? 6 : 0) : n == e ? (i - t) / s + 2 : (t - e) / s + 4), a ? 0 : o < .5 ? s / (n + r) : s / (2 - n - r), o]
                },
                "hsl-rgb": function (t, e, i) {
                    if (t = (t / 360 % 1 + 1) % 1,
                        0 === e)
                        return [i, i, i];
                    for (var n = [t + 1 / 3, t, t - 1 / 3], r = i < .5 ? i * (1 + e) : i + e - i * e, s = 2 * i - r, a = [], o = 0; o < 3; o++) {
                        var h = n[o];
                        h < 0 && (h += 1),
                            h > 1 && (h -= 1),
                            a[o] = 6 * h < 1 ? s + 6 * (r - s) * h : 2 * h < 1 ? r : 3 * h < 2 ? s + (r - s) * (2 / 3 - h) * 6 : s
                    }
                    return a
                },
                "rgb-gray": function (t, e, i) {
                    return [.2989 * t + .587 * e + .114 * i]
                },
                "gray-rgb": function (t) {
                    return [t, t, t]
                },
                "gray-hsb": function (t) {
                    return [0, 0, t]
                },
                "gray-hsl": function (t) {
                    return [0, 0, t]
                },
                "gradient-rgb": function () {
                    return []
                },
                "rgb-gradient": function () {
                    return []
                }
            };
            return r.each(n, function (t, e) {
                s[e] = [],
                    r.each(t, function (t, i) {
                        var a = r.capitalize(t)
                            , o = /^(hue|saturation)$/.test(t)
                            , h = s[e][i] = "gradient" === t ? function (t) {
                                var e = this._components[0];
                                return t = R.read(Array.isArray(t) ? t : arguments, 0, {
                                    readNull: !0
                                }),
                                    e !== t && (e && e._removeOwner(this),
                                        t && t._addOwner(this)),
                                    t
                            }
                                : "gradient" === e ? function () {
                                    return c.read(arguments, 0, {
                                        readNull: "highlight" === t,
                                        clone: !0
                                    })
                                }
                                    : function (t) {
                                        return null == t || isNaN(t) ? 0 : t
                                    }
                            ;
                        this["get" + a] = function () {
                            return this._type === e || o && /^hs[bl]$/.test(this._type) ? this._components[i] : this._convert(e)[i]
                        }
                            ,
                            this["set" + a] = function (t) {
                                this._type === e || o && /^hs[bl]$/.test(this._type) || (this._components = this._convert(e),
                                    this._properties = n[e],
                                    this._type = e),
                                    this._components[i] = h.call(this, t),
                                    this._changed()
                            }
                    }, this)
            }, {
                _class: "Color",
                _readIndex: !0,
                initialize: function e(i) {
                    var a, o, h, u, l = arguments, c = this.__read, f = 0;
                    Array.isArray(i) && (i = (l = i)[0]);
                    var d = null != i && typeof i;
                    if ("string" === d && i in n && (a = i,
                        i = l[1],
                        Array.isArray(i) ? (o = i,
                            h = l[2]) : (c && (f = 1),
                                l = r.slice(l, 1),
                                d = typeof i)),
                        !o) {
                        if (u = "number" === d ? l : "object" === d && null != i.length ? i : null) {
                            a || (a = u.length >= 3 ? "rgb" : "gray");
                            var _ = n[a].length;
                            h = u[_],
                                c && (f += u === arguments ? _ + (null != h ? 1 : 0) : 1),
                                u.length > _ && (u = r.slice(u, 0, _))
                        } else if ("string" === d)
                            a = "rgb",
                                4 === (o = t(i)).length && (h = o[3],
                                    o.length--);
                        else if ("object" === d)
                            if (i.constructor === e) {
                                if (a = i._type,
                                    o = i._components.slice(),
                                    h = i._alpha,
                                    "gradient" === a)
                                    for (var g = 1, v = o.length; g < v; g++) {
                                        var p = o[g];
                                        p && (o[g] = p.clone())
                                    }
                            } else if (i.constructor === R)
                                a = "gradient",
                                    u = l;
                            else {
                                var m = n[a = "hue" in i ? "lightness" in i ? "hsl" : "hsb" : "gradient" in i || "stops" in i || "radial" in i ? "gradient" : "gray" in i ? "gray" : "rgb"]
                                    , y = s[a];
                                this._components = o = [];
                                for (var g = 0, v = m.length; g < v; g++)
                                    null == (w = i[m[g]]) && !g && "gradient" === a && "stops" in i && (w = {
                                        stops: i.stops,
                                        radial: i.radial
                                    }),
                                        null != (w = y[g].call(this, w)) && (o[g] = w);
                                h = i.alpha
                            }
                        c && a && (f = 1)
                    }
                    if (this._type = a || "rgb",
                        !o) {
                        this._components = o = [];
                        for (var g = 0, v = (y = s[this._type]).length; g < v; g++) {
                            var w = y[g].call(this, u && u[g]);
                            null != w && (o[g] = w)
                        }
                    }
                    return this._components = o,
                        this._properties = n[this._type],
                        this._alpha = h,
                        c && (this.__read = f),
                        this
                },
                set: "#initialize",
                _serialize: function (t, e) {
                    var i = this.getComponents();
                    return r.serialize(/^(gray|rgb)$/.test(this._type) ? i : [this._type].concat(i), t, !0, e)
                },
                _changed: function () {
                    this._canvasStyle = null,
                        this._owner && this._owner._changed(65)
                },
                _convert: function (t) {
                    var e;
                    return this._type === t ? this._components.slice() : (e = u[this._type + "-" + t]) ? e.apply(this, this._components) : u["rgb-" + t].apply(this, u[this._type + "-rgb"].apply(this, this._components))
                },
                convert: function (t) {
                    return new F(t, this._convert(t), this._alpha)
                },
                getType: function () {
                    return this._type
                },
                setType: function (t) {
                    this._components = this._convert(t),
                        this._properties = n[t],
                        this._type = t
                },
                getComponents: function () {
                    var t = this._components.slice();
                    return null != this._alpha && t.push(this._alpha),
                        t
                },
                getAlpha: function () {
                    return null != this._alpha ? this._alpha : 1
                },
                setAlpha: function (t) {
                    this._alpha = null == t ? null : Math.min(Math.max(t, 0), 1),
                        this._changed()
                },
                hasAlpha: function () {
                    return null != this._alpha
                },
                equals: function (t) {
                    var e = r.isPlainValue(t, !0) ? F.read(arguments) : t;
                    return e === this || e && this._class === e._class && this._type === e._type && this.getAlpha() === e.getAlpha() && r.equals(this._components, e._components) || !1
                },
                toString: function () {
                    for (var t = this._properties, e = [], i = "gradient" === this._type, n = h.instance, r = 0, s = t.length; r < s; r++) {
                        var a = this._components[r];
                        null != a && e.push(t[r] + ": " + (i ? a : n.number(a)))
                    }
                    return null != this._alpha && e.push("alpha: " + n.number(this._alpha)),
                        "{ " + e.join(", ") + " }"
                },
                toCSS: function (t) {
                    function e(t) {
                        return Math.round(255 * (t < 0 ? 0 : t > 1 ? 1 : t))
                    }
                    var i = this._convert("rgb")
                        , n = t || null == this._alpha ? 1 : this._alpha;
                    return i = [e(i[0]), e(i[1]), e(i[2])],
                        n < 1 && i.push(n < 0 ? 0 : n),
                        t ? "#" + ((1 << 24) + (i[0] << 16) + (i[1] << 8) + i[2]).toString(16).slice(1) : (4 == i.length ? "rgba(" : "rgb(") + i.join(",") + ")"
                },
                toCanvasStyle: function (t, e) {
                    if (this._canvasStyle)
                        return this._canvasStyle;
                    if ("gradient" !== this._type)
                        return this._canvasStyle = this.toCSS();
                    var i, n = this._components, r = n[0], s = r._stops, a = n[1], o = n[2], h = n[3], u = e && e.inverted();
                    if (u && (a = u._transformPoint(a),
                        o = u._transformPoint(o),
                        h && (h = u._transformPoint(h))),
                        r._radial) {
                        var l = o.getDistance(a);
                        if (h) {
                            var c = h.subtract(a);
                            c.getLength() > l && (h = a.add(c.normalize(l - .1)))
                        }
                        var f = h || a;
                        i = t.createRadialGradient(f.x, f.y, 0, a.x, a.y, l)
                    } else
                        i = t.createLinearGradient(a.x, a.y, o.x, o.y);
                    for (var d = 0, _ = s.length; d < _; d++) {
                        var g = s[d]
                            , v = g._offset;
                        i.addColorStop(null == v ? d / (_ - 1) : v, g._color.toCanvasStyle())
                    }
                    return this._canvasStyle = i
                },
                transform: function (t) {
                    if ("gradient" === this._type) {
                        for (var e = this._components, i = 1, n = e.length; i < n; i++) {
                            var r = e[i];
                            t._transformPoint(r, r, !0)
                        }
                        this._changed()
                    }
                },
                statics: {
                    _types: n,
                    random: function () {
                        var t = Math.random;
                        return new F(t(), t(), t())
                    }
                }
            })
        }
            , new function () {
                var t = {
                    add: function (t, e) {
                        return t + e
                    },
                    subtract: function (t, e) {
                        return t - e
                    },
                    multiply: function (t, e) {
                        return t * e
                    },
                    divide: function (t, e) {
                        return t / e
                    }
                };
                return r.each(t, function (t, e) {
                    this[e] = function (e) {
                        e = F.read(arguments);
                        for (var i = this._type, n = this._components, r = e._convert(i), s = 0, a = n.length; s < a; s++)
                            r[s] = t(n[s], r[s]);
                        return new F(i, r, null != this._alpha ? t(this._alpha, e.getAlpha()) : null)
                    }
                }, {})
            }
        )
        , R = r.extend({
            _class: "Gradient",
            initialize: function (t, e) {
                this._id = l.get(),
                    t && r.isPlainObject(t) && (this.set(t),
                        t = e = null),
                    null == this._stops && this.setStops(t || ["white", "black"]),
                    null == this._radial && this.setRadial("string" == typeof e && "radial" === e || e || !1)
            },
            _serialize: function (t, e) {
                return e.add(this, function () {
                    return r.serialize([this._stops, this._radial], t, !0, e)
                })
            },
            _changed: function () {
                for (var t = 0, e = this._owners && this._owners.length; t < e; t++)
                    this._owners[t]._changed()
            },
            _addOwner: function (t) {
                this._owners || (this._owners = []),
                    this._owners.push(t)
            },
            _removeOwner: function (t) {
                var i = this._owners ? this._owners.indexOf(t) : -1;
                -1 != i && (this._owners.splice(i, 1),
                    this._owners.length || (this._owners = e))
            },
            clone: function () {
                for (var t = [], e = 0, i = this._stops.length; e < i; e++)
                    t[e] = this._stops[e].clone();
                return new R(t, this._radial)
            },
            getStops: function () {
                return this._stops
            },
            setStops: function (t) {
                if (t.length < 2)
                    throw new Error("Gradient stop list needs to contain at least two stops.");
                var i = this._stops;
                if (i)
                    for (var n = 0, r = i.length; n < r; n++)
                        i[n]._owner = e;
                for (var n = 0, r = (i = this._stops = q.readList(t, 0, {
                    clone: !0
                })).length; n < r; n++)
                    i[n]._owner = this;
                this._changed()
            },
            getRadial: function () {
                return this._radial
            },
            setRadial: function (t) {
                this._radial = t,
                    this._changed()
            },
            equals: function (t) {
                if (t === this)
                    return !0;
                if (t && this._class === t._class) {
                    var e = this._stops
                        , i = t._stops
                        , n = e.length;
                    if (n === i.length) {
                        for (var r = 0; r < n; r++)
                            if (!e[r].equals(i[r]))
                                return !1;
                        return !0
                    }
                }
                return !1
            }
        })
        , q = r.extend({
            _class: "GradientStop",
            initialize: function (t, i) {
                var n = t
                    , r = i;
                "object" == typeof t && i === e && (Array.isArray(t) && "number" != typeof t[0] ? (n = t[0],
                    r = t[1]) : ("color" in t || "offset" in t || "rampPoint" in t) && (n = t.color,
                        r = t.offset || t.rampPoint || 0)),
                    this.setColor(n),
                    this.setOffset(r)
            },
            clone: function () {
                return new q(this._color.clone(), this._offset)
            },
            _serialize: function (t, e) {
                var i = this._color
                    , n = this._offset;
                return r.serialize(null == n ? [i] : [i, n], t, !0, e)
            },
            _changed: function () {
                this._owner && this._owner._changed(65)
            },
            getOffset: function () {
                return this._offset
            },
            setOffset: function (t) {
                this._offset = t,
                    this._changed()
            },
            getRampPoint: "#getOffset",
            setRampPoint: "#setOffset",
            getColor: function () {
                return this._color
            },
            setColor: function () {
                var t = F.read(arguments, 0, {
                    clone: !0
                });
                t && (t._owner = this),
                    this._color = t,
                    this._changed()
            },
            equals: function (t) {
                return t === this || t && this._class === t._class && this._color.equals(t._color) && this._offset == t._offset || !1
            }
        })
        , V = r.extend(new function () {
            var t = {
                fillColor: null,
                fillRule: "nonzero",
                strokeColor: null,
                strokeWidth: 1,
                strokeCap: "butt",
                strokeJoin: "miter",
                strokeScaling: !0,
                miterLimit: 10,
                dashOffset: 0,
                dashArray: [],
                shadowColor: null,
                shadowBlur: 0,
                shadowOffset: new c,
                selectedColor: null
            }
                , i = r.set({}, t, {
                    fontFamily: "sans-serif",
                    fontWeight: "normal",
                    fontSize: 12,
                    leading: null,
                    justification: "left"
                })
                , n = r.set({}, i, {
                    fillColor: new F
                })
                , s = {
                    strokeWidth: 97,
                    strokeCap: 97,
                    strokeJoin: 97,
                    strokeScaling: 105,
                    miterLimit: 97,
                    fontFamily: 9,
                    fontWeight: 9,
                    fontSize: 9,
                    font: 9,
                    leading: 9,
                    justification: 9
                }
                , a = {
                    beans: !0
                }
                , o = {
                    _class: "Style",
                    beans: !0,
                    initialize: function (e, r, s) {
                        this._values = {},
                            this._owner = r,
                            this._project = r && r._project || s || paper.project,
                            this._defaults = !r || r instanceof x ? i : r instanceof j ? n : t,
                            e && this.set(e)
                    }
                };
            return r.each(i, function (t, i) {
                var n = /Color$/.test(i)
                    , h = "shadowOffset" === i
                    , u = r.capitalize(i)
                    , l = s[i]
                    , f = "set" + u
                    , d = "get" + u;
                o[f] = function (t) {
                    var r = this._owner
                        , s = r && r._children;
                    if (s && s.length > 0 && !(r instanceof N))
                        for (var a = 0, o = s.length; a < o; a++)
                            s[a]._style[f](t);
                    else if (i in this._defaults) {
                        var h = this._values[i];
                        h !== t && (n && (h && h._owner !== e && (h._owner = e),
                            t && t.constructor === F && (t._owner && (t = t.clone()),
                                t._owner = r)),
                            this._values[i] = t,
                            r && r._changed(l || 65))
                    }
                }
                    ,
                    o[d] = function (t) {
                        var s, a = this._owner, o = a && a._children;
                        if (i in this._defaults && (!o || !o.length || t || a instanceof N))
                            if ((s = this._values[i]) === e)
                                (s = this._defaults[i]) && s.clone && (s = s.clone());
                            else {
                                var u = n ? F : h ? c : null;
                                !u || s && s.constructor === u || (this._values[i] = s = u.read([s], 0, {
                                    readNull: !0,
                                    clone: !0
                                }),
                                    s && n && (s._owner = a))
                            }
                        else if (o)
                            for (var l = 0, f = o.length; l < f; l++) {
                                var _ = o[l]._style[d]();
                                if (l) {
                                    if (!r.equals(s, _))
                                        return e
                                } else
                                    s = _
                            }
                        return s
                    }
                    ,
                    a[d] = function (t) {
                        return this._style[d](t)
                    }
                    ,
                    a[f] = function (t) {
                        this._style[f](t)
                    }
            }),
                r.each({
                    Font: "FontFamily",
                    WindingRule: "FillRule"
                }, function (t, e) {
                    var i = "get" + e
                        , n = "set" + e;
                    o[i] = a[i] = "#get" + t,
                        o[n] = a[n] = "#set" + t
                }),
                w.inject(a),
                o
        }
            , {
                set: function (t) {
                    var e = t instanceof V
                        , i = e ? t._values : t;
                    if (i)
                        for (var n in i)
                            if (n in this._defaults) {
                                var r = i[n];
                                this[n] = r && e && r.clone ? r.clone() : r
                            }
                },
                equals: function (t) {
                    function i(t, i, n) {
                        var s = t._values
                            , a = i._values
                            , o = i._defaults;
                        for (var h in s) {
                            var u = s[h]
                                , l = a[h];
                            if (!(n && h in a || r.equals(u, l === e ? o[h] : l)))
                                return !1
                        }
                        return !0
                    }
                    return t === this || t && this._class === t._class && i(this, t) && i(t, this, !0) || !1
                },
                hasFill: function () {
                    var t = this.getFillColor();
                    return !!t && t.alpha > 0
                },
                hasStroke: function () {
                    var t = this.getStrokeColor();
                    return !!t && t.alpha > 0 && this.getStrokeWidth() > 0
                },
                hasShadow: function () {
                    var t = this.getShadowColor();
                    return !!t && t.alpha > 0 && (this.getShadowBlur() > 0 || !this.getShadowOffset().isZero())
                },
                getView: function () {
                    return this._project._view
                },
                getFontStyle: function () {
                    var t = this.getFontSize();
                    return this.getFontWeight() + " " + t + (/[a-z]/i.test(t + "") ? " " : "px ") + this.getFontFamily()
                },
                getFont: "#getFontFamily",
                setFont: "#setFontFamily",
                getLeading: function t() {
                    var e = t.base.call(this)
                        , i = this.getFontSize();
                    return /pt|em|%|px/.test(i) && (i = this.getView().getPixelSize(i)),
                        null != e ? e : 1.2 * i
                }
            })
        , H = new function () {
            function t(t, e, i, n) {
                for (var r = ["", "webkit", "moz", "Moz", "ms", "o"], s = e[0].toUpperCase() + e.substring(1), a = 0; a < 6; a++) {
                    var o = r[a]
                        , h = o ? o + s : e;
                    if (h in t) {
                        if (!i)
                            return t[h];
                        t[h] = n;
                        break
                    }
                }
            }
            return {
                getStyles: function (t) {
                    var e = t && 9 !== t.nodeType ? t.ownerDocument : t
                        , i = e && e.defaultView;
                    return i && i.getComputedStyle(t, "")
                },
                getBounds: function (t, e) {
                    var i, n = t.ownerDocument, r = n.body, s = n.documentElement;
                    try {
                        i = t.getBoundingClientRect()
                    } catch (t) {
                        i = {
                            left: 0,
                            top: 0,
                            width: 0,
                            height: 0
                        }
                    }
                    var a = i.left - (s.clientLeft || r.clientLeft || 0)
                        , o = i.top - (s.clientTop || r.clientTop || 0);
                    if (!e) {
                        var h = n.defaultView;
                        a += h.pageXOffset || s.scrollLeft || r.scrollLeft,
                            o += h.pageYOffset || s.scrollTop || r.scrollTop
                    }
                    return new g(a, o, i.width, i.height)
                },
                getViewportBounds: function (t) {
                    var e = t.ownerDocument
                        , i = e.defaultView
                        , n = e.documentElement;
                    return new g(0, 0, i.innerWidth || n.clientWidth, i.innerHeight || n.clientHeight)
                },
                getOffset: function (t, e) {
                    return H.getBounds(t, e).getPoint()
                },
                getSize: function (t) {
                    return H.getBounds(t, !0).getSize()
                },
                isInvisible: function (t) {
                    return H.getSize(t).equals(new d(0, 0))
                },
                isInView: function (t) {
                    return !H.isInvisible(t) && H.getViewportBounds(t).intersects(H.getBounds(t, !0))
                },
                isInserted: function (t) {
                    return n.body.contains(t)
                },
                getPrefixed: function (e, i) {
                    return e && t(e, i)
                },
                setPrefixed: function (e, i, n) {
                    if ("object" == typeof i)
                        for (var r in i)
                            t(e, r, !0, i[r]);
                    else
                        t(e, i, !0, n)
                }
            }
        }
        , Z = {
            add: function (t, e) {
                if (t)
                    for (var i in e)
                        for (var n = e[i], r = i.split(/[\s,]+/g), s = 0, a = r.length; s < a; s++)
                            t.addEventListener(r[s], n, !1)
            },
            remove: function (t, e) {
                if (t)
                    for (var i in e)
                        for (var n = e[i], r = i.split(/[\s,]+/g), s = 0, a = r.length; s < a; s++)
                            t.removeEventListener(r[s], n, !1)
            },
            getPoint: function (t) {
                var e = t.targetTouches ? t.targetTouches.length ? t.targetTouches[0] : t.changedTouches[0] : t;
                return new c(e.pageX || e.clientX + n.documentElement.scrollLeft, e.pageY || e.clientY + n.documentElement.scrollTop)
            },
            getTarget: function (t) {
                return t.target || t.srcElement
            },
            getRelatedTarget: function (t) {
                return t.relatedTarget || t.toElement
            },
            getOffset: function (t, e) {
                return Z.getPoint(t).subtract(H.getOffset(e || Z.getTarget(t)))
            }
        };
    Z.requestAnimationFrame = new function () {
        function t() {
            var e = s;
            s = [];
            for (var i = 0, a = e.length; i < a; i++)
                e[i]();
            (r = n && s.length) && n(t)
        }
        var e, n = H.getPrefixed(i, "requestAnimationFrame"), r = !1, s = [];
        return function (i) {
            s.push(i),
                n ? r || (n(t),
                    r = !0) : e || (e = setInterval(t, 1e3 / 60))
        }
    }
        ;
    var U = r.extend(s, {
        _class: "View",
        initialize: function t(e, r) {
            function s(t) {
                return r[t] || parseInt(r.getAttribute(t), 10)
            }
            function o() {
                var t = H.getSize(r);
                return t.isNaN() || t.isZero() ? new d(s("width"), s("height")) : t
            }
            var h;
            if (i && r) {
                this._id = r.getAttribute("id"),
                    null == this._id && r.setAttribute("id", this._id = "view-" + t._id++),
                    Z.add(r, this._viewEvents);
                if (H.setPrefixed(r.style, {
                    userDrag: "none",
                    userSelect: "none",
                    touchCallout: "none",
                    contentZooming: "none",
                    tapHighlightColor: "rgba(0,0,0,0)"
                }),
                    a.hasAttribute(r, "resize")) {
                    var u = this;
                    Z.add(i, this._windowEvents = {
                        resize: function () {
                            u.setViewSize(o())
                        }
                    })
                }
                if (h = o(),
                    a.hasAttribute(r, "stats") && "undefined" != typeof Stats) {
                    this._stats = new Stats;
                    var l = this._stats.domElement
                        , c = l.style
                        , f = H.getOffset(r);
                    c.position = "absolute",
                        c.left = f.x + "px",
                        c.top = f.y + "px",
                        n.body.appendChild(l)
                }
            } else
                h = new d(r),
                    r = null;
            this._project = e,
                this._scope = e._scope,
                this._element = r,
                this._pixelRatio || (this._pixelRatio = i && i.devicePixelRatio || 1),
                this._setElementSize(h.width, h.height),
                this._viewSize = h,
                t._views.push(this),
                t._viewsById[this._id] = this,
                (this._matrix = new p)._owner = this,
                t._focused || (t._focused = this),
                this._frameItems = {},
                this._frameItemCount = 0,
                this._itemEvents = {
                    native: {},
                    virtual: {}
                },
                this._autoUpdate = !paper.agent.node,
                this._needsUpdate = !1
        },
        remove: function () {
            if (!this._project)
                return !1;
            U._focused === this && (U._focused = null),
                U._views.splice(U._views.indexOf(this), 1),
                delete U._viewsById[this._id];
            var t = this._project;
            return t._view === this && (t._view = null),
                Z.remove(this._element, this._viewEvents),
                Z.remove(i, this._windowEvents),
                this._element = this._project = null,
                this.off("frame"),
                this._animate = !1,
                this._frameItems = {},
                !0
        },
        _events: r.each(w._itemHandlers.concat(["onResize", "onKeyDown", "onKeyUp"]), function (t) {
            this[t] = {}
        }, {
            onFrame: {
                install: function () {
                    this.play()
                },
                uninstall: function () {
                    this.pause()
                }
            }
        }),
        _animate: !1,
        _time: 0,
        _count: 0,
        getAutoUpdate: function () {
            return this._autoUpdate
        },
        setAutoUpdate: function (t) {
            this._autoUpdate = t,
                t && this.requestUpdate()
        },
        update: function () { },
        draw: function () {
            this.update()
        },
        requestUpdate: function () {
            if (!this._requested) {
                var t = this;
                Z.requestAnimationFrame(function () {
                    if (t._requested = !1,
                        t._animate) {
                        t.requestUpdate();
                        var e = t._element;
                        H.getPrefixed(n, "hidden") && "true" !== a.getAttribute(e, "keepalive") || !H.isInView(e) || t._handleFrame()
                    }
                    t._autoUpdate && t.update()
                }),
                    this._requested = !0
            }
        },
        play: function () {
            this._animate = !0,
                this.requestUpdate()
        },
        pause: function () {
            this._animate = !1
        },
        _handleFrame: function () {
            paper = this._scope;
            var t = Date.now() / 1e3
                , e = this._last ? t - this._last : 0;
            this._last = t,
                this.emit("frame", new r({
                    delta: e,
                    time: this._time += e,
                    count: this._count++
                })),
                this._stats && this._stats.update()
        },
        _animateItem: function (t, e) {
            var i = this._frameItems;
            e ? (i[t._id] = {
                item: t,
                time: 0,
                count: 0
            },
                1 == ++this._frameItemCount && this.on("frame", this._handleFrameItems)) : (delete i[t._id],
                    0 == --this._frameItemCount && this.off("frame", this._handleFrameItems))
        },
        _handleFrameItems: function (t) {
            for (var e in this._frameItems) {
                var i = this._frameItems[e];
                i.item.emit("frame", new r(t, {
                    time: i.time += t.delta,
                    count: i.count++
                }))
            }
        },
        _changed: function () {
            this._project._changed(2049),
                this._bounds = this._decomposed = e
        },
        getElement: function () {
            return this._element
        },
        getPixelRatio: function () {
            return this._pixelRatio
        },
        getResolution: function () {
            return 72 * this._pixelRatio
        },
        getViewSize: function () {
            var t = this._viewSize;
            return new _(t.width, t.height, this, "setViewSize")
        },
        setViewSize: function () {
            var t = d.read(arguments)
                , e = t.subtract(this._viewSize);
            e.isZero() || (this._setElementSize(t.width, t.height),
                this._viewSize.set(t),
                this._changed(),
                this.emit("resize", {
                    size: t,
                    delta: e
                }),
                this._autoUpdate && this.update())
        },
        _setElementSize: function (t, e) {
            var i = this._element;
            i && (i.width !== t && (i.width = t),
                i.height !== e && (i.height = e))
        },
        getBounds: function () {
            return this._bounds || (this._bounds = this._matrix.inverted()._transformBounds(new g(new c, this._viewSize))),
                this._bounds
        },
        getSize: function () {
            return this.getBounds().getSize()
        },
        isVisible: function () {
            return H.isInView(this._element)
        },
        isInserted: function () {
            return H.isInserted(this._element)
        },
        getPixelSize: function (t) {
            var e, i = this._element;
            if (i) {
                var r = i.parentNode
                    , s = n.createElement("div");
                s.style.fontSize = t,
                    r.appendChild(s),
                    e = parseFloat(H.getStyles(s).fontSize),
                    r.removeChild(s)
            } else
                e = parseFloat(e);
            return e
        },
        getTextWidth: function (t, e) {
            return 0
        }
    }, r.each(["rotate", "scale", "shear", "skew"], function (t) {
        var e = "rotate" === t;
        this[t] = function () {
            var i = (e ? r : c).read(arguments)
                , n = c.read(arguments, 0, {
                    readNull: !0
                });
            return this.transform((new p)[t](i, n || this.getCenter(!0)))
        }
    }, {
        _decompose: function () {
            return this._decomposed || (this._decomposed = this._matrix.decompose())
        },
        translate: function () {
            var t = new p;
            return this.transform(t.translate.apply(t, arguments))
        },
        getCenter: function () {
            return this.getBounds().getCenter()
        },
        setCenter: function () {
            var t = c.read(arguments);
            this.translate(this.getCenter().subtract(t))
        },
        getZoom: function () {
            var t = this._decompose()
                , e = t && t.scaling;
            return e ? (e.x + e.y) / 2 : 0
        },
        setZoom: function (t) {
            this.transform((new p).scale(t / this.getZoom(), this.getCenter()))
        },
        getRotation: function () {
            var t = this._decompose();
            return t && t.rotation
        },
        setRotation: function (t) {
            var e = this.getRotation();
            null != e && null != t && this.rotate(t - e)
        },
        getScaling: function () {
            var t = this._decompose()
                , i = t && t.scaling;
            return i ? new f(i.x, i.y, this, "setScaling") : e
        },
        setScaling: function () {
            var t = this.getScaling()
                , e = c.read(arguments, 0, {
                    clone: !0,
                    readNull: !0
                });
            t && e && this.scale(e.x / t.x, e.y / t.y)
        },
        getMatrix: function () {
            return this._matrix
        },
        setMatrix: function () {
            var t = this._matrix;
            t.initialize.apply(t, arguments)
        },
        transform: function (t) {
            this._matrix.append(t)
        },
        scrollBy: function () {
            this.translate(c.read(arguments).negate())
        }
    }), {
        projectToView: function () {
            return this._matrix._transformPoint(c.read(arguments))
        },
        viewToProject: function () {
            return this._matrix._inverseTransform(c.read(arguments))
        },
        getEventPoint: function (t) {
            return this.viewToProject(Z.getOffset(t, this._element))
        }
    }, {
        statics: {
            _views: [],
            _viewsById: {},
            _id: 0,
            create: function (t, e) {
                return n && "string" == typeof e && (e = n.getElementById(e)),
                    new (i ? W : U)(t, e)
            }
        }
    }, new function () {
        function t(t) {
            var e = Z.getTarget(t);
            return e.getAttribute && U._viewsById[e.getAttribute("id")]
        }
        function e() {
            var t = U._focused;
            if (!t || !t.isVisible())
                for (var e = 0, i = U._views.length; e < i; e++)
                    if ((t = U._views[e]).isVisible()) {
                        U._focused = h = t;
                        break
                    }
        }
        function r(t, e, i) {
            t._handleMouseEvent("mousemove", e, i)
        }
        function s(t, e, i, n, r, s, a) {
            function o(t, i) {
                if (t.responds(i)) {
                    if (h || (h = new X(i, n, r, e || t, s ? r.subtract(s) : null)),
                        t.emit(i, h) && (I = !0,
                            h.prevented && (M = !0),
                            h.stopped))
                        return u = !0
                } else {
                    var a = T[i];
                    if (a)
                        return o(t, a)
                }
            }
            for (var h, u = !1; t && t !== a && !o(t, i);)
                t = t._parent;
            return u
        }
        function a(t, e, i, n, r, a) {
            return t._project.removeOn(i),
                M = I = !1,
                b && s(b, null, i, n, r, a) || e && e !== b && !e.isDescendant(b) && s(e, null, i, n, r, a, b) || s(t, b || e || t, i, n, r, a)
        }
        if (i) {
            var o, h, u, l, c, f = !1, d = !1, _ = i.navigator;
            _.pointerEnabled || _.msPointerEnabled ? (u = "pointerdown MSPointerDown",
                l = "pointermove MSPointerMove",
                c = "pointerup pointercancel MSPointerUp MSPointerCancel") : (u = "touchstart",
                    l = "touchmove",
                    c = "touchend touchcancel",
                    "ontouchstart" in i && _.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i) || (u += " mousedown",
                        l += " mousemove",
                        c += " mouseup"));
            var g = {}
                , v = {
                    mouseout: function (t) {
                        var e = U._focused
                            , i = Z.getRelatedTarget(t);
                        if (e && (!i || "HTML" === i.nodeName)) {
                            var n = Z.getOffset(t, e._element)
                                , s = n.x
                                , a = Math.abs
                                , o = a(s)
                                , h = o - (1 << 25);
                            n.x = a(h) < o ? h * (s < 0 ? -1 : 1) : s,
                                r(e, t, e.viewToProject(n))
                        }
                    },
                    scroll: e
                };
            g[u] = function (e) {
                var i = U._focused = t(e);
                f || (f = !0,
                    i._handleMouseEvent("mousedown", e))
            }
                ,
                v[l] = function (i) {
                    var n = U._focused;
                    if (!d) {
                        var s = t(i);
                        s ? n !== s && (n && r(n, i),
                            o || (o = n),
                            n = U._focused = h = s) : h && h === n && (o && !o.isInserted() && (o = null),
                                n = U._focused = o,
                                o = null,
                                e())
                    }
                    n && r(n, i)
                }
                ,
                v[u] = function () {
                    d = !0
                }
                ,
                v[c] = function (t) {
                    var e = U._focused;
                    e && f && e._handleMouseEvent("mouseup", t),
                        d = f = !1
                }
                ,
                Z.add(n, v),
                Z.add(i, {
                    load: e
                });
            var p, m, y, w, x, b, C, S, P, I = !1, M = !1, T = {
                doubleclick: "click",
                mousedrag: "mousemove"
            }, z = !1, k = {
                mousedown: {
                    mousedown: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                },
                mouseup: {
                    mouseup: 1,
                    mousedrag: 1,
                    click: 1,
                    doubleclick: 1
                },
                mousemove: {
                    mousedrag: 1,
                    mousemove: 1,
                    mouseenter: 1,
                    mouseleave: 1
                }
            };
            return {
                _viewEvents: g,
                _handleMouseEvent: function (t, e, i) {
                    function n(t) {
                        return r.virtual[t] || l.responds(t) || u && u.responds(t)
                    }
                    var r = this._itemEvents
                        , o = r.native[t]
                        , h = "mousemove" === t
                        , u = this._scope.tool
                        , l = this;
                    h && f && n("mousedrag") && (t = "mousedrag"),
                        i || (i = this.getEventPoint(e));
                    var c = this.getBounds().contains(i)
                        , d = o && c && l._project.hitTest(i, {
                            tolerance: 0,
                            fill: !0,
                            stroke: !0
                        })
                        , _ = d && d.item || null
                        , g = !1
                        , v = {};
                    if (v[t.substr(5)] = !0,
                        o && _ !== x && (x && s(x, null, "mouseleave", e, i),
                            _ && s(_, null, "mouseenter", e, i),
                            x = _),
                        z ^ c && (s(this, null, c ? "mouseenter" : "mouseleave", e, i),
                            p = c ? this : null,
                            g = !0),
                        !c && !v.drag || i.equals(y) || (a(this, _, h ? t : "mousemove", e, i, y),
                            g = !0),
                        z = c,
                        v.down && c || v.up && m) {
                        if (a(this, _, t, e, i, m),
                            v.down) {
                            if (P = _ === C && Date.now() - S < 300,
                                w = C = _,
                                !M && _) {
                                for (var T = _; T && !T.responds("mousedrag");)
                                    T = T._parent;
                                T && (b = _)
                            }
                            m = i
                        } else
                            v.up && (M || _ !== w || (S = Date.now(),
                                a(this, _, P ? "doubleclick" : "click", e, i, m),
                                P = !1),
                                w = b = null);
                        z = !1,
                            g = !0
                    }
                    y = i,
                        g && u && (I = u._handleMouseEvent(t, e, i, v) || I),
                        (I && !v.move || v.down && n("mouseup")) && e.preventDefault()
                },
                _handleKeyEvent: function (t, e, i, n) {
                    function r(r) {
                        r.responds(t) && (paper = a,
                            r.emit(t, s = s || new J(t, e, i, n)))
                    }
                    var s, a = this._scope, o = a.tool;
                    this.isVisible() && (r(this),
                        o && o.responds(t) && r(o))
                },
                _countItemEvent: function (t, e) {
                    var i = this._itemEvents
                        , n = i.native
                        , r = i.virtual;
                    for (var s in k)
                        n[s] = (n[s] || 0) + (k[s][t] || 0) * e;
                    r[t] = (r[t] || 0) + e
                },
                statics: {
                    updateFocus: e
                }
            }
        }
    }
    )
        , W = U.extend({
            _class: "CanvasView",
            initialize: function (t, e) {
                if (!(e instanceof i.HTMLCanvasElement)) {
                    var n = d.read(arguments, 1);
                    if (n.isZero())
                        throw new Error("Cannot create CanvasView with the provided argument: " + r.slice(arguments, 1));
                    e = Q.getCanvas(n)
                }
                var s = this._context = e.getContext("2d");
                if (s.save(),
                    this._pixelRatio = 1,
                    !/^off|false$/.test(a.getAttribute(e, "hidpi"))) {
                    var o = i.devicePixelRatio || 1
                        , h = H.getPrefixed(s, "backingStorePixelRatio") || 1;
                    this._pixelRatio = o / h
                }
                U.call(this, t, e),
                    this._needsUpdate = !0
            },
            remove: function t() {
                return this._context.restore(),
                    t.base.call(this)
            },
            _setElementSize: function t(e, i) {
                var n = this._pixelRatio;
                if (t.base.call(this, e * n, i * n),
                    1 !== n) {
                    var r = this._element
                        , s = this._context;
                    if (!a.hasAttribute(r, "resize")) {
                        var o = r.style;
                        o.width = e + "px",
                            o.height = i + "px"
                    }
                    s.restore(),
                        s.save(),
                        s.scale(n, n)
                }
            },
            getPixelSize: function t(e) {
                var i, n = paper.agent;
                if (n && n.firefox)
                    i = t.base.call(this, e);
                else {
                    var r = this._context
                        , s = r.font;
                    r.font = e + " serif",
                        i = parseFloat(r.font),
                        r.font = s
                }
                return i
            },
            getTextWidth: function (t, e) {
                var i = this._context
                    , n = i.font
                    , r = 0;
                i.font = t;
                for (var s = 0, a = e.length; s < a; s++)
                    r = Math.max(r, i.measureText(e[s]).width);
                return i.font = n,
                    r
            },
            update: function () {
                if (!this._needsUpdate)
                    return !1;
                var t = this._project
                    , e = this._context
                    , i = this._viewSize;
                return e.clearRect(0, 0, i.width + 1, i.height + 1),
                    t && t.draw(e, this._matrix, this._pixelRatio),
                    this._needsUpdate = !1,
                    !0
            }
        })
        , G = r.extend({
            _class: "Event",
            initialize: function (t) {
                this.event = t,
                    this.type = t && t.type
            },
            prevented: !1,
            stopped: !1,
            preventDefault: function () {
                this.prevented = !0,
                    this.event.preventDefault()
            },
            stopPropagation: function () {
                this.stopped = !0,
                    this.event.stopPropagation()
            },
            stop: function () {
                this.stopPropagation(),
                    this.preventDefault()
            },
            getTimeStamp: function () {
                return this.event.timeStamp
            },
            getModifiers: function () {
                return $.modifiers
            }
        })
        , J = G.extend({
            _class: "KeyEvent",
            initialize: function (t, e, i, n) {
                this.type = t,
                    this.event = e,
                    this.key = i,
                    this.character = n
            },
            toString: function () {
                return "{ type: '" + this.type + "', key: '" + this.key + "', character: '" + this.character + "', modifiers: " + this.getModifiers() + " }"
            }
        })
        , $ = new function () {
            function t(t) {
                var i = t.key || t.keyIdentifier;
                return i = /^U\+/.test(i) ? String.fromCharCode(parseInt(i.substr(2), 16)) : /^Arrow[A-Z]/.test(i) ? i.substr(5) : "Unidentified" === i || i === e ? String.fromCharCode(t.keyCode) : i,
                    h[i] || (i.length > 1 ? r.hyphenate(i) : i.toLowerCase())
            }
            function s(t, e, i, n) {
                var o, h = U._focused;
                if (l[e] = t,
                    t ? c[e] = i : delete c[e],
                    e.length > 1 && (o = r.camelize(e)) in f) {
                    f[o] = t;
                    var u = paper && paper.agent;
                    if ("meta" === o && u && u.mac)
                        if (t)
                            a = {};
                        else {
                            for (var d in a)
                                d in c && s(!1, d, a[d], n);
                            a = null
                        }
                } else
                    t && a && (a[e] = i);
                h && h._handleKeyEvent(t ? "keydown" : "keyup", n, e, i)
            }
            var a, o, h = {
                "\t": "tab",
                " ": "space",
                "\b": "backspace",
                "": "delete",
                Spacebar: "space",
                Del: "delete",
                Win: "meta",
                Esc: "escape"
            }, u = {
                tab: "\t",
                space: " ",
                enter: "\r"
            }, l = {}, c = {}, f = new r({
                shift: !1,
                control: !1,
                alt: !1,
                meta: !1,
                capsLock: !1,
                space: !1
            }).inject({
                option: {
                    get: function () {
                        return this.alt
                    }
                },
                command: {
                    get: function () {
                        var t = paper && paper.agent;
                        return t && t.mac ? this.meta : this.control
                    }
                }
            });
            return Z.add(n, {
                keydown: function (e) {
                    var i = t(e)
                        , n = paper && paper.agent;
                    i.length > 1 || n && n.chrome && (e.altKey || n.mac && e.metaKey || !n.mac && e.ctrlKey) ? s(!0, i, u[i] || (i.length > 1 ? "" : i), e) : o = i
                },
                keypress: function (e) {
                    if (o) {
                        var i = t(e)
                            , n = e.charCode
                            , r = n >= 32 ? String.fromCharCode(n) : i.length > 1 ? "" : i;
                        i !== o && (i = r.toLowerCase()),
                            s(!0, i, r, e),
                            o = null
                    }
                },
                keyup: function (e) {
                    var i = t(e);
                    i in c && s(!1, i, c[i], e)
                }
            }),
                Z.add(i, {
                    blur: function (t) {
                        for (var e in c)
                            s(!1, e, c[e], t)
                    }
                }),
            {
                modifiers: f,
                isDown: function (t) {
                    return !!l[t]
                }
            }
        }
        , X = G.extend({
            _class: "MouseEvent",
            initialize: function (t, e, i, n, r) {
                this.type = t,
                    this.event = e,
                    this.point = i,
                    this.target = n,
                    this.delta = r
            },
            toString: function () {
                return "{ type: '" + this.type + "', point: " + this.point + ", target: " + this.target + (this.delta ? ", delta: " + this.delta : "") + ", modifiers: " + this.getModifiers() + " }"
            }
        })
        , Y = G.extend({
            _class: "ToolEvent",
            _item: null,
            initialize: function (t, e, i) {
                this.tool = t,
                    this.type = e,
                    this.event = i
            },
            _choosePoint: function (t, e) {
                return t || (e ? e.clone() : null)
            },
            getPoint: function () {
                return this._choosePoint(this._point, this.tool._point)
            },
            setPoint: function (t) {
                this._point = t
            },
            getLastPoint: function () {
                return this._choosePoint(this._lastPoint, this.tool._lastPoint)
            },
            setLastPoint: function (t) {
                this._lastPoint = t
            },
            getDownPoint: function () {
                return this._choosePoint(this._downPoint, this.tool._downPoint)
            },
            setDownPoint: function (t) {
                this._downPoint = t
            },
            getMiddlePoint: function () {
                return !this._middlePoint && this.tool._lastPoint ? this.tool._point.add(this.tool._lastPoint).divide(2) : this._middlePoint
            },
            setMiddlePoint: function (t) {
                this._middlePoint = t
            },
            getDelta: function () {
                return !this._delta && this.tool._lastPoint ? this.tool._point.subtract(this.tool._lastPoint) : this._delta
            },
            setDelta: function (t) {
                this._delta = t
            },
            getCount: function () {
                return this.tool[/^mouse(down|up)$/.test(this.type) ? "_downCount" : "_moveCount"]
            },
            setCount: function (t) {
                this.tool[/^mouse(down|up)$/.test(this.type) ? "downCount" : "count"] = t
            },
            getItem: function () {
                if (!this._item) {
                    var t = this.tool._scope.project.hitTest(this.getPoint());
                    if (t) {
                        for (var e = t.item, i = e._parent; /^(Group|CompoundPath)$/.test(i._class);)
                            e = i,
                                i = i._parent;
                        this._item = e
                    }
                }
                return this._item
            },
            setItem: function (t) {
                this._item = t
            },
            toString: function () {
                return "{ type: " + this.type + ", point: " + this.getPoint() + ", count: " + this.getCount() + ", modifiers: " + this.getModifiers() + " }"
            }
        })
        , K = (o.extend({
            _class: "Tool",
            _list: "tools",
            _reference: "tool",
            _events: ["onMouseDown", "onMouseUp", "onMouseDrag", "onMouseMove", "onActivate", "onDeactivate", "onEditOptions", "onKeyDown", "onKeyUp"],
            initialize: function (t) {
                o.call(this),
                    this._moveCount = -1,
                    this._downCount = -1,
                    this.set(t)
            },
            getMinDistance: function () {
                return this._minDistance
            },
            setMinDistance: function (t) {
                this._minDistance = t,
                    null != t && null != this._maxDistance && t > this._maxDistance && (this._maxDistance = t)
            },
            getMaxDistance: function () {
                return this._maxDistance
            },
            setMaxDistance: function (t) {
                this._maxDistance = t,
                    null != this._minDistance && null != t && t < this._minDistance && (this._minDistance = t)
            },
            getFixedDistance: function () {
                return this._minDistance == this._maxDistance ? this._minDistance : null
            },
            setFixedDistance: function (t) {
                this._minDistance = this._maxDistance = t
            },
            _handleMouseEvent: function (t, e, i, n) {
                function r(t, e) {
                    var r = i
                        , s = a ? c._point : c._downPoint || r;
                    if (a) {
                        if (c._moveCount && r.equals(s))
                            return !1;
                        if (s && (null != t || null != e)) {
                            var o = r.subtract(s)
                                , h = o.getLength();
                            if (h < (t || 0))
                                return !1;
                            e && (r = s.add(o.normalize(Math.min(h, e))))
                        }
                        c._moveCount++
                    }
                    return c._point = r,
                        c._lastPoint = s || r,
                        n.down && (c._moveCount = -1,
                            c._downPoint = r,
                            c._downCount++),
                        !0
                }
                function s() {
                    o && (l = c.emit(t, new Y(c, t, e)) || l)
                }
                paper = this._scope,
                    n.drag && !this.responds(t) && (t = "mousemove");
                var a = n.move || n.drag
                    , o = this.responds(t)
                    , h = this.minDistance
                    , u = this.maxDistance
                    , l = !1
                    , c = this;
                if (n.down)
                    r(),
                        s();
                else if (n.up)
                    r(null, u),
                        s();
                else if (o)
                    for (; r(h, u);)
                        s();
                return l
            }
        }),
        {
            request: function (e) {
                var i = new t.XMLHttpRequest;
                return i.open((e.method || "get").toUpperCase(), e.url, r.pick(e.async, !0)),
                    e.mimeType && i.overrideMimeType(e.mimeType),
                    i.onload = function () {
                        var t = i.status;
                        0 === t || 200 === t ? e.onLoad && e.onLoad.call(i, i.responseText) : i.onerror()
                    }
                    ,
                    i.onerror = function () {
                        var t = i.status
                            , n = 'Could not load "' + e.url + '" (Status: ' + t + ")";
                        if (!e.onError)
                            throw new Error(n);
                        e.onError(n, t)
                    }
                    ,
                    i.send(null)
            }
        })
        , Q = {
            canvases: [],
            getCanvas: function (t, e) {
                if (!i)
                    return null;
                var r, s = !0;
                "object" == typeof t && (e = t.height,
                    t = t.width),
                    this.canvases.length ? r = this.canvases.pop() : (r = n.createElement("canvas"),
                        s = !1);
                var a = r.getContext("2d");
                if (!a)
                    throw new Error("Canvas " + r + " is unable to provide a 2D context.");
                return r.width === t && r.height === e ? s && a.clearRect(0, 0, t + 1, e + 1) : (r.width = t,
                    r.height = e),
                    a.save(),
                    r
            },
            getContext: function (t, e) {
                var i = this.getCanvas(t, e);
                return i ? i.getContext("2d") : null
            },
            release: function (t) {
                var e = t && t.canvas ? t.canvas : t;
                e && e.getContext && (e.getContext("2d").restore(),
                    this.canvases.push(e))
            }
        }
        , tt = new function () {
            function t(t, e, i) {
                return .2989 * t + .587 * e + .114 * i
            }
            function e(e, i, n, r) {
                var s = r - t(e, i, n)
                    , r = t(d = e + s, _ = i + s, g = n + s)
                    , a = v(d, _, g)
                    , o = p(d, _, g);
                if (a < 0) {
                    var h = r - a;
                    d = r + (d - r) * r / h,
                        _ = r + (_ - r) * r / h,
                        g = r + (g - r) * r / h
                }
                if (o > 255) {
                    var u = 255 - r
                        , l = o - r;
                    d = r + (d - r) * u / l,
                        _ = r + (_ - r) * u / l,
                        g = r + (g - r) * u / l
                }
            }
            function i(t, e, i) {
                return p(t, e, i) - v(t, e, i)
            }
            function n(t, e, i, n) {
                var r, s = [t, e, i], a = p(t, e, i), o = v(t, e, i);
                r = 0 === v(o = o === t ? 0 : o === e ? 1 : 2, a = a === t ? 0 : a === e ? 1 : 2) ? 1 === p(o, a) ? 2 : 1 : 0,
                    s[a] > s[o] ? (s[r] = (s[r] - s[o]) * n / (s[a] - s[o]),
                        s[a] = n) : s[r] = s[a] = 0,
                    s[o] = 0,
                    d = s[0],
                    _ = s[1],
                    g = s[2]
            }
            var s, a, o, h, u, l, c, f, d, _, g, v = Math.min, p = Math.max, m = Math.abs, y = {
                multiply: function () {
                    d = u * s / 255,
                        _ = l * a / 255,
                        g = c * o / 255
                },
                screen: function () {
                    d = u + s - u * s / 255,
                        _ = l + a - l * a / 255,
                        g = c + o - c * o / 255
                },
                overlay: function () {
                    d = u < 128 ? 2 * u * s / 255 : 255 - 2 * (255 - u) * (255 - s) / 255,
                        _ = l < 128 ? 2 * l * a / 255 : 255 - 2 * (255 - l) * (255 - a) / 255,
                        g = c < 128 ? 2 * c * o / 255 : 255 - 2 * (255 - c) * (255 - o) / 255
                },
                "soft-light": function () {
                    var t = s * u / 255;
                    d = t + u * (255 - (255 - u) * (255 - s) / 255 - t) / 255,
                        _ = (t = a * l / 255) + l * (255 - (255 - l) * (255 - a) / 255 - t) / 255,
                        g = (t = o * c / 255) + c * (255 - (255 - c) * (255 - o) / 255 - t) / 255
                },
                "hard-light": function () {
                    d = s < 128 ? 2 * s * u / 255 : 255 - 2 * (255 - s) * (255 - u) / 255,
                        _ = a < 128 ? 2 * a * l / 255 : 255 - 2 * (255 - a) * (255 - l) / 255,
                        g = o < 128 ? 2 * o * c / 255 : 255 - 2 * (255 - o) * (255 - c) / 255
                },
                "color-dodge": function () {
                    d = 0 === u ? 0 : 255 === s ? 255 : v(255, 255 * u / (255 - s)),
                        _ = 0 === l ? 0 : 255 === a ? 255 : v(255, 255 * l / (255 - a)),
                        g = 0 === c ? 0 : 255 === o ? 255 : v(255, 255 * c / (255 - o))
                },
                "color-burn": function () {
                    d = 255 === u ? 255 : 0 === s ? 0 : p(0, 255 - 255 * (255 - u) / s),
                        _ = 255 === l ? 255 : 0 === a ? 0 : p(0, 255 - 255 * (255 - l) / a),
                        g = 255 === c ? 255 : 0 === o ? 0 : p(0, 255 - 255 * (255 - c) / o)
                },
                darken: function () {
                    d = u < s ? u : s,
                        _ = l < a ? l : a,
                        g = c < o ? c : o
                },
                lighten: function () {
                    d = u > s ? u : s,
                        _ = l > a ? l : a,
                        g = c > o ? c : o
                },
                difference: function () {
                    (d = u - s) < 0 && (d = -d),
                        (_ = l - a) < 0 && (_ = -_),
                        (g = c - o) < 0 && (g = -g)
                },
                exclusion: function () {
                    d = u + s * (255 - u - u) / 255,
                        _ = l + a * (255 - l - l) / 255,
                        g = c + o * (255 - c - c) / 255
                },
                hue: function () {
                    n(s, a, o, i(u, l, c)),
                        e(d, _, g, t(u, l, c))
                },
                saturation: function () {
                    n(u, l, c, i(s, a, o)),
                        e(d, _, g, t(u, l, c))
                },
                luminosity: function () {
                    e(u, l, c, t(s, a, o))
                },
                color: function () {
                    e(s, a, o, t(u, l, c))
                },
                add: function () {
                    d = v(u + s, 255),
                        _ = v(l + a, 255),
                        g = v(c + o, 255)
                },
                subtract: function () {
                    d = p(u - s, 0),
                        _ = p(l - a, 0),
                        g = p(c - o, 0)
                },
                average: function () {
                    d = (u + s) / 2,
                        _ = (l + a) / 2,
                        g = (c + o) / 2
                },
                negation: function () {
                    d = 255 - m(255 - s - u),
                        _ = 255 - m(255 - a - l),
                        g = 255 - m(255 - o - c)
                }
            }, w = this.nativeModes = r.each(["source-over", "source-in", "source-out", "source-atop", "destination-over", "destination-in", "destination-out", "destination-atop", "lighter", "darker", "copy", "xor"], function (t) {
                this[t] = !0
            }, {}), x = Q.getContext(1, 1);
            x && (r.each(y, function (t, e) {
                var i = "darken" === e
                    , n = !1;
                x.save();
                try {
                    x.fillStyle = i ? "#300" : "#a00",
                        x.fillRect(0, 0, 1, 1),
                        x.globalCompositeOperation = e,
                        x.globalCompositeOperation === e && (x.fillStyle = i ? "#a00" : "#300",
                            x.fillRect(0, 0, 1, 1),
                            n = x.getImageData(0, 0, 1, 1).data[0] !== i ? 170 : 51)
                } catch (t) { }
                x.restore(),
                    w[e] = n
            }),
                Q.release(x)),
                this.process = function (t, e, i, n, r) {
                    var v = e.canvas
                        , p = "normal" === t;
                    if (p || w[t])
                        i.save(),
                            i.setTransform(1, 0, 0, 1, 0, 0),
                            i.globalAlpha = n,
                            p || (i.globalCompositeOperation = t),
                            i.drawImage(v, r.x, r.y),
                            i.restore();
                    else {
                        var m = y[t];
                        if (!m)
                            return;
                        for (var x = i.getImageData(r.x, r.y, v.width, v.height), b = x.data, C = e.getImageData(0, 0, v.width, v.height).data, S = 0, P = b.length; S < P; S += 4) {
                            s = C[S],
                                u = b[S],
                                a = C[S + 1],
                                l = b[S + 1],
                                o = C[S + 2],
                                c = b[S + 2],
                                h = C[S + 3],
                                f = b[S + 3],
                                m();
                            var I = h * n / 255
                                , M = 1 - I;
                            b[S] = I * d + M * u,
                                b[S + 1] = I * _ + M * l,
                                b[S + 2] = I * g + M * c,
                                b[S + 3] = h * n + M * f
                        }
                        i.putImageData(x, r.x, r.y)
                    }
                }
        }
        , et = new function () {
            function t(t, e, i) {
                for (var n in e) {
                    var r = e[n]
                        , a = s[n];
                    "number" == typeof r && i && (r = i.number(r)),
                        a ? t.setAttributeNS(a, n, r) : t.setAttribute(n, r)
                }
                return t
            }
            var e = "http://www.w3.org/2000/svg"
                , i = "http://www.w3.org/2000/xmlns"
                , r = "http://www.w3.org/1999/xlink"
                , s = {
                    href: r,
                    xlink: i,
                    xmlns: i + "/",
                    "xmlns:xlink": i + "/"
                };
            return {
                svg: e,
                xmlns: i,
                xlink: r,
                create: function (i, r, s) {
                    return t(n.createElementNS(e, i), r, s)
                },
                get: function (t, e) {
                    var i = s[e]
                        , n = i ? t.getAttributeNS(i, e) : t.getAttribute(e);
                    return "null" === n ? null : n
                },
                set: t
            }
        }
        , it = r.each({
            fillColor: ["fill", "color"],
            fillRule: ["fill-rule", "string"],
            strokeColor: ["stroke", "color"],
            strokeWidth: ["stroke-width", "number"],
            strokeCap: ["stroke-linecap", "string"],
            strokeJoin: ["stroke-linejoin", "string"],
            strokeScaling: ["vector-effect", "lookup", {
                true: "none",
                false: "non-scaling-stroke"
            }, function (t, e) {
                return !e && (t instanceof A || t instanceof C || t instanceof j)
            }
            ],
            miterLimit: ["stroke-miterlimit", "number"],
            dashArray: ["stroke-dasharray", "array"],
            dashOffset: ["stroke-dashoffset", "number"],
            fontFamily: ["font-family", "string"],
            fontWeight: ["font-weight", "string"],
            fontSize: ["font-size", "number"],
            justification: ["text-anchor", "lookup", {
                left: "start",
                center: "middle",
                right: "end"
            }],
            opacity: ["opacity", "number"],
            blendMode: ["mix-blend-mode", "style"]
        }, function (t, e) {
            var i = r.capitalize(e)
                , n = t[2];
            this[e] = {
                type: t[1],
                property: e,
                attribute: t[0],
                toSVG: n,
                fromSVG: n && r.each(n, function (t, e) {
                    this[t] = e
                }, {}),
                exportFilter: t[3],
                get: "get" + i,
                set: "set" + i
            }
        }, {});
    return new function () {
        function e(t, e, i) {
            var n = new r
                , s = t.getTranslation();
            if (e) {
                var a = (t = t._shiftless())._inverseTransform(s);
                n[i ? "cx" : "x"] = a.x,
                    n[i ? "cy" : "y"] = a.y,
                    s = null
            }
            if (!t.isIdentity()) {
                var o = t.decompose();
                if (o) {
                    var h = []
                        , l = o.rotation
                        , c = o.scaling
                        , f = o.skewing;
                    s && !s.isZero() && h.push("translate(" + v.point(s) + ")"),
                        l && h.push("rotate(" + v.number(l) + ")"),
                        u.isZero(c.x - 1) && u.isZero(c.y - 1) || h.push("scale(" + v.point(c) + ")"),
                        f.x && h.push("skewX(" + v.number(f.x) + ")"),
                        f.y && h.push("skewY(" + v.number(f.y) + ")"),
                        n.transform = h.join(" ")
                } else
                    n.transform = "matrix(" + t.getValues().join(",") + ")"
            }
            return n
        }
        function i(t, i) {
            for (var n = e(t._matrix), r = t._children, s = et.create("g", n, v), a = 0, o = r.length; a < o; a++) {
                var h = r[a]
                    , u = d(h, i);
                if (u)
                    if (h.isClipMask()) {
                        var l = et.create("clipPath");
                        l.appendChild(u),
                            c(h, l, "clip"),
                            et.set(s, {
                                "clip-path": "url(#" + l.id + ")"
                            })
                    } else
                        s.appendChild(u)
            }
            return s
        }
        function n(t) {
            var i = t._type
                , n = t._radius
                , r = e(t._matrix, !0, "rectangle" !== i);
            if ("rectangle" === i) {
                i = "rect";
                var s = t._size
                    , a = s.width
                    , o = s.height;
                r.x -= a / 2,
                    r.y -= o / 2,
                    r.width = a,
                    r.height = o,
                    n.isZero() && (n = null)
            }
            return n && ("circle" === i ? r.r = n : (r.rx = n.width,
                r.ry = n.height)),
                et.create(i, r, v)
        }
        function s(t) {
            var e = o(t, "color");
            if (!e) {
                var i, n = t.getGradient(), r = n._radial, s = t.getOrigin(), a = t.getDestination();
                if (r) {
                    i = {
                        cx: s.x,
                        cy: s.y,
                        r: s.getDistance(a)
                    };
                    var h = t.getHighlight();
                    h && (i.fx = h.x,
                        i.fy = h.y)
                } else
                    i = {
                        x1: s.x,
                        y1: s.y,
                        x2: a.x,
                        y2: a.y
                    };
                i.gradientUnits = "userSpaceOnUse",
                    e = et.create((r ? "radial" : "linear") + "Gradient", i, v);
                for (var u = n._stops, l = 0, f = u.length; l < f; l++) {
                    var d = u[l]
                        , _ = d._color
                        , g = _.getAlpha()
                        , p = d._offset;
                    i = {
                        offset: null == p ? l / (f - 1) : p
                    },
                        _ && (i["stop-color"] = _.toCSS(!0)),
                        g < 1 && (i["stop-opacity"] = g),
                        e.appendChild(et.create("stop", i, v))
                }
                c(t, e, "color")
            }
            return "url(#" + e.id + ")"
        }
        function a(t, e, i) {
            var n = {}
                , a = !i && t.getParent()
                , o = [];
            return null != t._name && (n.id = t._name),
                r.each(it, function (e) {
                    var i = e.get
                        , h = e.type
                        , u = t[i]();
                    if (e.exportFilter ? e.exportFilter(t, u) : !a || !r.equals(a[i](), u)) {
                        if ("color" === h && null != u) {
                            var l = u.getAlpha();
                            l < 1 && (n[e.attribute + "-opacity"] = l)
                        }
                        "style" === h ? o.push(e.attribute + ": " + u) : n[e.attribute] = null == u ? "none" : "color" === h ? u.gradient ? s(u, t) : u.toCSS(!0) : "array" === h ? u.join(",") : "lookup" === h ? e.toSVG[u] : u
                    }
                }),
                o.length && (n.style = o.join(";")),
                1 === n.opacity && delete n.opacity,
                t._visible || (n.visibility = "hidden"),
                et.set(e, n, v)
        }
        function o(t, e) {
            return m || (m = {
                ids: {},
                svgs: {}
            }),
                t && m.svgs[e + "-" + (t._id || t.__id || (t.__id = l.get("svg")))]
        }
        function c(t, e, i) {
            m || o();
            var n = m.ids[i] = (m.ids[i] || 0) + 1;
            e.id = i + "-" + n,
                m.svgs[i + "-" + (t._id || t.__id)] = e
        }
        function f(e, i) {
            var n = e
                , r = null;
            if (m) {
                n = "svg" === e.nodeName.toLowerCase() && e;
                for (var s in m.svgs)
                    r || (n || (n = et.create("svg")).appendChild(e),
                        r = n.insertBefore(et.create("defs"), n.firstChild)),
                        r.appendChild(m.svgs[s]);
                m = null
            }
            return i.asString ? (new t.XMLSerializer).serializeToString(n) : n
        }
        function d(t, e, i) {
            var n = x[t._class]
                , r = n && n(t, e);
            if (r) {
                var s = e.onExport;
                s && (r = s(t, r, e) || r);
                var o = JSON.stringify(t._data);
                o && "{}" !== o && "null" !== o && r.setAttribute("data-paper-data", o)
            }
            return r && a(t, r, i)
        }
        function _(t) {
            return t || (t = {}),
                v = new h(t.precision),
                t
        }
        var v, m, x = {
            Group: i,
            Layer: i,
            Raster: function (t, i) {
                var n = e(t._matrix, !0)
                    , r = t.getSize()
                    , s = t.getImage();
                return n.x -= r.width / 2,
                    n.y -= r.height / 2,
                    n.width = r.width,
                    n.height = r.height,
                    n.href = 0 == i.embedImages && s && s.src || t.toDataURL(),
                    et.create("image", n, v)
            },
            Path: function (t, i) {
                var r = i.matchShapes;
                if (r) {
                    var s = t.toShape(!1);
                    if (s)
                        return n(s)
                }
                var a, o = t._segments, h = o.length, u = e(t._matrix);
                if (r && h >= 2 && !t.hasHandles())
                    if (h > 2) {
                        a = t._closed ? "polygon" : "polyline";
                        for (var l = [], c = 0; c < h; c++)
                            l.push(v.point(o[c]._point));
                        u.points = l.join(" ")
                    } else {
                        a = "line";
                        var f = o[0]._point
                            , d = o[1]._point;
                        u.set({
                            x1: f.x,
                            y1: f.y,
                            x2: d.x,
                            y2: d.y
                        })
                    }
                else
                    a = "path",
                        u.d = t.getPathData(null, i.precision);
                return et.create(a, u, v)
            },
            Shape: n,
            CompoundPath: function (t, i) {
                var n = e(t._matrix)
                    , r = t.getPathData(null, i.precision);
                return r && (n.d = r),
                    et.create("path", n, v)
            },
            SymbolItem: function (t, i) {
                var n = e(t._matrix, !0)
                    , r = t._definition
                    , s = o(r, "symbol")
                    , a = r._item
                    , h = a.getBounds();
                return s || ((s = et.create("symbol", {
                    viewBox: v.rectangle(h)
                })).appendChild(d(a, i)),
                    c(r, s, "symbol")),
                    n.href = "#" + s.id,
                    n.x += h.x,
                    n.y += h.y,
                    n.width = h.width,
                    n.height = h.height,
                    n.overflow = "visible",
                    et.create("use", n, v)
            },
            PointText: function (t) {
                var i = et.create("text", e(t._matrix, !0), v);
                return i.textContent = t._content,
                    i
            }
        };
        w.inject({
            exportSVG: function (t) {
                return t = _(t),
                    f(d(this, t, !0), t)
            }
        }),
            y.inject({
                exportSVG: function (t) {
                    t = _(t);
                    var i = this._children
                        , n = this.getView()
                        , s = r.pick(t.bounds, "view")
                        , a = t.matrix || "view" === s && n._matrix
                        , o = a && p.read([a])
                        , h = "view" === s ? new g([0, 0], n.getViewSize()) : "content" === s ? w._getBounds(i, o, {
                            stroke: !0
                        }).rect : g.read([s], 0, {
                            readNull: !0
                        })
                        , u = {
                            version: "1.1",
                            xmlns: et.svg,
                            "xmlns:xlink": et.xlink
                        };
                    h && (u.width = h.width,
                        u.height = h.height,
                        (h.x || h.y) && (u.viewBox = v.rectangle(h)));
                    var l = et.create("svg", u, v)
                        , c = l;
                    o && !o.isIdentity() && (c = l.appendChild(et.create("g", e(o), v)));
                    for (var m = 0, y = i.length; m < y; m++)
                        c.appendChild(d(i[m], t, !0));
                    return f(l, t)
                }
            })
    }
        ,
        new function () {
            function s(t, e, i, n, r) {
                var s = et.get(t, e)
                    , a = null == s ? n ? null : i ? "" : 0 : i ? s : parseFloat(s);
                return /%\s*$/.test(s) ? a / 100 * (r ? 1 : z[/x|^width/.test(e) ? "width" : "height"]) : a
            }
            function a(t, e, i, n, r) {
                return e = s(t, e || "x", !1, n, r),
                    i = s(t, i || "y", !1, n, r),
                    !n || null != e && null != i ? new c(e, i) : null
            }
            function o(t, e, i, n, r) {
                return e = s(t, e || "width", !1, n, r),
                    i = s(t, i || "height", !1, n, r),
                    !n || null != e && null != i ? new d(e, i) : null
            }
            function h(t, e, i) {
                return "none" === t ? null : "number" === e ? parseFloat(t) : "array" === e ? t ? t.split(/[\s,]+/g).map(parseFloat) : [] : "color" === e ? P(t) || t : "lookup" === e ? i[t] : t
            }
            function u(t, e, i, n) {
                var r = t.childNodes
                    , s = "clippath" === e
                    , a = "defs" === e
                    , o = new x
                    , h = o._project
                    , u = h._currentStyle
                    , l = [];
                if (s || a || (o = b(o, t, n),
                    h._currentStyle = o._style.clone()),
                    n)
                    for (var c = t.querySelectorAll("defs"), f = 0, d = c.length; f < d; f++)
                        M(c[f], i, !1);
                for (var f = 0, d = r.length; f < d; f++) {
                    var _, g = r[f];
                    1 !== g.nodeType || /^defs$/i.test(g.nodeName) || !(_ = M(g, i, !1)) || _ instanceof I || l.push(_)
                }
                return o.addChildren(l),
                    s && (o = b(o.reduce(), t, n)),
                    h._currentStyle = u,
                    (s || a) && (o.remove(),
                        o = null),
                    o
            }
            function l(t, e) {
                for (var i = t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g), n = [], r = 0, s = i.length; r < s; r += 2)
                    n.push(new c(parseFloat(i[r]), parseFloat(i[r + 1])));
                var a = new L(n);
                return "polygon" === e && a.closePath(),
                    a
            }
            function f(t, e) {
                var i, n = (s(t, "href", !0) || "").substring(1), r = "radialgradient" === e;
                if (n)
                    (i = k[n].getGradient())._radial ^ r && ((i = i.clone())._radial = r);
                else {
                    for (var o = t.childNodes, h = [], u = 0, l = o.length; u < l; u++) {
                        var c = o[u];
                        1 === c.nodeType && h.push(b(new q, c))
                    }
                    i = new R(h, r)
                }
                var f, d, _, g = "userSpaceOnUse" !== s(t, "gradientUnits", !0);
                return r ? (d = (f = a(t, "cx", "cy", !1, g)).add(s(t, "r", !1, !1, g), 0),
                    _ = a(t, "fx", "fy", !0, g)) : (f = a(t, "x1", "y1", !1, g),
                        d = a(t, "x2", "y2", !1, g)),
                    b(new F(i, f, d, _), t)._scaleToBounds = g,
                    null
            }
            function _(t, e, i, n) {
                if (t.transform) {
                    for (var r = (n.getAttribute(i) || "").split(/\)\s*/g), s = new p, a = 0, o = r.length; a < o; a++) {
                        var h = r[a];
                        if (!h)
                            break;
                        for (var u = h.split(/\(\s*/), l = u[0], c = u[1].split(/[\s,]+/g), f = 0, d = c.length; f < d; f++)
                            c[f] = parseFloat(c[f]);
                        switch (l) {
                            case "matrix":
                                s.append(new p(c[0], c[1], c[2], c[3], c[4], c[5]));
                                break;
                            case "rotate":
                                s.rotate(c[0], c[1], c[2]);
                                break;
                            case "translate":
                                s.translate(c[0], c[1]);
                                break;
                            case "scale":
                                s.scale(c);
                                break;
                            case "skewX":
                                s.skew(c[0], 0);
                                break;
                            case "skewY":
                                s.skew(0, c[0])
                        }
                    }
                    t.transform(s)
                }
            }
            function v(t, e, i) {
                var n = "fill-opacity" === i ? "getFillColor" : "getStrokeColor"
                    , r = t[n] && t[n]();
                r && r.setAlpha(parseFloat(e))
            }
            function m(t, i, n) {
                var s = t.attributes[i]
                    , a = s && s.value;
                if (!a) {
                    var o = r.camelize(i);
                    (a = t.style[o]) || n.node[o] === n.parent[o] || (a = n.node[o])
                }
                return a ? "none" === a ? null : a : e
            }
            function b(t, i, n) {
                if (i.style) {
                    var s = i.parentNode
                        , a = {
                            node: H.getStyles(i) || {},
                            parent: !n && !/^defs$/i.test(s.tagName) && H.getStyles(s) || {}
                        };
                    r.each(N, function (n, r) {
                        var s = m(i, r, a);
                        t = s !== e && n(t, s, r, i, a) || t
                    })
                }
                return t
            }
            function P(t) {
                var e = t && t.match(/\((?:["'#]*)([^"')]+)/)
                    , n = e && e[1]
                    , r = n && k[i ? n.replace(i.location.href.split("#")[0] + "#", "") : n];
                return r && r._scaleToBounds && ((r = r.clone())._scaleToBounds = !0),
                    r
            }
            function M(t, e, i) {
                var s, a, h, u = t.nodeName.toLowerCase(), l = "#document" !== u, c = n.body;
                i && l && (z = paper.getView().getSize(),
                    z = o(t, null, null, !0) || z,
                    s = et.create("svg", {
                        style: "stroke-width: 1px; stroke-miterlimit: 10"
                    }),
                    a = t.parentNode,
                    h = t.nextSibling,
                    s.appendChild(t),
                    c.appendChild(s));
                var f = paper.settings
                    , d = f.applyMatrix
                    , _ = f.insertItems;
                f.applyMatrix = !1,
                    f.insertItems = !1;
                var g = O[u]
                    , v = g && g(t, u, e, i) || null;
                if (f.insertItems = _,
                    f.applyMatrix = d,
                    v) {
                    !l || v instanceof x || (v = b(v, t, i));
                    var p = e.onImport
                        , m = l && t.getAttribute("data-paper-data");
                    p && (v = p(t, v, e) || v),
                        e.expandShapes && v instanceof C && (v.remove(),
                            v = v.toPath()),
                        m && (v._data = JSON.parse(m))
                }
                return s && (c.removeChild(s),
                    a && (h ? a.insertBefore(t, h) : a.appendChild(t))),
                    i && (k = {},
                        v && r.pick(e.applyMatrix, d) && v.matrix.apply(!0, !0)),
                    v
            }
            function T(i, r, s) {
                function a(n) {
                    try {
                        var a = "object" == typeof n ? n : (new t.DOMParser).parseFromString(n, "image/svg+xml");
                        if (!a.nodeName)
                            throw a = null,
                            new Error("Unsupported SVG source: " + i);
                        paper = h,
                            u = M(a, r, !0),
                            r && !1 === r.insert || s._insertItem(e, u);
                        var l = r.onLoad;
                        l && l(u, n)
                    } catch (t) {
                        o(t)
                    }
                }
                function o(t, e) {
                    var i = r.onError;
                    if (!i)
                        throw new Error(t);
                    i(t, e)
                }
                if (!i)
                    return null;
                r = "function" == typeof r ? {
                    onLoad: r
                } : r || {};
                var h = paper
                    , u = null;
                if ("string" != typeof i || /^.*</.test(i)) {
                    if ("undefined" != typeof File && i instanceof File) {
                        var l = new FileReader;
                        return l.onload = function () {
                            a(l.result)
                        }
                            ,
                            l.onerror = function () {
                                o(l.error)
                            }
                            ,
                            l.readAsText(i)
                    }
                    a(i)
                } else {
                    var c = n.getElementById(i);
                    c ? a(c) : K.request({
                        url: i,
                        async: !0,
                        onLoad: a,
                        onError: o
                    })
                }
                return u
            }
            var z, k = {}, O = {
                "#document": function (t, e, i, n) {
                    for (var r = t.childNodes, s = 0, a = r.length; s < a; s++) {
                        var o = r[s];
                        if (1 === o.nodeType)
                            return M(o, i, n)
                    }
                },
                g: u,
                svg: u,
                clippath: u,
                polygon: l,
                polyline: l,
                path: function (t) {
                    return A.create(t.getAttribute("d"))
                },
                lineargradient: f,
                radialgradient: f,
                image: function (t) {
                    var e = new S(s(t, "href", !0));
                    return e.on("load", function () {
                        var e = o(t);
                        this.setSize(e);
                        var i = this._matrix._transformPoint(a(t).add(e.divide(2)));
                        this.translate(i)
                    }),
                        e
                },
                symbol: function (t, e, i, n) {
                    return new I(u(t, e, i, n), !0)
                },
                defs: u,
                use: function (t) {
                    var e = (s(t, "href", !0) || "").substring(1)
                        , i = k[e]
                        , n = a(t);
                    return i ? i instanceof I ? i.place(n) : i.clone().translate(n) : null
                },
                circle: function (t) {
                    return new C.Circle(a(t, "cx", "cy"), s(t, "r"))
                },
                ellipse: function (t) {
                    return new C.Ellipse({
                        center: a(t, "cx", "cy"),
                        radius: o(t, "rx", "ry")
                    })
                },
                rect: function (t) {
                    return new C.Rectangle(new g(a(t), o(t)), o(t, "rx", "ry"))
                },
                line: function (t) {
                    return new L.Line(a(t, "x1", "y1"), a(t, "x2", "y2"))
                },
                text: function (t) {
                    var e = new E(a(t).add(a(t, "dx", "dy")));
                    return e.setContent(t.textContent.trim() || ""),
                        e
                }
            }, N = r.set(r.each(it, function (t) {
                this[t.attribute] = function (e, i) {
                    if (e[t.set] && (e[t.set](h(i, t.type, t.fromSVG)),
                        "color" === t.type)) {
                        var n = e[t.get]();
                        if (n && n._scaleToBounds) {
                            var r = e.getBounds();
                            n.transform((new p).translate(r.getPoint()).scale(r.getSize()))
                        }
                    }
                }
            }, {}), {
                id: function (t, e) {
                    k[e] = t,
                        t.setName && t.setName(e)
                },
                "clip-path": function (t, e) {
                    var i = P(e);
                    if (i) {
                        if ((i = i.clone()).setClipMask(!0),
                            !(t instanceof x))
                            return new x(i, t);
                        t.insertChild(0, i)
                    }
                },
                gradientTransform: _,
                transform: _,
                "fill-opacity": v,
                "stroke-opacity": v,
                visibility: function (t, e) {
                    t.setVisible && t.setVisible("visible" === e)
                },
                display: function (t, e) {
                    t.setVisible && t.setVisible(null !== e)
                },
                "stop-color": function (t, e) {
                    t.setColor && t.setColor(e)
                },
                "stop-opacity": function (t, e) {
                    t._color && t._color.setAlpha(parseFloat(e))
                },
                offset: function (t, e) {
                    if (t.setOffset) {
                        var i = e.match(/(.*)%$/);
                        t.setOffset(i ? i[1] / 100 : parseFloat(e))
                    }
                },
                viewBox: function (t, e, i, n, r) {
                    var s, a = new g(h(e, "array")), u = o(n, null, null, !0);
                    if (t instanceof x) {
                        var l = u ? u.divide(a.getSize()) : 1
                            , c = (new p).scale(l).translate(a.getPoint().negate());
                        s = t
                    } else
                        t instanceof I && (u && a.setSize(u),
                            s = t._item);
                    if (s) {
                        if ("visible" !== m(n, "overflow", r)) {
                            var f = new C.Rectangle(a);
                            f.setClipMask(!0),
                                s.addChild(f)
                        }
                        c && s.transform(c)
                    }
                }
            });
            w.inject({
                importSVG: function (t, e) {
                    return T(t, e, this)
                }
            }),
                y.inject({
                    importSVG: function (t, e) {
                        return this.activate(),
                            T(t, e, this)
                    }
                })
        }
        ,
        (paper = new (a.inject(r.exports, {
            Base: r,
            Numerical: u,
            Key: $,
            DomEvent: Z,
            DomElement: H,
            document: n,
            window: i,
            Symbol: I,
            PlacedSymbol: P
        }))).agent.node && require("./node/extend.js")(paper),
        "function" == typeof define && define.amd ? define("paper", paper) : "object" == typeof module && module && (module.exports = paper),
        paper
}
    .call(this, "object" == typeof self ? self : null);
/*
Script: RectanglePacker.js
  An algorithm implementation in JavaScript for rectangle packing.

Author:
  Iván Montes <drslump@drslump.biz>, <http://blog.netxus.es>

License:
  LGPL - Lesser General Public License

Credits:
  - Algorithm based on <http://www.blackpawn.com/texts/lightmaps/default.html>
*/

/*
  Class: NETXUS.RectanglePacker
  A class that finds an 'efficient' position for a rectangle inside another rectangle
  without overlapping the space already taken.
	
  Algorithm based on <http://www.blackpawn.com/texts/lightmaps/default.html>
	
  It uses a binary tree to partition the space of the parent rectangle and allocate the 
  passed rectangles by dividing the partitions into filled and empty.
*/

// Create a NETXUS namespace object if it doesn't exists
if (typeof NETXUS === 'undefined')
    var NETXUS = function () { };

/*	
  Constructor: NETXUS.RectanglePacker
  Initializes the object with the given maximum dimensions
	
  Parameters:
	
    width - The containing rectangle maximum width as integer
    height - The containing rectangle maximum height as integer
  	
*/
NETXUS.RectanglePacker = function (width, height) {

    this.root = {};

    // initialize
    this.reset(width, height);
}

/*
  Resets the object to its initial state by initializing the internal variables

  Parameters:
	
    width - The containing rectangle maximum width as integer
    height - The containing rectangle maximum height as integer
*/
NETXUS.RectanglePacker.prototype.reset = function (width, height) {
    this.root.x = 0;
    this.root.y = 0;
    this.root.w = width;
    this.root.h = height;
    delete this.root.lft;
    delete this.root.rgt;

    this.usedWidth = 0;
    this.usedHeight = 0;
}

/*
  Returns the actual used dimensions of the containing rectangle.
	
  Returns:
	
    A object composed of the properties: 'w' for width and 'h' for height. 
*/
NETXUS.RectanglePacker.prototype.getDimensions = function () {
    return {
        w: this.usedWidth,
        h: this.usedHeight
    };
}

/*
    Finds a suitable place for the given rectangle
 	
  Parameters:
	
    w - The rectangle width as integer.
    h - The rectangle height as integer.
  	
  Returns:
	
    If there is room for the rectangle then returns the coordinates as an object 
    composed of 'x' and 'y' properties. 
    If it doesn't fit returns null
*/
NETXUS.RectanglePacker.prototype.findCoords = function (w, h) {

    // private function to traverse the node tree by recursion
    function recursiveFindCoords(node, w, h) {

        // private function to clone a node coords and size
        function cloneNode(node) {
            return {
                x: node.x,
                y: node.y,
                w: node.w,
                h: node.h
            };
        }

        // if we are not at a leaf then go deeper
        if (node.lft) {
            // check first the left branch if not found then go by the right
            var coords = recursiveFindCoords(node.lft, w, h);
            return coords ? coords : recursiveFindCoords(node.rgt, w, h);
        } else {
            // if already used or it's too big then return
            if (node.used || w > node.w || h > node.h)
                return null;

            // if it fits perfectly then use this gap
            if (w == node.w && h == node.h) {
                node.used = true;
                return {
                    x: node.x,
                    y: node.y
                };
            }

            // initialize the left and right leafs by clonning the current one
            node.lft = cloneNode(node);
            node.rgt = cloneNode(node);

            // checks if we partition in vertical or horizontal
            if (node.w - w > node.h - h) {
                node.lft.w = w;
                node.rgt.x = node.x + w;
                node.rgt.w = node.w - w;
            } else {
                node.lft.h = h;
                node.rgt.y = node.y + h;
                node.rgt.h = node.h - h;
            }

            return recursiveFindCoords(node.lft, w, h);
        }
    }

    // perform the search
    var coords = recursiveFindCoords(this.root, w, h);
    // if fitted then recalculate the used dimensions
    if (coords) {
        if (this.usedWidth < coords.x + w)
            this.usedWidth = coords.x + w;
        if (this.usedHeight < coords.y + h)
            this.usedHeight = coords.y + h;
    }
    return coords;
}

function UnionFind(count) {
    this.roots = new Array(count);
    this.ranks = new Array(count);

    for (var i = 0; i < count; ++i) {
        this.roots[i] = i;
        this.ranks[i] = 0;
    }
}
// Two calls find(x) always return the same result, if link(..) has not been called in between (unique representatives)
UnionFind.prototype.find = function (x) {
    var x0 = x;
    var roots = this.roots;
    while (roots[x] != x)
        x = roots[x];

    while (roots[x0] != x) {
        var y = roots[x0];
        roots[x0] = x;
        x0 = y;
    }
    return x;
}

UnionFind.prototype.link = function (x, y) {
    var xr = this.find(x)
        , yr = this.find(y);
    if (xr == yr)
        return;

    var ranks = this.ranks
        , roots = this.roots
        , xd = ranks[xr]
        , yd = ranks[yr];

    if (xd < yd) {
        roots[xr] = yr;
    } else if (yd < xd) {
        roots[yr] = xr;
    } else {
        roots[yr] = xr;
        ++ranks[xr];
    }
}

var ICC = function () {
    var v = new Int16Array(1)
        , C = new Uint8Array(v.buffer);
    function a(e, n) {
        return e[n] << 8 | e[n + 1]
    }
    function G(e, n) {
        C[0] = e[n + 1];
        C[1] = e[n];
        return v[0]
    }
    function I(e, n) {
        return e[n] << 24 | e[n + 1] << 16 | e[n + 2] << 8 | e[n + 3]
    }
    function t(e, n, A) {
        var L = "";
        for (var k = 0; k < A; k++)
            L += String.fromCharCode(e[n + k]);
        return L
    }
    function E(e, n, A) {
        var L = [];
        for (var k = 0; k < A; k++)
            L.push(String.fromCharCode(e[n + k]));
        return L
    }
    function i(e, n, A) {
        var L = "";
        for (var k = 0; k < A; k++) {
            var z = e[n++] << 8 | e[n++];
            L += String.fromCharCode(z)
        }
        return L
    }
    function B(e) {
        var n = new Uint8Array(e);
        return {
            header: h(n, 0),
            tags: F(n, 128)
        }
    }
    function h(e, n) {
        var A = t
            , L = I
            , k = {};
        k.I = A(e, 4, 4);
        k.version = e[8] + "." + (e[9] >>> 4) + "." + (e[9] & 15);
        k.P = A(e, 12, 4);
        k.a = A(e, 16, 4);
        k.p = A(e, 20, 4);
        k.v = a(e, 24);
        for (var z = 0; z < 5; z++)
            k.v += "." + a(e, 26 + 2 * z);
        k.platform = A(e, 40, 4);
        k.d = L(e, 44);
        k.k = A(e, 48, 4);
        k.l = L(e, 52);
        k.Q = [L(e, 56), L(e, 60)];
        k.U = L(e, 64);
        k.A = d(e, 68);
        k.h = A(e, 80, 4);
        return k
    }
    function F(e, n) {
        var A = I
            , L = {}
            , k = A(e, n);
        n += 4;
        for (var z = 0; z < k; z++) {
            var r = t(e, n, 4);
            n += 4;
            var s = A(e, n);
            n += 4;
            var x = A(e, n);
            n += 4;
            L[r] = o(e, s, x)
        }
        return L
    }
    function o(e, n, A) {
        var L = t(e, n, 4)
            , k = {
                C: L,
                T: A
            };
        n += 4;
        n += 4;
        if (L == "mluc") {
            var z = [];
            for (var r = 0; r < A; r++)
                z.push(e[n - 8 + r])
        }
        if (L == "mluc")
            D(k, e, n, A);
        else if (L == "text")
            M(k, e, n, A);
        else if (L == "desc")
            u(k, e, n, A);
        else if (L == "mAB ")
            H(k, e, n, A);
        else if (L == "mft1")
            w(k, e, n, A);
        else if (L == "XYZ ")
            J(k, e, n, A);
        else if (L == "para")
            l(k, e, n, A);
        else if (L == "curv")
            K(k, e, n, A);
        else if (L != "pseq") {
            console.log("unknown tag", L, n, n, A)
        }
        if ((k.T & 3) != 0)
            k.T += 4 - (k.T & 3);
        return k
    }
    function D(e, n, A, L) {
        var k = A - 8
            , z = I(n, A);
        A += 4;
        var r = I(n, A);
        A += 4;
        e.b = [];
        for (var s = 0; s < z; s++) {
            var x = {};
            e.b.push(x);
            x.code = t(n, A, 4);
            var j = I(n, A + 4)
                , b = I(n, A + 8);
            A += 12;
            x.text = i(n, k + b, j >>> 1)
        }
    }
    function u(e, n, A, L) {
        var k = I(n, A);
        A += 4;
        e.r = t(n, A, k - 1);
        A += k;
        var z = I(n, A);
        A += 4;
        var r = I(n, A);
        A += 4;
        e.e = i(n, A, r);
        A += r;
        var s = a(n, A);
        A += 2;
        var x = n[A];
        A++;
        e.z = t(n, A, x)
    }
    function H(e, n, A, L) {
        var k = A - 8;
        e.L = n[A];
        A++;
        e.u = n[A];
        A++;
        A += 2;
        var z = I(n, A);
        A += 4;
        var r = I(n, A);
        A += 4;
        var s = I(n, A);
        A += 4;
        var x = I(n, A);
        A += 4;
        var j = I(n, A);
        A += 4;
        if (z != 0) {
            e.S = [];
            A = k + z;
            for (var b = 0; b < e.u; b++) {
                var f = o(n, A, 0);
                A += f.T;
                e.S.push(f)
            }
        }
        if (r != 0) {
            e.F = [];
            for (var b = 0; b < 12; b++)
                e.F.push(p(n, k + r + b * 4))
        }
        if (s != 0) {
            e.o = [];
            A = k + s;
            for (var b = 0; b < e.u; b++) {
                var f = o(n, A, 0);
                A += f.T;
                e.o.push(f)
            }
        }
        if (x != 0) {
            e.c = [];
            A = k + x;
            e.n = [];
            for (var b = 0; b < e.L; b++)
                e.n.push(n[A + b]);
            A += 16;
            var y = n[A];
            A += 4;
            var g = e.u;
            for (var b = 0; b < e.L; b++)
                g *= e.n[b];
            if (y == 1)
                for (var b = 0; b < g; b++)
                    e.c.push(n[A + b] * (1 / 255));
            if (y == 2)
                for (var b = 0; b < g; b++)
                    e.c.push(a(n, A + 2 * b) * (1 / 65535))
        }
        if (j != 0) {
            e.V = [];
            A = k + j;
            for (var b = 0; b < e.L; b++) {
                var f = o(n, A, 0);
                A += f.T;
                e.V.push(f)
            }
        }
    }
    function w(e, n, A, L) {
        q(e, n, A);
        A += 40;
        e.K = m(n, A, e.L, 256);
        A += e.L * 256;
        e.c = [];
        var k = Math.round(Math.pow(e.q, e.L)) * e.u;
        for (var z = 0; z < k; z++)
            e.c.push(n[A + z] * (1 / 255));
        A += k;
        e.D = m(n, A, e.u, 256);
        A += e.u * 256
    }
    function q(e, n, A) {
        e.L = n[A];
        A++;
        e.u = n[A];
        A++;
        e.q = n[A];
        A++;
        A++;
        e.F = [];
        for (var L = 0; L < 9; L++) {
            e.F.push(p(n, A));
            A += 4
        }
    }
    function m(e, n, A, L) {
        var k = [];
        for (var z = 0; z < A; z++) {
            var r = [];
            k.push(r);
            for (var s = 0; s < L; s++) {
                r.push(e[n]);
                n++
            }
        }
        return k
    }
    function l(e, n, A, L) {
        e.s = a(n, A);
        A += 2;
        A += 2;
        var k = [1, 3, 4, 5, 7];
        e.f = [];
        for (var z = 0; z < k[e.s]; z++)
            e.f.push(p(n, A + z * 4))
    }
    function K(e, n, A, L) {
        var k = I(n, A);
        A += 4;
        e.b = [];
        if (k == 1)
            e.b.push(c(n, A));
        else
            for (var z = 0; z < k; z++)
                e.b.push(a(n, A + z * 2));
        e.T = 12 + 2 * k
    }
    function J(e, n, A) {
        e.value = d(n, A)
    }
    function M(e, n, A, L) {
        e.value = t(n, A, L - 9)
    }
    function c(e, n) {
        return e[n] + e[n + 1] / 256
    }
    function p(e, n) {
        return G(e, n) + a(e, n + 2) * (1 / 65536)
    }
    function d(e, n) {
        var A = [];
        for (var L = 0; L < 3; L++)
            A.push(p(e, n + L * 4));
        return A
    }
    return {
        R: B
    }
}();
ICC.U = function () {
    var v = {
        O: [3.1338561, -1.6168667, -.4906146, -.9787684, 1.9161415, .033454, .0719453, -.2289914, 1.4052427],
        H: [.4360747, .3850649, .14308038, .2225045, .7168786, .0606169, .0139322, .0971045, .7141733],
        m: function (F) {
            return F < .0031308 ? 12.92 * F : 1.055 * Math.pow(F, 1 / 2.4) - .055
        },
        G: function (F) {
            return F < .04045 ? F / 12.92 : Math.pow((F + .055) / 1.055, 2.4)
        },
        J: function (F, o, D) {
            var u = v.R[0]
                , H = v.R[1];
            F = u[~~(F * (1e3 / 255))];
            o = u[~~(o * (1e3 / 255))];
            D = u[~~(D * (1e3 / 255))];
            var w = v.H
                , q = w[0] * F + w[1] * o + w[2] * D
                , l = w[3] * F + w[4] * o + w[5] * D
                , K = w[6] * F + w[7] * o + w[8] * D;
            q = q * (100 / 96.72);
            l = l * (100 / 100);
            K = K * (100 / 81.427);
            return v.i(q, l, K)
        },
        i: function (F, o, D) {
            var u = v.R[1]
                , H = u[~~(F * 1e3)]
                , w = u[~~(o * 1e3)]
                , q = u[~~(D * 1e3)];
            return {
                t: 116 * w - 16,
                j: 500 * (H - w),
                N: 200 * (w - q)
            }
        },
        w: function (F, o, D) {
            var u = 903.3
                , H = .008856
                , w = (F + 16) / 116
                , q = w * w * w
                , m = w - D / 200
                , l = m * m * m
                , K = o / 500 + w
                , J = K * K * K
                , M = l > H ? l : (116 * m - 16) / u
                , c = q > H ? q : (116 * w - 16) / u
                , p = J > H ? J : (116 * K - 16) / u
                , d = p * 96.72
                , e = c * 100
                , n = M * 81.427
                , A = d / 100
                , k = e / 100
                , D = n / 100
                , z = v.O
                , r = [z[0] * A + z[1] * k + z[2] * D, z[3] * A + z[4] * k + z[5] * D, z[6] * A + z[7] * k + z[8] * D];
            for (var s = 0; s < 3; s++)
                r[s] = Math.max(0, Math.min(255, v.m(r[s]) * 255));
            return {
                g: r[0],
                q: r[1],
                N: r[2]
            }
        }
    };
    v.R = function () {
        var F = []
            , o = [];
        for (var D = 0; D < 2e3; D++) {
            var u = D / 1e3;
            F[D] = v.G(u);
            o[D] = u > .008856 ? Math.pow(u, 1 / 3) : (903.3 * u + 16) * (1 / 116)
        }
        return [F, o]
    }();
    function C(F, o) {
        var D = o * o * o
            , u = D * 3
            , H = 1 / (o - 1)
            , w = [];
        for (var q = 0; q < o; q++)
            for (var l = 0; l < o; l++)
                for (var K = 0; K < o; K++)
                    w.push(q * H, l * H, K * H);
        var J = F.tags.A2B0
            , M = F.header.a.toLowerCase();
        if (J.C == "mAB ") {
            var c = J.F
                , p = J.o && J.o[0].b.length > 1 ? J.o : null;
            for (var d = 0; d < u; d += 3) {
                if (p)
                    G(w, d, p);
                t(w, d, J.c, J.n[0]);
                if (J.F)
                    a(w, d, J.F)
            }
        } else if (J.C == "mft1") {
            if (M == "rgb ")
                for (var d = 0; d < u; d += 3) {
                    t(w, d, J.c, J.q)
                }
            else
                for (var d = 0; d < u; d += 3) {
                    var e = v.J(w[d] * 255, w[d + 1] * 255, w[d + 2] * 255);
                    w[d] = e.t / 100;
                    w[d + 1] = (128 + e.j) / 255;
                    w[d + 2] = (128 + e.N) / 255;
                    t(w, d, J.c, J.q);
                    var n = v.w(w[d] * 100, -128 + 255 * w[d + 1], -128 + 255 * w[d + 2]);
                    w[d] = n.g / 255;
                    w[d + 1] = n.q / 255;
                    w[d + 2] = n.N / 255
                }
        }
        return w
    }
    function a(F, o, D) {
        var u = F[o]
            , H = F[o + 1]
            , w = F[o + 2];
        F[o] = Math.max(0, Math.min(1, D[0] * u + D[1] * H + D[2] * w + D[9]));
        F[o + 1] = Math.max(0, Math.min(1, D[3] * u + D[4] * H + D[5] * w + D[10]));
        F[o + 2] = Math.max(0, Math.min(1, D[6] * u + D[7] * H + D[8] * w + D[11]))
    }
    function G(F, o, D) {
        F[o] = I(F[o], D[0].b);
        F[o + 1] = I(F[o + 1], D[1].b);
        F[o + 2] = I(F[o + 2], D[2].b)
    }
    function I(F, o) {
        var D = o.length
            , u = F * (D - 1) * .99999
            , H = ~~u
            , w = u - H;
        return ((1 - w) * o[H] + w * o[H + 1]) * (1 / 65535)
    }
    function t(F, o, D, u) {
        var H = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            , w = u - 1.000001
            , q = w * F[o + 0]
            , l = w * F[o + 1]
            , K = w * F[o + 2]
            , J = ~~q
            , M = ~~l
            , c = ~~K;
        E(3 * (c + u * M + u * u * J), 3 * (c + 1 + u * M + u * u * J), D, K - c, 0, H);
        E(3 * (c + u * (M + 1) + u * u * J), 3 * (c + 1 + u * (M + 1) + u * u * J), D, K - c, 3, H);
        E(0, 3, H, l - M, 6, H);
        E(3 * (c + u * M + u * u * (J + 1)), 3 * (c + 1 + u * M + u * u * (J + 1)), D, K - c, 0, H);
        E(3 * (c + u * (M + 1) + u * u * (J + 1)), 3 * (c + 1 + u * (M + 1) + u * u * (J + 1)), D, K - c, 3, H);
        E(0, 3, H, l - M, 9, H);
        E(6, 9, H, q - J, 0, H);
        F[o] = H[0];
        F[o + 1] = H[1];
        F[o + 2] = H[2]
    }
    function E(F, o, D, u, H, w) {
        var q = 1 - u;
        w[H + 0] = q * D[F] + u * D[o];
        w[H + 1] = q * D[F + 1] + u * D[o + 1];
        w[H + 2] = q * D[F + 2] + u * D[o + 2]
    }
    function i(F, o) {
        var D = o * o * o
            , u = new Uint8Array(D * 4);
        for (var H = 0; H < D; H++) {
            var w = H * 3
                , q = w + H
                , m = Math.max(0, Math.min(1, F[w]))
                , l = Math.max(0, Math.min(1, F[w + 1]))
                , K = Math.max(0, Math.min(1, F[w + 2]));
            u[q] = ~~(.5 + m * 255);
            u[q + 1] = ~~(.5 + l * 255);
            u[q + 2] = ~~(.5 + K * 255);
            u[q + 3] = 255;
            F[w] = m;
            F[w + 1] = l;
            F[w + 2] = K
        }
        return u
    }
    function B(F, o, D, u, H, w) {
        var q = 1 - u;
        w[H + 0] = q * D[F] + u * D[o];
        w[H + 1] = q * D[F + 1] + u * D[o + 1];
        w[H + 2] = q * D[F + 2] + u * D[o + 2]
    }
    function h(F, o, D, u) {
        var H = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            , w = (o - 1.000001) / 255
            , q = 3;
        for (var m = 0; m < D.length; m += 4) {
            var l = w * D[m]
                , K = w * D[m + 1]
                , J = w * D[m + 2]
                , M = ~~l
                , c = ~~K
                , p = ~~J;
            B(q * (p + o * c + o * o * M), q * (p + 1 + o * c + o * o * M), F, J - p, 0, H);
            B(q * (p + o * (c + 1) + o * o * M), q * (p + 1 + o * (c + 1) + o * o * M), F, J - p, 3, H);
            B(0, 3, H, K - c, 6, H);
            B(q * (p + o * c + o * o * (M + 1)), q * (p + 1 + o * c + o * o * (M + 1)), F, J - p, 0, H);
            B(q * (p + o * (c + 1) + o * o * (M + 1)), q * (p + 1 + o * (c + 1) + o * o * (M + 1)), F, J - p, 3, H);
            B(0, 3, H, K - c, 9, H);
            B(6, 9, H, l - M, 0, H);
            u[m] = ~~(.5 + H[0] * 255);
            u[m + 1] = ~~(.5 + H[1] * 255);
            u[m + 2] = ~~(.5 + H[2] * 255)
        }
    }
    return {
        rgba8LUT: i,
        sampleLUT: C,
        applyLUT: h
    }
}()
/*
 * [js-sha1]{@link https://github.com/emn178/js-sha1}
 *
 * @version 0.6.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
!function () {
    "use strict";
    function t(t) {
        t ? (f[0] = f[16] = f[1] = f[2] = f[3] = f[4] = f[5] = f[6] = f[7] = f[8] = f[9] = f[10] = f[11] = f[12] = f[13] = f[14] = f[15] = 0,
            this.blocks = f) : this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            this.h0 = 1732584193,
            this.h1 = 4023233417,
            this.h2 = 2562383102,
            this.h3 = 271733878,
            this.h4 = 3285377520,
            this.block = this.start = this.bytes = this.hBytes = 0,
            this.finalized = this.hashed = !1,
            this.first = !0
    }
    var h = "object" == typeof window ? window : {}
        , s = !h.JS_SHA1_NO_NODE_JS && "object" == typeof process && process.versions && process.versions.node;
    s && (h = global);
    var i = !h.JS_SHA1_NO_COMMON_JS && "object" == typeof module && module.exports
        , e = "function" == typeof define && define.amd
        , r = "0123456789abcdef".split("")
        , o = [-2147483648, 8388608, 32768, 128]
        , n = [24, 16, 8, 0]
        , a = ["hex", "array", "digest", "arrayBuffer"]
        , f = []
        , u = function (h) {
            return function (s) {
                return new t(!0).update(s)[h]()
            }
        }
        , c = function () {
            var h = u("hex");
            s && (h = p(h)),
                h.create = function () {
                    return new t
                }
                ,
                h.update = function (t) {
                    return h.create().update(t)
                }
                ;
            for (var i = 0; i < a.length; ++i) {
                var e = a[i];
                h[e] = u(e)
            }
            return h
        }
        , p = function (t) {
            var h = eval("require('crypto')")
                , s = eval("require('buffer').Buffer")
                , i = function (i) {
                    if ("string" == typeof i)
                        return h.createHash("sha1").update(i, "utf8").digest("hex");
                    if (i.constructor === ArrayBuffer)
                        i = new Uint8Array(i);
                    else if (void 0 === i.length)
                        return t(i);
                    return h.createHash("sha1").update(new s(i)).digest("hex")
                };
            return i
        };
    t.prototype.update = function (t) {
        if (!this.finalized) {
            var s = "string" != typeof t;
            s && t.constructor === h.ArrayBuffer && (t = new Uint8Array(t));
            for (var i, e, r = 0, o = t.length || 0, a = this.blocks; r < o;) {
                if (this.hashed && (this.hashed = !1,
                    a[0] = this.block,
                    a[16] = a[1] = a[2] = a[3] = a[4] = a[5] = a[6] = a[7] = a[8] = a[9] = a[10] = a[11] = a[12] = a[13] = a[14] = a[15] = 0),
                    s)
                    for (e = this.start; r < o && e < 64; ++r)
                        a[e >> 2] |= t[r] << n[3 & e++];
                else
                    for (e = this.start; r < o && e < 64; ++r)
                        (i = t.charCodeAt(r)) < 128 ? a[e >> 2] |= i << n[3 & e++] : i < 2048 ? (a[e >> 2] |= (192 | i >> 6) << n[3 & e++],
                            a[e >> 2] |= (128 | 63 & i) << n[3 & e++]) : i < 55296 || i >= 57344 ? (a[e >> 2] |= (224 | i >> 12) << n[3 & e++],
                                a[e >> 2] |= (128 | i >> 6 & 63) << n[3 & e++],
                                a[e >> 2] |= (128 | 63 & i) << n[3 & e++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & t.charCodeAt(++r)),
                                    a[e >> 2] |= (240 | i >> 18) << n[3 & e++],
                                    a[e >> 2] |= (128 | i >> 12 & 63) << n[3 & e++],
                                    a[e >> 2] |= (128 | i >> 6 & 63) << n[3 & e++],
                                    a[e >> 2] |= (128 | 63 & i) << n[3 & e++]);
                this.lastByteIndex = e,
                    this.bytes += e - this.start,
                    e >= 64 ? (this.block = a[16],
                        this.start = e - 64,
                        this.hash(),
                        this.hashed = !0) : this.start = e
            }
            return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0,
                this.bytes = this.bytes % 4294967296),
                this
        }
    }
        ,
        t.prototype.finalize = function () {
            if (!this.finalized) {
                this.finalized = !0;
                var t = this.blocks
                    , h = this.lastByteIndex;
                t[16] = this.block,
                    t[h >> 2] |= o[3 & h],
                    this.block = t[16],
                    h >= 56 && (this.hashed || this.hash(),
                        t[0] = this.block,
                        t[16] = t[1] = t[2] = t[3] = t[4] = t[5] = t[6] = t[7] = t[8] = t[9] = t[10] = t[11] = t[12] = t[13] = t[14] = t[15] = 0),
                    t[14] = this.hBytes << 3 | this.bytes >>> 29,
                    t[15] = this.bytes << 3,
                    this.hash()
            }
        }
        ,
        t.prototype.hash = function () {
            var t, h, s = this.h0, i = this.h1, e = this.h2, r = this.h3, o = this.h4, n = this.blocks;
            for (t = 16; t < 80; ++t)
                h = n[t - 3] ^ n[t - 8] ^ n[t - 14] ^ n[t - 16],
                    n[t] = h << 1 | h >>> 31;
            for (t = 0; t < 20; t += 5)
                s = (h = (i = (h = (e = (h = (r = (h = (o = (h = s << 5 | s >>> 27) + (i & e | ~i & r) + o + 1518500249 + n[t] << 0) << 5 | o >>> 27) + (s & (i = i << 30 | i >>> 2) | ~s & e) + r + 1518500249 + n[t + 1] << 0) << 5 | r >>> 27) + (o & (s = s << 30 | s >>> 2) | ~o & i) + e + 1518500249 + n[t + 2] << 0) << 5 | e >>> 27) + (r & (o = o << 30 | o >>> 2) | ~r & s) + i + 1518500249 + n[t + 3] << 0) << 5 | i >>> 27) + (e & (r = r << 30 | r >>> 2) | ~e & o) + s + 1518500249 + n[t + 4] << 0,
                    e = e << 30 | e >>> 2;
            for (; t < 40; t += 5)
                s = (h = (i = (h = (e = (h = (r = (h = (o = (h = s << 5 | s >>> 27) + (i ^ e ^ r) + o + 1859775393 + n[t] << 0) << 5 | o >>> 27) + (s ^ (i = i << 30 | i >>> 2) ^ e) + r + 1859775393 + n[t + 1] << 0) << 5 | r >>> 27) + (o ^ (s = s << 30 | s >>> 2) ^ i) + e + 1859775393 + n[t + 2] << 0) << 5 | e >>> 27) + (r ^ (o = o << 30 | o >>> 2) ^ s) + i + 1859775393 + n[t + 3] << 0) << 5 | i >>> 27) + (e ^ (r = r << 30 | r >>> 2) ^ o) + s + 1859775393 + n[t + 4] << 0,
                    e = e << 30 | e >>> 2;
            for (; t < 60; t += 5)
                s = (h = (i = (h = (e = (h = (r = (h = (o = (h = s << 5 | s >>> 27) + (i & e | i & r | e & r) + o - 1894007588 + n[t] << 0) << 5 | o >>> 27) + (s & (i = i << 30 | i >>> 2) | s & e | i & e) + r - 1894007588 + n[t + 1] << 0) << 5 | r >>> 27) + (o & (s = s << 30 | s >>> 2) | o & i | s & i) + e - 1894007588 + n[t + 2] << 0) << 5 | e >>> 27) + (r & (o = o << 30 | o >>> 2) | r & s | o & s) + i - 1894007588 + n[t + 3] << 0) << 5 | i >>> 27) + (e & (r = r << 30 | r >>> 2) | e & o | r & o) + s - 1894007588 + n[t + 4] << 0,
                    e = e << 30 | e >>> 2;
            for (; t < 80; t += 5)
                s = (h = (i = (h = (e = (h = (r = (h = (o = (h = s << 5 | s >>> 27) + (i ^ e ^ r) + o - 899497514 + n[t] << 0) << 5 | o >>> 27) + (s ^ (i = i << 30 | i >>> 2) ^ e) + r - 899497514 + n[t + 1] << 0) << 5 | r >>> 27) + (o ^ (s = s << 30 | s >>> 2) ^ i) + e - 899497514 + n[t + 2] << 0) << 5 | e >>> 27) + (r ^ (o = o << 30 | o >>> 2) ^ s) + i - 899497514 + n[t + 3] << 0) << 5 | i >>> 27) + (e ^ (r = r << 30 | r >>> 2) ^ o) + s - 899497514 + n[t + 4] << 0,
                    e = e << 30 | e >>> 2;
            this.h0 = this.h0 + s << 0,
                this.h1 = this.h1 + i << 0,
                this.h2 = this.h2 + e << 0,
                this.h3 = this.h3 + r << 0,
                this.h4 = this.h4 + o << 0
        }
        ,
        t.prototype.hex = function () {
            this.finalize();
            var t = this.h0
                , h = this.h1
                , s = this.h2
                , i = this.h3
                , e = this.h4;
            return r[t >> 28 & 15] + r[t >> 24 & 15] + r[t >> 20 & 15] + r[t >> 16 & 15] + r[t >> 12 & 15] + r[t >> 8 & 15] + r[t >> 4 & 15] + r[15 & t] + r[h >> 28 & 15] + r[h >> 24 & 15] + r[h >> 20 & 15] + r[h >> 16 & 15] + r[h >> 12 & 15] + r[h >> 8 & 15] + r[h >> 4 & 15] + r[15 & h] + r[s >> 28 & 15] + r[s >> 24 & 15] + r[s >> 20 & 15] + r[s >> 16 & 15] + r[s >> 12 & 15] + r[s >> 8 & 15] + r[s >> 4 & 15] + r[15 & s] + r[i >> 28 & 15] + r[i >> 24 & 15] + r[i >> 20 & 15] + r[i >> 16 & 15] + r[i >> 12 & 15] + r[i >> 8 & 15] + r[i >> 4 & 15] + r[15 & i] + r[e >> 28 & 15] + r[e >> 24 & 15] + r[e >> 20 & 15] + r[e >> 16 & 15] + r[e >> 12 & 15] + r[e >> 8 & 15] + r[e >> 4 & 15] + r[15 & e]
        }
        ,
        t.prototype.toString = t.prototype.hex,
        t.prototype.digest = function () {
            this.finalize();
            var t = this.h0
                , h = this.h1
                , s = this.h2
                , i = this.h3
                , e = this.h4;
            return [t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, h >> 24 & 255, h >> 16 & 255, h >> 8 & 255, 255 & h, s >> 24 & 255, s >> 16 & 255, s >> 8 & 255, 255 & s, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, 255 & i, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e]
        }
        ,
        t.prototype.array = t.prototype.digest,
        t.prototype.arrayBuffer = function () {
            this.finalize();
            var t = new ArrayBuffer(20)
                , h = new DataView(t);
            return h.setUint32(0, this.h0),
                h.setUint32(4, this.h1),
                h.setUint32(8, this.h2),
                h.setUint32(12, this.h3),
                h.setUint32(16, this.h4),
                t
        }
        ;
    var y = c();
    i ? module.exports = y : (h.sha1 = y,
        e && define(function () {
            return y
        }))
}();
var EXRLoader = {
    parse: function (e) {
        var r = {
            FloatType: 1,
            UnsignedByteType: 2,
            HalfFloatType: 3,
            RGBEFormat: 4
        };
        this.type = r.FloatType;
        var a = 65536
            , n = a >> 3
            , t = 14
            , i = 65537
            , o = 1 << t
            , f = o - 1
            , l = 32768
            , u = 65535
            , s = 59
            , v = 63
            , c = 2 + v - s
            , h = 8
            , w = 4
            , p = 4
            , y = 2
            , d = 1
            , g = 0
            , A = 1
            , S = 0
            , U = 1
            , b = 2
            , m = Math.pow(2.7182818, 2.2)
            , M = new DataView(new ArrayBuffer(8));
        function C(e) {
            if (0 === e)
                return [e, 0];
            M.setFloat64(0, e);
            var r = M.getUint32(0) >>> 20 & 2047;
            0 === r && (M.setFloat64(0, e * Math.pow(2, 64)),
                r = (M.getUint32(0) >>> 20 & 2047) - 64);
            var a = r - 1022;
            return [function (e, r) {
                for (var a = Math.min(3, Math.ceil(Math.abs(r) / 1023)), n = e, t = 0; t < a; t++)
                    n *= Math.pow(2, Math.floor((r + t) / a));
                return n
            }(e, -a), a]
        }
        var O = {
            l: 0,
            c: 0,
            lc: 0
        };
        function I(e, r, a, n, t) {
            for (; a < e;)
                r = r << 8 | te(n, t),
                    a += 8;
            a -= e,
                O.l = r >> a & (1 << e) - 1,
                O.c = r,
                O.lc = a
        }
        var E = new Array(59);
        function R(e, r, a, n, t, o, f) {
            for (var l = a, u = 0, h = 0; t <= o; t++) {
                if (l.value - a.value > n)
                    return !1;
                I(6, u, h, e, l);
                var w = O.l;
                if (u = O.c,
                    h = O.lc,
                    f[t] = w,
                    w == v) {
                    if (l.value - a.value > n)
                        throw "Something wrong with hufUnpackEncTable";
                    I(8, u, h, e, l);
                    var p = O.l + c;
                    if (u = O.c,
                        h = O.lc,
                        t + p > o + 1)
                        throw "Something wrong with hufUnpackEncTable";
                    for (; p--;)
                        f[t++] = 0;
                    t--
                } else if (w >= s) {
                    if (t + (p = w - s + 2) > o + 1)
                        throw "Something wrong with hufUnpackEncTable";
                    for (; p--;)
                        f[t++] = 0;
                    t--
                }
            }
            !function (e) {
                for (var r = 0; r <= 58; ++r)
                    E[r] = 0;
                for (r = 0; r < i; ++r)
                    E[e[r]] += 1;
                var a = 0;
                for (r = 58; r > 0; --r) {
                    var n = a + E[r] >> 1;
                    E[r] = a,
                        a = n
                }
                for (r = 0; r < i; ++r) {
                    var t = e[r];
                    t > 0 && (e[r] = t | E[t]++ << 6)
                }
            }(f)
        }
        function x(e) {
            return 63 & e
        }
        function P(e) {
            return e >> 6
        }
        var z = {
            c: 0,
            lc: 0
        };
        function N(e, r, a, n) {
            e = e << 8 | te(a, n),
                r += 8,
                z.c = e,
                z.lc = r
        }
        var T = {
            c: 0,
            lc: 0
        };
        function k(e, r, a, n, t, i, o, f, l, u) {
            if (e == r) {
                n < 8 && (N(a, n, t, o),
                    a = z.c,
                    n = z.lc);
                var s = a >> (n -= 8);
                s = new Uint8Array([s])[0];
                if (l.value + s > u)
                    return !1;
                for (var v = f[l.value - 1]; s-- > 0;)
                    f[l.value++] = v
            } else {
                if (!(l.value < u))
                    return !1;
                f[l.value++] = e
            }
            T.c = a,
                T.lc = n
        }
        function _(e) {
            return 65535 & e
        }
        function D(e) {
            var r = _(e);
            return r > 32767 ? r - 65536 : r
        }
        var F = {
            a: 0,
            b: 0
        };
        function B(e, r) {
            var a = D(e)
                , n = D(r)
                , t = a + (1 & n) + (n >> 1)
                , i = t
                , o = t - n;
            F.a = i,
                F.b = o
        }
        function L(e, r) {
            var a = _(e)
                , n = _(r)
                , t = a - (n >> 1) & u
                , i = n + t - l & u;
            F.a = i,
                F.b = t
        }
        function X(e, r, a, n, t, i, o) {
            for (var f, l = o < 16384, u = a > t ? t : a, s = 1; s <= u;)
                s <<= 1;
            for (f = s >>= 1,
                s >>= 1; s >= 1;) {
                for (var v, c, h, w, p = 0, y = p + i * (t - f), d = i * s, g = i * f, A = n * s, S = n * f; p <= y; p += g) {
                    for (var U = p, b = p + n * (a - f); U <= b; U += S) {
                        var m = U + A
                            , M = (C = U + d) + A;
                        l ? (B(e[U + r], e[C + r]),
                            v = F.a,
                            h = F.b,
                            B(e[m + r], e[M + r]),
                            c = F.a,
                            w = F.b,
                            B(v, c),
                            e[U + r] = F.a,
                            e[m + r] = F.b,
                            B(h, w),
                            e[C + r] = F.a,
                            e[M + r] = F.b) : (L(e[U + r], e[C + r]),
                                v = F.a,
                                h = F.b,
                                L(e[m + r], e[M + r]),
                                c = F.a,
                                w = F.b,
                                L(v, c),
                                e[U + r] = F.a,
                                e[m + r] = F.b,
                                L(h, w),
                                e[C + r] = F.a,
                                e[M + r] = F.b)
                    }
                    if (a & s) {
                        var C = U + d;
                        l ? B(e[U + r], e[C + r]) : L(e[U + r], e[C + r]),
                            v = F.a,
                            e[C + r] = F.b,
                            e[U + r] = v
                    }
                }
                if (t & s)
                    for (U = p,
                        b = p + n * (a - f); U <= b; U += S) {
                        m = U + A;
                        l ? B(e[U + r], e[m + r]) : L(e[U + r], e[m + r]),
                            v = F.a,
                            e[m + r] = F.b,
                            e[U + r] = v
                    }
                f = s,
                    s >>= 1
            }
            return p
        }
        function V(e, r, a, n, l, u) {
            var s = a.value
                , v = ne(r, a)
                , c = ne(r, a);
            a.value += 4;
            var h = ne(r, a);
            if (a.value += 4,
                v < 0 || v >= i || c < 0 || c >= i)
                throw "Something wrong with HUF_ENCSIZE";
            var w = new Array(i)
                , p = new Array(o);
            if (function (e) {
                for (var r = 0; r < o; r++)
                    e[r] = {},
                        e[r].len = 0,
                        e[r].lit = 0,
                        e[r].p = null
            }(p),
                R(e, 0, a, n - (a.value - s), v, c, w),
                h > 8 * (n - (a.value - s)))
                throw "Something wrong with hufUncompress";
            !function (e, r, a, n) {
                for (; r <= a; r++) {
                    var i = P(e[r])
                        , o = x(e[r]);
                    if (i >> o)
                        throw "Invalid table entry";
                    if (o > t) {
                        if ((s = n[i >> o - t]).len)
                            throw "Invalid table entry";
                        if (s.lit++,
                            s.p) {
                            var f = s.p;
                            s.p = new Array(s.lit);
                            for (var l = 0; l < s.lit - 1; ++l)
                                s.p[l] = f[l]
                        } else
                            s.p = new Array(1);
                        s.p[s.lit - 1] = r
                    } else if (o) {
                        var u = 0;
                        for (l = 1 << t - o; l > 0; l--) {
                            var s;
                            if ((s = n[(i << t - o) + u]).len || s.p)
                                throw "Invalid table entry";
                            s.len = o,
                                s.lit = r,
                                u++
                        }
                    }
                }
            }(w, v, c, p),
                function (e, r, a, n, i, o, l, u, s, v) {
                    for (var c = 0, h = 0, w = u, p = Math.trunc(i.value + (o + 7) / 8); i.value < p;)
                        for (N(c, h, a, i),
                            c = z.c,
                            h = z.lc; h >= t;)
                            if ((A = r[c >> h - t & f]).len)
                                h -= A.len,
                                    k(A.lit, l, c, h, a, 0, i, s, v, w),
                                    c = T.c,
                                    h = T.lc;
                            else {
                                if (!A.p)
                                    throw "hufDecode issues";
                                var y;
                                for (y = 0; y < A.lit; y++) {
                                    for (var d = x(e[A.p[y]]); h < d && i.value < p;)
                                        N(c, h, a, i),
                                            c = z.c,
                                            h = z.lc;
                                    if (h >= d && P(e[A.p[y]]) == (c >> h - d & (1 << d) - 1)) {
                                        h -= d,
                                            k(A.p[y], l, c, h, a, 0, i, s, v, w),
                                            c = T.c,
                                            h = T.lc;
                                        break
                                    }
                                }
                                if (y == A.lit)
                                    throw "hufDecode issues"
                            }
                    var g = 8 - o & 7;
                    for (c >>= g,
                        h -= g; h > 0;) {
                        var A;
                        if (!(A = r[c << t - h & f]).len)
                            throw "hufDecode issues";
                        h -= A.len,
                            k(A.lit, l, c, h, a, 0, i, s, v, w),
                            c = T.c,
                            h = T.lc
                    }
                }(w, p, e, 0, a, h, c, u, l, {
                    value: 0
                })
        }
        function Z(e) {
            for (var r = 1; r < e.length; r++) {
                var a = e[r - 1] + e[r] - 128;
                e[r] = a
            }
        }
        function H(e, r) {
            for (var a = 0, n = Math.floor((e.length + 1) / 2), t = 0, i = e.length - 1; !(t > i || (r[t++] = e[a++],
                t > i));)
                r[t++] = e[n++]
        }
        function W(e) {
            for (var r = e.byteLength, a = new Array, n = 0, t = new DataView(e); r > 0;) {
                var i = t.getInt8(n++);
                if (i < 0) {
                    r -= (f = -i) + 1;
                    for (var o = 0; o < f; o++)
                        a.push(t.getUint8(n++))
                } else {
                    var f = i;
                    r -= 2;
                    var l = t.getUint8(n++);
                    for (o = 0; o < f + 1; o++)
                        a.push(l)
                }
            }
            return a
        }
        function G(e, r, a) {
            for (var n, t = 1; t < 64;)
                65280 == (n = r[e.value]) ? t = 64 : n >> 8 == 255 ? t += 255 & n : (a[t] = n,
                    t++),
                    e.value++
        }
        function Y(e, r) {
            r[0] = le(e[0]),
                r[1] = le(e[1]),
                r[2] = le(e[5]),
                r[3] = le(e[6]),
                r[4] = le(e[14]),
                r[5] = le(e[15]),
                r[6] = le(e[27]),
                r[7] = le(e[28]),
                r[8] = le(e[2]),
                r[9] = le(e[4]),
                r[10] = le(e[7]),
                r[11] = le(e[13]),
                r[12] = le(e[16]),
                r[13] = le(e[26]),
                r[14] = le(e[29]),
                r[15] = le(e[42]),
                r[16] = le(e[3]),
                r[17] = le(e[8]),
                r[18] = le(e[12]),
                r[19] = le(e[17]),
                r[20] = le(e[25]),
                r[21] = le(e[30]),
                r[22] = le(e[41]),
                r[23] = le(e[43]),
                r[24] = le(e[9]),
                r[25] = le(e[11]),
                r[26] = le(e[18]),
                r[27] = le(e[24]),
                r[28] = le(e[31]),
                r[29] = le(e[40]),
                r[30] = le(e[44]),
                r[31] = le(e[53]),
                r[32] = le(e[10]),
                r[33] = le(e[19]),
                r[34] = le(e[23]),
                r[35] = le(e[32]),
                r[36] = le(e[39]),
                r[37] = le(e[45]),
                r[38] = le(e[52]),
                r[39] = le(e[54]),
                r[40] = le(e[20]),
                r[41] = le(e[22]),
                r[42] = le(e[33]),
                r[43] = le(e[38]),
                r[44] = le(e[46]),
                r[45] = le(e[51]),
                r[46] = le(e[55]),
                r[47] = le(e[60]),
                r[48] = le(e[21]),
                r[49] = le(e[34]),
                r[50] = le(e[37]),
                r[51] = le(e[47]),
                r[52] = le(e[50]),
                r[53] = le(e[56]),
                r[54] = le(e[59]),
                r[55] = le(e[61]),
                r[56] = le(e[35]),
                r[57] = le(e[36]),
                r[58] = le(e[48]),
                r[59] = le(e[49]),
                r[60] = le(e[57]),
                r[61] = le(e[58]),
                r[62] = le(e[62]),
                r[63] = le(e[63])
        }
        function j(e) {
            for (var r = .5 * Math.cos(.7853975), a = .5 * Math.cos(.196349375), n = .5 * Math.cos(.39269875), t = .5 * Math.cos(3 * 3.14159 / 16), i = .5 * Math.cos(.981746875), o = .5 * Math.cos(3 * 3.14159 / 8), f = .5 * Math.cos(1.374445625), l = new Array(4), u = new Array(4), s = new Array(4), v = new Array(4), c = 0; c < 8; ++c) {
                var h = 8 * c;
                l[0] = n * e[h + 2],
                    l[1] = o * e[h + 2],
                    l[2] = n * e[h + 6],
                    l[3] = o * e[h + 6],
                    u[0] = a * e[h + 1] + t * e[h + 3] + i * e[h + 5] + f * e[h + 7],
                    u[1] = t * e[h + 1] - f * e[h + 3] - a * e[h + 5] - i * e[h + 7],
                    u[2] = i * e[h + 1] - a * e[h + 3] + f * e[h + 5] + t * e[h + 7],
                    u[3] = f * e[h + 1] - i * e[h + 3] + t * e[h + 5] - a * e[h + 7],
                    s[0] = r * (e[h + 0] + e[h + 4]),
                    s[3] = r * (e[h + 0] - e[h + 4]),
                    s[1] = l[0] + l[3],
                    s[2] = l[1] - l[2],
                    v[0] = s[0] + s[1],
                    v[1] = s[3] + s[2],
                    v[2] = s[3] - s[2],
                    v[3] = s[0] - s[1],
                    e[h + 0] = v[0] + u[0],
                    e[h + 1] = v[1] + u[1],
                    e[h + 2] = v[2] + u[2],
                    e[h + 3] = v[3] + u[3],
                    e[h + 4] = v[3] - u[3],
                    e[h + 5] = v[2] - u[2],
                    e[h + 6] = v[1] - u[1],
                    e[h + 7] = v[0] - u[0]
            }
            for (var w = 0; w < 8; ++w)
                l[0] = n * e[16 + w],
                    l[1] = o * e[16 + w],
                    l[2] = n * e[48 + w],
                    l[3] = o * e[48 + w],
                    u[0] = a * e[8 + w] + t * e[24 + w] + i * e[40 + w] + f * e[56 + w],
                    u[1] = t * e[8 + w] - f * e[24 + w] - a * e[40 + w] - i * e[56 + w],
                    u[2] = i * e[8 + w] - a * e[24 + w] + f * e[40 + w] + t * e[56 + w],
                    u[3] = f * e[8 + w] - i * e[24 + w] + t * e[40 + w] - a * e[56 + w],
                    s[0] = r * (e[w] + e[32 + w]),
                    s[3] = r * (e[w] - e[32 + w]),
                    s[1] = l[0] + l[3],
                    s[2] = l[1] - l[2],
                    v[0] = s[0] + s[1],
                    v[1] = s[3] + s[2],
                    v[2] = s[3] - s[2],
                    v[3] = s[0] - s[1],
                    e[0 + w] = v[0] + u[0],
                    e[8 + w] = v[1] + u[1],
                    e[16 + w] = v[2] + u[2],
                    e[24 + w] = v[3] + u[3],
                    e[32 + w] = v[3] - u[3],
                    e[40 + w] = v[2] - u[2],
                    e[48 + w] = v[1] - u[1],
                    e[56 + w] = v[0] - u[0]
        }
        function q(e) {
            for (var r = 0; r < 64; ++r) {
                var a = e[0][r]
                    , n = e[1][r]
                    , t = e[2][r];
                e[0][r] = a + 1.5747 * t,
                    e[1][r] = a - .1873 * n - .4682 * t,
                    e[2][r] = a + 1.8556 * n
            }
        }
        function J(e, r, a) {
            for (var n = 0; n < 64; ++n)
                r[a + n] = ue(K(e[n]))
        }
        function K(e) {
            return e <= 1 ? Math.sign(e) * Math.pow(Math.abs(e), 2.2) : Math.sign(e) * Math.pow(m, Math.abs(e) - 1)
        }
        function Q(e) {
            var r = e.array.slice(e.offset.value, e.offset.value + e.size)
                , a = new Uint8Array(pako.inflate(r).buffer)
                , n = new Uint8Array(a.length);
            return Z(a),
                H(a, n),
                new DataView(n.buffer)
        }
        function $(e) {
            var r = e.viewer
                , a = {
                    value: e.offset.value
                }
                , n = new Uint8Array(e.width * e.lines * (we.channels.length * e.type * y))
                , t = {
                    version: oe(r, a),
                    unknownUncompressedSize: oe(r, a),
                    unknownCompressedSize: oe(r, a),
                    acCompressedSize: oe(r, a),
                    dcCompressedSize: oe(r, a),
                    rleCompressedSize: oe(r, a),
                    rleUncompressedSize: oe(r, a),
                    rleRawSize: oe(r, a),
                    totalAcUncompressedCount: oe(r, a),
                    totalDcUncompressedCount: oe(r, a),
                    acCompression: oe(r, a)
                };
            if (t.version < 2)
                throw "EXRLoader.parse: " + we.compression + " version " + t.version + " is unsupported";
            for (var i = new Array, o = se(r, a) - y; o > 0;) {
                var f = ee(r.buffer, a)
                    , l = ie(r, a)
                    , u = l >> 2 & 3
                    , s = new Int8Array([(l >> 4) - 1])[0]
                    , v = ie(r, a);
                i.push({
                    name: f,
                    index: s,
                    type: v,
                    compression: u
                }),
                    o -= f.length + 3
            }
            for (var c = we.channels, h = new Array(e.channels), w = 0; w < e.channels; ++w) {
                var p = h[w] = {}
                    , d = c[w];
                p.name = d.name,
                    p.compression = S,
                    p.decoded = !1,
                    p.type = d.pixelType,
                    p.pLinear = d.pLinear,
                    p.width = e.width,
                    p.height = e.lines
            }
            for (var m = {
                idx: new Array(3)
            }, M = 0; M < e.channels; ++M)
                for (p = h[M],
                    w = 0; w < i.length; ++w) {
                    var C = i[w];
                    p.name == C.name && (p.compression = C.compression,
                        C.index >= 0 && (m.idx[C.index] = M),
                        p.offset = M)
                }
            if (t.acCompressedSize > 0)
                switch (t.acCompression) {
                    case g:
                        var O = new Uint16Array(t.totalAcUncompressedCount);
                        V(e.array, r, a, t.acCompressedSize, O, t.totalAcUncompressedCount);
                        break;
                    case A:
                        var I = e.array.slice(a.value, a.value + t.totalAcUncompressedCount);
                        O = new Uint16Array(pako.inflate(I).buffer);
                        a.value += t.totalAcUncompressedCount
                }
            if (t.dcCompressedSize > 0) {
                var E = {
                    array: e.array,
                    offset: a,
                    size: t.dcCompressedSize
                }
                    , R = new Uint16Array(Q(E).buffer);
                a.value += t.dcCompressedSize
            }
            if (t.rleRawSize > 0) {
                I = e.array.slice(a.value, a.value + t.rleCompressedSize);
                var x = W(pako.inflate(I).buffer);
                a.value += t.rleCompressedSize
            }
            var P = 0
                , z = new Array(h.length);
            for (w = 0; w < z.length; ++w)
                z[w] = new Array;
            for (var N = 0; N < e.lines; ++N)
                for (var T = 0; T < h.length; ++T)
                    z[T].push(P),
                        P += h[T].width * e.type * y;
            !function (e, r, a, n, t, i) {
                for (var o = new DataView(i.buffer), f = a[e.idx[0]].width, l = a[e.idx[0]].height, u = Math.floor(f / 8), s = Math.ceil(f / 8), v = Math.ceil(l / 8), c = f - 8 * (s - 1), h = l - 8 * (v - 1), w = {
                    value: 0
                }, p = new Array(3), d = new Array(3), g = new Array(3), A = new Array(3), S = new Array(3), U = 0; U < 3; ++U)
                    S[U] = r[e.idx[U]],
                        p[U] = U < 1 ? 0 : p[U - 1] + s * v,
                        d[U] = new Float32Array(64),
                        g[U] = new Uint16Array(64),
                        A[U] = new Uint16Array(64 * s);
                for (var b = 0; b < v; ++b) {
                    var m = 8;
                    b == v - 1 && (m = h);
                    for (var M = 8, C = 0; C < s; ++C) {
                        for (C == s - 1 && (M = c),
                            U = 0; U < 3; ++U)
                            g[U].fill(0),
                                g[U][0] = t[p[U]++],
                                G(w, n, g[U]),
                                Y(g[U], d[U]),
                                j(d[U]);
                        for (q(d),
                            U = 0; U < 3; ++U)
                            J(d[U], A[U], 64 * C)
                    }
                    var O = 0;
                    for (U = 0; U < 3; ++U) {
                        for (var I = a[e.idx[U]].type, E = 8 * b; E < 8 * b + m; ++E)
                            for (O = S[U][E],
                                C = 0; C < u; ++C) {
                                var R = 64 * C + 8 * (7 & E);
                                o.setUint16(O + 0 * y * I, A[U][R + 0], !0),
                                    o.setUint16(O + 1 * y * I, A[U][R + 1], !0),
                                    o.setUint16(O + 2 * y * I, A[U][R + 2], !0),
                                    o.setUint16(O + 3 * y * I, A[U][R + 3], !0),
                                    o.setUint16(O + 4 * y * I, A[U][R + 4], !0),
                                    o.setUint16(O + 5 * y * I, A[U][R + 5], !0),
                                    o.setUint16(O + 6 * y * I, A[U][R + 6], !0),
                                    o.setUint16(O + 7 * y * I, A[U][R + 7], !0),
                                    O += 8 * y * I
                            }
                        if (u != s)
                            for (E = 8 * b; E < 8 * b + m; ++E) {
                                O = S[U][E] + 8 * u * y * I,
                                    R = 64 * u + 8 * (7 & E);
                                for (var x = 0; x < M; ++x)
                                    o.setUint16(O + x * y * I, A[U][R + x], !0)
                            }
                    }
                }
                var P = new Uint16Array(f);
                for (o = new DataView(i.buffer),
                    U = 0; U < 3; ++U)
                    if (a[e.idx[U]].decoded = !0,
                        I = a[e.idx[U]].type,
                        2 == a[U].type)
                        for (E = 0; E < l; ++E) {
                            for (O = S[U][E],
                                x = 0; x < f; ++x)
                                P[x] = o.getUint16(O + x * y * I, !0);
                            for (x = 0; x < f; ++x)
                                o.setFloat32(O + x * y * I, le(P[x]), !0)
                        }
            }(m, z, h, O, R, n);
            for (w = 0; w < h.length; ++w) {
                if (!(p = h[w]).decoded)
                    switch (p.compression) {
                        case b:
                            var k = 0
                                , _ = 0;
                            for (N = 0; N < e.lines; ++N) {
                                for (var D = z[w][k], F = 0; F < p.width; ++F) {
                                    for (var B = 0; B < y * p.type; ++B)
                                        n[D++] = x[_ + B * p.width * p.height];
                                    _++
                                }
                                k++
                            }
                            break;
                        case U:
                        default:
                            throw "EXRLoader.parse: unsupported channel compression"
                    }
            }
            return new DataView(n.buffer)
        }
        function ee(e, r) {
            for (var a = new Uint8Array(e), n = 0; 0 != a[r.value + n];)
                n += 1;
            var t = (new TextDecoder).decode(a.slice(r.value, r.value + n));
            return r.value = r.value + n + 1,
                t
        }
        function re(e, r) {
            var a = e.getUint32(0, !0);
            return r.value = r.value + h,
                a
        }
        function ae(e, r) {
            var a = e.getInt32(r.value, !0);
            return r.value = r.value + p,
                a
        }
        function ne(e, r) {
            var a = e.getUint32(r.value, !0);
            return r.value = r.value + p,
                a
        }
        function te(e, r) {
            var a = e[r.value];
            return r.value = r.value + d,
                a
        }
        function ie(e, r) {
            var a = e.getUint8(r.value);
            return r.value = r.value + d,
                a
        }
        function oe(e, r) {
            var a = Number(e.getBigInt64(r.value, !0));
            return r.value += h,
                a
        }
        function fe(e, r) {
            var a = e.getFloat32(r.value, !0);
            return r.value += w,
                a
        }
        function le(e) {
            var r = (31744 & e) >> 10
                , a = 1023 & e;
            return (e >> 15 ? -1 : 1) * (r ? 31 === r ? a ? NaN : 1 / 0 : Math.pow(2, r - 15) * (1 + a / 1024) : a / 1024 * 6103515625e-14)
        }
        function ue(e) {
            M.setFloat32(0, e);
            var r = M.getInt32(0)
                , a = r >> 16 & 32768
                , n = r >> 12 & 2047
                , t = r >> 23 & 255;
            return t < 103 ? a : t > 142 ? (a |= 31744,
                a |= (255 == t ? 0 : 1) && 8388607 & r) : t < 113 ? a |= ((n |= 2048) >> 114 - t) + (n >> 113 - t & 1) : (a |= t - 112 << 10 | n >> 1,
                    a += 1 & n)
        }
        function se(e, r) {
            var a = e.getUint16(r.value, !0);
            return r.value += y,
                a
        }
        function ve(e, r, a, n, t) {
            return "string" === n || "stringvector" === n || "iccProfile" === n ? function (e, r, a) {
                var n = (new TextDecoder).decode(new Uint8Array(e).slice(r.value, r.value + a));
                return r.value = r.value + a,
                    n
            }(r, a, t) : "chlist" === n ? function (e, r, a, n) {
                for (var t = a.value, i = []; a.value < t + n - 1;) {
                    var o = ee(r, a)
                        , f = ae(e, a)
                        , l = ie(e, a);
                    a.value += 3;
                    var u = ae(e, a)
                        , s = ae(e, a);
                    i.push({
                        name: o,
                        pixelType: f,
                        pLinear: l,
                        xSampling: u,
                        ySampling: s
                    })
                }
                return a.value += 1,
                    i
            }(e, r, a, t) : "chromaticities" === n ? function (e, r) {
                return {
                    redX: fe(e, r),
                    redY: fe(e, r),
                    greenX: fe(e, r),
                    greenY: fe(e, r),
                    blueX: fe(e, r),
                    blueY: fe(e, r),
                    whiteX: fe(e, r),
                    whiteY: fe(e, r)
                }
            }(e, a) : "compression" === n ? function (e, r) {
                return ["NO_COMPRESSION", "RLE_COMPRESSION", "ZIPS_COMPRESSION", "ZIP_COMPRESSION", "PIZ_COMPRESSION", "PXR24_COMPRESSION", "B44_COMPRESSION", "B44A_COMPRESSION", "DWAA_COMPRESSION", "DWAB_COMPRESSION"][ie(e, r)]
            }(e, a) : "box2i" === n ? function (e, r) {
                return {
                    xMin: ne(e, r),
                    yMin: ne(e, r),
                    xMax: ne(e, r),
                    yMax: ne(e, r)
                }
            }(e, a) : "lineOrder" === n ? function (e, r) {
                return ["INCREASING_Y"][ie(e, r)]
            }(e, a) : "float" === n ? fe(e, a) : "v2f" === n ? function (e, r) {
                return [fe(e, r), fe(e, r)]
            }(e, a) : "v3f" === n ? function (e, r) {
                return [fe(e, r), fe(e, r), fe(e, r)]
            }(e, a) : "int" === n ? ae(e, a) : "rational" === n ? function (e, r) {
                return [ae(e, r), ne(e, r)]
            }(e, a) : "timecode" === n ? function (e, r) {
                return [ne(e, r), ne(e, r)]
            }(e, a) : (a.value += t,
                void console.log("Cannot parse value for unsupported type: " + n))
        }
        var ce = new DataView(e)
            , he = new Uint8Array(e)
            , we = {};
        ce.getUint32(0, !0),
            ce.getUint8(4, !0),
            ce.getUint8(5, !0);
        for (var pe = {
            value: 8
        }, ye = !0; ye;) {
            var de = ee(e, pe);
            if (0 == de)
                ye = !1;
            else {
                var ge = ve(ce, e, pe, ee(e, pe), ne(ce, pe));
                we[de] = ge
            }
        }
        var Ae, Se, Ue, be, me = we.dataWindow.yMax + 1;
        switch (we.compression) {
            case "NO_COMPRESSION":
                Se = 1,
                    Ae = function (e) {
                        return new DataView(e.array.buffer, e.offset.value, e.size)
                    }
                    ;
                break;
            case "RLE_COMPRESSION":
                Se = 1,
                    Ae = function (e) {
                        var r = e.viewer.buffer.slice(e.offset.value, e.offset.value + e.size)
                            , a = new Uint8Array(W(r))
                            , n = new Uint8Array(a.length);
                        return Z(a),
                            H(a, n),
                            new DataView(n.buffer)
                    }
                    ;
                break;
            case "ZIPS_COMPRESSION":
                Se = 1,
                    Ae = Q;
                break;
            case "ZIP_COMPRESSION":
                Se = 16,
                    Ae = Q;
                break;
            case "PXR24_COMPRESSION":
                Se = 16,
                    Ae = function (e) {
                        for (var r = e.array.slice(e.offset.value, e.offset.value + e.size), a = new Uint8Array(pako.inflate(r).buffer), n = new Uint8Array(a.length), t = n, i = Ee, o = 0; o < t.length; o += 2 * i) {
                            for (var f = 0; f < i; f++)
                                t[o + 2 * f] = a[o + f + i],
                                    t[o + 2 * f + 1] = a[o + f];
                            var l = new Uint16Array(t.buffer, o, i);
                            for (f = 1; f < i; f++)
                                l[f] = l[f - 1] + l[f] & 65535
                        }
                        return new DataView(n.buffer)
                    }
                    ;
                break;
            case "PIZ_COMPRESSION":
                Se = 32,
                    Ae = function (e) {
                        for (var r = e.viewer, t = {
                            value: e.offset.value
                        }, i = e.width * Se * (we.channels.length * e.type), o = new Uint16Array(i), f = new Uint8Array(n), l = 0, u = new Array(e.channels), s = 0; s < e.channels; s++)
                            u[s] = {},
                                u[s].start = l,
                                u[s].end = u[s].start,
                                u[s].nx = e.width,
                                u[s].ny = e.lines,
                                u[s].size = e.type,
                                l += u[s].nx * u[s].ny * u[s].size;
                        var v = se(r, t)
                            , c = se(r, t);
                        if (c >= n)
                            throw "Something is wrong with PIZ_COMPRESSION BITMAP_SIZE";
                        if (v <= c)
                            for (s = 0; s < c - v + 1; s++)
                                f[s + v] = ie(r, t);
                        var h = new Uint16Array(a)
                            , w = function (e, r) {
                                for (var n = 0, t = 0; t < a; ++t)
                                    (0 == t || e[t >> 3] & 1 << (7 & t)) && (r[n++] = t);
                                for (var i = n - 1; n < a;)
                                    r[n++] = 0;
                                return i
                            }(f, h)
                            , p = ne(r, t);
                        for (V(e.array, r, t, p, o, l),
                            s = 0; s < e.channels; ++s)
                            for (var d = u[s], g = 0; g < u[s].size; ++g)
                                X(o, d.start + g, d.nx, d.size, d.ny, d.nx * d.size, w);
                        !function (e, r, a) {
                            for (var n = 0; n < a; ++n)
                                r[n] = e[r[n]]
                        }(h, o, l);
                        for (var A = 0, S = new Uint8Array(o.buffer.byteLength), U = 0; U < e.lines; U++)
                            for (var b = 0; b < e.channels; b++) {
                                var m = (d = u[b]).nx * d.size
                                    , M = new Uint8Array(o.buffer, d.end * y, m * y);
                                S.set(M, A),
                                    A += m * y,
                                    d.end += m
                            }
                        return new DataView(S.buffer)
                    }
                    ;
                break;
            case "DWAA_COMPRESSION":
                Se = 32,
                    Ae = $;
                break;
            case "DWAB_COMPRESSION":
                Se = 256,
                    Ae = $;
                break;
            default:
                throw "EXRLoader.parse: " + we.compression + " is unsupported"
        }
        var Me = we.channels[0].pixelType;
        if (1 === Me)
            switch (this.type) {
                case r.UnsignedByteType:
                case r.FloatType:
                    be = function (e, r) {
                        return le(se(e, r))
                    }
                        ,
                        Ue = y;
                    break;
                case r.HalfFloatType:
                    be = se,
                        Ue = y
            }
        else {
            if (2 !== Me)
                throw "EXRLoader.parse: unsupported pixelType " + Me + " for " + we.compression + ".";
            switch (this.type) {
                case r.UnsignedByteType:
                case r.FloatType:
                    be = fe,
                        Ue = w;
                    break;
                case r.HalfFloatType:
                    be = function (e, r) {
                        return ue(fe(e, r))
                    }
                        ,
                        Ue = w
            }
        }
        for (var Ce = me / Se, Oe = 0; Oe < Ce; Oe++)
            re(ce, pe);
        var Ie = we.dataWindow
            , Ee = Ie.xMax - Ie.xMin + 1
            , Re = Ie.yMax - Ie.yMin + 1
            , xe = Ee * Re * 4;
        switch (this.type) {
            case r.UnsignedByteType:
            case r.FloatType:
                var Pe = new Float32Array(xe);
                we.channels.length < 4 && Pe.fill(1, 0, xe);
                break;
            case r.HalfFloatType:
                Pe = new Uint16Array(xe);
                we.channels.length < 4 && Pe.fill(15360, 0, xe);
                break;
            default:
                console.error("THREE.EXRLoader: unsupported type: ", this.type)
        }
        for (var ze, Ne, Te = {
            R: 0,
            G: 1,
            B: 2,
            A: 3
        }, ke = {
            size: 0,
            width: Ee,
            lines: Se,
            offset: pe,
            array: he,
            viewer: ce,
            type: Me,
            channels: we.channels.length
        }, _e = {
            value: 0
        }, De = 0; De < Re / Se; De++) {
            ze = ne(ce, pe),
                xe = ne(ce, pe),
                ke.lines = ze + Se > Re ? Re - ze : Se,
                ke.offset = pe,
                ke.size = xe,
                Ne = Ae(ke),
                pe.value += xe;
            for (var Fe = 0; Fe < Se; Fe++) {
                var Be = Fe + De * Se;
                if (Be >= Re)
                    break;
                for (var Le = 0; Le < we.channels.length; Le++)
                    for (var Xe = Te[we.channels[Le].name], Ve = 0; Ve < Ee; Ve++) {
                        var Ze = Fe * (we.channels.length * Ee) + Le * Ee + Ve;
                        _e.value = Ze * Ue;
                        var He = be(Ne, _e);
                        Pe[4 * Ee * (Re - 1 - Be) + 4 * Ve + Xe] = He
                    }
            }
        }
        if (this.type === r.UnsignedByteType) {
            xe = Pe.length;
            for (var We, Ge = new Uint8Array(xe), Ye = 0; Ye < Re; ++Ye)
                for (var je = 0; je < Ee; ++je) {
                    var qe = Pe[Oe = Ye * Ee * 4 + 4 * je]
                        , Je = Pe[Oe + 1]
                        , Ke = Pe[Oe + 2];
                    if ((We = Ke > (We = qe > Je ? qe : Je) ? Ke : We) < 1e-32)
                        Ge[Oe] = Ge[Oe + 1] = Ge[Oe + 2] = Ge[Oe + 3] = 0;
                    else {
                        var Qe = C(We);
                        We = 256 * Qe[0] / We,
                            Ge[Oe] = qe * We,
                            Ge[Oe + 1] = Je * We,
                            Ge[Oe + 2] = Ke * We,
                            Ge[Oe + 3] = Qe[1] + 128
                    }
                }
            Pe = Ge
        }
        var $e = this.type === r.UnsignedByteType ? r.RGBEFormat : r.RGBAFormat;
        return {
            header: we,
            width: Ee,
            height: Re,
            data: Pe,
            format: $e,
            type: this.type
        }
    }
};
